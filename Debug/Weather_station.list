
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cc0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005da0  08009e50  08009e50  00019e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbf0  0800fbf0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbf0  0800fbf0  0001fbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbf8  0800fbf8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbf8  0800fbf8  0001fbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbfc  0800fbfc  0001fbfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800fc00  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a3a4  200001f0  0800fdf0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a594  0800fdf0  0002a594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023df8  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053cf  00000000  00000000  0004405b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f3f8  00000000  00000000  0004942a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001508  00000000  00000000  00058828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000149c  00000000  00000000  00059d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b032  00000000  00000000  0005b1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002ae47  00000000  00000000  000861fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fbb2f  00000000  00000000  000b1045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005460  00000000  00000000  001acb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001b1fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e38 	.word	0x08009e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08009e38 	.word	0x08009e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <background_init>:

static const uint8_t SPEED = 3;
static const uint8_t PIXEL_SIZE = 2;

void background_init()
{
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f4c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
{
 8000f50:	b087      	sub	sp, #28
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f52:	f004 fa43 	bl	80053dc <malloc>
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <background_init+0x158>)
    palette = malloc(256 * sizeof(color_t));
 8000f58:	4d51      	ldr	r5, [pc, #324]	; (80010a0 <background_init+0x15c>)
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f5a:	6018      	str	r0, [r3, #0]
 8000f5c:	4681      	mov	r9, r0
    palette = malloc(256 * sizeof(color_t));
 8000f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f62:	f004 fa3b 	bl	80053dc <malloc>
 8000f66:	2400      	movs	r4, #0
 8000f68:	6028      	str	r0, [r5, #0]

    for (uint16_t i = 0; i < 256; i++) {
        const uint8_t brightness = i / 20;
 8000f6a:	2714      	movs	r7, #20
 8000f6c:	b2a2      	uxth	r2, r4
 8000f6e:	fbb2 f2f7 	udiv	r2, r2, r7
 8000f72:	b2d2      	uxtb	r2, r2
        palette[i] = hagl_color(brightness, brightness, brightness);
 8000f74:	4611      	mov	r1, r2
 8000f76:	4610      	mov	r0, r2
 8000f78:	682e      	ldr	r6, [r5, #0]
 8000f7a:	f004 fa1f 	bl	80053bc <hagl_color>
 8000f7e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
    for (uint16_t i = 0; i < 256; i++) {
 8000f82:	3401      	adds	r4, #1
 8000f84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000f88:	d1f0      	bne.n	8000f6c <background_init+0x28>

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
            /* Generate three different sinusoids. */
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f8a:	4f46      	ldr	r7, [pc, #280]	; (80010a4 <background_init+0x160>)
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 8000f8c:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80010a8 <background_init+0x164>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000f90:	f8df b118 	ldr.w	fp, [pc, #280]	; 80010ac <background_init+0x168>
 8000f94:	2400      	movs	r4, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f96:	2600      	movs	r6, #0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000f98:	f04f 0a00 	mov.w	sl, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f9c:	ee07 4a90 	vmov	s15, r4
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000fa8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000fac:	f04f 0828 	mov.w	r8, #40	; 0x28
 8000fb0:	fb08 9804 	mla	r8, r8, r4, r9
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fb4:	2500      	movs	r5, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000fb6:	ee17 0a90 	vmov	r0, s15
 8000fba:	f7ff fac5 	bl	8000548 <__aeabi_f2d>
 8000fbe:	ec41 0b10 	vmov	d0, r0, r1
 8000fc2:	f007 fe1d 	bl	8008c00 <sin>
 8000fc6:	4632      	mov	r2, r6
 8000fc8:	ec51 0b10 	vmov	r0, r1, d0
 8000fcc:	463b      	mov	r3, r7
 8000fce:	f7ff fb13 	bl	80005f8 <__aeabi_dmul>
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	f7ff f959 	bl	800028c <__adddf3>
 8000fda:	f7ff fde5 	bl	8000ba8 <__aeabi_d2f>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fde:	fb04 f304 	mul.w	r3, r4, r4
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000fe2:	ee08 0a90 	vmov	s17, r0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fe6:	9303      	str	r3, [sp, #12]
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 8000fe8:	ee07 5a90 	vmov	s15, r5
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	ec41 0b10 	vmov	d0, r0, r1
 8001000:	f007 fdfe 	bl	8008c00 <sin>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001004:	9b03      	ldr	r3, [sp, #12]
 8001006:	fb05 3005 	mla	r0, r5, r5, r3
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800100a:	ed8d 0b00 	vstr	d0, [sp]
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800100e:	f7ff fa89 	bl	8000524 <__aeabi_i2d>
 8001012:	ec41 0b10 	vmov	d0, r0, r1
 8001016:	f007 fdc7 	bl	8008ba8 <sqrt>
 800101a:	4652      	mov	r2, sl
 800101c:	465b      	mov	r3, fp
 800101e:	ec51 0b10 	vmov	r0, r1, d0
 8001022:	f7ff fc13 	bl	800084c <__aeabi_ddiv>
 8001026:	ec41 0b10 	vmov	d0, r0, r1
 800102a:	f007 fde9 	bl	8008c00 <sin>
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800102e:	4632      	mov	r2, r6
 8001030:	463b      	mov	r3, r7
 8001032:	e9dd 0100 	ldrd	r0, r1, [sp]
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001036:	ed8d 0b04 	vstr	d0, [sp, #16]
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800103a:	f7ff fadd 	bl	80005f8 <__aeabi_dmul>
 800103e:	4632      	mov	r2, r6
 8001040:	463b      	mov	r3, r7
 8001042:	f7ff f923 	bl	800028c <__adddf3>
 8001046:	f7ff fdaf 	bl	8000ba8 <__aeabi_d2f>
            /* Calculate average of the three sinusoids */
            /* and use it as color index. */
            const uint8_t color = (v1 + v2 + v3) / 3;
 800104a:	ee07 0a90 	vmov	s15, r0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800104e:	4632      	mov	r2, r6
 8001050:	463b      	mov	r3, r7
 8001052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
            const uint8_t color = (v1 + v2 + v3) / 3;
 8001056:	ee37 8aa8 	vadd.f32	s16, s15, s17
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800105a:	f7ff facd 	bl	80005f8 <__aeabi_dmul>
 800105e:	463b      	mov	r3, r7
 8001060:	4632      	mov	r2, r6
 8001062:	f7ff f913 	bl	800028c <__adddf3>
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_d2f>
            const uint8_t color = (v1 + v2 + v3) / 3;
 800106a:	ee07 0a90 	vmov	s15, r0
 800106e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001072:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001076:	eec8 7a07 	vdiv.f32	s15, s16, s14
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800107a:	3502      	adds	r5, #2
 800107c:	2da0      	cmp	r5, #160	; 0xa0
            const uint8_t color = (v1 + v2 + v3) / 3;
 800107e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	f808 3b01 	strb.w	r3, [r8], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800108a:	d1ad      	bne.n	8000fe8 <background_init+0xa4>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 800108c:	3402      	adds	r4, #2
 800108e:	2c80      	cmp	r4, #128	; 0x80
 8001090:	d184      	bne.n	8000f9c <background_init+0x58>
            *(ptr++) = color;
        }
    }
}
 8001092:	b007      	add	sp, #28
 8001094:	ecbd 8b04 	vpop	{d8-d9}
 8001098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800109c:	20000210 	.word	0x20000210
 80010a0:	2000020c 	.word	0x2000020c
 80010a4:	40600000 	.word	0x40600000
 80010a8:	3d000000 	.word	0x3d000000
 80010ac:	40380000 	.word	0x40380000

080010b0 <background_render>:


void background_render()
{
    uint8_t *ptr = plasma;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <background_render+0x50>)
{
 80010b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t *ptr = plasma;
 80010b6:	f8d3 8000 	ldr.w	r8, [r3]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
            /* Get a color for pixel from the plasma buffer. */
            const uint8_t index = *(ptr++);
            const color_t color = palette[index];
 80010ba:	f8df a048 	ldr.w	sl, [pc, #72]	; 8001104 <background_render+0x54>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010be:	2400      	movs	r4, #0
            /* Put a pixel to the display. */
            if (1 == PIXEL_SIZE) {
                hagl_put_pixel(x, y, color);
            } else {
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010c0:	1c66      	adds	r6, r4, #1
{
 80010c2:	46c1      	mov	r9, r8
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010c4:	2500      	movs	r5, #0
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010c6:	b236      	sxth	r6, r6
 80010c8:	b227      	sxth	r7, r4
            const color_t color = palette[index];
 80010ca:	f819 1b01 	ldrb.w	r1, [r9], #1
 80010ce:	f8da 3000 	ldr.w	r3, [sl]
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010d2:	1c6a      	adds	r2, r5, #1
 80010d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	b228      	sxth	r0, r5
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010dc:	3502      	adds	r5, #2
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010de:	4633      	mov	r3, r6
 80010e0:	b212      	sxth	r2, r2
 80010e2:	4639      	mov	r1, r7
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010e4:	b2ad      	uxth	r5, r5
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010e6:	f004 f85f 	bl	80051a8 <hagl_fill_rectangle>
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010ea:	2da0      	cmp	r5, #160	; 0xa0
 80010ec:	d1ed      	bne.n	80010ca <background_render+0x1a>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010ee:	3402      	adds	r4, #2
 80010f0:	b2a4      	uxth	r4, r4
 80010f2:	2c80      	cmp	r4, #128	; 0x80
            const uint8_t index = *(ptr++);
 80010f4:	f108 0850 	add.w	r8, r8, #80	; 0x50
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010f8:	d1e2      	bne.n	80010c0 <background_render+0x10>
            }
        }
    }
}
 80010fa:	b002      	add	sp, #8
 80010fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001100:	20000210 	.word	0x20000210
 8001104:	2000020c 	.word	0x2000020c

08001108 <background_animate>:

void background_animate()
{
    uint8_t *ptr = plasma;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <background_animate+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 800110c:	f503 50a0 	add.w	r0, r3, #5120	; 0x1400
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 8001110:	f103 0150 	add.w	r1, r3, #80	; 0x50
                /* Get a color from plasma and choose the next color. */
                /* Unsigned integers wrap automatically. */
                const uint8_t index = *ptr + SPEED;
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	3203      	adds	r2, #3
                /* Put the new color back to the plasma buffer. */
                *(ptr++) = index;
 8001118:	f803 2b01 	strb.w	r2, [r3], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 800111c:	428b      	cmp	r3, r1
 800111e:	d1f9      	bne.n	8001114 <background_animate+0xc>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 8001120:	4298      	cmp	r0, r3
 8001122:	d1f5      	bne.n	8001110 <background_animate+0x8>
        }
    }
}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000210 	.word	0x20000210

0800112c <get_measurements>:
	//horizontal line
	hagl_draw_line(0, DISPLAY_HEIGHT/2, DISPLAY_WIDTH, DISPLAY_HEIGHT/2, WHITE);
}

void get_measurements(const uint8_t* rom_code)
{
 800112c:	b507      	push	{r0, r1, r2, lr}
 800112e:	9001      	str	r0, [sp, #4]
	temp_in = lps25hb_read_temp();
 8001130:	f000 fae2 	bl	80016f8 <lps25hb_read_temp>
 8001134:	4b09      	ldr	r3, [pc, #36]	; (800115c <get_measurements+0x30>)
 8001136:	ed83 0a00 	vstr	s0, [r3]
    pressure = lps25hb_read_pressure();
 800113a:	f000 fb05 	bl	8001748 <lps25hb_read_pressure>
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <get_measurements+0x34>)
    temp_out = ds18b20_get_temp(rom_code);
 8001140:	9801      	ldr	r0, [sp, #4]
    pressure = lps25hb_read_pressure();
 8001142:	ed83 0a00 	vstr	s0, [r3]
    temp_out = ds18b20_get_temp(rom_code);
 8001146:	f000 f8e5 	bl	8001314 <ds18b20_get_temp>
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <get_measurements+0x38>)
    ds18b20_start_measure(rom_code);
 800114c:	9801      	ldr	r0, [sp, #4]
    temp_out = ds18b20_get_temp(rom_code);
 800114e:	ed83 0a00 	vstr	s0, [r3]
}
 8001152:	b003      	add	sp, #12
 8001154:	f85d eb04 	ldr.w	lr, [sp], #4
    ds18b20_start_measure(rom_code);
 8001158:	f000 b8d8 	b.w	800130c <ds18b20_start_measure>
 800115c:	20000218 	.word	0x20000218
 8001160:	20000214 	.word	0x20000214
 8001164:	2000021c 	.word	0x2000021c

08001168 <update_foreground>:

void update_foreground(void)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
    swprintf(buffer, 10, L"%.1f°C", temp_in);
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <update_foreground+0x108>)
 800116c:	4f41      	ldr	r7, [pc, #260]	; (8001274 <update_foreground+0x10c>)
 800116e:	6818      	ldr	r0, [r3, #0]
    hagl_put_text(L"Temperatura", 5, 15, WHITE, font6x9);
 8001170:	4e41      	ldr	r6, [pc, #260]	; (8001278 <update_foreground+0x110>)
 8001172:	4c42      	ldr	r4, [pc, #264]	; (800127c <update_foreground+0x114>)
    hagl_put_text(buffer, 8, 35, WHITE, font9x18B_ISO8859_2);
 8001174:	4d42      	ldr	r5, [pc, #264]	; (8001280 <update_foreground+0x118>)
{
 8001176:	b08d      	sub	sp, #52	; 0x34
    swprintf(buffer, 10, L"%.1f°C", temp_in);
 8001178:	f7ff f9e6 	bl	8000548 <__aeabi_f2d>
 800117c:	463a      	mov	r2, r7
 800117e:	e9cd 0100 	strd	r0, r1, [sp]
 8001182:	210a      	movs	r1, #10
 8001184:	a802      	add	r0, sp, #8
 8001186:	f004 fff7 	bl	8006178 <swprintf>
    hagl_put_text(L"Temperatura", 5, 15, WHITE, font6x9);
 800118a:	9400      	str	r4, [sp, #0]
 800118c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001190:	220f      	movs	r2, #15
 8001192:	2105      	movs	r1, #5
 8001194:	4630      	mov	r0, r6
 8001196:	f004 f8c4 	bl	8005322 <hagl_put_text>
    hagl_put_text(L"wewnętrzna", 8, 25, WHITE, font6x9);
 800119a:	9400      	str	r4, [sp, #0]
 800119c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a0:	2219      	movs	r2, #25
 80011a2:	2108      	movs	r1, #8
 80011a4:	4837      	ldr	r0, [pc, #220]	; (8001284 <update_foreground+0x11c>)
 80011a6:	f004 f8bc 	bl	8005322 <hagl_put_text>
    hagl_put_text(buffer, 8, 35, WHITE, font9x18B_ISO8859_2);
 80011aa:	2108      	movs	r1, #8
 80011ac:	2223      	movs	r2, #35	; 0x23
 80011ae:	eb0d 0001 	add.w	r0, sp, r1
 80011b2:	9500      	str	r5, [sp, #0]
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	f004 f8b3 	bl	8005322 <hagl_put_text>
    swprintf(buffer, 10, L"%.1fhPa", pressure);
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <update_foreground+0x120>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f7ff f9c2 	bl	8000548 <__aeabi_f2d>
 80011c4:	4a31      	ldr	r2, [pc, #196]	; (800128c <update_foreground+0x124>)
 80011c6:	e9cd 0100 	strd	r0, r1, [sp]
 80011ca:	210a      	movs	r1, #10
 80011cc:	a802      	add	r0, sp, #8
 80011ce:	f004 ffd3 	bl	8006178 <swprintf>
    hagl_put_text(L"Ciśnienie", DISPLAY_WIDTH/2+11, 15, WHITE, font6x9);
 80011d2:	9400      	str	r4, [sp, #0]
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	220f      	movs	r2, #15
 80011da:	215b      	movs	r1, #91	; 0x5b
 80011dc:	482c      	ldr	r0, [pc, #176]	; (8001290 <update_foreground+0x128>)
 80011de:	f004 f8a0 	bl	8005322 <hagl_put_text>
    hagl_put_text(L"atmosferyczne", DISPLAY_WIDTH/2, 25, WHITE, font6x9);
 80011e2:	9400      	str	r4, [sp, #0]
 80011e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e8:	2219      	movs	r2, #25
 80011ea:	2150      	movs	r1, #80	; 0x50
 80011ec:	4829      	ldr	r0, [pc, #164]	; (8001294 <update_foreground+0x12c>)
 80011ee:	f004 f898 	bl	8005322 <hagl_put_text>
    hagl_put_text(buffer, DISPLAY_WIDTH/2, 35, WHITE, font9x18B_ISO8859_2);
 80011f2:	2223      	movs	r2, #35	; 0x23
 80011f4:	9500      	str	r5, [sp, #0]
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	2150      	movs	r1, #80	; 0x50
 80011fc:	a802      	add	r0, sp, #8
 80011fe:	f004 f890 	bl	8005322 <hagl_put_text>
    swprintf(buffer, 10, L"%.1f°C", temp_out);
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <update_foreground+0x130>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f7ff f99f 	bl	8000548 <__aeabi_f2d>
 800120a:	463a      	mov	r2, r7
 800120c:	e9cd 0100 	strd	r0, r1, [sp]
 8001210:	210a      	movs	r1, #10
 8001212:	a802      	add	r0, sp, #8
 8001214:	f004 ffb0 	bl	8006178 <swprintf>
    hagl_put_text(L"Temperatura", 5, DISPLAY_HEIGHT/2+15, WHITE, font6x9);
 8001218:	9400      	str	r4, [sp, #0]
 800121a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121e:	224f      	movs	r2, #79	; 0x4f
 8001220:	2105      	movs	r1, #5
 8001222:	4630      	mov	r0, r6
 8001224:	f004 f87d 	bl	8005322 <hagl_put_text>
    hagl_put_text(L"zewnętrzna", 8, DISPLAY_HEIGHT/2+25, WHITE, font6x9);
 8001228:	9400      	str	r4, [sp, #0]
 800122a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122e:	2259      	movs	r2, #89	; 0x59
 8001230:	2108      	movs	r1, #8
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <update_foreground+0x134>)
 8001234:	f004 f875 	bl	8005322 <hagl_put_text>
    hagl_put_text(buffer, 8, DISPLAY_HEIGHT/2+35, WHITE, font9x18B_ISO8859_2);
 8001238:	2108      	movs	r1, #8
 800123a:	eb0d 0001 	add.w	r0, sp, r1
 800123e:	9500      	str	r5, [sp, #0]
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	2263      	movs	r2, #99	; 0x63
 8001246:	f004 f86c 	bl	8005322 <hagl_put_text>
	hagl_draw_line(DISPLAY_WIDTH/2-5, DISPLAY_HEIGHT/2, DISPLAY_WIDTH/2-5, DISPLAY_HEIGHT, WHITE);
 800124a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800124e:	224b      	movs	r2, #75	; 0x4b
 8001250:	4610      	mov	r0, r2
 8001252:	9400      	str	r4, [sp, #0]
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	2140      	movs	r1, #64	; 0x40
 8001258:	f003 ff26 	bl	80050a8 <hagl_draw_line>
	hagl_draw_line(0, DISPLAY_HEIGHT/2, DISPLAY_WIDTH, DISPLAY_HEIGHT/2, WHITE);
 800125c:	2340      	movs	r3, #64	; 0x40
 800125e:	9400      	str	r4, [sp, #0]
 8001260:	22a0      	movs	r2, #160	; 0xa0
 8001262:	4619      	mov	r1, r3
 8001264:	2000      	movs	r0, #0
 8001266:	f003 ff1f 	bl	80050a8 <hagl_draw_line>
	update_text();
	draw_borders();
}
 800126a:	b00d      	add	sp, #52	; 0x34
 800126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800126e:	bf00      	nop
 8001270:	20000218 	.word	0x20000218
 8001274:	08009e50 	.word	0x08009e50
 8001278:	08009e6c 	.word	0x08009e6c
 800127c:	08009f74 	.word	0x08009f74
 8001280:	0800cf29 	.word	0x0800cf29
 8001284:	08009e9c 	.word	0x08009e9c
 8001288:	20000214 	.word	0x20000214
 800128c:	08009ec8 	.word	0x08009ec8
 8001290:	08009ee8 	.word	0x08009ee8
 8001294:	08009f10 	.word	0x08009f10
 8001298:	2000021c 	.word	0x2000021c
 800129c:	08009f48 	.word	0x08009f48

080012a0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_DMA_Init+0x2c>)
{
 80012a2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	649a      	str	r2, [r3, #72]	; 0x48
 80012ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80012b4:	2200      	movs	r2, #0
 80012b6:	2107      	movs	r1, #7
 80012b8:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 7, 0);
 80012bc:	f000 feaa 	bl	8002014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012c0:	200f      	movs	r0, #15

}
 80012c2:	b003      	add	sp, #12
 80012c4:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012c8:	f000 bed6 	b.w	8002078 <HAL_NVIC_EnableIRQ>
 80012cc:	40021000 	.word	0x40021000

080012d0 <send_cmd>:
  else
    return HAL_ERROR;
}

static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	4604      	mov	r4, r0
 80012d4:	460e      	mov	r6, r1
  int i;

  if (wire_reset() != HAL_OK)
 80012d6:	f000 fd7d 	bl	8001dd4 <wire_reset>
 80012da:	4605      	mov	r5, r0
 80012dc:	b9a0      	cbnz	r0, 8001308 <send_cmd+0x38>
    return HAL_ERROR;

  if (!rom_code) {
 80012de:	b93c      	cbnz	r4, 80012f0 <send_cmd+0x20>
    wire_write(DS18B20_SKIP_ROM);
 80012e0:	20cc      	movs	r0, #204	; 0xcc
 80012e2:	f000 fdcb 	bl	8001e7c <wire_write>
  } else {
    wire_write(DS18B20_MATCH_ROM);
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
      wire_write(rom_code[i]);
  }
  wire_write(cmd);
 80012e6:	4630      	mov	r0, r6
 80012e8:	f000 fdc8 	bl	8001e7c <wire_write>
  return HAL_OK;
}
 80012ec:	4628      	mov	r0, r5
 80012ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    wire_write(DS18B20_MATCH_ROM);
 80012f0:	2055      	movs	r0, #85	; 0x55
 80012f2:	f000 fdc3 	bl	8001e7c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80012f6:	1e67      	subs	r7, r4, #1
 80012f8:	3407      	adds	r4, #7
      wire_write(rom_code[i]);
 80012fa:	f817 0f01 	ldrb.w	r0, [r7, #1]!
 80012fe:	f000 fdbd 	bl	8001e7c <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001302:	42a7      	cmp	r7, r4
 8001304:	d1f9      	bne.n	80012fa <send_cmd+0x2a>
 8001306:	e7ee      	b.n	80012e6 <send_cmd+0x16>
    return HAL_ERROR;
 8001308:	2501      	movs	r5, #1
 800130a:	e7ef      	b.n	80012ec <send_cmd+0x1c>

0800130c <ds18b20_start_measure>:

HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code)
{
  return send_cmd(rom_code, DS18B20_CONVERT_T);
 800130c:	2144      	movs	r1, #68	; 0x44
 800130e:	f7ff bfdf 	b.w	80012d0 <send_cmd>
	...

08001314 <ds18b20_get_temp>:
  else
    return HAL_ERROR;
}

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001314:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 8001316:	21be      	movs	r1, #190	; 0xbe
 8001318:	f7ff ffda 	bl	80012d0 <send_cmd>
 800131c:	b118      	cbz	r0, 8001326 <ds18b20_get_temp+0x12>
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
    return 85.0f;
 800131e:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001358 <ds18b20_get_temp+0x44>

  memcpy(&temp, &scratchpad[0], sizeof(temp));

  return temp / 16.0f;
}
 8001322:	b004      	add	sp, #16
 8001324:	bd70      	pop	{r4, r5, r6, pc}
 8001326:	ad01      	add	r5, sp, #4
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001328:	4604      	mov	r4, r0
 800132a:	462e      	mov	r6, r5
    scratchpad[i] = wire_read();
 800132c:	f000 fd7c 	bl	8001e28 <wire_read>
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001330:	3401      	adds	r4, #1
 8001332:	2c09      	cmp	r4, #9
    scratchpad[i] = wire_read();
 8001334:	f805 0b01 	strb.w	r0, [r5], #1
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001338:	d1f8      	bne.n	800132c <ds18b20_get_temp+0x18>
  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 800133a:	2108      	movs	r1, #8
 800133c:	4630      	mov	r0, r6
 800133e:	f000 fdb7 	bl	8001eb0 <wire_crc>
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001342:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8001346:	4283      	cmp	r3, r0
 8001348:	d1e9      	bne.n	800131e <ds18b20_get_temp+0xa>
  return temp / 16.0f;
 800134a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800134e:	ee00 3a10 	vmov	s0, r3
 8001352:	eeba 0ace 	vcvt.f32.s32	s0, s0, #4
 8001356:	e7e4      	b.n	8001322 <ds18b20_get_temp+0xe>
 8001358:	42aa0000 	.word	0x42aa0000

0800135c <ds18b20_init>:
{
 800135c:	b510      	push	{r4, lr}
 800135e:	4604      	mov	r4, r0
	  ds18b20_start_measure(rom_code);
 8001360:	f7ff ffd4 	bl	800130c <ds18b20_start_measure>
	  HAL_Delay(750);
 8001364:	f240 20ee 	movw	r0, #750	; 0x2ee
 8001368:	f000 fe2e 	bl	8001fc8 <HAL_Delay>
	  float temp = ds18b20_get_temp(rom_code);
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff ffd1 	bl	8001314 <ds18b20_get_temp>
	  if (temp == 85.0f)
 8001372:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001388 <ds18b20_init+0x2c>
 8001376:	eeb4 0a67 	vcmp.f32	s0, s15
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 800137e:	bf0c      	ite	eq
 8001380:	2001      	moveq	r0, #1
 8001382:	2000      	movne	r0, #0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop
 8001388:	42aa0000 	.word	0x42aa0000

0800138c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800138c:	b500      	push	{lr}
 800138e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	2214      	movs	r2, #20
 8001392:	2100      	movs	r1, #0
 8001394:	a803      	add	r0, sp, #12
 8001396:	f004 ff23 	bl	80061e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800139c:	481b      	ldr	r0, [pc, #108]	; (800140c <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800139e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a0:	f042 0204 	orr.w	r2, r2, #4
 80013a4:	64da      	str	r2, [r3, #76]	; 0x4c
 80013a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a8:	f002 0204 	and.w	r2, r2, #4
 80013ac:	9200      	str	r2, [sp, #0]
 80013ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80013b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013ba:	f002 0201 	and.w	r2, r2, #1
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013c4:	f042 0202 	orr.w	r2, r2, #2
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80013ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	f640 0104 	movw	r1, #2052	; 0x804
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80013da:	f001 f83f 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80013de:	480b      	ldr	r0, [pc, #44]	; (800140c <MX_GPIO_Init+0x80>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e6:	f001 f839 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	f641 0204 	movw	r2, #6148	; 0x1804
 80013ee:	2301      	movs	r3, #1
 80013f0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_GPIO_Init+0x80>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f000 ff4f 	bl	80022a0 <HAL_GPIO_Init>

}
 8001402:	b009      	add	sp, #36	; 0x24
 8001404:	f85d fb04 	ldr.w	pc, [sp], #4
 8001408:	40021000 	.word	0x40021000
 800140c:	48000400 	.word	0x48000400

08001410 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001410:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001412:	4812      	ldr	r0, [pc, #72]	; (800145c <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 8001414:	4a12      	ldr	r2, [pc, #72]	; (8001460 <MX_I2C1_Init+0x50>)
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_I2C1_Init+0x54>)
 8001418:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	2300      	movs	r3, #0
 800141e:	2201      	movs	r2, #1
 8001420:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 8001424:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001428:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800142c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800142e:	f001 f946 	bl	80026be <HAL_I2C_Init>
 8001432:	b108      	cbz	r0, 8001438 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001434:	f000 fa64 	bl	8001900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <MX_I2C1_Init+0x4c>)
 800143a:	2100      	movs	r1, #0
 800143c:	f001 fb4c 	bl	8002ad8 <HAL_I2CEx_ConfigAnalogFilter>
 8001440:	b108      	cbz	r0, 8001446 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8001442:	f000 fa5d 	bl	8001900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_I2C1_Init+0x4c>)
 8001448:	2100      	movs	r1, #0
 800144a:	f001 fb6b 	bl	8002b24 <HAL_I2CEx_ConfigDigitalFilter>
 800144e:	b118      	cbz	r0, 8001458 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001450:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001454:	f000 ba54 	b.w	8001900 <Error_Handler>
}
 8001458:	bd08      	pop	{r3, pc}
 800145a:	bf00      	nop
 800145c:	20000220 	.word	0x20000220
 8001460:	40005400 	.word	0x40005400
 8001464:	10909cec 	.word	0x10909cec

08001468 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001468:	b510      	push	{r4, lr}
 800146a:	b0aa      	sub	sp, #168	; 0xa8
 800146c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146e:	2214      	movs	r2, #20
 8001470:	2100      	movs	r1, #0
 8001472:	a803      	add	r0, sp, #12
 8001474:	f004 feb4 	bl	80061e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	2288      	movs	r2, #136	; 0x88
 800147a:	2100      	movs	r1, #0
 800147c:	a808      	add	r0, sp, #32
 800147e:	f004 feaf 	bl	80061e0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001482:	6822      	ldr	r2, [r4, #0]
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_I2C_MspInit+0x78>)
 8001486:	429a      	cmp	r2, r3
 8001488:	d128      	bne.n	80014dc <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800148a:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800148c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800148e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f002 f88c 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8001494:	b108      	cbz	r0, 800149a <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8001496:	f000 fa33 	bl	8001900 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4c12      	ldr	r4, [pc, #72]	; (80014e4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	4812      	ldr	r0, [pc, #72]	; (80014e8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80014a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	22c0      	movs	r2, #192	; 0xc0
 80014b2:	2312      	movs	r3, #18
 80014b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2100      	movs	r1, #0
 80014ba:	2303      	movs	r3, #3
 80014bc:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c0:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f000 feeb 	bl	80022a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80014d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014dc:	b02a      	add	sp, #168	; 0xa8
 80014de:	bd10      	pop	{r4, pc}
 80014e0:	40005400 	.word	0x40005400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000400 	.word	0x48000400

080014ec <lcd_data>:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

static void lcd_data(uint8_t data)
{
 80014ec:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014ee:	4c0f      	ldr	r4, [pc, #60]	; (800152c <lcd_data+0x40>)
{
 80014f0:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	4620      	mov	r0, r4
 80014f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014fc:	f000 ffae 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001500:	4620      	mov	r0, r4
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001508:	f000 ffa8 	bl	800245c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	f10d 0107 	add.w	r1, sp, #7
 8001514:	2201      	movs	r2, #1
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <lcd_data+0x44>)
 8001518:	f002 fb77 	bl	8003c0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001522:	4620      	mov	r0, r4
 8001524:	f000 ff9a 	bl	800245c <HAL_GPIO_WritePin>
}
 8001528:	b002      	add	sp, #8
 800152a:	bd10      	pop	{r4, pc}
 800152c:	48000400 	.word	0x48000400
 8001530:	2000a2bc 	.word	0x2000a2bc

08001534 <lcd_data16>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_data16(uint16_t value)
{
 8001534:	b510      	push	{r4, lr}
 8001536:	4604      	mov	r4, r0
	lcd_data(value >> 8);
 8001538:	0a00      	lsrs	r0, r0, #8
 800153a:	f7ff ffd7 	bl	80014ec <lcd_data>
	lcd_data(value);
 800153e:	b2e0      	uxtb	r0, r4
}
 8001540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_data(value);
 8001544:	f7ff bfd2 	b.w	80014ec <lcd_data>

08001548 <lcd_cmd>:
{
 8001548:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800154a:	4c0f      	ldr	r4, [pc, #60]	; (8001588 <lcd_cmd+0x40>)
{
 800154c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	4620      	mov	r0, r4
 8001554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001558:	f000 ff80 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800155c:	4620      	mov	r0, r4
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001564:	f000 ff7a 	bl	800245c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001568:	f04f 33ff 	mov.w	r3, #4294967295
 800156c:	f10d 0107 	add.w	r1, sp, #7
 8001570:	2201      	movs	r2, #1
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <lcd_cmd+0x44>)
 8001574:	f002 fb49 	bl	8003c0a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157e:	4620      	mov	r0, r4
 8001580:	f000 ff6c 	bl	800245c <HAL_GPIO_WritePin>
}
 8001584:	b002      	add	sp, #8
 8001586:	bd10      	pop	{r4, pc}
 8001588:	48000400 	.word	0x48000400
 800158c:	2000a2bc 	.word	0x2000a2bc

08001590 <lcd_init>:
}

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_init(void)
{
 8001590:	b538      	push	{r3, r4, r5, lr}
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2104      	movs	r1, #4
 8001596:	4815      	ldr	r0, [pc, #84]	; (80015ec <lcd_init+0x5c>)
 8001598:	4d15      	ldr	r5, [pc, #84]	; (80015f0 <lcd_init+0x60>)
 800159a:	f000 ff5f 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800159e:	2064      	movs	r0, #100	; 0x64
 80015a0:	f000 fd12 	bl	8001fc8 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <lcd_init+0x5c>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	2104      	movs	r1, #4
 80015aa:	f000 ff57 	bl	800245c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80015ae:	2064      	movs	r0, #100	; 0x64
 80015b0:	f000 fd0a 	bl	8001fc8 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80015b4:	2400      	movs	r4, #0
    lcd_send(init_table[i]);
 80015b6:	f835 3b02 	ldrh.w	r3, [r5], #2
		lcd_cmd(value);
 80015ba:	b2d8      	uxtb	r0, r3
	if (value & 0x100) {
 80015bc:	05db      	lsls	r3, r3, #23
 80015be:	d512      	bpl.n	80015e6 <lcd_init+0x56>
		lcd_cmd(value);
 80015c0:	f7ff ffc2 	bl	8001548 <lcd_cmd>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80015c4:	3401      	adds	r4, #1
 80015c6:	2c4c      	cmp	r4, #76	; 0x4c
 80015c8:	d1f5      	bne.n	80015b6 <lcd_init+0x26>
  }

  HAL_Delay(200);
 80015ca:	20c8      	movs	r0, #200	; 0xc8
 80015cc:	f000 fcfc 	bl	8001fc8 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80015d0:	2011      	movs	r0, #17
 80015d2:	f7ff ffb9 	bl	8001548 <lcd_cmd>
  HAL_Delay(120);
 80015d6:	2078      	movs	r0, #120	; 0x78
 80015d8:	f000 fcf6 	bl	8001fc8 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
}
 80015dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd_cmd(ST7735S_DISPON);
 80015e0:	2029      	movs	r0, #41	; 0x29
 80015e2:	f7ff bfb1 	b.w	8001548 <lcd_cmd>
		lcd_data(value);
 80015e6:	f7ff ff81 	bl	80014ec <lcd_data>
 80015ea:	e7eb      	b.n	80015c4 <lcd_init+0x34>
 80015ec:	48000400 	.word	0x48000400
 80015f0:	0800f33a 	.word	0x0800f33a

080015f4 <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color)
{
	frame_buffer[x + y * LCD_WIDTH] = color;
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	fb03 0101 	mla	r1, r3, r1, r0
 80015fa:	4b02      	ldr	r3, [pc, #8]	; (8001604 <lcd_put_pixel+0x10>)
 80015fc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000274 	.word	0x20000274

08001608 <lcd_copy>:

void lcd_copy(void)
{
 8001608:	b508      	push	{r3, lr}
  lcd_cmd(ST7735S_CASET);
 800160a:	202a      	movs	r0, #42	; 0x2a
 800160c:	f7ff ff9c 	bl	8001548 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff ff8f 	bl	8001534 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 8001616:	20a0      	movs	r0, #160	; 0xa0
 8001618:	f7ff ff8c 	bl	8001534 <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 800161c:	202b      	movs	r0, #43	; 0x2b
 800161e:	f7ff ff93 	bl	8001548 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 8001622:	2002      	movs	r0, #2
 8001624:	f7ff ff86 	bl	8001534 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 8001628:	2081      	movs	r0, #129	; 0x81
 800162a:	f7ff ff83 	bl	8001534 <lcd_data16>
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	lcd_cmd(ST7735S_RAMWR);
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f7ff ff8a 	bl	8001548 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <lcd_copy+0x54>)
 8001636:	2201      	movs	r2, #1
 8001638:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163c:	f000 ff0e 	bl	800245c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <lcd_copy+0x54>)
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001648:	f000 ff08 	bl	800245c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
}
 800164c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001650:	4903      	ldr	r1, [pc, #12]	; (8001660 <lcd_copy+0x58>)
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <lcd_copy+0x5c>)
 8001654:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001658:	f002 bba2 	b.w	8003da0 <HAL_SPI_Transmit_DMA>
 800165c:	48000400 	.word	0x48000400
 8001660:	20000274 	.word	0x20000274
 8001664:	2000a2bc 	.word	0x2000a2bc

08001668 <lcd_is_busy>:
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

bool lcd_is_busy(void)
{
 8001668:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 800166a:	4803      	ldr	r0, [pc, #12]	; (8001678 <lcd_is_busy+0x10>)
 800166c:	f002 fc68 	bl	8003f40 <HAL_SPI_GetState>
		return true;
	else
		return false;
}
 8001670:	1e83      	subs	r3, r0, #2
 8001672:	4258      	negs	r0, r3
 8001674:	4158      	adcs	r0, r3
 8001676:	bd08      	pop	{r3, pc}
 8001678:	2000a2bc 	.word	0x2000a2bc

0800167c <lps_write_reg>:

    return value;
}

static void lps_write_reg(uint8_t reg, uint8_t value)
{
 800167c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 800167e:	2301      	movs	r3, #1
{
 8001680:	f88d 1017 	strb.w	r1, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001684:	2164      	movs	r1, #100	; 0x64
 8001686:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800168a:	f10d 0117 	add.w	r1, sp, #23
{
 800168e:	4602      	mov	r2, r0
    HAL_I2C_Mem_Write(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 8001690:	9100      	str	r1, [sp, #0]
 8001692:	4803      	ldr	r0, [pc, #12]	; (80016a0 <lps_write_reg+0x24>)
 8001694:	21ba      	movs	r1, #186	; 0xba
 8001696:	f001 f867 	bl	8002768 <HAL_I2C_Mem_Write>
}
 800169a:	b007      	add	sp, #28
 800169c:	f85d fb04 	ldr.w	pc, [sp], #4
 80016a0:	20000220 	.word	0x20000220

080016a4 <lps25hb_init>:

HAL_StatusTypeDef lps25hb_init(void)
{
 80016a4:	b530      	push	{r4, r5, lr}
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80016a6:	2364      	movs	r3, #100	; 0x64
{
 80016a8:	b087      	sub	sp, #28
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80016aa:	2401      	movs	r4, #1
 80016ac:	e9cd 4301 	strd	r4, r3, [sp, #4]
 80016b0:	f10d 0317 	add.w	r3, sp, #23
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <lps25hb_init+0x50>)
 80016b8:	4623      	mov	r3, r4
    uint8_t value = 0;
 80016ba:	2500      	movs	r5, #0
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80016bc:	220f      	movs	r2, #15
 80016be:	21ba      	movs	r1, #186	; 0xba
    uint8_t value = 0;
 80016c0:	f88d 5017 	strb.w	r5, [sp, #23]
    HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, reg, 1, &value, sizeof(value), TIMEOUT);
 80016c4:	f001 f92a 	bl	800291c <HAL_I2C_Mem_Read>
    return value;
 80016c8:	f89d 3017 	ldrb.w	r3, [sp, #23]
	if (lps_read_reg(LPS25HB_WHO_AM_I) != 0xbd)
 80016cc:	2bbd      	cmp	r3, #189	; 0xbd
 80016ce:	d10e      	bne.n	80016ee <lps25hb_init+0x4a>
		 return HAL_ERROR;

	lps_write_reg(LPS25HB_CTRL_REG1,  0xC0);
 80016d0:	21c0      	movs	r1, #192	; 0xc0
 80016d2:	2020      	movs	r0, #32
 80016d4:	f7ff ffd2 	bl	800167c <lps_write_reg>
	lps_write_reg(LPS25HB_CTRL_REG2,  0x40);
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	2021      	movs	r0, #33	; 0x21
 80016dc:	f7ff ffce 	bl	800167c <lps_write_reg>
	lps_write_reg(LPS25HB_FIFO_CTRL,  0xDF);
 80016e0:	202e      	movs	r0, #46	; 0x2e
 80016e2:	21df      	movs	r1, #223	; 0xdf
 80016e4:	f7ff ffca 	bl	800167c <lps_write_reg>

	return HAL_OK;
 80016e8:	4628      	mov	r0, r5
}
 80016ea:	b007      	add	sp, #28
 80016ec:	bd30      	pop	{r4, r5, pc}
		 return HAL_ERROR;
 80016ee:	4620      	mov	r0, r4
 80016f0:	e7fb      	b.n	80016ea <lps25hb_init+0x46>
 80016f2:	bf00      	nop
 80016f4:	20000220 	.word	0x20000220

080016f8 <lps25hb_read_temp>:

float lps25hb_read_temp(void)
{
 80016f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     int16_t temp;

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_TEMP_OUT_L | 0x80, 1, (uint8_t*)&temp, sizeof(temp), TIMEOUT) != HAL_OK)
 80016fa:	2302      	movs	r3, #2
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001702:	f10d 0316 	add.w	r3, sp, #22
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <lps25hb_read_temp+0x44>)
 800170a:	2301      	movs	r3, #1
 800170c:	22ab      	movs	r2, #171	; 0xab
 800170e:	21ba      	movs	r1, #186	; 0xba
 8001710:	f001 f904 	bl	800291c <HAL_I2C_Mem_Read>
 8001714:	b108      	cbz	r0, 800171a <lps25hb_read_temp+0x22>
         Error_Handler();
 8001716:	f000 f8f3 	bl	8001900 <Error_Handler>

     return 42.5f + temp / 480.0f;
 800171a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800171e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001740 <lps25hb_read_temp+0x48>
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800172a:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
 800172e:	eddf 7a05 	vldr	s15, [pc, #20]	; 8001744 <lps25hb_read_temp+0x4c>
 8001732:	ee30 0a27 	vadd.f32	s0, s0, s15
 8001736:	b007      	add	sp, #28
 8001738:	f85d fb04 	ldr.w	pc, [sp], #4
 800173c:	20000220 	.word	0x20000220
 8001740:	43f00000 	.word	0x43f00000
 8001744:	422a0000 	.word	0x422a0000

08001748 <lps25hb_read_pressure>:

float lps25hb_read_pressure(void)
{
 8001748:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     int32_t pressure = 0;
 800174a:	2300      	movs	r3, #0

     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 800174c:	2164      	movs	r1, #100	; 0x64
     int32_t pressure = 0;
 800174e:	9305      	str	r3, [sp, #20]
     if (HAL_I2C_Mem_Read(&hi2c1, LPS25HB_ADDR, LPS25HB_PRESS_OUT_XL | 0x80, 1, (uint8_t*)&pressure, 3, TIMEOUT) != HAL_OK)
 8001750:	2303      	movs	r3, #3
 8001752:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001756:	ab05      	add	r3, sp, #20
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <lps25hb_read_pressure+0x34>)
 800175c:	2301      	movs	r3, #1
 800175e:	22a8      	movs	r2, #168	; 0xa8
 8001760:	21ba      	movs	r1, #186	; 0xba
 8001762:	f001 f8db 	bl	800291c <HAL_I2C_Mem_Read>
 8001766:	b108      	cbz	r0, 800176c <lps25hb_read_pressure+0x24>
         Error_Handler();
 8001768:	f000 f8ca 	bl	8001900 <Error_Handler>

     return pressure / 4096.0f;
}
 800176c:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001770:	eeba 0aca 	vcvt.f32.s32	s0, s0, #12
 8001774:	b007      	add	sp, #28
 8001776:	f85d fb04 	ldr.w	pc, [sp], #4
 800177a:	bf00      	nop
 800177c:	20000220 	.word	0x20000220

08001780 <lps25hb_set_calib>:

void lps25hb_set_calib(uint16_t value)
{
 8001780:	b510      	push	{r4, lr}
	lps_write_reg(LPS25HB_RPDS_L, value);
 8001782:	b2c1      	uxtb	r1, r0
{
 8001784:	4604      	mov	r4, r0
	lps_write_reg(LPS25HB_RPDS_L, value);
 8001786:	2039      	movs	r0, #57	; 0x39
 8001788:	f7ff ff78 	bl	800167c <lps_write_reg>
	lps_write_reg(LPS25HB_RPDS_H, value >> 8);
 800178c:	0a21      	lsrs	r1, r4, #8
 800178e:	203a      	movs	r0, #58	; 0x3a
}
 8001790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lps_write_reg(LPS25HB_RPDS_H, value >> 8);
 8001794:	f7ff bf72 	b.w	800167c <lps_write_reg>

08001798 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim6) {
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800179a:	4283      	cmp	r3, r0
 800179c:	d102      	bne.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0xc>
	  get_measurements(NULL);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff bcc4 	b.w	800112c <get_measurements>
  }
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	2000a370 	.word	0x2000a370

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b500      	push	{lr}
 80017ae:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b0:	2244      	movs	r2, #68	; 0x44
 80017b2:	2100      	movs	r1, #0
 80017b4:	a805      	add	r0, sp, #20
 80017b6:	f004 fd13 	bl	80061e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ba:	2214      	movs	r2, #20
 80017bc:	2100      	movs	r1, #0
 80017be:	4668      	mov	r0, sp
 80017c0:	f004 fd0e 	bl	80061e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c8:	f001 f9da 	bl	8002b80 <HAL_PWREx_ControlVoltageScaling>
 80017cc:	b108      	cbz	r0, 80017d2 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ce:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80017d2:	2310      	movs	r3, #16
 80017d4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017d6:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017d8:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017da:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017dc:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017de:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017e2:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017e6:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017e8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017ea:	2207      	movs	r2, #7
 80017ec:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f0:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017f2:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f6:	f001 fa89 	bl	8002d0c <HAL_RCC_OscConfig>
 80017fa:	b108      	cbz	r0, 8001800 <SystemClock_Config+0x54>
 80017fc:	b672      	cpsid	i
  while (1)
 80017fe:	e7fe      	b.n	80017fe <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001800:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001804:	220f      	movs	r2, #15
 8001806:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001808:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180a:	2104      	movs	r1, #4
 800180c:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800180e:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001812:	f001 fcfb 	bl	800320c <HAL_RCC_ClockConfig>
 8001816:	b108      	cbz	r0, 800181c <SystemClock_Config+0x70>
 8001818:	b672      	cpsid	i
  while (1)
 800181a:	e7fe      	b.n	800181a <SystemClock_Config+0x6e>
}
 800181c:	b017      	add	sp, #92	; 0x5c
 800181e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001824 <main>:
{
 8001824:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 8001826:	f000 fbad 	bl	8001f84 <HAL_Init>
  SystemClock_Config();
 800182a:	f7ff ffbf 	bl	80017ac <SystemClock_Config>
  MX_GPIO_Init();
 800182e:	f7ff fdad 	bl	800138c <MX_GPIO_Init>
  MX_DMA_Init();
 8001832:	f7ff fd35 	bl	80012a0 <MX_DMA_Init>
  MX_SPI2_Init();
 8001836:	f000 f865 	bl	8001904 <MX_SPI2_Init>
  MX_I2C1_Init();
 800183a:	f7ff fde9 	bl	8001410 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800183e:	f000 fa45 	bl	8001ccc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001842:	f000 f979 	bl	8001b38 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001846:	f000 f9d7 	bl	8001bf8 <MX_TIM6_Init>
  lcd_init();
 800184a:	f7ff fea1 	bl	8001590 <lcd_init>
  HAL_TIM_Base_Start_IT(&htim6);
 800184e:	4826      	ldr	r0, [pc, #152]	; (80018e8 <main+0xc4>)
 8001850:	4c26      	ldr	r4, [pc, #152]	; (80018ec <main+0xc8>)
 8001852:	f002 fb79 	bl	8003f48 <HAL_TIM_Base_Start_IT>
  if (lps25hb_init() == HAL_OK) {
 8001856:	f7ff ff25 	bl	80016a4 <lps25hb_init>
	hagl_put_text(L"OK: LPS25HB", 30, 10, GREEN, font9x18B_ISO8859_2);
 800185a:	9400      	str	r4, [sp, #0]
  if (lps25hb_init() == HAL_OK) {
 800185c:	4605      	mov	r5, r0
 800185e:	b9b8      	cbnz	r0, 8001890 <main+0x6c>
	hagl_put_text(L"OK: LPS25HB", 30, 10, GREEN, font9x18B_ISO8859_2);
 8001860:	f24e 0307 	movw	r3, #57351	; 0xe007
 8001864:	220a      	movs	r2, #10
 8001866:	211e      	movs	r1, #30
 8001868:	4821      	ldr	r0, [pc, #132]	; (80018f0 <main+0xcc>)
 800186a:	f003 fd5a 	bl	8005322 <hagl_put_text>
	lcd_copy();
 800186e:	f7ff fecb 	bl	8001608 <lcd_copy>
  if (ds18b20_init(NULL) == HAL_OK) {
 8001872:	4628      	mov	r0, r5
 8001874:	f7ff fd72 	bl	800135c <ds18b20_init>
 8001878:	b1a0      	cbz	r0, 80018a4 <main+0x80>
	hagl_put_text(L"Error: DS18B20", 20, 10+18, RED, font9x18B_ISO8859_2);
 800187a:	23f8      	movs	r3, #248	; 0xf8
 800187c:	221c      	movs	r2, #28
 800187e:	2114      	movs	r1, #20
 8001880:	9400      	str	r4, [sp, #0]
 8001882:	481c      	ldr	r0, [pc, #112]	; (80018f4 <main+0xd0>)
 8001884:	f003 fd4d 	bl	8005322 <hagl_put_text>
	lcd_copy();
 8001888:	f7ff febe 	bl	8001608 <lcd_copy>
 800188c:	b672      	cpsid	i
  while (1)
 800188e:	e7fe      	b.n	800188e <main+0x6a>
	hagl_put_text(L"Error: LPS25HB", 20, 10, RED, font9x18B_ISO8859_2);
 8001890:	23f8      	movs	r3, #248	; 0xf8
 8001892:	220a      	movs	r2, #10
 8001894:	2114      	movs	r1, #20
 8001896:	4818      	ldr	r0, [pc, #96]	; (80018f8 <main+0xd4>)
 8001898:	f003 fd43 	bl	8005322 <hagl_put_text>
	lcd_copy();
 800189c:	f7ff feb4 	bl	8001608 <lcd_copy>
 80018a0:	b672      	cpsid	i
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <main+0x7e>
	hagl_put_text(L"OK: DS18B20", 30, 10+18, GREEN, font9x18B_ISO8859_2);
 80018a4:	f24e 0307 	movw	r3, #57351	; 0xe007
 80018a8:	221c      	movs	r2, #28
 80018aa:	211e      	movs	r1, #30
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <main+0xd8>)
 80018ae:	9400      	str	r4, [sp, #0]
 80018b0:	f003 fd37 	bl	8005322 <hagl_put_text>
	lcd_copy();
 80018b4:	f7ff fea8 	bl	8001608 <lcd_copy>
  lps25hb_set_calib(32);
 80018b8:	2020      	movs	r0, #32
 80018ba:	f7ff ff61 	bl	8001780 <lps25hb_set_calib>
  HAL_Delay(500);
 80018be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018c2:	f000 fb81 	bl	8001fc8 <HAL_Delay>
  hagl_clear_screen();
 80018c6:	f003 fd5b 	bl	8005380 <hagl_clear_screen>
  background_init();
 80018ca:	f7ff fb3b 	bl	8000f44 <background_init>
	  background_animate();
 80018ce:	f7ff fc1b 	bl	8001108 <background_animate>
	  while (lcd_is_busy()) {}
 80018d2:	f7ff fec9 	bl	8001668 <lcd_is_busy>
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d1fb      	bne.n	80018d2 <main+0xae>
	  background_render();
 80018da:	f7ff fbe9 	bl	80010b0 <background_render>
	  update_foreground();
 80018de:	f7ff fc43 	bl	8001168 <update_foreground>
	  lcd_copy();
 80018e2:	f7ff fe91 	bl	8001608 <lcd_copy>
	  background_animate();
 80018e6:	e7f2      	b.n	80018ce <main+0xaa>
 80018e8:	2000a370 	.word	0x2000a370
 80018ec:	0800cf29 	.word	0x0800cf29
 80018f0:	0800f3d4 	.word	0x0800f3d4
 80018f4:	0800f470 	.word	0x0800f470
 80018f8:	0800f404 	.word	0x0800f404
 80018fc:	0800f440 	.word	0x0800f440

08001900 <Error_Handler>:
 8001900:	b672      	cpsid	i
  while (1)
 8001902:	e7fe      	b.n	8001902 <Error_Handler+0x2>

08001904 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001904:	4810      	ldr	r0, [pc, #64]	; (8001948 <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <MX_SPI2_Init+0x48>)
{
 8001908:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800190a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800190e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001912:	2300      	movs	r3, #0
 8001914:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001918:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800191c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001920:	2210      	movs	r2, #16
 8001922:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 8001926:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001928:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800192c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001930:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001934:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001936:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001938:	f002 f8fd 	bl	8003b36 <HAL_SPI_Init>
 800193c:	b118      	cbz	r0, 8001946 <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800193e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001942:	f7ff bfdd 	b.w	8001900 <Error_Handler>
}
 8001946:	bd08      	pop	{r3, pc}
 8001948:	2000a2bc 	.word	0x2000a2bc
 800194c:	40003800 	.word	0x40003800

08001950 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001952:	4606      	mov	r6, r0
 8001954:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001956:	2214      	movs	r2, #20
 8001958:	2100      	movs	r1, #0
 800195a:	a803      	add	r0, sp, #12
 800195c:	f004 fc40 	bl	80061e0 <memset>
  if(spiHandle->Instance==SPI2)
 8001960:	6832      	ldr	r2, [r6, #0]
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <HAL_SPI_MspInit+0xb4>)
 8001964:	429a      	cmp	r2, r3
 8001966:	d14a      	bne.n	80019fe <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001968:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 800196e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001976:	659a      	str	r2, [r3, #88]	; 0x58
 8001978:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800197a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800197e:	9200      	str	r2, [sp, #0]
 8001980:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001984:	f042 0204 	orr.w	r2, r2, #4
 8001988:	64da      	str	r2, [r3, #76]	; 0x4c
 800198a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800198c:	f002 0204 	and.w	r2, r2, #4
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001996:	f042 0202 	orr.w	r2, r2, #2
 800199a:	64da      	str	r2, [r3, #76]	; 0x4c
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a4:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019a8:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b2:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f000 fc73 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	4812      	ldr	r0, [pc, #72]	; (8001a0c <HAL_SPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019c4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	a903      	add	r1, sp, #12

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80019ca:	4c11      	ldr	r4, [pc, #68]	; (8001a10 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f000 fc66 	bl	80022a0 <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_SPI_MspInit+0xc4>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d6:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80019d8:	2301      	movs	r3, #1
 80019da:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019de:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e0:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80019e4:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e6:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019e8:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80019ec:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80019f0:	f000 fb64 	bl	80020bc <HAL_DMA_Init>
 80019f4:	b108      	cbz	r0, 80019fa <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 80019f6:	f7ff ff83 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80019fa:	6574      	str	r4, [r6, #84]	; 0x54
 80019fc:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019fe:	b009      	add	sp, #36	; 0x24
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40003800 	.word	0x40003800
 8001a08:	48000800 	.word	0x48000800
 8001a0c:	48000400 	.word	0x48000400
 8001a10:	2000a274 	.word	0x2000a274
 8001a14:	40020058 	.word	0x40020058

08001a18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_MspInit+0x2c>)
 8001a1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	661a      	str	r2, [r3, #96]	; 0x60
 8001a22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001a24:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a26:	f002 0201 	and.w	r2, r2, #1
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a34:	659a      	str	r2, [r3, #88]	; 0x58
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a40:	b002      	add	sp, #8
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler>

08001a4a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <HardFault_Handler>

08001a4c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler>

08001a4e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler>

08001a50 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler>

08001a52 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a52:	4770      	bx	lr

08001a54 <DebugMon_Handler>:
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 baa4 	b.w	8001fa4 <HAL_IncTick>

08001a5c <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001a5c:	4801      	ldr	r0, [pc, #4]	; (8001a64 <DMA1_Channel5_IRQHandler+0x8>)
 8001a5e:	f000 bbd4 	b.w	800220a <HAL_DMA_IRQHandler>
 8001a62:	bf00      	nop
 8001a64:	2000a274 	.word	0x2000a274

08001a68 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a68:	4801      	ldr	r0, [pc, #4]	; (8001a70 <TIM6_DAC_IRQHandler+0x8>)
 8001a6a:	f002 baac 	b.w	8003fc6 <HAL_TIM_IRQHandler>
 8001a6e:	bf00      	nop
 8001a70:	2000a370 	.word	0x2000a370

08001a74 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a74:	2001      	movs	r0, #1
 8001a76:	4770      	bx	lr

08001a78 <_kill>:

int _kill(int pid, int sig)
{
 8001a78:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7a:	f004 fc13 	bl	80062a4 <__errno>
 8001a7e:	2316      	movs	r3, #22
 8001a80:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a82:	f04f 30ff 	mov.w	r0, #4294967295
 8001a86:	bd08      	pop	{r3, pc}

08001a88 <_exit>:

void _exit (int status)
{
 8001a88:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001a8a:	f004 fc0b 	bl	80062a4 <__errno>
 8001a8e:	2316      	movs	r3, #22
 8001a90:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001a92:	e7fe      	b.n	8001a92 <_exit+0xa>

08001a94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
 8001a96:	460d      	mov	r5, r1
 8001a98:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9a:	460e      	mov	r6, r1
 8001a9c:	1b73      	subs	r3, r6, r5
 8001a9e:	429c      	cmp	r4, r3
 8001aa0:	dc01      	bgt.n	8001aa6 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	e7f5      	b.n	8001a9c <_read+0x8>

08001ab0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	460e      	mov	r6, r1
 8001ab8:	1b73      	subs	r3, r6, r5
 8001aba:	429c      	cmp	r4, r3
 8001abc:	dc01      	bgt.n	8001ac2 <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8001abe:	4620      	mov	r0, r4
 8001ac0:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8001ac2:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	e7f5      	b.n	8001ab8 <_write+0x8>

08001acc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	4770      	bx	lr

08001ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad6:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001ad8:	2000      	movs	r0, #0
 8001ada:	4770      	bx	lr

08001adc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001adc:	2001      	movs	r0, #1
 8001ade:	4770      	bx	lr

08001ae0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	4770      	bx	lr

08001ae4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae4:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <_sbrk+0x30>)
 8001ae6:	6811      	ldr	r1, [r2, #0]
{
 8001ae8:	b510      	push	{r4, lr}
 8001aea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001aec:	b909      	cbnz	r1, 8001af2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001aee:	490a      	ldr	r1, [pc, #40]	; (8001b18 <_sbrk+0x34>)
 8001af0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af2:	6810      	ldr	r0, [r2, #0]
 8001af4:	4909      	ldr	r1, [pc, #36]	; (8001b1c <_sbrk+0x38>)
 8001af6:	4c0a      	ldr	r4, [pc, #40]	; (8001b20 <_sbrk+0x3c>)
 8001af8:	4403      	add	r3, r0
 8001afa:	1b09      	subs	r1, r1, r4
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d906      	bls.n	8001b0e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b00:	f004 fbd0 	bl	80062a4 <__errno>
 8001b04:	230c      	movs	r3, #12
 8001b06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b08:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b0c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b0e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b10:	e7fc      	b.n	8001b0c <_sbrk+0x28>
 8001b12:	bf00      	nop
 8001b14:	2000a320 	.word	0x2000a320
 8001b18:	2000a598 	.word	0x2000a598
 8001b1c:	20018000 	.word	0x20018000
 8001b20:	00002000 	.word	0x00002000

08001b24 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <SystemInit+0x10>)
 8001b26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	2100      	movs	r1, #0
 8001b40:	a803      	add	r0, sp, #12
 8001b42:	f004 fb4d 	bl	80061e0 <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b46:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b48:	2214      	movs	r2, #20
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	a80b      	add	r0, sp, #44	; 0x2c
 8001b4e:	f004 fb47 	bl	80061e0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b52:	2210      	movs	r2, #16
 8001b54:	4621      	mov	r1, r4
 8001b56:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	e9cd 4400 	strd	r4, r4, [sp]
 8001b5c:	9402      	str	r4, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b5e:	f004 fb3f 	bl	80061e0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b62:	4824      	ldr	r0, [pc, #144]	; (8001bf4 <MX_TIM2_Init+0xbc>)
  htim2.Init.Prescaler = 79;
 8001b64:	234f      	movs	r3, #79	; 0x4f
 8001b66:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001b6a:	e9c0 c300 	strd	ip, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b72:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	6084      	str	r4, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b7a:	f002 fb29 	bl	80041d0 <HAL_TIM_Base_Init>
 8001b7e:	b108      	cbz	r0, 8001b84 <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 8001b80:	f7ff febe 	bl	8001900 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b88:	481a      	ldr	r0, [pc, #104]	; (8001bf4 <MX_TIM2_Init+0xbc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8a:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b8c:	a903      	add	r1, sp, #12
 8001b8e:	f002 fc55 	bl	800443c <HAL_TIM_ConfigClockSource>
 8001b92:	b108      	cbz	r0, 8001b98 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8001b94:	f7ff feb4 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001b98:	4816      	ldr	r0, [pc, #88]	; (8001bf4 <MX_TIM2_Init+0xbc>)
 8001b9a:	f002 fb49 	bl	8004230 <HAL_TIM_IC_Init>
 8001b9e:	b108      	cbz	r0, 8001ba4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001ba0:	f7ff feae 	bl	8001900 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	2340      	movs	r3, #64	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ba8:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001baa:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <MX_TIM2_Init+0xbc>)
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001bb0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bb2:	a90b      	add	r1, sp, #44	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 8001bb4:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bb6:	f002 fd3d 	bl	8004634 <HAL_TIM_SlaveConfigSynchro>
 8001bba:	b108      	cbz	r0, 8001bc0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001bbc:	f7ff fea0 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_TIM2_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	9400      	str	r4, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc4:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc8:	f002 fd5c 	bl	8004684 <HAL_TIMEx_MasterConfigSynchronization>
 8001bcc:	b108      	cbz	r0, 8001bd2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bce:	f7ff fe97 	bl	8001900 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e9cd 2307 	strd	r2, r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_TIM2_Init+0xbc>)
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bdc:	2200      	movs	r2, #0
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bde:	a907      	add	r1, sp, #28
  sConfigIC.ICFilter = 0;
 8001be0:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001be4:	f002 fb8a 	bl	80042fc <HAL_TIM_IC_ConfigChannel>
 8001be8:	b108      	cbz	r0, 8001bee <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001bea:	f7ff fe89 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bee:	b010      	add	sp, #64	; 0x40
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000a324 	.word	0x2000a324

08001bf8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bfa:	480f      	ldr	r0, [pc, #60]	; (8001c38 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 9999;
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <MX_TIM6_Init+0x44>)
 8001bfe:	f242 730f 	movw	r3, #9999	; 0x270f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 9999;
 8001c04:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 15999;
 8001c08:	f643 637f 	movw	r3, #15999	; 0x3e7f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001c10:	9403      	str	r4, [sp, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c12:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 15999;
 8001c14:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c18:	f002 fada 	bl	80041d0 <HAL_TIM_Base_Init>
 8001c1c:	b108      	cbz	r0, 8001c22 <MX_TIM6_Init+0x2a>
  {
    Error_Handler();
 8001c1e:	f7ff fe6f 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c22:	4805      	ldr	r0, [pc, #20]	; (8001c38 <MX_TIM6_Init+0x40>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c24:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c26:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c28:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c2a:	f002 fd2b 	bl	8004684 <HAL_TIMEx_MasterConfigSynchronization>
 8001c2e:	b108      	cbz	r0, 8001c34 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001c30:	f7ff fe66 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c34:	b004      	add	sp, #16
 8001c36:	bd10      	pop	{r4, pc}
 8001c38:	2000a370 	.word	0x2000a370
 8001c3c:	40001000 	.word	0x40001000

08001c40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	4604      	mov	r4, r0
 8001c44:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c46:	2214      	movs	r2, #20
 8001c48:	2100      	movs	r1, #0
 8001c4a:	a803      	add	r0, sp, #12
 8001c4c:	f004 fac8 	bl	80061e0 <memset>
  if(tim_baseHandle->Instance==TIM2)
 8001c50:	6823      	ldr	r3, [r4, #0]
 8001c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c56:	d11f      	bne.n	8001c98 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c58:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c60:	f042 0201 	orr.w	r2, r2, #1
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58
 8001c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c68:	f002 0201 	and.w	r2, r2, #1
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2202      	movs	r2, #2
 8001c84:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c8e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f000 fb06 	bl	80022a0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c94:	b008      	add	sp, #32
 8001c96:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM6)
 8001c98:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_TIM_Base_MspInit+0x84>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d1fa      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_TIM_Base_MspInit+0x88>)
 8001ca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ca2:	f042 0210 	orr.w	r2, r2, #16
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	210f      	movs	r1, #15
 8001cb4:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001cb6:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8001cb8:	f000 f9ac 	bl	8002014 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cbc:	2036      	movs	r0, #54	; 0x36
 8001cbe:	f000 f9db 	bl	8002078 <HAL_NVIC_EnableIRQ>
}
 8001cc2:	e7e7      	b.n	8001c94 <HAL_TIM_Base_MspInit+0x54>
 8001cc4:	40001000 	.word	0x40001000
 8001cc8:	40021000 	.word	0x40021000

08001ccc <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ccc:	480e      	ldr	r0, [pc, #56]	; (8001d08 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 9600;
 8001cce:	4a0f      	ldr	r2, [pc, #60]	; (8001d0c <MX_USART3_UART_Init+0x40>)
{
 8001cd0:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 9600;
 8001cd2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001cd6:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cde:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cea:	6103      	str	r3, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001cec:	2310      	movs	r3, #16
 8001cee:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf4:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001cf6:	f003 f82a 	bl	8004d4e <HAL_HalfDuplex_Init>
 8001cfa:	b118      	cbz	r0, 8001d04 <MX_USART3_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001d00:	f7ff bdfe 	b.w	8001900 <Error_Handler>
}
 8001d04:	bd08      	pop	{r3, pc}
 8001d06:	bf00      	nop
 8001d08:	2000a3bc 	.word	0x2000a3bc
 8001d0c:	40004800 	.word	0x40004800

08001d10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	b0aa      	sub	sp, #168	; 0xa8
 8001d14:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	2214      	movs	r2, #20
 8001d18:	2100      	movs	r1, #0
 8001d1a:	a803      	add	r0, sp, #12
 8001d1c:	f004 fa60 	bl	80061e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d20:	2288      	movs	r2, #136	; 0x88
 8001d22:	2100      	movs	r1, #0
 8001d24:	a808      	add	r0, sp, #32
 8001d26:	f004 fa5b 	bl	80061e0 <memset>
  if(uartHandle->Instance==USART3)
 8001d2a:	6822      	ldr	r2, [r4, #0]
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_UART_MspInit+0x78>)
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d128      	bne.n	8001d84 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d32:	2304      	movs	r3, #4
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d34:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d36:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f001 fc38 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8001d3c:	b108      	cbz	r0, 8001d42 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 8001d3e:	f7ff fddf 	bl	8001900 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d44:	4812      	ldr	r0, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001d4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d50:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d5a:	f042 0204 	orr.w	r2, r2, #4
 8001d5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d7a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d7e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f000 fa8e 	bl	80022a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d84:	b02a      	add	sp, #168	; 0xa8
 8001d86:	bd10      	pop	{r4, pc}
 8001d88:	40004800 	.word	0x40004800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000800 	.word	0x48000800

08001d94 <set_baudrate>:
#include "wire.h"
#include "gpio.h"
#include "usart.h"

static void set_baudrate(uint32_t baudrate)
{
 8001d94:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001d96:	4a0d      	ldr	r2, [pc, #52]	; (8001dcc <set_baudrate+0x38>)
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <set_baudrate+0x3c>)
  huart3.Init.BaudRate = baudrate;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d9a:	210c      	movs	r1, #12
  huart3.Init.BaudRate = baudrate;
 8001d9c:	e9c3 2000 	strd	r2, r0, [r3]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da0:	2200      	movs	r2, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001da2:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da6:	e9c3 1205 	strd	r1, r2, [r3, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001daa:	e9c3 2207 	strd	r2, r2, [r3, #28]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dae:	611a      	str	r2, [r3, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;

  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001db2:	4618      	mov	r0, r3
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 8001dba:	f002 ffc8 	bl	8004d4e <HAL_HalfDuplex_Init>
 8001dbe:	b118      	cbz	r0, 8001dc8 <set_baudrate+0x34>
  {
    Error_Handler();
  }
}
 8001dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001dc4:	f7ff bd9c 	b.w	8001900 <Error_Handler>
}
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	2000a3bc 	.word	0x2000a3bc

08001dd4 <wire_reset>:


HAL_StatusTypeDef wire_reset(void)
{
 8001dd4:	b513      	push	{r0, r1, r4, lr}
  uint8_t data_out = 0xF0;
 8001dd6:	23f0      	movs	r3, #240	; 0xf0
  uint8_t data_in = 0;

  set_baudrate(9600);
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001dd8:	4c12      	ldr	r4, [pc, #72]	; (8001e24 <wire_reset+0x50>)
  uint8_t data_out = 0xF0;
 8001dda:	f88d 3006 	strb.w	r3, [sp, #6]
  set_baudrate(9600);
 8001dde:	f44f 5016 	mov.w	r0, #9600	; 0x2580
  uint8_t data_in = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f88d 3007 	strb.w	r3, [sp, #7]
  set_baudrate(9600);
 8001de8:	f7ff ffd4 	bl	8001d94 <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001dec:	f10d 0106 	add.w	r1, sp, #6
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295
 8001df4:	2201      	movs	r2, #1
 8001df6:	4620      	mov	r0, r4
 8001df8:	f002 fe90 	bl	8004b1c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8001e00:	2201      	movs	r2, #1
 8001e02:	f10d 0107 	add.w	r1, sp, #7
 8001e06:	4620      	mov	r0, r4
 8001e08:	f002 feda 	bl	8004bc0 <HAL_UART_Receive>
  set_baudrate(115200);
 8001e0c:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8001e10:	f7ff ffc0 	bl	8001d94 <set_baudrate>

  if (data_in != 0xF0)
 8001e14:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return HAL_OK;
  else
	return HAL_ERROR;
}
 8001e18:	f1a0 03f0 	sub.w	r3, r0, #240	; 0xf0
 8001e1c:	4258      	negs	r0, r3
 8001e1e:	4158      	adcs	r0, r3
 8001e20:	b002      	add	sp, #8
 8001e22:	bd10      	pop	{r4, pc}
 8001e24:	2000a3bc 	.word	0x2000a3bc

08001e28 <wire_read>:

  return data_in & 0x01;
}

uint8_t wire_read(void)
{
 8001e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001e2a:	4e13      	ldr	r6, [pc, #76]	; (8001e78 <wire_read+0x50>)
{
 8001e2c:	2508      	movs	r5, #8
  uint8_t value = 0;
 8001e2e:	2400      	movs	r4, #0
  uint8_t data_out = 0xFF;
 8001e30:	23ff      	movs	r3, #255	; 0xff
 8001e32:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t data_in = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f88d 3007 	strb.w	r3, [sp, #7]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e42:	f10d 0106 	add.w	r1, sp, #6
 8001e46:	4630      	mov	r0, r6
 8001e48:	f002 fe68 	bl	8004b1c <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e50:	2201      	movs	r2, #1
 8001e52:	f10d 0107 	add.w	r1, sp, #7
 8001e56:	4630      	mov	r0, r6
 8001e58:	f002 feb2 	bl	8004bc0 <HAL_UART_Receive>
 8001e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  int i;
  for (i = 0; i < 8; i++) {
    value >>= 1;
 8001e60:	0864      	lsrs	r4, r4, #1
    if (read_bit())
 8001e62:	07db      	lsls	r3, r3, #31
      value |= 0x80;
 8001e64:	bf44      	itt	mi
 8001e66:	f064 047f 	ornmi	r4, r4, #127	; 0x7f
 8001e6a:	b2e4      	uxtbmi	r4, r4
  for (i = 0; i < 8; i++) {
 8001e6c:	3d01      	subs	r5, #1
 8001e6e:	d1df      	bne.n	8001e30 <wire_read+0x8>
  }
  return value;
}
 8001e70:	4620      	mov	r0, r4
 8001e72:	b002      	add	sp, #8
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
 8001e76:	bf00      	nop
 8001e78:	2000a3bc 	.word	0x2000a3bc

08001e7c <wire_write>:
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}

void wire_write(uint8_t byte)
{
 8001e7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001e7e:	4e0b      	ldr	r6, [pc, #44]	; (8001eac <wire_write+0x30>)
{
 8001e80:	4604      	mov	r4, r0
 8001e82:	2508      	movs	r5, #8
  if (value) {
 8001e84:	f014 0301 	ands.w	r3, r4, #1
      uint8_t data_out = 0xff;
 8001e88:	bf18      	it	ne
 8001e8a:	23ff      	movne	r3, #255	; 0xff
      uint8_t data_out = 0x0;
 8001e8c:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
 8001e96:	f10d 0107 	add.w	r1, sp, #7
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	f002 fe3e 	bl	8004b1c <HAL_UART_Transmit>
  int i;
  for (i = 0; i < 8; i++) {
 8001ea0:	3d01      	subs	r5, #1
    write_bit(byte & 0x01);
    byte >>= 1;
 8001ea2:	ea4f 0454 	mov.w	r4, r4, lsr #1
  for (i = 0; i < 8; i++) {
 8001ea6:	d1ed      	bne.n	8001e84 <wire_write+0x8>
  }
}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	2000a3bc 	.word	0x2000a3bc

08001eb0 <wire_crc>:
  }
  return crc;
}

uint8_t wire_crc(const uint8_t* data, int len)
{
 8001eb0:	b570      	push	{r4, r5, r6, lr}
  int i;
    uint8_t crc = 0;
 8001eb2:	2300      	movs	r3, #0

    for (i = 0; i < len; i++)
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	428a      	cmp	r2, r1
 8001eb8:	db01      	blt.n	8001ebe <wire_crc+0xe>
      crc = byte_crc(crc, data[i]);

    return crc;
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	bd70      	pop	{r4, r5, r6, pc}
      crc = byte_crc(crc, data[i]);
 8001ebe:	5c85      	ldrb	r5, [r0, r2]
 8001ec0:	2408      	movs	r4, #8
    uint8_t b = crc ^ byte;
 8001ec2:	ea83 0605 	eor.w	r6, r3, r5
    if (b & 0x01)
 8001ec6:	f016 0f01 	tst.w	r6, #1
 8001eca:	ea4f 0353 	mov.w	r3, r3, lsr #1
      crc ^= 0x8c;
 8001ece:	bf1c      	itt	ne
 8001ed0:	f083 038c 	eorne.w	r3, r3, #140	; 0x8c
 8001ed4:	b2db      	uxtbne	r3, r3
  for (i = 0; i < 8; i++) {
 8001ed6:	3c01      	subs	r4, #1
    byte >>= 1;
 8001ed8:	ea4f 0555 	mov.w	r5, r5, lsr #1
  for (i = 0; i < 8; i++) {
 8001edc:	d1f1      	bne.n	8001ec2 <wire_crc+0x12>
    for (i = 0; i < len; i++)
 8001ede:	3201      	adds	r2, #1
 8001ee0:	e7e9      	b.n	8001eb6 <wire_crc+0x6>
	...

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
                                            ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff fe1c 	bl	8001b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	; (8001f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	; (8001f28 <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	; (8001f30 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f004 f9cd 	bl	80062b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7ff fc85 	bl	8001824 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
                                            ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001f28:	0800fc00 	.word	0x0800fc00
  ldr r2, =_sbss
 8001f2c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001f30:	2000a594 	.word	0x2000a594

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>
	...

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <HAL_InitTick+0x40>)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
{
 8001f3e:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001f40:	b90a      	cbnz	r2, 8001f46 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001f44:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f4e:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <HAL_InitTick+0x44>)
 8001f50:	6810      	ldr	r0, [r2, #0]
 8001f52:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f56:	f000 f89d 	bl	8002094 <HAL_SYSTICK_Config>
 8001f5a:	4604      	mov	r4, r0
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d1f0      	bne.n	8001f42 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f60:	2d0f      	cmp	r5, #15
 8001f62:	d8ee      	bhi.n	8001f42 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	4602      	mov	r2, r0
 8001f66:	4629      	mov	r1, r5
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f000 f852 	bl	8002014 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_InitTick+0x48>)
 8001f72:	4620      	mov	r0, r4
 8001f74:	601d      	str	r5, [r3, #0]
  return status;
 8001f76:	e7e5      	b.n	8001f44 <HAL_InitTick+0xc>
 8001f78:	20000004 	.word	0x20000004
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008

08001f84 <HAL_Init>:
{
 8001f84:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f86:	2003      	movs	r0, #3
 8001f88:	f000 f832 	bl	8001ff0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff ffd3 	bl	8001f38 <HAL_InitTick>
 8001f92:	4604      	mov	r4, r0
 8001f94:	b918      	cbnz	r0, 8001f9e <HAL_Init+0x1a>
    HAL_MspInit();
 8001f96:	f7ff fd3f 	bl	8001a18 <HAL_MspInit>
}
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001f9e:	2401      	movs	r4, #1
 8001fa0:	e7fb      	b.n	8001f9a <HAL_Init+0x16>
	...

08001fa4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x10>)
 8001fa6:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_IncTick+0x14>)
 8001fa8:	6811      	ldr	r1, [r2, #0]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	440b      	add	r3, r1
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	2000a444 	.word	0x2000a444
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fbc:	4b01      	ldr	r3, [pc, #4]	; (8001fc4 <HAL_GetTick+0x8>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000a444 	.word	0x2000a444

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b538      	push	{r3, r4, r5, lr}
 8001fca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fcc:	f7ff fff6 	bl	8001fbc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001fd2:	bf1c      	itt	ne
 8001fd4:	4b05      	ldrne	r3, [pc, #20]	; (8001fec <HAL_Delay+0x24>)
 8001fd6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001fda:	bf18      	it	ne
 8001fdc:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fde:	f7ff ffed 	bl	8001fbc <HAL_GetTick>
 8001fe2:	1b43      	subs	r3, r0, r5
 8001fe4:	42a3      	cmp	r3, r4
 8001fe6:	d3fa      	bcc.n	8001fde <HAL_Delay+0x16>
  {
  }
}
 8001fe8:	bd38      	pop	{r3, r4, r5, pc}
 8001fea:	bf00      	nop
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff0:	4907      	ldr	r1, [pc, #28]	; (8002010 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001ff2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002000:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800200c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b16      	ldr	r3, [pc, #88]	; (8002070 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002016:	b530      	push	{r4, r5, lr}
 8002018:	68dc      	ldr	r4, [r3, #12]
 800201a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	2b04      	cmp	r3, #4
 8002026:	bf28      	it	cs
 8002028:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002030:	bf8c      	ite	hi
 8002032:	3c03      	subhi	r4, #3
 8002034:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002036:	fa05 f303 	lsl.w	r3, r5, r3
 800203a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800203e:	40a5      	lsls	r5, r4
 8002040:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002046:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204c:	bfac      	ite	ge
 800204e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	4a08      	ldrlt	r2, [pc, #32]	; (8002074 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	bfb8      	it	lt
 800205a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	b2db      	uxtb	r3, r3
 8002060:	bfaa      	itet	ge
 8002062:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800206c:	bd30      	pop	{r4, r5, pc}
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	e000ed14 	.word	0xe000ed14

08002078 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002078:	2800      	cmp	r0, #0
 800207a:	db07      	blt.n	800208c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207c:	4a04      	ldr	r2, [pc, #16]	; (8002090 <HAL_NVIC_EnableIRQ+0x18>)
 800207e:	0941      	lsrs	r1, r0, #5
 8002080:	2301      	movs	r3, #1
 8002082:	f000 001f 	and.w	r0, r0, #31
 8002086:	4083      	lsls	r3, r0
 8002088:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	e000e100 	.word	0xe000e100

08002094 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002094:	3801      	subs	r0, #1
 8002096:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800209a:	d20b      	bcs.n	80020b4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020a2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	21f0      	movs	r1, #240	; 0xf0
 80020a6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020aa:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ac:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ae:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020b4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80020b6:	4770      	bx	lr
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80020be:	2800      	cmp	r0, #0
 80020c0:	d057      	beq.n	8002172 <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80020c2:	6805      	ldr	r5, [r0, #0]
 80020c4:	4b2c      	ldr	r3, [pc, #176]	; (8002178 <HAL_DMA_Init+0xbc>)
 80020c6:	429d      	cmp	r5, r3
 80020c8:	f04f 0214 	mov.w	r2, #20
 80020cc:	d83f      	bhi.n	800214e <HAL_DMA_Init+0x92>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_DMA_Init+0xc0>)
 80020d0:	492b      	ldr	r1, [pc, #172]	; (8002180 <HAL_DMA_Init+0xc4>)
 80020d2:	442b      	add	r3, r5
 80020d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020da:	2202      	movs	r2, #2
 80020dc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80020e0:	e9d0 6202 	ldrd	r6, r2, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e4:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 80020e6:	682c      	ldr	r4, [r5, #0]
  tmp |=  hdma->Init.Direction        |
 80020e8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ea:	433a      	orrs	r2, r7
 80020ec:	6947      	ldr	r7, [r0, #20]
 80020ee:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f0:	6987      	ldr	r7, [r0, #24]
 80020f2:	433a      	orrs	r2, r7
 80020f4:	69c7      	ldr	r7, [r0, #28]
 80020f6:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f8:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80020fa:	f424 44ff 	bic.w	r4, r4, #32640	; 0x7f80
 80020fe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8002102:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8002104:	4322      	orrs	r2, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002106:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
    hdma->DmaBaseAddress = DMA1;
 800210a:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = tmp;
 800210e:	602a      	str	r2, [r5, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002110:	d014      	beq.n	800213c <HAL_DMA_Init+0x80>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002112:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002114:	f003 031c 	and.w	r3, r3, #28
 8002118:	220f      	movs	r2, #15
 800211a:	409a      	lsls	r2, r3
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800211c:	409c      	lsls	r4, r3
    if (DMA1 == hdma->DmaBaseAddress)
 800211e:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_DMA_Init+0xc4>)
 8002120:	4299      	cmp	r1, r3
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002122:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8002126:	d119      	bne.n	800215c <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002128:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 800212c:	4013      	ands	r3, r2
 800212e:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002132:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8002136:	4323      	orrs	r3, r4
 8002138:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213c:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800213e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002140:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002142:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8002146:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 800214a:	4618      	mov	r0, r3
}
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800214e:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_DMA_Init+0xc8>)
 8002150:	490d      	ldr	r1, [pc, #52]	; (8002188 <HAL_DMA_Init+0xcc>)
 8002152:	442b      	add	r3, r5
 8002154:	fbb3 f3f2 	udiv	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 800215a:	e7be      	b.n	80020da <HAL_DMA_Init+0x1e>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800215c:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 8002160:	400a      	ands	r2, r1
 8002162:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002166:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800216a:	4322      	orrs	r2, r4
 800216c:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8002170:	e7e4      	b.n	800213c <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 8002172:	2001      	movs	r0, #1
 8002174:	e7ea      	b.n	800214c <HAL_DMA_Init+0x90>
 8002176:	bf00      	nop
 8002178:	40020407 	.word	0x40020407
 800217c:	bffdfff8 	.word	0xbffdfff8
 8002180:	40020000 	.word	0x40020000
 8002184:	bffdfbf8 	.word	0xbffdfbf8
 8002188:	40020400 	.word	0x40020400

0800218c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800218c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800218e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8002192:	2c01      	cmp	r4, #1
 8002194:	d037      	beq.n	8002206 <HAL_DMA_Start_IT+0x7a>
 8002196:	2401      	movs	r4, #1
 8002198:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800219c:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 80021a0:	2c01      	cmp	r4, #1
 80021a2:	b2e5      	uxtb	r5, r4
 80021a4:	f04f 0600 	mov.w	r6, #0
 80021a8:	f04f 0402 	mov.w	r4, #2
 80021ac:	d129      	bne.n	8002202 <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ae:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021b4:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80021b6:	6826      	ldr	r6, [r4, #0]
 80021b8:	f026 0601 	bic.w	r6, r6, #1
 80021bc:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021be:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 80021c2:	f007 071c 	and.w	r7, r7, #28
 80021c6:	40bd      	lsls	r5, r7
 80021c8:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021ca:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021cc:	6883      	ldr	r3, [r0, #8]
 80021ce:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80021d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021d2:	bf0b      	itete	eq
 80021d4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80021d6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80021d8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80021da:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80021dc:	b14b      	cbz	r3, 80021f2 <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021e4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80021e6:	6823      	ldr	r3, [r4, #0]
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2000      	movs	r0, #0
}
 80021f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	f043 030a 	orr.w	r3, r3, #10
 8002200:	e7f0      	b.n	80021e4 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8002202:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002206:	2002      	movs	r0, #2
 8002208:	e7f2      	b.n	80021f0 <HAL_DMA_Start_IT+0x64>

0800220a <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800220a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800220c:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 800220e:	6803      	ldr	r3, [r0, #0]
{
 8002210:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002212:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002216:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002218:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800221a:	2404      	movs	r4, #4
 800221c:	4094      	lsls	r4, r2
 800221e:	4234      	tst	r4, r6
 8002220:	d00e      	beq.n	8002240 <HAL_DMA_IRQHandler+0x36>
 8002222:	f015 0f04 	tst.w	r5, #4
 8002226:	d00b      	beq.n	8002240 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800222c:	bf5e      	ittt	pl
 800222e:	681a      	ldrpl	r2, [r3, #0]
 8002230:	f022 0204 	bicpl.w	r2, r2, #4
 8002234:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8002236:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002238:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 800223a:	b373      	cbz	r3, 800229a <HAL_DMA_IRQHandler+0x90>
}
 800223c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800223e:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002240:	2402      	movs	r4, #2
 8002242:	4094      	lsls	r4, r2
 8002244:	4234      	tst	r4, r6
 8002246:	d012      	beq.n	800226e <HAL_DMA_IRQHandler+0x64>
 8002248:	f015 0f02 	tst.w	r5, #2
 800224c:	d00f      	beq.n	800226e <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	0695      	lsls	r5, r2, #26
 8002252:	d406      	bmi.n	8002262 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f022 020a 	bic.w	r2, r2, #10
 800225a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800225c:	2301      	movs	r3, #1
 800225e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002262:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002264:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002266:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 800226a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800226c:	e7e5      	b.n	800223a <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800226e:	2408      	movs	r4, #8
 8002270:	4094      	lsls	r4, r2
 8002272:	4234      	tst	r4, r6
 8002274:	d011      	beq.n	800229a <HAL_DMA_IRQHandler+0x90>
 8002276:	072c      	lsls	r4, r5, #28
 8002278:	d50f      	bpl.n	800229a <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800227a:	681c      	ldr	r4, [r3, #0]
 800227c:	f024 040e 	bic.w	r4, r4, #14
 8002280:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002282:	2301      	movs	r3, #1
 8002284:	fa03 f202 	lsl.w	r2, r3, r2
 8002288:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800228a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800228c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002290:	2300      	movs	r3, #0
 8002292:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002296:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002298:	e7cf      	b.n	800223a <HAL_DMA_IRQHandler+0x30>
}
 800229a:	bc70      	pop	{r4, r5, r6}
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a4:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8002458 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022a8:	4c69      	ldr	r4, [pc, #420]	; (8002450 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80022aa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ac:	680a      	ldr	r2, [r1, #0]
 80022ae:	fa32 f503 	lsrs.w	r5, r2, r3
 80022b2:	d102      	bne.n	80022ba <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80022b4:	b003      	add	sp, #12
 80022b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022ba:	f04f 0e01 	mov.w	lr, #1
 80022be:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80022c2:	ea1e 0202 	ands.w	r2, lr, r2
 80022c6:	f000 8090 	beq.w	80023ea <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022ca:	684d      	ldr	r5, [r1, #4]
 80022cc:	f005 0603 	and.w	r6, r5, #3
 80022d0:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d4:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022da:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022de:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022e0:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022e4:	f200 8083 	bhi.w	80023ee <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 80022e8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ea:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022ee:	68cf      	ldr	r7, [r1, #12]
 80022f0:	fa07 f708 	lsl.w	r7, r7, r8
 80022f4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80022f8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80022fa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022fc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002304:	409f      	lsls	r7, r3
 8002306:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800230a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800230c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800230e:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002312:	688f      	ldr	r7, [r1, #8]
 8002314:	fa07 f708 	lsl.w	r7, r7, r8
 8002318:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 800231e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002320:	d071      	beq.n	8002406 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8002322:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002324:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002328:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232c:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800232e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002332:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002334:	d059      	beq.n	80023ea <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 800233a:	f046 0601 	orr.w	r6, r6, #1
 800233e:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8002342:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8002346:	f023 0703 	bic.w	r7, r3, #3
 800234a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800234e:	f006 0601 	and.w	r6, r6, #1
 8002352:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002356:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002358:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800235e:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002360:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002364:	f04f 0c0f 	mov.w	ip, #15
 8002368:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800236c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002370:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002374:	d05f      	beq.n	8002436 <HAL_GPIO_Init+0x196>
 8002376:	4e37      	ldr	r6, [pc, #220]	; (8002454 <HAL_GPIO_Init+0x1b4>)
 8002378:	42b0      	cmp	r0, r6
 800237a:	d05e      	beq.n	800243a <HAL_GPIO_Init+0x19a>
 800237c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002380:	42b0      	cmp	r0, r6
 8002382:	d05c      	beq.n	800243e <HAL_GPIO_Init+0x19e>
 8002384:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002388:	42b0      	cmp	r0, r6
 800238a:	d05a      	beq.n	8002442 <HAL_GPIO_Init+0x1a2>
 800238c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002390:	42b0      	cmp	r0, r6
 8002392:	d058      	beq.n	8002446 <HAL_GPIO_Init+0x1a6>
 8002394:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002398:	42b0      	cmp	r0, r6
 800239a:	d056      	beq.n	800244a <HAL_GPIO_Init+0x1aa>
 800239c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80023a0:	42b0      	cmp	r0, r6
 80023a2:	bf0c      	ite	eq
 80023a4:	2606      	moveq	r6, #6
 80023a6:	2607      	movne	r6, #7
 80023a8:	fa06 f60e 	lsl.w	r6, r6, lr
 80023ac:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b0:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 80023b2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 80023b4:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b6:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80023ba:	bf0c      	ite	eq
 80023bc:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023be:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 80023c0:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 80023c2:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 80023c8:	bf0c      	ite	eq
 80023ca:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023cc:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 80023ce:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 80023d0:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023d2:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 80023d6:	bf0c      	ite	eq
 80023d8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80023da:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 80023dc:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 80023de:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023e0:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 80023e2:	bf54      	ite	pl
 80023e4:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80023e6:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 80023e8:	6026      	str	r6, [r4, #0]
    position++;
 80023ea:	3301      	adds	r3, #1
 80023ec:	e75e      	b.n	80022ac <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023ee:	2e03      	cmp	r6, #3
 80023f0:	d18c      	bne.n	800230c <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 80023f2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80023f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80023f8:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 80023fc:	409f      	lsls	r7, r3
 80023fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8002402:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002404:	e78d      	b.n	8002322 <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8002406:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800240a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800240e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002412:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002416:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800241a:	f04f 0e0f 	mov.w	lr, #15
 800241e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002422:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002426:	690f      	ldr	r7, [r1, #16]
 8002428:	fa07 f70b 	lsl.w	r7, r7, fp
 800242c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002430:	f8ca 7020 	str.w	r7, [sl, #32]
 8002434:	e775      	b.n	8002322 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002436:	2600      	movs	r6, #0
 8002438:	e7b6      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 800243a:	2601      	movs	r6, #1
 800243c:	e7b4      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 800243e:	2602      	movs	r6, #2
 8002440:	e7b2      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 8002442:	2603      	movs	r6, #3
 8002444:	e7b0      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 8002446:	2604      	movs	r6, #4
 8002448:	e7ae      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 800244a:	2605      	movs	r6, #5
 800244c:	e7ac      	b.n	80023a8 <HAL_GPIO_Init+0x108>
 800244e:	bf00      	nop
 8002450:	40010400 	.word	0x40010400
 8002454:	48000400 	.word	0x48000400
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800245c:	b10a      	cbz	r2, 8002462 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800245e:	6181      	str	r1, [r0, #24]
 8002460:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002462:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002464:	4770      	bx	lr

08002466 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002466:	6803      	ldr	r3, [r0, #0]
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800246c:	bf44      	itt	mi
 800246e:	2200      	movmi	r2, #0
 8002470:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002476:	bf5e      	ittt	pl
 8002478:	699a      	ldrpl	r2, [r3, #24]
 800247a:	f042 0201 	orrpl.w	r2, r2, #1
 800247e:	619a      	strpl	r2, [r3, #24]
  }
}
 8002480:	4770      	bx	lr
	...

08002484 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002484:	b530      	push	{r4, r5, lr}
 8002486:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002488:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800248a:	432b      	orrs	r3, r5
 800248c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <I2C_TransferConfig+0x28>)
 8002492:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002494:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002498:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800249a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80024a2:	ea20 0002 	bic.w	r0, r0, r2
 80024a6:	4303      	orrs	r3, r0
 80024a8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024aa:	bd30      	pop	{r4, r5, pc}
 80024ac:	03ff63ff 	.word	0x03ff63ff

080024b0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80024b0:	6803      	ldr	r3, [r0, #0]
{
 80024b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80024b6:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024b8:	f014 0410 	ands.w	r4, r4, #16
{
 80024bc:	4605      	mov	r5, r0
 80024be:	460f      	mov	r7, r1
 80024c0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80024c2:	d06f      	beq.n	80025a4 <I2C_IsErrorOccurred+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c4:	2210      	movs	r2, #16
  uint32_t error_code = 0;
 80024c6:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c8:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	46a0      	mov	r8, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024cc:	682b      	ldr	r3, [r5, #0]
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	0690      	lsls	r0, r2, #26
 80024d2:	d461      	bmi.n	8002598 <I2C_IsErrorOccurred+0xe8>
 80024d4:	f1b8 0f00 	cmp.w	r8, #0
 80024d8:	d035      	beq.n	8002546 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80024da:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80024de:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80024e0:	682e      	ldr	r6, [r5, #0]
 80024e2:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024e4:	05d9      	lsls	r1, r3, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80024e6:	bf41      	itttt	mi
 80024e8:	f44f 7280 	movmi.w	r2, #256	; 0x100
 80024ec:	61f2      	strmi	r2, [r6, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80024ee:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 80024f2:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80024f4:	055a      	lsls	r2, r3, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024f6:	bf41      	itttt	mi
 80024f8:	f44f 6280 	movmi.w	r2, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80024fc:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002500:	61f2      	strmi	r2, [r6, #28]
    status = HAL_ERROR;
 8002502:	2001      	movmi	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002504:	059b      	lsls	r3, r3, #22
 8002506:	d54f      	bpl.n	80025a8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002508:	f44f 7300 	mov.w	r3, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800250c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002510:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8002512:	4628      	mov	r0, r5
 8002514:	f7ff ffa7 	bl	8002466 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002518:	6873      	ldr	r3, [r6, #4]
 800251a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800251e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8002522:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 800252c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800252e:	4323      	orrs	r3, r4
 8002530:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	2320      	movs	r3, #32
 8002534:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002538:	2300      	movs	r3, #0
 800253a:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800253e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8002542:	2001      	movs	r0, #1
 8002544:	e032      	b.n	80025ac <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8002546:	1c7a      	adds	r2, r7, #1
 8002548:	d0c1      	beq.n	80024ce <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7ff fd37 	bl	8001fbc <HAL_GetTick>
 800254e:	1b80      	subs	r0, r0, r6
 8002550:	42b8      	cmp	r0, r7
 8002552:	d801      	bhi.n	8002558 <I2C_IsErrorOccurred+0xa8>
 8002554:	2f00      	cmp	r7, #0
 8002556:	d1b9      	bne.n	80024cc <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002558:	682b      	ldr	r3, [r5, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 800255c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002560:	6998      	ldr	r0, [r3, #24]
 8002562:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8002564:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002566:	d50a      	bpl.n	800257e <I2C_IsErrorOccurred+0xce>
 8002568:	0449      	lsls	r1, r1, #17
 800256a:	d408      	bmi.n	800257e <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 800256c:	2a20      	cmp	r2, #32
 800256e:	d006      	beq.n	800257e <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002576:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8002578:	f7ff fd20 	bl	8001fbc <HAL_GetTick>
 800257c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	d4a2      	bmi.n	80024cc <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002586:	f7ff fd19 	bl	8001fbc <HAL_GetTick>
 800258a:	1b80      	subs	r0, r0, r6
 800258c:	2819      	cmp	r0, #25
 800258e:	d9f6      	bls.n	800257e <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8002592:	f04f 0801 	mov.w	r8, #1
 8002596:	e799      	b.n	80024cc <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8002598:	f1b8 0f00 	cmp.w	r8, #0
 800259c:	d19d      	bne.n	80024da <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259e:	2220      	movs	r2, #32
 80025a0:	61da      	str	r2, [r3, #28]
 80025a2:	e79a      	b.n	80024da <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	4620      	mov	r0, r4
 80025a6:	e79b      	b.n	80024e0 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d1b2      	bne.n	8002512 <I2C_IsErrorOccurred+0x62>
}
 80025ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025b0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4604      	mov	r4, r0
 80025b4:	460d      	mov	r5, r1
 80025b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025b8:	6823      	ldr	r3, [r4, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	079b      	lsls	r3, r3, #30
 80025be:	d501      	bpl.n	80025c4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025c4:	4632      	mov	r2, r6
 80025c6:	4629      	mov	r1, r5
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff ff71 	bl	80024b0 <I2C_IsErrorOccurred>
 80025ce:	b9c0      	cbnz	r0, 8002602 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80025d0:	1c6a      	adds	r2, r5, #1
 80025d2:	d0f1      	beq.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d4:	f7ff fcf2 	bl	8001fbc <HAL_GetTick>
 80025d8:	1b80      	subs	r0, r0, r6
 80025da:	42a8      	cmp	r0, r5
 80025dc:	d801      	bhi.n	80025e2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80025de:	2d00      	cmp	r5, #0
 80025e0:	d1ea      	bne.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	f013 0302 	ands.w	r3, r3, #2
 80025ea:	d1e5      	bne.n	80025b8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80025ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025f8:	2220      	movs	r2, #32
 80025fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 8002602:	2001      	movs	r0, #1
 8002604:	e7dd      	b.n	80025c2 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08002606 <I2C_WaitOnFlagUntilTimeout>:
{
 8002606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800260a:	9f06      	ldr	r7, [sp, #24]
 800260c:	4604      	mov	r4, r0
 800260e:	4688      	mov	r8, r1
 8002610:	4616      	mov	r6, r2
 8002612:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	6822      	ldr	r2, [r4, #0]
 8002616:	6993      	ldr	r3, [r2, #24]
 8002618:	ea38 0303 	bics.w	r3, r8, r3
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	42b3      	cmp	r3, r6
 8002624:	d001      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8002626:	2000      	movs	r0, #0
 8002628:	e01e      	b.n	8002668 <I2C_WaitOnFlagUntilTimeout+0x62>
    if (Timeout != HAL_MAX_DELAY)
 800262a:	1c6b      	adds	r3, r5, #1
 800262c:	d0f3      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262e:	f7ff fcc5 	bl	8001fbc <HAL_GetTick>
 8002632:	1bc0      	subs	r0, r0, r7
 8002634:	42a8      	cmp	r0, r5
 8002636:	d801      	bhi.n	800263c <I2C_WaitOnFlagUntilTimeout+0x36>
 8002638:	2d00      	cmp	r5, #0
 800263a:	d1eb      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xe>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	ea38 0303 	bics.w	r3, r8, r3
 8002644:	bf0c      	ite	eq
 8002646:	2301      	moveq	r3, #1
 8002648:	2300      	movne	r3, #0
 800264a:	42b3      	cmp	r3, r6
 800264c:	d1e2      	bne.n	8002614 <I2C_WaitOnFlagUntilTimeout+0xe>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800264e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002656:	2320      	movs	r3, #32
 8002658:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8002662:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8002666:	2001      	movs	r0, #1
}
 8002668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800266c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	4604      	mov	r4, r0
 8002670:	460d      	mov	r5, r1
 8002672:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	069b      	lsls	r3, r3, #26
 800267a:	d501      	bpl.n	8002680 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 800267c:	2000      	movs	r0, #0
}
 800267e:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002680:	4632      	mov	r2, r6
 8002682:	4629      	mov	r1, r5
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff ff13 	bl	80024b0 <I2C_IsErrorOccurred>
 800268a:	b9b0      	cbnz	r0, 80026ba <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268c:	f7ff fc96 	bl	8001fbc <HAL_GetTick>
 8002690:	1b80      	subs	r0, r0, r6
 8002692:	42a8      	cmp	r0, r5
 8002694:	d801      	bhi.n	800269a <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002696:	2d00      	cmp	r5, #0
 8002698:	d1ec      	bne.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f013 0320 	ands.w	r3, r3, #32
 80026a2:	d1e7      	bne.n	8002674 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026a4:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80026a6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	6462      	str	r2, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	2220      	movs	r2, #32
 80026b2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      return HAL_ERROR;
 80026ba:	2001      	movs	r0, #1
 80026bc:	e7df      	b.n	800267e <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080026be <HAL_I2C_Init>:
{
 80026be:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80026c0:	4604      	mov	r4, r0
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d04e      	beq.n	8002764 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80026ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ce:	b91b      	cbnz	r3, 80026d8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80026d0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80026d4:	f7fe fec8 	bl	8001468 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	2324      	movs	r3, #36	; 0x24
 80026da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f022 0201 	bic.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026e8:	6862      	ldr	r2, [r4, #4]
 80026ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026ee:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f6:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fc:	2901      	cmp	r1, #1
 80026fe:	d106      	bne.n	800270e <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002700:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002704:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270c:	e007      	b.n	800271e <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800270e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002712:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002714:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002716:	d1f6      	bne.n	8002706 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800271e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002732:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002734:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8002738:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800273a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800273c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002740:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002742:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8002746:	430a      	orrs	r2, r1
 8002748:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002752:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002754:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002756:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002758:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800275c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8002762:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002764:	2001      	movs	r0, #1
 8002766:	e7fc      	b.n	8002762 <HAL_I2C_Init+0xa4>

08002768 <HAL_I2C_Mem_Write>:
{
 8002768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800276c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002772:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8002776:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	2b20      	cmp	r3, #32
{
 800277c:	4604      	mov	r4, r0
 800277e:	460f      	mov	r7, r1
 8002780:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	f040 80c6 	bne.w	8002912 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8002786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002788:	b113      	cbz	r3, 8002790 <HAL_I2C_Mem_Write+0x28>
 800278a:	f1ba 0f00 	cmp.w	sl, #0
 800278e:	d106      	bne.n	800279e <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002794:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002796:	2001      	movs	r0, #1
}
 8002798:	b003      	add	sp, #12
 800279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800279e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	f000 80b5 	beq.w	8002912 <HAL_I2C_Mem_Write+0x1aa>
 80027a8:	f04f 0b01 	mov.w	fp, #1
 80027ac:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80027b0:	f7ff fc04 	bl	8001fbc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b4:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 80027b6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b8:	9000      	str	r0, [sp, #0]
 80027ba:	465a      	mov	r2, fp
 80027bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7ff ff20 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d1e5      	bne.n	8002796 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ca:	2321      	movs	r3, #33	; 0x21
 80027cc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d0:	2340      	movs	r3, #64	; 0x40
 80027d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80027d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027d8:	6263      	str	r3, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 80027de:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	fa5f f289 	uxtb.w	r2, r9
 80027e6:	4639      	mov	r1, r7
 80027e8:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 80027ea:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027f2:	f7ff fe47 	bl	8002484 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f6:	462a      	mov	r2, r5
 80027f8:	4641      	mov	r1, r8
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff fed8 	bl	80025b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002800:	bb18      	cbnz	r0, 800284a <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002802:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002806:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002808:	d115      	bne.n	8002836 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800280a:	b2f6      	uxtb	r6, r6
 800280c:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800280e:	2200      	movs	r2, #0
 8002810:	9500      	str	r5, [sp, #0]
 8002812:	4643      	mov	r3, r8
 8002814:	2180      	movs	r1, #128	; 0x80
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fef5 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 800281c:	b9a8      	cbnz	r0, 800284a <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d815      	bhi.n	8002852 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8002826:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002828:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800282a:	b292      	uxth	r2, r2
 800282c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800282e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	e012      	b.n	800285c <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002836:	0a32      	lsrs	r2, r6, #8
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	4641      	mov	r1, r8
 800283c:	462a      	mov	r2, r5
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff feb6 	bl	80025b0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002844:	b908      	cbnz	r0, 800284a <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	e7df      	b.n	800280a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 800284a:	2300      	movs	r3, #0
 800284c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002850:	e7a1      	b.n	8002796 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002852:	22ff      	movs	r2, #255	; 0xff
 8002854:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002856:	9000      	str	r0, [sp, #0]
 8002858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800285c:	4639      	mov	r1, r7
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff fe10 	bl	8002484 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002864:	462a      	mov	r2, r5
 8002866:	4641      	mov	r1, r8
 8002868:	4620      	mov	r0, r4
 800286a:	f7ff fea1 	bl	80025b0 <I2C_WaitOnTXISFlagUntilTimeout>
 800286e:	2800      	cmp	r0, #0
 8002870:	d191      	bne.n	8002796 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002874:	6822      	ldr	r2, [r4, #0]
 8002876:	f813 1b01 	ldrb.w	r1, [r3], #1
 800287a:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800287c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800287e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002880:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002882:	3b01      	subs	r3, #1
 8002884:	b29b      	uxth	r3, r3
 8002886:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002888:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800288a:	3a01      	subs	r2, #1
 800288c:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800288e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002890:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002892:	b1b3      	cbz	r3, 80028c2 <HAL_I2C_Mem_Write+0x15a>
 8002894:	b9aa      	cbnz	r2, 80028c2 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002896:	9500      	str	r5, [sp, #0]
 8002898:	4643      	mov	r3, r8
 800289a:	2180      	movs	r1, #128	; 0x80
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff feb2 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	f47f af77 	bne.w	8002796 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2bff      	cmp	r3, #255	; 0xff
 80028ae:	d928      	bls.n	8002902 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028b4:	9000      	str	r0, [sp, #0]
 80028b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ba:	4639      	mov	r1, r7
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff fde1 	bl	8002484 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80028c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1cc      	bne.n	8002864 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ca:	462a      	mov	r2, r5
 80028cc:	4641      	mov	r1, r8
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff fecc 	bl	800266c <I2C_WaitOnSTOPFlagUntilTimeout>
 80028d4:	2800      	cmp	r0, #0
 80028d6:	f47f af5e 	bne.w	8002796 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	2120      	movs	r1, #32
 80028de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80028e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80028ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80028ee:	f022 0201 	bic.w	r2, r2, #1
 80028f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80028f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002900:	e74a      	b.n	8002798 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8002902:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002904:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002906:	b292      	uxth	r2, r2
 8002908:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	e7d3      	b.n	80028ba <HAL_I2C_Mem_Write+0x152>
    return HAL_BUSY;
 8002912:	2002      	movs	r0, #2
 8002914:	e740      	b.n	8002798 <HAL_I2C_Mem_Write+0x30>
 8002916:	bf00      	nop
 8002918:	80002000 	.word	0x80002000

0800291c <HAL_I2C_Mem_Read>:
{
 800291c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002920:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002922:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002926:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800292a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	2b20      	cmp	r3, #32
{
 8002930:	4604      	mov	r4, r0
 8002932:	460f      	mov	r7, r1
 8002934:	4616      	mov	r6, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002936:	f040 80c9 	bne.w	8002acc <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 800293a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800293c:	b113      	cbz	r3, 8002944 <HAL_I2C_Mem_Read+0x28>
 800293e:	f1ba 0f00 	cmp.w	sl, #0
 8002942:	d106      	bne.n	8002952 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002948:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800294a:	2001      	movs	r0, #1
}
 800294c:	b003      	add	sp, #12
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002952:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002956:	2b01      	cmp	r3, #1
 8002958:	f000 80b8 	beq.w	8002acc <HAL_I2C_Mem_Read+0x1b0>
 800295c:	f04f 0b01 	mov.w	fp, #1
 8002960:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002964:	f7ff fb2a 	bl	8001fbc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002968:	2319      	movs	r3, #25
 800296a:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 800296c:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800296e:	465a      	mov	r2, fp
 8002970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff fe46 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2800      	cmp	r0, #0
 800297e:	d1e4      	bne.n	800294a <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002980:	2222      	movs	r2, #34	; 0x22
 8002982:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 800298c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800298e:	6262      	str	r2, [r4, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002990:	4a4f      	ldr	r2, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002992:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8002994:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002996:	9200      	str	r2, [sp, #0]
 8002998:	4639      	mov	r1, r7
 800299a:	fa5f f289 	uxtb.w	r2, r9
 800299e:	4620      	mov	r0, r4
    hi2c->XferCount = Size;
 80029a0:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029a4:	f7ff fd6e 	bl	8002484 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029a8:	462a      	mov	r2, r5
 80029aa:	4641      	mov	r1, r8
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff fdff 	bl	80025b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80029b2:	bb20      	cbnz	r0, 80029fe <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029b4:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029b8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029ba:	d116      	bne.n	80029ea <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029bc:	b2f6      	uxtb	r6, r6
 80029be:	629e      	str	r6, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	2200      	movs	r2, #0
 80029c2:	9500      	str	r5, [sp, #0]
 80029c4:	4643      	mov	r3, r8
 80029c6:	2140      	movs	r1, #64	; 0x40
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fe1c 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	b9b0      	cbnz	r0, 80029fe <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	4b3f      	ldr	r3, [pc, #252]	; (8002ad4 <HAL_I2C_Mem_Read+0x1b8>)
 80029d8:	d815      	bhi.n	8002a06 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80029da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029dc:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80029de:	b292      	uxth	r2, r2
 80029e0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	e012      	b.n	8002a10 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ea:	0a32      	lsrs	r2, r6, #8
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ee:	4641      	mov	r1, r8
 80029f0:	462a      	mov	r2, r5
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7ff fddc 	bl	80025b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80029f8:	b908      	cbnz	r0, 80029fe <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	e7de      	b.n	80029bc <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a04:	e7a1      	b.n	800294a <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a06:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a08:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a0a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a10:	4639      	mov	r1, r7
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff fd36 	bl	8002484 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a18:	9500      	str	r5, [sp, #0]
 8002a1a:	4643      	mov	r3, r8
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2104      	movs	r1, #4
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff fdf0 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 8002a26:	2800      	cmp	r0, #0
 8002a28:	d18f      	bne.n	800294a <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a2a:	6823      	ldr	r3, [r4, #0]
 8002a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a30:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002a36:	3301      	adds	r3, #1
 8002a38:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a44:	3a01      	subs	r2, #1
 8002a46:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a48:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002a4a:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a4c:	b1b3      	cbz	r3, 8002a7c <HAL_I2C_Mem_Read+0x160>
 8002a4e:	b9aa      	cbnz	r2, 8002a7c <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a50:	9500      	str	r5, [sp, #0]
 8002a52:	4643      	mov	r3, r8
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff fdd5 	bl	8002606 <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	f47f af74 	bne.w	800294a <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	2bff      	cmp	r3, #255	; 0xff
 8002a68:	d928      	bls.n	8002abc <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a6a:	22ff      	movs	r2, #255	; 0xff
 8002a6c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a6e:	9000      	str	r0, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a74:	4639      	mov	r1, r7
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7ff fd04 	bl	8002484 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002a7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1c9      	bne.n	8002a18 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a84:	462a      	mov	r2, r5
 8002a86:	4641      	mov	r1, r8
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f7ff fdef 	bl	800266c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	f47f af5b 	bne.w	800294a <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	2120      	movs	r1, #32
 8002a98:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002aa0:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002aa4:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ab2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ab6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002aba:	e747      	b.n	800294c <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8002abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002abe:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	e7d3      	b.n	8002a74 <HAL_I2C_Mem_Read+0x158>
    return HAL_BUSY;
 8002acc:	2002      	movs	r0, #2
 8002ace:	e73d      	b.n	800294c <HAL_I2C_Mem_Read+0x30>
 8002ad0:	80002000 	.word	0x80002000
 8002ad4:	80002400 	.word	0x80002400

08002ad8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ad8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	b2dc      	uxtb	r4, r3
 8002ae2:	d11d      	bne.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d019      	beq.n	8002b20 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	2324      	movs	r3, #36	; 0x24
 8002aee:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	6803      	ldr	r3, [r0, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4311      	orrs	r1, r2
 8002b08:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f042 0201 	orr.w	r2, r2, #1
 8002b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b12:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b18:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002b1c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b1e:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002b20:	2002      	movs	r0, #2
 8002b22:	e7fc      	b.n	8002b1e <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002b24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b24:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	b2dc      	uxtb	r4, r3
 8002b2e:	d11c      	bne.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b38:	2324      	movs	r3, #36	; 0x24
 8002b3a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b48:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b4a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b4e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b52:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002b62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002b66:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002b68:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	e7fc      	b.n	8002b68 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002b70 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b70:	4b02      	ldr	r3, [pc, #8]	; (8002b7c <HAL_PWREx_GetVoltageRange+0xc>)
 8002b72:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002b74:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40007000 	.word	0x40007000

08002b80 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b80:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b82:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8c:	d11d      	bne.n	8002bca <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b92:	d101      	bne.n	8002b98 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b94:	2000      	movs	r0, #0
 8002b96:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b98:	6813      	ldr	r3, [r2, #0]
 8002b9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2132      	movs	r1, #50	; 0x32
 8002baa:	434b      	muls	r3, r1
 8002bac:	490e      	ldr	r1, [pc, #56]	; (8002be8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bb4:	6951      	ldr	r1, [r2, #20]
 8002bb6:	0549      	lsls	r1, r1, #21
 8002bb8:	d500      	bpl.n	8002bbc <HAL_PWREx_ControlVoltageScaling+0x3c>
 8002bba:	b923      	cbnz	r3, 8002bc6 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bbc:	6953      	ldr	r3, [r2, #20]
 8002bbe:	055b      	lsls	r3, r3, #21
 8002bc0:	d5e8      	bpl.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002bc2:	2003      	movs	r0, #3
}
 8002bc4:	4770      	bx	lr
        wait_loop_index--;
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	e7f4      	b.n	8002bb4 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bce:	bf1f      	itttt	ne
 8002bd0:	6813      	ldrne	r3, [r2, #0]
 8002bd2:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8002bd6:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8002bda:	6013      	strne	r3, [r2, #0]
 8002bdc:	e7da      	b.n	8002b94 <HAL_PWREx_ControlVoltageScaling+0x14>
 8002bde:	bf00      	nop
 8002be0:	40007000 	.word	0x40007000
 8002be4:	20000000 	.word	0x20000000
 8002be8:	000f4240 	.word	0x000f4240

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bee:	4d1e      	ldr	r5, [pc, #120]	; (8002c68 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002bf0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002bf2:	00da      	lsls	r2, r3, #3
{
 8002bf4:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf6:	d518      	bpl.n	8002c2a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002bf8:	f7ff ffba 	bl	8002b70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c00:	d123      	bne.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c02:	2c80      	cmp	r4, #128	; 0x80
 8002c04:	d929      	bls.n	8002c5a <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c06:	2ca0      	cmp	r4, #160	; 0xa0
 8002c08:	bf8c      	ite	hi
 8002c0a:	2402      	movhi	r4, #2
 8002c0c:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c0e:	4917      	ldr	r1, [pc, #92]	; (8002c6c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002c10:	680a      	ldr	r2, [r1, #0]
 8002c12:	f022 0207 	bic.w	r2, r2, #7
 8002c16:	4322      	orrs	r2, r4
 8002c18:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c1a:	6808      	ldr	r0, [r1, #0]
 8002c1c:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002c20:	1b00      	subs	r0, r0, r4
 8002c22:	bf18      	it	ne
 8002c24:	2001      	movne	r0, #1
 8002c26:	b003      	add	sp, #12
 8002c28:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c2a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c32:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002c3c:	f7ff ff98 	bl	8002b70 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c40:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c46:	65ab      	str	r3, [r5, #88]	; 0x58
 8002c48:	e7d8      	b.n	8002bfc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002c4a:	2c80      	cmp	r4, #128	; 0x80
 8002c4c:	d807      	bhi.n	8002c5e <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002c4e:	d008      	beq.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002c50:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002c54:	425c      	negs	r4, r3
 8002c56:	415c      	adcs	r4, r3
 8002c58:	e7d9      	b.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	e7d7      	b.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c5e:	2403      	movs	r4, #3
 8002c60:	e7d5      	b.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c62:	2402      	movs	r4, #2
 8002c64:	e7d3      	b.n	8002c0e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40022000 	.word	0x40022000

08002c70 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x8c>)
 8002c72:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c76:	f012 020c 	ands.w	r2, r2, #12
 8002c7a:	d005      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x18>
 8002c7c:	2a0c      	cmp	r2, #12
 8002c7e:	d115      	bne.n	8002cac <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c80:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c84:	2901      	cmp	r1, #1
 8002c86:	d118      	bne.n	8002cba <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c88:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002c8a:	481d      	ldr	r0, [pc, #116]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c8c:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c8e:	bf55      	itete	pl
 8002c90:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c94:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c96:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c9a:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002c9e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca2:	b34a      	cbz	r2, 8002cf8 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca4:	2a0c      	cmp	r2, #12
 8002ca6:	d009      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x4c>
 8002ca8:	2000      	movs	r0, #0
  return sysclockfreq;
 8002caa:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cac:	2a04      	cmp	r2, #4
 8002cae:	d022      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cb0:	2a08      	cmp	r2, #8
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	bf18      	it	ne
 8002cb6:	2000      	movne	r0, #0
 8002cb8:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cba:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002cc2:	2a02      	cmp	r2, #2
 8002cc4:	d015      	beq.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x82>
 8002cc6:	490f      	ldr	r1, [pc, #60]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc8:	2a03      	cmp	r2, #3
 8002cca:	bf08      	it	eq
 8002ccc:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cce:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002cd6:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cd8:	68d8      	ldr	r0, [r3, #12]
 8002cda:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cde:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce2:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ce4:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce6:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce8:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002cec:	fbb2 f0f0 	udiv	r0, r2, r0
 8002cf0:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cf4:	e7eb      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002cf6:	4804      	ldr	r0, [pc, #16]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	0800f4c4 	.word	0x0800f4c4
 8002d04:	007a1200 	.word	0x007a1200
 8002d08:	00f42400 	.word	0x00f42400

08002d0c <HAL_RCC_OscConfig>:
{
 8002d0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002d10:	4605      	mov	r5, r0
 8002d12:	b918      	cbnz	r0, 8002d1c <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002d14:	2001      	movs	r0, #1
}
 8002d16:	b003      	add	sp, #12
 8002d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1c:	4c92      	ldr	r4, [pc, #584]	; (8002f68 <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d1e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d20:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d22:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d24:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d2a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d2e:	d53d      	bpl.n	8002dac <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d30:	b11e      	cbz	r6, 8002d3a <HAL_RCC_OscConfig+0x2e>
 8002d32:	2e0c      	cmp	r6, #12
 8002d34:	d166      	bne.n	8002e04 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d36:	2f01      	cmp	r7, #1
 8002d38:	d164      	bne.n	8002e04 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	0798      	lsls	r0, r3, #30
 8002d3e:	d502      	bpl.n	8002d46 <HAL_RCC_OscConfig+0x3a>
 8002d40:	69ab      	ldr	r3, [r5, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0e6      	beq.n	8002d14 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d46:	6823      	ldr	r3, [r4, #0]
 8002d48:	6a28      	ldr	r0, [r5, #32]
 8002d4a:	0719      	lsls	r1, r3, #28
 8002d4c:	bf56      	itet	pl
 8002d4e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002d52:	6823      	ldrmi	r3, [r4, #0]
 8002d54:	091b      	lsrpl	r3, r3, #4
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5a:	4298      	cmp	r0, r3
 8002d5c:	d93b      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5e:	f7ff ff45 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002d62:	2800      	cmp	r0, #0
 8002d64:	d1d6      	bne.n	8002d14 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d66:	6823      	ldr	r3, [r4, #0]
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	6a2a      	ldr	r2, [r5, #32]
 8002d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d76:	4313      	orrs	r3, r2
 8002d78:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d7a:	6863      	ldr	r3, [r4, #4]
 8002d7c:	69ea      	ldr	r2, [r5, #28]
 8002d7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d86:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d88:	f7ff ff72 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8002d8c:	68a3      	ldr	r3, [r4, #8]
 8002d8e:	4a77      	ldr	r2, [pc, #476]	; (8002f6c <HAL_RCC_OscConfig+0x260>)
 8002d90:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d94:	5cd3      	ldrb	r3, [r2, r3]
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	40d8      	lsrs	r0, r3
 8002d9c:	4b74      	ldr	r3, [pc, #464]	; (8002f70 <HAL_RCC_OscConfig+0x264>)
 8002d9e:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002da0:	4b74      	ldr	r3, [pc, #464]	; (8002f74 <HAL_RCC_OscConfig+0x268>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	f7ff f8c8 	bl	8001f38 <HAL_InitTick>
        if(status != HAL_OK)
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d1b4      	bne.n	8002d16 <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dac:	682b      	ldr	r3, [r5, #0]
 8002dae:	07d8      	lsls	r0, r3, #31
 8002db0:	d45f      	bmi.n	8002e72 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db2:	682b      	ldr	r3, [r5, #0]
 8002db4:	0799      	lsls	r1, r3, #30
 8002db6:	f100 809e 	bmi.w	8002ef6 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dba:	682b      	ldr	r3, [r5, #0]
 8002dbc:	0718      	lsls	r0, r3, #28
 8002dbe:	f100 80db 	bmi.w	8002f78 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc2:	682b      	ldr	r3, [r5, #0]
 8002dc4:	0759      	lsls	r1, r3, #29
 8002dc6:	f100 8101 	bmi.w	8002fcc <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dca:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f040 816a 	bne.w	80030a6 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e79f      	b.n	8002d16 <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de4:	4303      	orrs	r3, r0
 8002de6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de8:	6863      	ldr	r3, [r4, #4]
 8002dea:	69ea      	ldr	r2, [r5, #28]
 8002dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002df4:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002df6:	2e00      	cmp	r6, #0
 8002df8:	d1c6      	bne.n	8002d88 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dfa:	f7ff fef7 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002dfe:	2800      	cmp	r0, #0
 8002e00:	d0c2      	beq.n	8002d88 <HAL_RCC_OscConfig+0x7c>
 8002e02:	e787      	b.n	8002d14 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e04:	69ab      	ldr	r3, [r5, #24]
 8002e06:	b31b      	cbz	r3, 8002e50 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e10:	f7ff f8d4 	bl	8001fbc <HAL_GetTick>
 8002e14:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	079a      	lsls	r2, r3, #30
 8002e1a:	d511      	bpl.n	8002e40 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	f043 0308 	orr.w	r3, r3, #8
 8002e22:	6023      	str	r3, [r4, #0]
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	6a2a      	ldr	r2, [r5, #32]
 8002e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e30:	6863      	ldr	r3, [r4, #4]
 8002e32:	69ea      	ldr	r2, [r5, #28]
 8002e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	e7b5      	b.n	8002dac <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e40:	f7ff f8bc 	bl	8001fbc <HAL_GetTick>
 8002e44:	eba0 0008 	sub.w	r0, r0, r8
 8002e48:	2802      	cmp	r0, #2
 8002e4a:	d9e4      	bls.n	8002e16 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002e4c:	2003      	movs	r0, #3
 8002e4e:	e762      	b.n	8002d16 <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e58:	f7ff f8b0 	bl	8001fbc <HAL_GetTick>
 8002e5c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	079b      	lsls	r3, r3, #30
 8002e62:	d5a3      	bpl.n	8002dac <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e64:	f7ff f8aa 	bl	8001fbc <HAL_GetTick>
 8002e68:	eba0 0008 	sub.w	r0, r0, r8
 8002e6c:	2802      	cmp	r0, #2
 8002e6e:	d9f6      	bls.n	8002e5e <HAL_RCC_OscConfig+0x152>
 8002e70:	e7ec      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e72:	2e08      	cmp	r6, #8
 8002e74:	d003      	beq.n	8002e7e <HAL_RCC_OscConfig+0x172>
 8002e76:	2e0c      	cmp	r6, #12
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e7a:	2f03      	cmp	r7, #3
 8002e7c:	d106      	bne.n	8002e8c <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	039a      	lsls	r2, r3, #14
 8002e82:	d596      	bpl.n	8002db2 <HAL_RCC_OscConfig+0xa6>
 8002e84:	686b      	ldr	r3, [r5, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d193      	bne.n	8002db2 <HAL_RCC_OscConfig+0xa6>
 8002e8a:	e743      	b.n	8002d14 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8c:	686b      	ldr	r3, [r5, #4]
 8002e8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e92:	d110      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x1aa>
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e9c:	f7ff f88e 	bl	8001fbc <HAL_GetTick>
 8002ea0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	039b      	lsls	r3, r3, #14
 8002ea6:	d484      	bmi.n	8002db2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ea8:	f7ff f888 	bl	8001fbc <HAL_GetTick>
 8002eac:	eba0 0008 	sub.w	r0, r0, r8
 8002eb0:	2864      	cmp	r0, #100	; 0x64
 8002eb2:	d9f6      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x196>
 8002eb4:	e7ca      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eba:	d104      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1ba>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec2:	6023      	str	r3, [r4, #0]
 8002ec4:	e7e6      	b.n	8002e94 <HAL_RCC_OscConfig+0x188>
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ecc:	6022      	str	r2, [r4, #0]
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ed4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1e0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002eda:	f7ff f86f 	bl	8001fbc <HAL_GetTick>
 8002ede:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	0398      	lsls	r0, r3, #14
 8002ee4:	f57f af65 	bpl.w	8002db2 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee8:	f7ff f868 	bl	8001fbc <HAL_GetTick>
 8002eec:	eba0 0008 	sub.w	r0, r0, r8
 8002ef0:	2864      	cmp	r0, #100	; 0x64
 8002ef2:	d9f5      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x1d4>
 8002ef4:	e7aa      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ef6:	2e04      	cmp	r6, #4
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
 8002efa:	2e0c      	cmp	r6, #12
 8002efc:	d110      	bne.n	8002f20 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002efe:	2f02      	cmp	r7, #2
 8002f00:	d10e      	bne.n	8002f20 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	0559      	lsls	r1, r3, #21
 8002f06:	d503      	bpl.n	8002f10 <HAL_RCC_OscConfig+0x204>
 8002f08:	68eb      	ldr	r3, [r5, #12]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f43f af02 	beq.w	8002d14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	6863      	ldr	r3, [r4, #4]
 8002f12:	692a      	ldr	r2, [r5, #16]
 8002f14:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002f18:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	e74c      	b.n	8002dba <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f20:	68eb      	ldr	r3, [r5, #12]
 8002f22:	b17b      	cbz	r3, 8002f44 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f2c:	f7ff f846 	bl	8001fbc <HAL_GetTick>
 8002f30:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	055a      	lsls	r2, r3, #21
 8002f36:	d4eb      	bmi.n	8002f10 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7ff f840 	bl	8001fbc <HAL_GetTick>
 8002f3c:	1bc0      	subs	r0, r0, r7
 8002f3e:	2802      	cmp	r0, #2
 8002f40:	d9f7      	bls.n	8002f32 <HAL_RCC_OscConfig+0x226>
 8002f42:	e783      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f4c:	f7ff f836 	bl	8001fbc <HAL_GetTick>
 8002f50:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	055b      	lsls	r3, r3, #21
 8002f56:	f57f af30 	bpl.w	8002dba <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7ff f82f 	bl	8001fbc <HAL_GetTick>
 8002f5e:	1bc0      	subs	r0, r0, r7
 8002f60:	2802      	cmp	r0, #2
 8002f62:	d9f6      	bls.n	8002f52 <HAL_RCC_OscConfig+0x246>
 8002f64:	e772      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	0800f4ac 	.word	0x0800f4ac
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	696b      	ldr	r3, [r5, #20]
 8002f7a:	b19b      	cbz	r3, 8002fa4 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002f7c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002f88:	f7ff f818 	bl	8001fbc <HAL_GetTick>
 8002f8c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f8e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002f92:	079a      	lsls	r2, r3, #30
 8002f94:	f53f af15 	bmi.w	8002dc2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f98:	f7ff f810 	bl	8001fbc <HAL_GetTick>
 8002f9c:	1bc0      	subs	r0, r0, r7
 8002f9e:	2802      	cmp	r0, #2
 8002fa0:	d9f5      	bls.n	8002f8e <HAL_RCC_OscConfig+0x282>
 8002fa2:	e753      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002fa4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002fa8:	f023 0301 	bic.w	r3, r3, #1
 8002fac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002fb0:	f7ff f804 	bl	8001fbc <HAL_GetTick>
 8002fb4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002fba:	079b      	lsls	r3, r3, #30
 8002fbc:	f57f af01 	bpl.w	8002dc2 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fffc 	bl	8001fbc <HAL_GetTick>
 8002fc4:	1bc0      	subs	r0, r0, r7
 8002fc6:	2802      	cmp	r0, #2
 8002fc8:	d9f5      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x2aa>
 8002fca:	e73f      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fcc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fce:	00df      	lsls	r7, r3, #3
 8002fd0:	d429      	bmi.n	8003026 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	65a3      	str	r3, [r4, #88]	; 0x58
 8002fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002fe4:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fe8:	4f85      	ldr	r7, [pc, #532]	; (8003200 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	05d8      	lsls	r0, r3, #23
 8002fee:	d51d      	bpl.n	800302c <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ff0:	68ab      	ldr	r3, [r5, #8]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12b      	bne.n	800304e <HAL_RCC_OscConfig+0x342>
 8002ff6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8003002:	f7fe ffdb 	bl	8001fbc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800300a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003010:	079a      	lsls	r2, r3, #30
 8003012:	d542      	bpl.n	800309a <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8003014:	f1b8 0f00 	cmp.w	r8, #0
 8003018:	f43f aed7 	beq.w	8002dca <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800301e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003022:	65a3      	str	r3, [r4, #88]	; 0x58
 8003024:	e6d1      	b.n	8002dca <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8003026:	f04f 0800 	mov.w	r8, #0
 800302a:	e7dd      	b.n	8002fe8 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003032:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003034:	f7fe ffc2 	bl	8001fbc <HAL_GetTick>
 8003038:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	05d9      	lsls	r1, r3, #23
 800303e:	d4d7      	bmi.n	8002ff0 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003040:	f7fe ffbc 	bl	8001fbc <HAL_GetTick>
 8003044:	eba0 0009 	sub.w	r0, r0, r9
 8003048:	2802      	cmp	r0, #2
 800304a:	d9f6      	bls.n	800303a <HAL_RCC_OscConfig+0x32e>
 800304c:	e6fe      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304e:	2b05      	cmp	r3, #5
 8003050:	d106      	bne.n	8003060 <HAL_RCC_OscConfig+0x354>
 8003052:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003056:	f043 0304 	orr.w	r3, r3, #4
 800305a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800305e:	e7ca      	b.n	8002ff6 <HAL_RCC_OscConfig+0x2ea>
 8003060:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800306c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8003070:	f022 0204 	bic.w	r2, r2, #4
 8003074:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1c2      	bne.n	8003002 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 800307c:	f7fe ff9e 	bl	8001fbc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003084:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003086:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800308a:	079b      	lsls	r3, r3, #30
 800308c:	d5c2      	bpl.n	8003014 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe ff95 	bl	8001fbc <HAL_GetTick>
 8003092:	1bc0      	subs	r0, r0, r7
 8003094:	4548      	cmp	r0, r9
 8003096:	d9f6      	bls.n	8003086 <HAL_RCC_OscConfig+0x37a>
 8003098:	e6d8      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe ff8f 	bl	8001fbc <HAL_GetTick>
 800309e:	1bc0      	subs	r0, r0, r7
 80030a0:	4548      	cmp	r0, r9
 80030a2:	d9b3      	bls.n	800300c <HAL_RCC_OscConfig+0x300>
 80030a4:	e6d2      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 808f 	bne.w	80031ca <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80030ac:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80030b0:	f003 0103 	and.w	r1, r3, #3
 80030b4:	4291      	cmp	r1, r2
 80030b6:	d124      	bne.n	8003102 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030b8:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80030ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030be:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80030c4:	d11d      	bne.n	8003102 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80030c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030cc:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80030d0:	d117      	bne.n	8003102 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030d2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80030d4:	3a07      	subs	r2, #7
 80030d6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80030da:	bf18      	it	ne
 80030dc:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030de:	4291      	cmp	r1, r2
 80030e0:	d10f      	bne.n	8003102 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80030e4:	0852      	lsrs	r2, r2, #1
 80030e6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80030ea:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ec:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030f2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80030f4:	0852      	lsrs	r2, r2, #1
 80030f6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80030fa:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030fc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003100:	d04a      	beq.n	8003198 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003102:	2e0c      	cmp	r6, #12
 8003104:	f43f ae06 	beq.w	8002d14 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	015f      	lsls	r7, r3, #5
 800310c:	f53f ae02 	bmi.w	8002d14 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	00de      	lsls	r6, r3, #3
 8003114:	f53f adfe 	bmi.w	8002d14 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311e:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8003120:	f7fe ff4c 	bl	8001fbc <HAL_GetTick>
 8003124:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	0198      	lsls	r0, r3, #6
 800312a:	d42f      	bmi.n	800318c <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800312c:	68e2      	ldr	r2, [r4, #12]
 800312e:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_RCC_OscConfig+0x4f8>)
 8003130:	4013      	ands	r3, r2
 8003132:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003134:	4313      	orrs	r3, r2
 8003136:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003138:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800313c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800313e:	3a01      	subs	r2, #1
 8003140:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003144:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8003146:	0912      	lsrs	r2, r2, #4
 8003148:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 800314c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800314e:	0852      	lsrs	r2, r2, #1
 8003150:	3a01      	subs	r2, #1
 8003152:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003156:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8003158:	0852      	lsrs	r2, r2, #1
 800315a:	3a01      	subs	r2, #1
 800315c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003160:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8003162:	6823      	ldr	r3, [r4, #0]
 8003164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003168:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316a:	68e3      	ldr	r3, [r4, #12]
 800316c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003170:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8003172:	f7fe ff23 	bl	8001fbc <HAL_GetTick>
 8003176:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	0199      	lsls	r1, r3, #6
 800317c:	f53f ae29 	bmi.w	8002dd2 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe ff1c 	bl	8001fbc <HAL_GetTick>
 8003184:	1b40      	subs	r0, r0, r5
 8003186:	2802      	cmp	r0, #2
 8003188:	d9f6      	bls.n	8003178 <HAL_RCC_OscConfig+0x46c>
 800318a:	e65f      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe ff16 	bl	8001fbc <HAL_GetTick>
 8003190:	1b80      	subs	r0, r0, r6
 8003192:	2802      	cmp	r0, #2
 8003194:	d9c7      	bls.n	8003126 <HAL_RCC_OscConfig+0x41a>
 8003196:	e659      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	019a      	lsls	r2, r3, #6
 800319c:	f53f ae19 	bmi.w	8002dd2 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a8:	68e3      	ldr	r3, [r4, #12]
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80031b0:	f7fe ff04 	bl	8001fbc <HAL_GetTick>
 80031b4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	f53f ae0a 	bmi.w	8002dd2 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe fefd 	bl	8001fbc <HAL_GetTick>
 80031c2:	1b40      	subs	r0, r0, r5
 80031c4:	2802      	cmp	r0, #2
 80031c6:	d9f6      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
 80031c8:	e640      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ca:	2e0c      	cmp	r6, #12
 80031cc:	f43f ada2 	beq.w	8002d14 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80031d8:	f7fe fef0 	bl	8001fbc <HAL_GetTick>
 80031dc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 80031e4:	d105      	bne.n	80031f2 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031e6:	68e1      	ldr	r1, [r4, #12]
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <HAL_RCC_OscConfig+0x4fc>)
 80031ea:	400a      	ands	r2, r1
 80031ec:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 80031ee:	4618      	mov	r0, r3
 80031f0:	e591      	b.n	8002d16 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fee3 	bl	8001fbc <HAL_GetTick>
 80031f6:	1b40      	subs	r0, r0, r5
 80031f8:	2802      	cmp	r0, #2
 80031fa:	d9f0      	bls.n	80031de <HAL_RCC_OscConfig+0x4d2>
 80031fc:	e626      	b.n	8002e4c <HAL_RCC_OscConfig+0x140>
 80031fe:	bf00      	nop
 8003200:	40007000 	.word	0x40007000
 8003204:	f99d808c 	.word	0xf99d808c
 8003208:	feeefffc 	.word	0xfeeefffc

0800320c <HAL_RCC_ClockConfig>:
{
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003212:	4604      	mov	r4, r0
 8003214:	b910      	cbnz	r0, 800321c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003216:	2001      	movs	r0, #1
}
 8003218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4a4b      	ldr	r2, [pc, #300]	; (800334c <HAL_RCC_ClockConfig+0x140>)
 800321e:	6813      	ldr	r3, [r2, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	428b      	cmp	r3, r1
 8003226:	d32c      	bcc.n	8003282 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	6821      	ldr	r1, [r4, #0]
 800322a:	0788      	lsls	r0, r1, #30
 800322c:	d434      	bmi.n	8003298 <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800322e:	07c9      	lsls	r1, r1, #31
 8003230:	d43f      	bmi.n	80032b2 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	078a      	lsls	r2, r1, #30
 8003236:	d468      	bmi.n	800330a <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4a44      	ldr	r2, [pc, #272]	; (800334c <HAL_RCC_ClockConfig+0x140>)
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	42ab      	cmp	r3, r5
 8003242:	d86f      	bhi.n	8003324 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003244:	f011 0f04 	tst.w	r1, #4
 8003248:	4d41      	ldr	r5, [pc, #260]	; (8003350 <HAL_RCC_ClockConfig+0x144>)
 800324a:	d177      	bne.n	800333c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	070b      	lsls	r3, r1, #28
 800324e:	d506      	bpl.n	800325e <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003250:	68ab      	ldr	r3, [r5, #8]
 8003252:	6922      	ldr	r2, [r4, #16]
 8003254:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003258:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800325c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800325e:	f7ff fd07 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
 8003262:	68ab      	ldr	r3, [r5, #8]
 8003264:	4a3b      	ldr	r2, [pc, #236]	; (8003354 <HAL_RCC_ClockConfig+0x148>)
 8003266:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800326a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	40d8      	lsrs	r0, r3
 8003276:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_RCC_ClockConfig+0x14c>)
 8003278:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800327a:	4b38      	ldr	r3, [pc, #224]	; (800335c <HAL_RCC_ClockConfig+0x150>)
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	f7fe be5b 	b.w	8001f38 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	6813      	ldr	r3, [r2, #0]
 8003284:	f023 0307 	bic.w	r3, r3, #7
 8003288:	430b      	orrs	r3, r1
 800328a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328c:	6813      	ldr	r3, [r2, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	428b      	cmp	r3, r1
 8003294:	d1bf      	bne.n	8003216 <HAL_RCC_ClockConfig+0xa>
 8003296:	e7c7      	b.n	8003228 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <HAL_RCC_ClockConfig+0x144>)
 800329a:	68a0      	ldr	r0, [r4, #8]
 800329c:	6893      	ldr	r3, [r2, #8]
 800329e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a2:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a4:	bf81      	itttt	hi
 80032a6:	6893      	ldrhi	r3, [r2, #8]
 80032a8:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 80032ac:	4303      	orrhi	r3, r0
 80032ae:	6093      	strhi	r3, [r2, #8]
 80032b0:	e7bd      	b.n	800322e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b2:	6862      	ldr	r2, [r4, #4]
 80032b4:	4e26      	ldr	r6, [pc, #152]	; (8003350 <HAL_RCC_ClockConfig+0x144>)
 80032b6:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032b8:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ba:	d11a      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	d0a9      	beq.n	8003216 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	68b3      	ldr	r3, [r6, #8]
 80032c4:	f023 0303 	bic.w	r3, r3, #3
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80032cc:	f7fe fe76 	bl	8001fbc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80032d4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	68b3      	ldr	r3, [r6, #8]
 80032d8:	6862      	ldr	r2, [r4, #4]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80032e2:	d0a6      	beq.n	8003232 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e4:	f7fe fe6a 	bl	8001fbc <HAL_GetTick>
 80032e8:	1bc0      	subs	r0, r0, r7
 80032ea:	4540      	cmp	r0, r8
 80032ec:	d9f3      	bls.n	80032d6 <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 80032ee:	2003      	movs	r0, #3
 80032f0:	e792      	b.n	8003218 <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	2a02      	cmp	r2, #2
 80032f4:	d102      	bne.n	80032fc <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80032fa:	e7e1      	b.n	80032c0 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032fc:	b912      	cbnz	r2, 8003304 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032fe:	f013 0f02 	tst.w	r3, #2
 8003302:	e7dd      	b.n	80032c0 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003304:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003308:	e7da      	b.n	80032c0 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800330a:	4a11      	ldr	r2, [pc, #68]	; (8003350 <HAL_RCC_ClockConfig+0x144>)
 800330c:	68a0      	ldr	r0, [r4, #8]
 800330e:	6893      	ldr	r3, [r2, #8]
 8003310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003314:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003316:	bf3f      	itttt	cc
 8003318:	6893      	ldrcc	r3, [r2, #8]
 800331a:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 800331e:	4303      	orrcc	r3, r0
 8003320:	6093      	strcc	r3, [r2, #8]
 8003322:	e789      	b.n	8003238 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003324:	6813      	ldr	r3, [r2, #0]
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	432b      	orrs	r3, r5
 800332c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	42ab      	cmp	r3, r5
 8003336:	f47f af6e 	bne.w	8003216 <HAL_RCC_ClockConfig+0xa>
 800333a:	e783      	b.n	8003244 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800333c:	68ab      	ldr	r3, [r5, #8]
 800333e:	68e2      	ldr	r2, [r4, #12]
 8003340:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003344:	4313      	orrs	r3, r2
 8003346:	60ab      	str	r3, [r5, #8]
 8003348:	e780      	b.n	800324c <HAL_RCC_ClockConfig+0x40>
 800334a:	bf00      	nop
 800334c:	40022000 	.word	0x40022000
 8003350:	40021000 	.word	0x40021000
 8003354:	0800f4ac 	.word	0x0800f4ac
 8003358:	20000000 	.word	0x20000000
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003362:	4a06      	ldr	r2, [pc, #24]	; (800337c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800336a:	5cd3      	ldrb	r3, [r2, r3]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336e:	6810      	ldr	r0, [r2, #0]
 8003370:	f003 031f 	and.w	r3, r3, #31
}
 8003374:	40d8      	lsrs	r0, r3
 8003376:	4770      	bx	lr
 8003378:	40021000 	.word	0x40021000
 800337c:	0800f4bc 	.word	0x0800f4bc
 8003380:	20000000 	.word	0x20000000

08003384 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003386:	4a06      	ldr	r2, [pc, #24]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800338e:	5cd3      	ldrb	r3, [r2, r3]
 8003390:	4a04      	ldr	r2, [pc, #16]	; (80033a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003392:	6810      	ldr	r0, [r2, #0]
 8003394:	f003 031f 	and.w	r3, r3, #31
}
 8003398:	40d8      	lsrs	r0, r3
 800339a:	4770      	bx	lr
 800339c:	40021000 	.word	0x40021000
 80033a0:	0800f4bc 	.word	0x0800f4bc
 80033a4:	20000000 	.word	0x20000000

080033a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033aa:	4c42      	ldr	r4, [pc, #264]	; (80034b4 <RCCEx_PLLSAI1_Config+0x10c>)
 80033ac:	68e2      	ldr	r2, [r4, #12]
 80033ae:	0793      	lsls	r3, r2, #30
{
 80033b0:	4605      	mov	r5, r0
 80033b2:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033b6:	d029      	beq.n	800340c <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033b8:	68e2      	ldr	r2, [r4, #12]
 80033ba:	f002 0203 	and.w	r2, r2, #3
 80033be:	4282      	cmp	r2, r0
 80033c0:	d13c      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x94>
       ||
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	d03a      	beq.n	800343c <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033c6:	68e3      	ldr	r3, [r4, #12]
       ||
 80033c8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80033ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80033ce:	3301      	adds	r3, #1
       ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d133      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe fdee 	bl	8001fbc <HAL_GetTick>
 80033e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	011a      	lsls	r2, r3, #4
 80033e6:	d432      	bmi.n	800344e <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033e8:	68aa      	ldr	r2, [r5, #8]
 80033ea:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	d035      	beq.n	800345c <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f0:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f2:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f4:	d14d      	bne.n	8003492 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f6:	6929      	ldr	r1, [r5, #16]
 80033f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033fc:	0849      	lsrs	r1, r1, #1
 80033fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003402:	3901      	subs	r1, #1
 8003404:	4313      	orrs	r3, r2
 8003406:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800340a:	e031      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 800340c:	2802      	cmp	r0, #2
 800340e:	d011      	beq.n	8003434 <RCCEx_PLLSAI1_Config+0x8c>
 8003410:	2803      	cmp	r0, #3
 8003412:	d015      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x98>
 8003414:	2801      	cmp	r0, #1
 8003416:	d111      	bne.n	800343c <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003418:	6822      	ldr	r2, [r4, #0]
 800341a:	0797      	lsls	r7, r2, #30
 800341c:	d51d      	bpl.n	800345a <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800341e:	68e2      	ldr	r2, [r4, #12]
 8003420:	6869      	ldr	r1, [r5, #4]
 8003422:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003426:	3901      	subs	r1, #1
 8003428:	ea42 0300 	orr.w	r3, r2, r0
 800342c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8003430:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 8003432:	e7cf      	b.n	80033d4 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800343a:	d1f0      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 800343c:	2001      	movs	r0, #1
 800343e:	e00c      	b.n	800345a <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	0391      	lsls	r1, r2, #14
 8003444:	d4eb      	bmi.n	800341e <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 800344c:	e7f5      	b.n	800343a <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800344e:	f7fe fdb5 	bl	8001fbc <HAL_GetTick>
 8003452:	1bc0      	subs	r0, r0, r7
 8003454:	2802      	cmp	r0, #2
 8003456:	d9c4      	bls.n	80033e2 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 8003458:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 800345a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	68e9      	ldr	r1, [r5, #12]
 8003460:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	0909      	lsrs	r1, r1, #4
 800346a:	4313      	orrs	r3, r2
 800346c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003470:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003478:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800347a:	f7fe fd9f 	bl	8001fbc <HAL_GetTick>
 800347e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003480:	6823      	ldr	r3, [r4, #0]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	d510      	bpl.n	80034a8 <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	69aa      	ldr	r2, [r5, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	6123      	str	r3, [r4, #16]
 800348e:	2000      	movs	r0, #0
  return status;
 8003490:	e7e3      	b.n	800345a <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003492:	6969      	ldr	r1, [r5, #20]
 8003494:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003498:	0849      	lsrs	r1, r1, #1
 800349a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800349e:	3901      	subs	r1, #1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80034a6:	e7e3      	b.n	8003470 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a8:	f7fe fd88 	bl	8001fbc <HAL_GetTick>
 80034ac:	1b80      	subs	r0, r0, r6
 80034ae:	2802      	cmp	r0, #2
 80034b0:	d9e6      	bls.n	8003480 <RCCEx_PLLSAI1_Config+0xd8>
 80034b2:	e7d1      	b.n	8003458 <RCCEx_PLLSAI1_Config+0xb0>
 80034b4:	40021000 	.word	0x40021000

080034b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034ba:	4c3b      	ldr	r4, [pc, #236]	; (80035a8 <RCCEx_PLLSAI2_Config+0xf0>)
 80034bc:	68e2      	ldr	r2, [r4, #12]
 80034be:	0793      	lsls	r3, r2, #30
{
 80034c0:	4605      	mov	r5, r0
 80034c2:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034c4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034c6:	d026      	beq.n	8003516 <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034c8:	68e2      	ldr	r2, [r4, #12]
 80034ca:	f002 0203 	and.w	r2, r2, #3
 80034ce:	4282      	cmp	r2, r0
 80034d0:	d139      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0x8e>
       ||
 80034d2:	2a00      	cmp	r2, #0
 80034d4:	d037      	beq.n	8003546 <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034d6:	68e3      	ldr	r3, [r4, #12]
       ||
 80034d8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034da:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80034de:	3301      	adds	r3, #1
       ||
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d130      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ec:	f7fe fd66 	bl	8001fbc <HAL_GetTick>
 80034f0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	009a      	lsls	r2, r3, #2
 80034f6:	d42f      	bmi.n	8003558 <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034f8:	68a9      	ldr	r1, [r5, #8]
 80034fa:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 80034fc:	b39e      	cbz	r6, 8003566 <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80034fe:	6963      	ldr	r3, [r4, #20]
 8003500:	692a      	ldr	r2, [r5, #16]
 8003502:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003506:	0852      	lsrs	r2, r2, #1
 8003508:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800350c:	3a01      	subs	r2, #1
 800350e:	430b      	orrs	r3, r1
 8003510:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003514:	e031      	b.n	800357a <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 8003516:	2802      	cmp	r0, #2
 8003518:	d011      	beq.n	800353e <RCCEx_PLLSAI2_Config+0x86>
 800351a:	2803      	cmp	r0, #3
 800351c:	d015      	beq.n	800354a <RCCEx_PLLSAI2_Config+0x92>
 800351e:	2801      	cmp	r0, #1
 8003520:	d111      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003522:	6822      	ldr	r2, [r4, #0]
 8003524:	0797      	lsls	r7, r2, #30
 8003526:	d51d      	bpl.n	8003564 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003528:	68e2      	ldr	r2, [r4, #12]
 800352a:	6869      	ldr	r1, [r5, #4]
 800352c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8003530:	3901      	subs	r1, #1
 8003532:	ea42 0300 	orr.w	r3, r2, r0
 8003536:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800353a:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 800353c:	e7d2      	b.n	80034e4 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003544:	d1f0      	bne.n	8003528 <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 8003546:	2001      	movs	r0, #1
 8003548:	e00c      	b.n	8003564 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800354a:	6822      	ldr	r2, [r4, #0]
 800354c:	0391      	lsls	r1, r2, #14
 800354e:	d4eb      	bmi.n	8003528 <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003550:	6822      	ldr	r2, [r4, #0]
 8003552:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003556:	e7f5      	b.n	8003544 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003558:	f7fe fd30 	bl	8001fbc <HAL_GetTick>
 800355c:	1bc0      	subs	r0, r0, r7
 800355e:	2802      	cmp	r0, #2
 8003560:	d9c7      	bls.n	80034f2 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 8003562:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 8003564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003566:	6963      	ldr	r3, [r4, #20]
 8003568:	68ea      	ldr	r2, [r5, #12]
 800356a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800356e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003572:	0912      	lsrs	r2, r2, #4
 8003574:	430b      	orrs	r3, r1
 8003576:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800357a:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8003584:	f7fe fd1a 	bl	8001fbc <HAL_GetTick>
 8003588:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800358a:	6823      	ldr	r3, [r4, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	d505      	bpl.n	800359c <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003590:	6963      	ldr	r3, [r4, #20]
 8003592:	696a      	ldr	r2, [r5, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	6163      	str	r3, [r4, #20]
 8003598:	2000      	movs	r0, #0
  return status;
 800359a:	e7e3      	b.n	8003564 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800359c:	f7fe fd0e 	bl	8001fbc <HAL_GetTick>
 80035a0:	1b80      	subs	r0, r0, r6
 80035a2:	2802      	cmp	r0, #2
 80035a4:	d9f1      	bls.n	800358a <RCCEx_PLLSAI2_Config+0xd2>
 80035a6:	e7dc      	b.n	8003562 <RCCEx_PLLSAI2_Config+0xaa>
 80035a8:	40021000 	.word	0x40021000

080035ac <HAL_RCCEx_PeriphCLKConfig>:
{
 80035ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b0:	6806      	ldr	r6, [r0, #0]
 80035b2:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80035b6:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035b8:	d009      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035ba:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80035bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80035c0:	d022      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035c2:	d813      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80035c4:	b331      	cbz	r1, 8003614 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80035c6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80035ca:	d02a      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035cc:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	04d8      	lsls	r0, r3, #19
 80035d2:	d509      	bpl.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 80035d4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80035d6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80035da:	d02c      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80035dc:	d826      	bhi.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80035de:	b381      	cbz	r1, 8003642 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80035e0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80035e4:	d072      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x120>
 80035e6:	2601      	movs	r6, #1
 80035e8:	4635      	mov	r5, r6
 80035ea:	e039      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80035ec:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80035f0:	d1ec      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035f2:	4a3c      	ldr	r2, [pc, #240]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 80035f4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80035f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80035fe:	430b      	orrs	r3, r1
 8003600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003604:	2600      	movs	r6, #0
 8003606:	e7e2      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003608:	4a36      	ldr	r2, [pc, #216]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800360a:	68d3      	ldr	r3, [r2, #12]
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003612:	e7ee      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003614:	3004      	adds	r0, #4
 8003616:	f7ff fec7 	bl	80033a8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800361a:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800361c:	2800      	cmp	r0, #0
 800361e:	d1d6      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22>
 8003620:	e7e7      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003622:	2100      	movs	r1, #0
 8003624:	3020      	adds	r0, #32
 8003626:	f7ff ff47 	bl	80034b8 <RCCEx_PLLSAI2_Config>
 800362a:	e7f6      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800362c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8003630:	d1d9      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003632:	4635      	mov	r5, r6
 8003634:	e009      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003636:	4a2b      	ldr	r2, [pc, #172]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003638:	68d3      	ldr	r3, [r2, #12]
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	60d3      	str	r3, [r2, #12]
      break;
 8003640:	e7f7      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003642:	1d20      	adds	r0, r4, #4
 8003644:	f7ff feb0 	bl	80033a8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003648:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800364a:	2d00      	cmp	r5, #0
 800364c:	d144      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003650:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003652:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003656:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800365a:	430b      	orrs	r3, r1
 800365c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	0399      	lsls	r1, r3, #14
 8003664:	f140 815d 	bpl.w	8003922 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003668:	4f1e      	ldr	r7, [pc, #120]	; (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800366a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800366c:	00da      	lsls	r2, r3, #3
 800366e:	d435      	bmi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003670:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003676:	65bb      	str	r3, [r7, #88]	; 0x58
 8003678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003682:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003686:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80036e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800368a:	f8d9 3000 	ldr.w	r3, [r9]
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8003696:	f7fe fc91 	bl	8001fbc <HAL_GetTick>
 800369a:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800369c:	f8d9 3000 	ldr.w	r3, [r9]
 80036a0:	05db      	lsls	r3, r3, #23
 80036a2:	d523      	bpl.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 80036a4:	bb4d      	cbnz	r5, 80036fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036aa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80036ae:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80036b2:	f040 810e 	bne.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80036ba:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80036c8:	4635      	mov	r5, r6
 80036ca:	e016      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036cc:	2100      	movs	r1, #0
 80036ce:	f104 0020 	add.w	r0, r4, #32
 80036d2:	f7ff fef1 	bl	80034b8 <RCCEx_PLLSAI2_Config>
 80036d6:	e7b7      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80036d8:	462e      	mov	r6, r5
 80036da:	e7c1      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 80036dc:	f04f 0800 	mov.w	r8, #0
 80036e0:	e7d1      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fe fc66 	bl	8001fbc <HAL_GetTick>
 80036f0:	eba0 000a 	sub.w	r0, r0, sl
 80036f4:	2802      	cmp	r0, #2
 80036f6:	d9d1      	bls.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 80036f8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80036fa:	f1b8 0f00 	cmp.w	r8, #0
 80036fe:	d003      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003706:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003708:	6823      	ldr	r3, [r4, #0]
 800370a:	07da      	lsls	r2, r3, #31
 800370c:	d508      	bpl.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370e:	499b      	ldr	r1, [pc, #620]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003710:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003712:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003716:	f022 0203 	bic.w	r2, r2, #3
 800371a:	4302      	orrs	r2, r0
 800371c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003720:	079f      	lsls	r7, r3, #30
 8003722:	d508      	bpl.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003724:	4995      	ldr	r1, [pc, #596]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003726:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003728:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800372c:	f022 020c 	bic.w	r2, r2, #12
 8003730:	4302      	orrs	r2, r0
 8003732:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003736:	075e      	lsls	r6, r3, #29
 8003738:	d508      	bpl.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800373a:	4990      	ldr	r1, [pc, #576]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800373c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800373e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003742:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003746:	4302      	orrs	r2, r0
 8003748:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800374c:	0718      	lsls	r0, r3, #28
 800374e:	d508      	bpl.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003750:	498a      	ldr	r1, [pc, #552]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003752:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8003754:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003758:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800375c:	4302      	orrs	r2, r0
 800375e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003762:	06d9      	lsls	r1, r3, #27
 8003764:	d508      	bpl.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003766:	4985      	ldr	r1, [pc, #532]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003768:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800376a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800376e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003772:	4302      	orrs	r2, r0
 8003774:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003778:	069a      	lsls	r2, r3, #26
 800377a:	d508      	bpl.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800377c:	497f      	ldr	r1, [pc, #508]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800377e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003780:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003784:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003788:	4302      	orrs	r2, r0
 800378a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800378e:	059f      	lsls	r7, r3, #22
 8003790:	d508      	bpl.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003792:	497a      	ldr	r1, [pc, #488]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003794:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003796:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800379a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800379e:	4302      	orrs	r2, r0
 80037a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037a4:	055e      	lsls	r6, r3, #21
 80037a6:	d508      	bpl.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037a8:	4974      	ldr	r1, [pc, #464]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037aa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80037ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037b0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80037b4:	4302      	orrs	r2, r0
 80037b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ba:	0658      	lsls	r0, r3, #25
 80037bc:	d508      	bpl.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037be:	496f      	ldr	r1, [pc, #444]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037c0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80037c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037c6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80037ca:	4302      	orrs	r2, r0
 80037cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037d0:	0619      	lsls	r1, r3, #24
 80037d2:	d508      	bpl.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037d4:	4969      	ldr	r1, [pc, #420]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037dc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80037e0:	4302      	orrs	r2, r0
 80037e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037e6:	05da      	lsls	r2, r3, #23
 80037e8:	d508      	bpl.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037ea:	4964      	ldr	r1, [pc, #400]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037f2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80037f6:	4302      	orrs	r2, r0
 80037f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037fc:	049b      	lsls	r3, r3, #18
 80037fe:	d510      	bpl.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003800:	4a5e      	ldr	r2, [pc, #376]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003802:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003804:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003808:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800380c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800380e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003812:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003816:	f040 8086 	bne.w	8003926 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800381a:	68d3      	ldr	r3, [r2, #12]
 800381c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003820:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	031f      	lsls	r7, r3, #12
 8003826:	d50f      	bpl.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 800382a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800382c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003830:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003834:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003836:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800383a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800383e:	d17e      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003840:	68d3      	ldr	r3, [r2, #12]
 8003842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003846:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	035e      	lsls	r6, r3, #13
 800384c:	d50f      	bpl.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800384e:	4a4b      	ldr	r2, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003850:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003852:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003856:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800385a:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800385c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003864:	d176      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003866:	68d3      	ldr	r3, [r2, #12]
 8003868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800386c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	0458      	lsls	r0, r3, #17
 8003872:	d512      	bpl.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003874:	4941      	ldr	r1, [pc, #260]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8003876:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003878:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800387c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003880:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003882:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800388a:	d16e      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800388c:	2102      	movs	r1, #2
 800388e:	1d20      	adds	r0, r4, #4
 8003890:	f7ff fd8a 	bl	80033a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003894:	2800      	cmp	r0, #0
 8003896:	bf18      	it	ne
 8003898:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	0411      	lsls	r1, r2, #16
 800389e:	d508      	bpl.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038a0:	4936      	ldr	r1, [pc, #216]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80038a2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80038a4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ac:	4303      	orrs	r3, r0
 80038ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038b2:	03d3      	lsls	r3, r2, #15
 80038b4:	d509      	bpl.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038b6:	4a31      	ldr	r2, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80038b8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80038bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038c4:	430b      	orrs	r3, r1
 80038c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80038ca:	4628      	mov	r0, r5
 80038cc:	b002      	add	sp, #8
 80038ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f43f aeef 	beq.w	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80038dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038ec:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038f4:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80038fa:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038fe:	f57f aeda 	bpl.w	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8003902:	f7fe fb5b 	bl	8001fbc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003906:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800390a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003910:	0799      	lsls	r1, r3, #30
 8003912:	f53f aed0 	bmi.w	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003916:	f7fe fb51 	bl	8001fbc <HAL_GetTick>
 800391a:	1b40      	subs	r0, r0, r5
 800391c:	4548      	cmp	r0, r9
 800391e:	d9f5      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003920:	e6ea      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003922:	4635      	mov	r5, r6
 8003924:	e6f0      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003926:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800392a:	f47f af7a 	bne.w	8003822 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392e:	2101      	movs	r1, #1
 8003930:	1d20      	adds	r0, r4, #4
 8003932:	f7ff fd39 	bl	80033a8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8003936:	2800      	cmp	r0, #0
 8003938:	bf18      	it	ne
 800393a:	4605      	movne	r5, r0
 800393c:	e771      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800393e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003942:	d181      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003944:	2101      	movs	r1, #1
 8003946:	1d20      	adds	r0, r4, #4
 8003948:	f7ff fd2e 	bl	80033a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800394c:	2800      	cmp	r0, #0
 800394e:	bf18      	it	ne
 8003950:	4605      	movne	r5, r0
 8003952:	e779      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003954:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003958:	d189      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800395a:	2101      	movs	r1, #1
 800395c:	1d20      	adds	r0, r4, #4
 800395e:	f7ff fd23 	bl	80033a8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003962:	2800      	cmp	r0, #0
 8003964:	bf18      	it	ne
 8003966:	4605      	movne	r5, r0
 8003968:	e781      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800396a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800396e:	d194      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003970:	2102      	movs	r1, #2
 8003972:	f104 0020 	add.w	r0, r4, #32
 8003976:	f7ff fd9f 	bl	80034b8 <RCCEx_PLLSAI2_Config>
 800397a:	e78b      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800397c:	40021000 	.word	0x40021000

08003980 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003984:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003986:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003988:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 800398a:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800398e:	4605      	mov	r5, r0
 8003990:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003992:	f7fe fb13 	bl	8001fbc <HAL_GetTick>
 8003996:	443c      	add	r4, r7
 8003998:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 800399a:	f7fe fb0f 	bl	8001fbc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800399e:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039a0:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2223      	movs	r2, #35	; 0x23
 80039a8:	4353      	muls	r3, r2
 80039aa:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 80039ac:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039ae:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 80039b0:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80039b2:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 80039b4:	6893      	ldr	r3, [r2, #8]
 80039b6:	4033      	ands	r3, r6
 80039b8:	d101      	bne.n	80039be <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
    }
  }

  return HAL_OK;
 80039ba:	4618      	mov	r0, r3
 80039bc:	e038      	b.n	8003a30 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039be:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 80039c2:	bf01      	itttt	eq
 80039c4:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 80039c8:	b2db      	uxtbeq	r3, r3
 80039ca:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80039ce:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 80039d2:	1c7b      	adds	r3, r7, #1
 80039d4:	d0ee      	beq.n	80039b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039d6:	f7fe faf1 	bl	8001fbc <HAL_GetTick>
 80039da:	eba0 0008 	sub.w	r0, r0, r8
 80039de:	42a0      	cmp	r0, r4
 80039e0:	d329      	bcc.n	8003a36 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039e2:	682b      	ldr	r3, [r5, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ea:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039ec:	686a      	ldr	r2, [r5, #4]
 80039ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80039f2:	d10a      	bne.n	8003a0a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
 80039f4:	68aa      	ldr	r2, [r5, #8]
 80039f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80039fa:	d002      	beq.n	8003a02 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x82>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003a00:	d103      	bne.n	8003a0a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
          __HAL_SPI_DISABLE(hspi);
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a0a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003a0c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003a10:	d107      	bne.n	8003a22 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
          SPI_RESET_CRC(hspi);
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a20:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003a2e:	2003      	movs	r0, #3
}
 8003a30:	b003      	add	sp, #12
 8003a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8003a36:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003a38:	2b00      	cmp	r3, #0
      count--;
 8003a3a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003a3c:	bf08      	it	eq
 8003a3e:	2400      	moveq	r4, #0
      count--;
 8003a40:	3b01      	subs	r3, #1
 8003a42:	e7b5      	b.n	80039b0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8003a44:	20000000 	.word	0x20000000

08003a48 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a4a:	460e      	mov	r6, r1
 8003a4c:	4614      	mov	r4, r2
 8003a4e:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a50:	f7fe fab4 	bl	8001fbc <HAL_GetTick>
 8003a54:	4434      	add	r4, r6
 8003a56:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8003a58:	f7fe fab0 	bl	8001fbc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8003a64:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a66:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a68:	682a      	ldr	r2, [r5, #0]
      count--;
 8003a6a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a6c:	6893      	ldr	r3, [r2, #8]
 8003a6e:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003a72:	d101      	bne.n	8003a78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 8003a74:	4618      	mov	r0, r3
 8003a76:	e02d      	b.n	8003ad4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	1c73      	adds	r3, r6, #1
 8003a7a:	d0f7      	beq.n	8003a6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a7c:	f7fe fa9e 	bl	8001fbc <HAL_GetTick>
 8003a80:	1bc0      	subs	r0, r0, r7
 8003a82:	42a0      	cmp	r0, r4
 8003a84:	d328      	bcc.n	8003ad8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a86:	682b      	ldr	r3, [r5, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a8e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a90:	686a      	ldr	r2, [r5, #4]
 8003a92:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003a96:	d10a      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 8003a98:	68aa      	ldr	r2, [r5, #8]
 8003a9a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003a9e:	d002      	beq.n	8003aa6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003aa4:	d103      	bne.n	8003aae <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aac:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003aae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8003ab0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003ab4:	d107      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ac4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003acc:	2300      	movs	r3, #0
 8003ace:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003ad2:	2003      	movs	r0, #3
}
 8003ad4:	b003      	add	sp, #12
 8003ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8003ad8:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003ada:	2b00      	cmp	r3, #0
      count--;
 8003adc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003ade:	bf08      	it	eq
 8003ae0:	2400      	moveq	r4, #0
      count--;
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	e7c0      	b.n	8003a68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 8003ae6:	bf00      	nop
 8003ae8:	20000000 	.word	0x20000000

08003aec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003aee:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003af0:	9201      	str	r2, [sp, #4]
{
 8003af2:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003af4:	460a      	mov	r2, r1
 8003af6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8003afa:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003afc:	f7ff ff40 	bl	8003980 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003b00:	9b01      	ldr	r3, [sp, #4]
 8003b02:	b128      	cbz	r0, 8003b10 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b04:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b06:	f043 0320 	orr.w	r3, r3, #32
 8003b0a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b0c:	2003      	movs	r0, #3
 8003b0e:	e010      	b.n	8003b32 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b10:	461a      	mov	r2, r3
 8003b12:	4629      	mov	r1, r5
 8003b14:	4620      	mov	r0, r4
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	f7ff ff96 	bl	8003a48 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003b1c:	9b01      	ldr	r3, [sp, #4]
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d1f0      	bne.n	8003b04 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b22:	462a      	mov	r2, r5
 8003b24:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b28:	4620      	mov	r0, r4
 8003b2a:	f7ff ff29 	bl	8003980 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003b2e:	2800      	cmp	r0, #0
 8003b30:	d1e8      	bne.n	8003b04 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8003b32:	b003      	add	sp, #12
 8003b34:	bd30      	pop	{r4, r5, pc}

08003b36 <HAL_SPI_Init>:
{
 8003b36:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8003b38:	4604      	mov	r4, r0
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d05f      	beq.n	8003bfe <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d158      	bne.n	8003bf6 <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b44:	6842      	ldr	r2, [r0, #4]
 8003b46:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003b4a:	d000      	beq.n	8003b4e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b4c:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b52:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003b56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b5a:	b923      	cbnz	r3, 8003b66 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8003b5c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003b60:	4620      	mov	r0, r4
 8003b62:	f7fd fef5 	bl	8001950 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003b66:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b68:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003b70:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b72:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8003b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b7a:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	d83f      	bhi.n	8003c02 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b86:	d000      	beq.n	8003b8a <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b88:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	68a6      	ldr	r6, [r4, #8]
 8003b8e:	69a2      	ldr	r2, [r4, #24]
 8003b90:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003b94:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003b98:	4333      	orrs	r3, r6
 8003b9a:	6926      	ldr	r6, [r4, #16]
 8003b9c:	f006 0602 	and.w	r6, r6, #2
 8003ba0:	4333      	orrs	r3, r6
 8003ba2:	6966      	ldr	r6, [r4, #20]
 8003ba4:	f006 0601 	and.w	r6, r6, #1
 8003ba8:	4333      	orrs	r3, r6
 8003baa:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8003bae:	4333      	orrs	r3, r6
 8003bb0:	69e6      	ldr	r6, [r4, #28]
 8003bb2:	f006 0638 	and.w	r6, r6, #56	; 0x38
 8003bb6:	4333      	orrs	r3, r6
 8003bb8:	6a26      	ldr	r6, [r4, #32]
 8003bba:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8003bbe:	4333      	orrs	r3, r6
 8003bc0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bc2:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 8003bc6:	4333      	orrs	r3, r6
 8003bc8:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bca:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bce:	f006 0608 	and.w	r6, r6, #8
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	4333      	orrs	r3, r6
 8003bd8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003bdc:	0c12      	lsrs	r2, r2, #16
 8003bde:	430b      	orrs	r3, r1
 8003be0:	f002 0204 	and.w	r2, r2, #4
 8003be4:	4313      	orrs	r3, r2
 8003be6:	4303      	orrs	r3, r0
 8003be8:	606b      	str	r3, [r5, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bea:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003bec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bee:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bf0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bf8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bfc:	e7a7      	b.n	8003b4e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003bfe:	2001      	movs	r0, #1
 8003c00:	e7f8      	b.n	8003bf4 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c02:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c04:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 8003c08:	e7bd      	b.n	8003b86 <HAL_SPI_Init+0x50>

08003c0a <HAL_SPI_Transmit>:
{
 8003c0a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c0e:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8003c10:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003c14:	2b01      	cmp	r3, #1
{
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
 8003c1a:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8003c1c:	f000 80bc 	beq.w	8003d98 <HAL_SPI_Transmit+0x18e>
 8003c20:	2301      	movs	r3, #1
 8003c22:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003c26:	f7fe f9c9 	bl	8001fbc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c2a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003c2e:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003c30:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003c32:	fa5f f983 	uxtb.w	r9, r3
 8003c36:	f040 80ac 	bne.w	8003d92 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	d069      	beq.n	8003d12 <HAL_SPI_Transmit+0x108>
 8003c3e:	f1b8 0f00 	cmp.w	r8, #0
 8003c42:	d066      	beq.n	8003d12 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c44:	2303      	movs	r3, #3
 8003c46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8003c4e:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8003c52:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c56:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c58:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c5c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c60:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8003c62:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003c64:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8003c6a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6e:	d107      	bne.n	8003c80 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c76:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c7e:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c80:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c82:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c84:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003c86:	bf5e      	ittt	pl
 8003c88:	6833      	ldrpl	r3, [r6, #0]
 8003c8a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003c8e:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c90:	68e3      	ldr	r3, [r4, #12]
 8003c92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c96:	d943      	bls.n	8003d20 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c98:	b112      	cbz	r2, 8003ca0 <HAL_SPI_Transmit+0x96>
 8003c9a:	f1b8 0f01 	cmp.w	r8, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ca0:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003ca4:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca6:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ca8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003cb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	b9b3      	cbnz	r3, 8003ce4 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cb6:	4652      	mov	r2, sl
 8003cb8:	4639      	mov	r1, r7
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f7ff ff16 	bl	8003aec <SPI_EndRxTxTransaction>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d163      	bne.n	8003d8c <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	b933      	cbnz	r3, 8003cd6 <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cc8:	9301      	str	r3, [sp, #4]
 8003cca:	6823      	ldr	r3, [r4, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	9201      	str	r2, [sp, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cd6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003cd8:	b9db      	cbnz	r3, 8003d12 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ce0:	4699      	mov	r9, r3
 8003ce2:	e016      	b.n	8003d12 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ce4:	6822      	ldr	r2, [r4, #0]
 8003ce6:	6893      	ldr	r3, [r2, #8]
 8003ce8:	079d      	lsls	r5, r3, #30
 8003cea:	d505      	bpl.n	8003cf8 <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cee:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003cf2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8003cf6:	e7d7      	b.n	8003ca8 <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cf8:	f7fe f960 	bl	8001fbc <HAL_GetTick>
 8003cfc:	eba0 000a 	sub.w	r0, r0, sl
 8003d00:	42b8      	cmp	r0, r7
 8003d02:	d3d5      	bcc.n	8003cb0 <HAL_SPI_Transmit+0xa6>
 8003d04:	1c78      	adds	r0, r7, #1
 8003d06:	d0d3      	beq.n	8003cb0 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 8003d0e:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 8003d12:	2300      	movs	r3, #0
 8003d14:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003d18:	4648      	mov	r0, r9
 8003d1a:	b002      	add	sp, #8
 8003d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d20:	b112      	cbz	r2, 8003d28 <HAL_SPI_Transmit+0x11e>
 8003d22:	f1b8 0f01 	cmp.w	r8, #1
 8003d26:	d113      	bne.n	8003d50 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 8003d28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d906      	bls.n	8003d3e <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d30:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d34:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d36:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d38:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d3a:	3b02      	subs	r3, #2
 8003d3c:	e006      	b.n	8003d4c <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d3e:	782b      	ldrb	r3, [r5, #0]
 8003d40:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 8003d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d44:	3301      	adds	r3, #1
 8003d46:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003d48:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003d50:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ae      	beq.n	8003cb6 <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d58:	6822      	ldr	r2, [r4, #0]
 8003d5a:	6893      	ldr	r3, [r2, #8]
 8003d5c:	0799      	lsls	r1, r3, #30
 8003d5e:	d50c      	bpl.n	8003d7a <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 8003d60:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 8003d64:	b289      	uxth	r1, r1
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d904      	bls.n	8003d74 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d6a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003d6e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d70:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d72:	e7e1      	b.n	8003d38 <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003d78:	e7e3      	b.n	8003d42 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7a:	f7fe f91f 	bl	8001fbc <HAL_GetTick>
 8003d7e:	eba0 000a 	sub.w	r0, r0, sl
 8003d82:	42b8      	cmp	r0, r7
 8003d84:	d3e4      	bcc.n	8003d50 <HAL_SPI_Transmit+0x146>
 8003d86:	1c7b      	adds	r3, r7, #1
 8003d88:	d0e2      	beq.n	8003d50 <HAL_SPI_Transmit+0x146>
 8003d8a:	e7bd      	b.n	8003d08 <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	6623      	str	r3, [r4, #96]	; 0x60
 8003d90:	e798      	b.n	8003cc4 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8003d92:	f04f 0902 	mov.w	r9, #2
 8003d96:	e7bc      	b.n	8003d12 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 8003d98:	f04f 0902 	mov.w	r9, #2
 8003d9c:	e7bc      	b.n	8003d18 <HAL_SPI_Transmit+0x10e>
	...

08003da0 <HAL_SPI_Transmit_DMA>:
{
 8003da0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003da2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 8003da6:	2b01      	cmp	r3, #1
{
 8003da8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003daa:	d073      	beq.n	8003e94 <HAL_SPI_Transmit_DMA+0xf4>
 8003dac:	2301      	movs	r3, #1
 8003dae:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003db2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	b2dd      	uxtb	r5, r3
 8003dba:	d169      	bne.n	8003e90 <HAL_SPI_Transmit_DMA+0xf0>
  if ((pData == NULL) || (Size == 0U))
 8003dbc:	2900      	cmp	r1, #0
 8003dbe:	d048      	beq.n	8003e52 <HAL_SPI_Transmit_DMA+0xb2>
 8003dc0:	2a00      	cmp	r2, #0
 8003dc2:	d046      	beq.n	8003e52 <HAL_SPI_Transmit_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->RxISR       = NULL;
 8003dce:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8003dd2:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003dd4:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003dd6:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003dda:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dde:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8003de0:	8782      	strh	r2, [r0, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003de6:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003de8:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dea:	d107      	bne.n	8003dfc <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8003dec:	6813      	ldr	r3, [r2, #0]
 8003dee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003df2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003df4:	6813      	ldr	r3, [r2, #0]
 8003df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dfa:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003dfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_SPI_Transmit_DMA+0xf8>)
 8003e00:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003e02:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <HAL_SPI_Transmit_DMA+0xfc>)
 8003e04:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <HAL_SPI_Transmit_DMA+0x100>)
 8003e08:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e0e:	6853      	ldr	r3, [r2, #4]
 8003e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e14:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e1c:	d80f      	bhi.n	8003e3e <HAL_SPI_Transmit_DMA+0x9e>
 8003e1e:	6983      	ldr	r3, [r0, #24]
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e24:	d10b      	bne.n	8003e3e <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e28:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e2c:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8003e2e:	d115      	bne.n	8003e5c <HAL_SPI_Transmit_DMA+0xbc>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e34:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8003e36:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e38:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 8003e3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003e40:	320c      	adds	r2, #12
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f7fe f9a2 	bl	800218c <HAL_DMA_Start_IT>
 8003e48:	b180      	cbz	r0, 8003e6c <HAL_SPI_Transmit_DMA+0xcc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e4a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003e4c:	f043 0310 	orr.w	r3, r3, #16
 8003e50:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 8003e52:	2300      	movs	r3, #0
 8003e54:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003e58:	4628      	mov	r0, r5
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e60:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003e62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003e64:	f3c3 034e 	ubfx	r3, r3, #1, #15
 8003e68:	3301      	adds	r3, #1
 8003e6a:	e7e7      	b.n	8003e3c <HAL_SPI_Transmit_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003e72:	bf5e      	ittt	pl
 8003e74:	681a      	ldrpl	r2, [r3, #0]
 8003e76:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003e7a:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	f042 0220 	orr.w	r2, r2, #32
 8003e82:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	f042 0202 	orr.w	r2, r2, #2
 8003e8a:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	e7e0      	b.n	8003e52 <HAL_SPI_Transmit_DMA+0xb2>
    errorcode = HAL_BUSY;
 8003e90:	2502      	movs	r5, #2
 8003e92:	e7de      	b.n	8003e52 <HAL_SPI_Transmit_DMA+0xb2>
  __HAL_LOCK(hspi);
 8003e94:	2502      	movs	r5, #2
 8003e96:	e7df      	b.n	8003e58 <HAL_SPI_Transmit_DMA+0xb8>
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ed7 	.word	0x08003ed7
 8003ea0:	08003eb5 	.word	0x08003eb5

08003ea4 <HAL_SPI_TxCpltCallback>:
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_SPI_TxHalfCpltCallback>:
 8003ea6:	4770      	bx	lr

08003ea8 <SPI_DMAHalfTransmitCplt>:
{
 8003ea8:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003eaa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003eac:	f7ff fffb 	bl	8003ea6 <HAL_SPI_TxHalfCpltCallback>
}
 8003eb0:	bd08      	pop	{r3, pc}

08003eb2 <HAL_SPI_ErrorCallback>:
 8003eb2:	4770      	bx	lr

08003eb4 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003eb6:	6802      	ldr	r2, [r0, #0]
{
 8003eb8:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003eba:	6853      	ldr	r3, [r2, #4]
 8003ebc:	f023 0303 	bic.w	r3, r3, #3
 8003ec0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003ec2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8003ed0:	f7ff ffef 	bl	8003eb2 <HAL_SPI_ErrorCallback>
}
 8003ed4:	bd08      	pop	{r3, pc}

08003ed6 <SPI_DMATransmitCplt>:
{
 8003ed6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ed8:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eda:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003edc:	f7fe f86e 	bl	8001fbc <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 8003ee6:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003ee8:	d426      	bmi.n	8003f38 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	6859      	ldr	r1, [r3, #4]
 8003eee:	f021 0120 	bic.w	r1, r1, #32
 8003ef2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	f021 0102 	bic.w	r1, r1, #2
 8003efa:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003efc:	4620      	mov	r0, r4
 8003efe:	2164      	movs	r1, #100	; 0x64
 8003f00:	f7ff fdf4 	bl	8003aec <SPI_EndRxTxTransaction>
 8003f04:	b118      	cbz	r0, 8003f0e <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f06:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f08:	f043 0320 	orr.w	r3, r3, #32
 8003f0c:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f0e:	68a3      	ldr	r3, [r4, #8]
 8003f10:	b933      	cbnz	r3, 8003f20 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	9201      	str	r2, [sp, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003f2c:	b123      	cbz	r3, 8003f38 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f7ff ffbf 	bl	8003eb2 <HAL_SPI_ErrorCallback>
}
 8003f34:	b003      	add	sp, #12
 8003f36:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f7ff ffb3 	bl	8003ea4 <HAL_SPI_TxCpltCallback>
 8003f3e:	e7f9      	b.n	8003f34 <SPI_DMATransmitCplt+0x5e>

08003f40 <HAL_SPI_GetState>:
  return hspi->State;
 8003f40:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8003f44:	4770      	bx	lr
	...

08003f48 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d12f      	bne.n	8003fb0 <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f50:	2302      	movs	r3, #2
 8003f52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f56:	6803      	ldr	r3, [r0, #0]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f60:	4a14      	ldr	r2, [pc, #80]	; (8003fb4 <HAL_TIM_Base_Start_IT+0x6c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d016      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d013      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f6c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d00f      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d00b      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d007      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f84:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d003      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x4c>
 8003f8c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f94:	6899      	ldr	r1, [r3, #8]
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_TIM_Base_Start_IT+0x70>)
 8003f98:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9a:	2a06      	cmp	r2, #6
 8003f9c:	d006      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x64>
 8003f9e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003fa2:	d003      	beq.n	8003fac <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fac:	2000      	movs	r0, #0
}
 8003fae:	4770      	bx	lr
    return HAL_ERROR;
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	4770      	bx	lr
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	00010007 	.word	0x00010007

08003fbc <HAL_TIM_IC_MspInit>:
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_OC_DelayElapsedCallback>:
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIM_IC_CaptureCallback>:
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIM_TriggerCallback>:
 8003fc4:	4770      	bx	lr

08003fc6 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8003fc6:	6803      	ldr	r3, [r0, #0]
{
 8003fc8:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003fca:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fcc:	691e      	ldr	r6, [r3, #16]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fce:	07b2      	lsls	r2, r6, #30
{
 8003fd0:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fd2:	d50d      	bpl.n	8003ff0 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fd4:	07a9      	lsls	r1, r5, #30
 8003fd6:	d50b      	bpl.n	8003ff0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fd8:	f06f 0202 	mvn.w	r2, #2
 8003fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fde:	2201      	movs	r2, #1
 8003fe0:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	079a      	lsls	r2, r3, #30
 8003fe6:	d074      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x10c>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fe8:	f7ff ffea 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fec:	2300      	movs	r3, #0
 8003fee:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ff0:	0773      	lsls	r3, r6, #29
 8003ff2:	d510      	bpl.n	8004016 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ff4:	0768      	lsls	r0, r5, #29
 8003ff6:	d50e      	bpl.n	8004016 <HAL_TIM_IRQHandler+0x50>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	f06f 0204 	mvn.w	r2, #4
 8003ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004000:	2202      	movs	r2, #2
 8004002:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800400c:	d067      	beq.n	80040de <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	f7ff ffd7 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	2300      	movs	r3, #0
 8004014:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004016:	0731      	lsls	r1, r6, #28
 8004018:	d50f      	bpl.n	800403a <HAL_TIM_IRQHandler+0x74>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800401a:	072a      	lsls	r2, r5, #28
 800401c:	d50d      	bpl.n	800403a <HAL_TIM_IRQHandler+0x74>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	f06f 0208 	mvn.w	r2, #8
 8004024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004026:	2204      	movs	r2, #4
 8004028:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	079b      	lsls	r3, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004030:	d05b      	beq.n	80040ea <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004032:	f7ff ffc5 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	2300      	movs	r3, #0
 8004038:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800403a:	06f0      	lsls	r0, r6, #27
 800403c:	d510      	bpl.n	8004060 <HAL_TIM_IRQHandler+0x9a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800403e:	06e9      	lsls	r1, r5, #27
 8004040:	d50e      	bpl.n	8004060 <HAL_TIM_IRQHandler+0x9a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	f06f 0210 	mvn.w	r2, #16
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800404a:	2208      	movs	r2, #8
 800404c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800404e:	69db      	ldr	r3, [r3, #28]
 8004050:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004054:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004056:	d04e      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004058:	f7ff ffb2 	bl	8003fc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405c:	2300      	movs	r3, #0
 800405e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004060:	07f2      	lsls	r2, r6, #31
 8004062:	d508      	bpl.n	8004076 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004064:	07eb      	lsls	r3, r5, #31
 8004066:	d506      	bpl.n	8004076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f06f 0201 	mvn.w	r2, #1
 800406e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004070:	4620      	mov	r0, r4
 8004072:	f7fd fb91 	bl	8001798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004076:	0630      	lsls	r0, r6, #24
 8004078:	d508      	bpl.n	800408c <HAL_TIM_IRQHandler+0xc6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800407a:	0629      	lsls	r1, r5, #24
 800407c:	d506      	bpl.n	800408c <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004086:	4620      	mov	r0, r4
 8004088:	f000 fb43 	bl	8004712 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800408c:	05f2      	lsls	r2, r6, #23
 800408e:	d508      	bpl.n	80040a2 <HAL_TIM_IRQHandler+0xdc>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004090:	062b      	lsls	r3, r5, #24
 8004092:	d506      	bpl.n	80040a2 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800409c:	4620      	mov	r0, r4
 800409e:	f000 fb39 	bl	8004714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a2:	0670      	lsls	r0, r6, #25
 80040a4:	d508      	bpl.n	80040b8 <HAL_TIM_IRQHandler+0xf2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040a6:	0669      	lsls	r1, r5, #25
 80040a8:	d506      	bpl.n	80040b8 <HAL_TIM_IRQHandler+0xf2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040b2:	4620      	mov	r0, r4
 80040b4:	f7ff ff86 	bl	8003fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040b8:	06b2      	lsls	r2, r6, #26
 80040ba:	d522      	bpl.n	8004102 <HAL_TIM_IRQHandler+0x13c>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040bc:	06ab      	lsls	r3, r5, #26
 80040be:	d520      	bpl.n	8004102 <HAL_TIM_IRQHandler+0x13c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c8:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80040ce:	f000 bb1f 	b.w	8004710 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	f7ff ff74 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff ff73 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
 80040dc:	e786      	b.n	8003fec <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040de:	f7ff ff6e 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7ff ff6d 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
 80040e8:	e793      	b.n	8004012 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ea:	f7ff ff68 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff ff67 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
 80040f4:	e79f      	b.n	8004036 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	f7ff ff62 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fa:	4620      	mov	r0, r4
 80040fc:	f7ff ff61 	bl	8003fc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8004100:	e7ac      	b.n	800405c <HAL_TIM_IRQHandler+0x96>
}
 8004102:	bd70      	pop	{r4, r5, r6, pc}

08004104 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	4a30      	ldr	r2, [pc, #192]	; (80041c8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004106:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004108:	4290      	cmp	r0, r2
 800410a:	d012      	beq.n	8004132 <TIM_Base_SetConfig+0x2e>
 800410c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004110:	d00f      	beq.n	8004132 <TIM_Base_SetConfig+0x2e>
 8004112:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004116:	4290      	cmp	r0, r2
 8004118:	d00b      	beq.n	8004132 <TIM_Base_SetConfig+0x2e>
 800411a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800411e:	4290      	cmp	r0, r2
 8004120:	d007      	beq.n	8004132 <TIM_Base_SetConfig+0x2e>
 8004122:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004126:	4290      	cmp	r0, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0x2e>
 800412a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800412e:	4290      	cmp	r0, r2
 8004130:	d119      	bne.n	8004166 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004132:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004138:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413a:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <TIM_Base_SetConfig+0xc4>)
 800413c:	4290      	cmp	r0, r2
 800413e:	d01d      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 8004140:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004144:	d01a      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 8004146:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800414a:	4290      	cmp	r0, r2
 800414c:	d016      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 800414e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004152:	4290      	cmp	r0, r2
 8004154:	d012      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 8004156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800415a:	4290      	cmp	r0, r2
 800415c:	d00e      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 800415e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004162:	4290      	cmp	r0, r2
 8004164:	d00a      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <TIM_Base_SetConfig+0xc8>)
 8004168:	4290      	cmp	r0, r2
 800416a:	d007      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 800416c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004170:	4290      	cmp	r0, r2
 8004172:	d003      	beq.n	800417c <TIM_Base_SetConfig+0x78>
 8004174:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004178:	4290      	cmp	r0, r2
 800417a:	d103      	bne.n	8004184 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800417e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004182:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004184:	694a      	ldr	r2, [r1, #20]
 8004186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800418c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418e:	688b      	ldr	r3, [r1, #8]
 8004190:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004192:	680b      	ldr	r3, [r1, #0]
 8004194:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <TIM_Base_SetConfig+0xc4>)
 8004198:	4298      	cmp	r0, r3
 800419a:	d00f      	beq.n	80041bc <TIM_Base_SetConfig+0xb8>
 800419c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a0:	4298      	cmp	r0, r3
 80041a2:	d00b      	beq.n	80041bc <TIM_Base_SetConfig+0xb8>
 80041a4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80041a8:	4298      	cmp	r0, r3
 80041aa:	d007      	beq.n	80041bc <TIM_Base_SetConfig+0xb8>
 80041ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b0:	4298      	cmp	r0, r3
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xb8>
 80041b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041b8:	4298      	cmp	r0, r3
 80041ba:	d101      	bne.n	80041c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	690b      	ldr	r3, [r1, #16]
 80041be:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c0:	2301      	movs	r3, #1
 80041c2:	6143      	str	r3, [r0, #20]
}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	40014000 	.word	0x40014000

080041d0 <HAL_TIM_Base_Init>:
{
 80041d0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80041d2:	4604      	mov	r4, r0
 80041d4:	b350      	cbz	r0, 800422c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041de:	b91b      	cbnz	r3, 80041e8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80041e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041e4:	f7fd fd2c 	bl	8001c40 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ea:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	1d21      	adds	r1, r4, #4
 80041f2:	f7ff ff87 	bl	8004104 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80041fc:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004202:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004206:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800420a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800420e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800421a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800421e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004222:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004226:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800422a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800422c:	2001      	movs	r0, #1
 800422e:	e7fc      	b.n	800422a <HAL_TIM_Base_Init+0x5a>

08004230 <HAL_TIM_IC_Init>:
{
 8004230:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004232:	4604      	mov	r4, r0
 8004234:	b350      	cbz	r0, 800428c <HAL_TIM_IC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004236:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800423a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800423e:	b91b      	cbnz	r3, 8004248 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004240:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004244:	f7ff feba 	bl	8003fbc <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800424a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004250:	1d21      	adds	r1, r4, #4
 8004252:	f7ff ff57 	bl	8004104 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004256:	2301      	movs	r3, #1
 8004258:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800425c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800425e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004262:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004266:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800426a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800426e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004272:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800427a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800427e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004282:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004286:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800428a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800428c:	2001      	movs	r0, #1
 800428e:	e7fc      	b.n	800428a <HAL_TIM_IC_Init+0x5a>

08004290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004290:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004292:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004294:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004296:	4e18      	ldr	r6, [pc, #96]	; (80042f8 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004298:	f024 0401 	bic.w	r4, r4, #1
 800429c:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800429e:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 80042a0:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042a2:	d025      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042a4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80042a8:	d022      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042aa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80042ae:	42b0      	cmp	r0, r6
 80042b0:	d01e      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042b6:	42b0      	cmp	r0, r6
 80042b8:	d01a      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80042be:	42b0      	cmp	r0, r6
 80042c0:	d016      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042c2:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 80042c6:	42b0      	cmp	r0, r6
 80042c8:	d012      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
 80042ca:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80042ce:	42b0      	cmp	r0, r6
 80042d0:	d00e      	beq.n	80042f0 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80042d2:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042d6:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042e0:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e4:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80042e8:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ea:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80042ec:	6201      	str	r1, [r0, #32]
}
 80042ee:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042f0:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80042f4:	4322      	orrs	r2, r4
 80042f6:	e7ee      	b.n	80042d6 <TIM_TI1_SetConfig+0x46>
 80042f8:	40012c00 	.word	0x40012c00

080042fc <HAL_TIM_IC_ConfigChannel>:
{
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80042fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004302:	2b01      	cmp	r3, #1
{
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8004308:	f000 808b 	beq.w	8004422 <HAL_TIM_IC_ConfigChannel+0x126>
 800430c:	2301      	movs	r3, #1
 800430e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8004312:	b992      	cbnz	r2, 800433a <HAL_TIM_IC_ConfigChannel+0x3e>
    TIM_TI1_SetConfig(htim->Instance,
 8004314:	6800      	ldr	r0, [r0, #0]
 8004316:	68cb      	ldr	r3, [r1, #12]
 8004318:	e9d1 1200 	ldrd	r1, r2, [r1]
 800431c:	f7ff ffb8 	bl	8004290 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004320:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004322:	68a2      	ldr	r2, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004324:	f023 030c 	bic.w	r3, r3, #12
 8004328:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800432a:	6983      	ldr	r3, [r0, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8004332:	2300      	movs	r3, #0
 8004334:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8004338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 800433a:	2a04      	cmp	r2, #4
 800433c:	d124      	bne.n	8004388 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 800433e:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004340:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004342:	6a18      	ldr	r0, [r3, #32]
 8004344:	f020 0010 	bic.w	r0, r0, #16
                      sConfig->ICSelection,
 8004348:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 800434c:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004350:	6998      	ldr	r0, [r3, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004352:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004356:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800435a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800435c:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004360:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004362:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004364:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004366:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800436a:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800436e:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004370:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004372:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004374:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004376:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004378:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800437c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800437e:	699a      	ldr	r2, [r3, #24]
 8004380:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004384:	619a      	str	r2, [r3, #24]
 8004386:	e7d3      	b.n	8004330 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 8004388:	2a08      	cmp	r2, #8
 800438a:	d122      	bne.n	80043d2 <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 800438c:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800438e:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004390:	6a1f      	ldr	r7, [r3, #32]
 8004392:	f427 7780 	bic.w	r7, r7, #256	; 0x100
                      sConfig->ICSelection,
 8004396:	e9d1 2000 	ldrd	r2, r0, [r1]
                      sConfig->ICFilter);
 800439a:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800439c:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800439e:	69df      	ldr	r7, [r3, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80043a0:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 80043a4:	4338      	orrs	r0, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043a6:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80043a8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043ac:	b2c9      	uxtb	r1, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043ae:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80043b0:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043b2:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80043b6:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80043ba:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80043bc:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 80043be:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043c0:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043c2:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043c4:	f022 020c 	bic.w	r2, r2, #12
 80043c8:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043ce:	61da      	str	r2, [r3, #28]
 80043d0:	e7ae      	b.n	8004330 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_4)
 80043d2:	2a0c      	cmp	r2, #12
 80043d4:	d123      	bne.n	800441e <HAL_TIM_IC_ConfigChannel+0x122>
    TIM_TI4_SetConfig(htim->Instance,
 80043d6:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80043d8:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043da:	6a18      	ldr	r0, [r3, #32]
 80043dc:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
                      sConfig->ICSelection,
 80043e0:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 80043e4:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043e6:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80043e8:	69d8      	ldr	r0, [r3, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80043ea:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80043ee:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043f2:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80043f4:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043f8:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80043fa:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80043fc:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80043fe:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004402:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004406:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004408:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800440a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800440c:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800440e:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004410:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004414:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800441c:	e7d7      	b.n	80043ce <HAL_TIM_IC_ConfigChannel+0xd2>
    status = HAL_ERROR;
 800441e:	4618      	mov	r0, r3
 8004420:	e787      	b.n	8004332 <HAL_TIM_IC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8004422:	2002      	movs	r0, #2
 8004424:	e788      	b.n	8004338 <HAL_TIM_IC_ConfigChannel+0x3c>

08004426 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004426:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004428:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800442a:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800442c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004430:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8004434:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004436:	6083      	str	r3, [r0, #8]
}
 8004438:	bd10      	pop	{r4, pc}
	...

0800443c <HAL_TIM_ConfigClockSource>:
{
 800443c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800443e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004442:	2b01      	cmp	r3, #1
{
 8004444:	4604      	mov	r4, r0
 8004446:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800444a:	f000 808c 	beq.w	8004566 <HAL_TIM_ConfigClockSource+0x12a>
 800444e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004454:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004458:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445a:	4b44      	ldr	r3, [pc, #272]	; (800456c <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = htim->Instance->SMCR;
 800445c:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800445e:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004460:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004462:	680b      	ldr	r3, [r1, #0]
 8004464:	2b60      	cmp	r3, #96	; 0x60
 8004466:	d04f      	beq.n	8004508 <HAL_TIM_ConfigClockSource+0xcc>
 8004468:	d832      	bhi.n	80044d0 <HAL_TIM_ConfigClockSource+0x94>
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d064      	beq.n	8004538 <HAL_TIM_ConfigClockSource+0xfc>
 800446e:	d816      	bhi.n	800449e <HAL_TIM_ConfigClockSource+0x62>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d00d      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
 8004474:	d80a      	bhi.n	800448c <HAL_TIM_ConfigClockSource+0x50>
 8004476:	f033 0110 	bics.w	r1, r3, #16
 800447a:	d009      	beq.n	8004490 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 800447c:	2301      	movs	r3, #1
 800447e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004482:	2300      	movs	r3, #0
 8004484:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004488:	4610      	mov	r0, r2
 800448a:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d1f5      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8004490:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004492:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004496:	4313      	orrs	r3, r2
 8004498:	f043 0307 	orr.w	r3, r3, #7
 800449c:	e028      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 800449e:	2b50      	cmp	r3, #80	; 0x50
 80044a0:	d1ec      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 80044a2:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80044a4:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80044a6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044a8:	6a03      	ldr	r3, [r0, #32]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044b0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044b2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044ba:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80044be:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80044c0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80044c2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80044c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044ca:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80044ce:	e00f      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80044d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044d4:	d00d      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0xb6>
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044da:	d00c      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0xba>
 80044dc:	2b70      	cmp	r3, #112	; 0x70
 80044de:	d1cd      	bne.n	800447c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	68cb      	ldr	r3, [r1, #12]
 80044e2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80044e6:	f7ff ff9e 	bl	8004426 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044ea:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 80044f0:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80044f2:	2200      	movs	r2, #0
 80044f4:	e7c2      	b.n	800447c <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80044f6:	68cb      	ldr	r3, [r1, #12]
 80044f8:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80044fc:	f7ff ff93 	bl	8004426 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004500:	6883      	ldr	r3, [r0, #8]
 8004502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004506:	e7f3      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 8004508:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800450a:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 800450c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800450e:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004510:	f022 0210 	bic.w	r2, r2, #16
 8004514:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004516:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004518:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800451c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8004520:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004524:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004528:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800452a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800452c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004532:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004536:	e7db      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8004538:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800453a:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800453c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800453e:	6a03      	ldr	r3, [r0, #32]
 8004540:	f023 0301 	bic.w	r3, r3, #1
 8004544:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004546:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004548:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800454c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004550:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004554:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004556:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004558:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800455a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004560:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004564:	e7c4      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 8004566:	461a      	mov	r2, r3
 8004568:	e78e      	b.n	8004488 <HAL_TIM_ConfigClockSource+0x4c>
 800456a:	bf00      	nop
 800456c:	fffe0088 	.word	0xfffe0088

08004570 <TIM_SlaveTimer_SetConfig.constprop.0>:
  tmpsmcr = htim->Instance->SMCR;
 8004570:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004572:	684b      	ldr	r3, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004574:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004576:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800457a:	431a      	orrs	r2, r3
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 800457c:	b510      	push	{r4, lr}
  tmpsmcr &= ~TIM_SMCR_SMS;
 800457e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004582:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004584:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004588:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 800458a:	2b50      	cmp	r3, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 800458c:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 800458e:	d02c      	beq.n	80045ea <TIM_SlaveTimer_SetConfig.constprop.0+0x7a>
 8004590:	d810      	bhi.n	80045b4 <TIM_SlaveTimer_SetConfig.constprop.0+0x44>
 8004592:	2b40      	cmp	r3, #64	; 0x40
 8004594:	d019      	beq.n	80045ca <TIM_SlaveTimer_SetConfig.constprop.0+0x5a>
 8004596:	d84b      	bhi.n	8004630 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d014      	beq.n	80045c6 <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
 800459c:	d805      	bhi.n	80045aa <TIM_SlaveTimer_SetConfig.constprop.0+0x3a>
 800459e:	f033 0310 	bics.w	r3, r3, #16
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	bf14      	ite	ne
 80045a4:	2001      	movne	r0, #1
 80045a6:	2000      	moveq	r0, #0
}
 80045a8:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	f1b3 0030 	subs.w	r0, r3, #48	; 0x30
 80045ae:	bf18      	it	ne
 80045b0:	2001      	movne	r0, #1
 80045b2:	e7f9      	b.n	80045a8 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
  switch (sSlaveConfig->InputTrigger)
 80045b4:	2b60      	cmp	r3, #96	; 0x60
 80045b6:	d028      	beq.n	800460a <TIM_SlaveTimer_SetConfig.constprop.0+0x9a>
 80045b8:	2b70      	cmp	r3, #112	; 0x70
 80045ba:	d139      	bne.n	8004630 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 80045bc:	690b      	ldr	r3, [r1, #16]
 80045be:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80045c2:	f7ff ff30 	bl	8004426 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2000      	movs	r0, #0
      break;
 80045c8:	e7ee      	b.n	80045a8 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80045ca:	2c05      	cmp	r4, #5
 80045cc:	d030      	beq.n	8004630 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
      tmpccer = htim->Instance->CCER;
 80045ce:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045d0:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045d2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80045da:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80045e0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80045e4:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80045e6:	6202      	str	r2, [r0, #32]
 80045e8:	e7ed      	b.n	80045c6 <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
                               sSlaveConfig->TriggerPolarity,
 80045ea:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80045ec:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 80045ee:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045f0:	6a03      	ldr	r3, [r0, #32]
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045f8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045fa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004602:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004606:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004608:	e7ec      	b.n	80045e4 <TIM_SlaveTimer_SetConfig.constprop.0+0x74>
  tmpccer = TIMx->CCER;
 800460a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800460c:	6a02      	ldr	r2, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 800460e:	688c      	ldr	r4, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8004610:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	f022 0210 	bic.w	r2, r2, #16
 8004616:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004618:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800461a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800461e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004622:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004626:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800462a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800462c:	6203      	str	r3, [r0, #32]
 800462e:	e7ca      	b.n	80045c6 <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
        return HAL_ERROR;
 8004630:	2001      	movs	r0, #1
 8004632:	e7b9      	b.n	80045a8 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>

08004634 <HAL_TIM_SlaveConfigSynchro>:
{
 8004634:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004636:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800463a:	2b01      	cmp	r3, #1
{
 800463c:	4604      	mov	r4, r0
 800463e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004642:	d01c      	beq.n	800467e <HAL_TIM_SlaveConfigSynchro+0x4a>
 8004644:	2501      	movs	r5, #1
 8004646:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800464a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800464e:	f7ff ff8f 	bl	8004570 <TIM_SlaveTimer_SetConfig.constprop.0>
 8004652:	b130      	cbz	r0, 8004662 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8004654:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004656:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800465a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800465e:	4628      	mov	r0, r5
}
 8004660:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800466a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004672:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004674:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004678:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 800467c:	e7f0      	b.n	8004660 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 800467e:	4618      	mov	r0, r3
 8004680:	e7ee      	b.n	8004660 <HAL_TIM_SlaveConfigSynchro+0x2c>
	...

08004684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004684:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004686:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	f04f 0302 	mov.w	r3, #2
 8004690:	d036      	beq.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004692:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004696:	4d1b      	ldr	r5, [pc, #108]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
  tmpcr2 = htim->Instance->CR2;
 8004698:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800469a:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 800469c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 800469e:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a0:	d002      	beq.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 80046a2:	4e19      	ldr	r6, [pc, #100]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 80046a4:	42b3      	cmp	r3, r6
 80046a6:	d103      	bne.n	80046b0 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046a8:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046ae:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b0:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80046b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b6:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80046ba:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046bc:	d015      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c2:	d012      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046c4:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046da:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80046e2:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d104      	bne.n	80046f4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046ea:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ec:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046f0:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046fa:	2300      	movs	r3, #0
 80046fc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8004700:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40013400 	.word	0x40013400
 800470c:	40000400 	.word	0x40000400

08004710 <HAL_TIMEx_CommutCallback>:
 8004710:	4770      	bx	lr

08004712 <HAL_TIMEx_BreakCallback>:
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_Break2Callback>:
 8004714:	4770      	bx	lr

08004716 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004716:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	e852 3f00 	ldrex	r3, [r2]
 800471c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004724:	6802      	ldr	r2, [r0, #0]
 8004726:	2900      	cmp	r1, #0
 8004728:	d1f5      	bne.n	8004716 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	f102 0308 	add.w	r3, r2, #8
 800472e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	f102 0c08 	add.w	ip, r2, #8
 800473a:	e84c 3100 	strex	r1, r3, [ip]
 800473e:	2900      	cmp	r1, #0
 8004740:	d1f3      	bne.n	800472a <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004742:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004744:	2b01      	cmp	r3, #1
 8004746:	d107      	bne.n	8004758 <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004748:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800474c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004750:	e842 3100 	strex	r1, r3, [r2]
 8004754:	2900      	cmp	r1, #0
 8004756:	d1f7      	bne.n	8004748 <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004758:	2320      	movs	r3, #32
 800475a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800475e:	2300      	movs	r3, #0
 8004760:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004762:	6683      	str	r3, [r0, #104]	; 0x68
}
 8004764:	4770      	bx	lr
	...

08004768 <UART_SetConfig>:
{
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800476c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800476e:	6921      	ldr	r1, [r4, #16]
 8004770:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004772:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004774:	69c0      	ldr	r0, [r0, #28]
 8004776:	430a      	orrs	r2, r1
 8004778:	6961      	ldr	r1, [r4, #20]
 800477a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800477c:	498f      	ldr	r1, [pc, #572]	; (80049bc <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800477e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004780:	4029      	ands	r1, r5
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	68e1      	ldr	r1, [r4, #12]
 800478a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004792:	4a8b      	ldr	r2, [pc, #556]	; (80049c0 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004794:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004796:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8004798:	bf1c      	itt	ne
 800479a:	6a22      	ldrne	r2, [r4, #32]
 800479c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 80047a4:	430a      	orrs	r2, r1
 80047a6:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047a8:	4a86      	ldr	r2, [pc, #536]	; (80049c4 <UART_SetConfig+0x25c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d117      	bne.n	80047de <UART_SetConfig+0x76>
 80047ae:	4b86      	ldr	r3, [pc, #536]	; (80049c8 <UART_SetConfig+0x260>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	f200 80cf 	bhi.w	800495e <UART_SetConfig+0x1f6>
 80047c0:	4a82      	ldr	r2, [pc, #520]	; (80049cc <UART_SetConfig+0x264>)
 80047c2:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80047c8:	f040 8099 	bne.w	80048fe <UART_SetConfig+0x196>
    switch (clocksource)
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d822      	bhi.n	8004816 <UART_SetConfig+0xae>
 80047d0:	e8df f003 	tbb	[pc, r3]
 80047d4:	2193c8d9 	.word	0x2193c8d9
 80047d8:	212121ce 	.word	0x212121ce
 80047dc:	dd          	.byte	0xdd
 80047dd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047de:	4a7c      	ldr	r2, [pc, #496]	; (80049d0 <UART_SetConfig+0x268>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d106      	bne.n	80047f2 <UART_SetConfig+0x8a>
 80047e4:	4b78      	ldr	r3, [pc, #480]	; (80049c8 <UART_SetConfig+0x260>)
 80047e6:	4a7b      	ldr	r2, [pc, #492]	; (80049d4 <UART_SetConfig+0x26c>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ec:	f003 030c 	and.w	r3, r3, #12
 80047f0:	e7e7      	b.n	80047c2 <UART_SetConfig+0x5a>
 80047f2:	4a79      	ldr	r2, [pc, #484]	; (80049d8 <UART_SetConfig+0x270>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d119      	bne.n	800482c <UART_SetConfig+0xc4>
 80047f8:	4b73      	ldr	r3, [pc, #460]	; (80049c8 <UART_SetConfig+0x260>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004802:	2b20      	cmp	r3, #32
 8004804:	f000 80b7 	beq.w	8004976 <UART_SetConfig+0x20e>
 8004808:	d807      	bhi.n	800481a <UART_SetConfig+0xb2>
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80b8 	beq.w	8004980 <UART_SetConfig+0x218>
 8004810:	2b10      	cmp	r3, #16
 8004812:	f000 80aa 	beq.w	800496a <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004816:	2001      	movs	r0, #1
 8004818:	e04e      	b.n	80048b8 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481a:	2b30      	cmp	r3, #48	; 0x30
 800481c:	d1fb      	bne.n	8004816 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800481e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004822:	f000 80b4 	beq.w	800498e <UART_SetConfig+0x226>
 8004826:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800482a:	e083      	b.n	8004934 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800482c:	4a6b      	ldr	r2, [pc, #428]	; (80049dc <UART_SetConfig+0x274>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d10f      	bne.n	8004852 <UART_SetConfig+0xea>
 8004832:	4b65      	ldr	r3, [pc, #404]	; (80049c8 <UART_SetConfig+0x260>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800483c:	2b80      	cmp	r3, #128	; 0x80
 800483e:	f000 809a 	beq.w	8004976 <UART_SetConfig+0x20e>
 8004842:	d804      	bhi.n	800484e <UART_SetConfig+0xe6>
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 809b 	beq.w	8004980 <UART_SetConfig+0x218>
 800484a:	2b40      	cmp	r3, #64	; 0x40
 800484c:	e7e1      	b.n	8004812 <UART_SetConfig+0xaa>
 800484e:	2bc0      	cmp	r3, #192	; 0xc0
 8004850:	e7e4      	b.n	800481c <UART_SetConfig+0xb4>
 8004852:	4a63      	ldr	r2, [pc, #396]	; (80049e0 <UART_SetConfig+0x278>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d112      	bne.n	800487e <UART_SetConfig+0x116>
 8004858:	4b5b      	ldr	r3, [pc, #364]	; (80049c8 <UART_SetConfig+0x260>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004866:	f000 8086 	beq.w	8004976 <UART_SetConfig+0x20e>
 800486a:	d805      	bhi.n	8004878 <UART_SetConfig+0x110>
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8087 	beq.w	8004980 <UART_SetConfig+0x218>
 8004872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004876:	e7cc      	b.n	8004812 <UART_SetConfig+0xaa>
 8004878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487c:	e7ce      	b.n	800481c <UART_SetConfig+0xb4>
 800487e:	4a50      	ldr	r2, [pc, #320]	; (80049c0 <UART_SetConfig+0x258>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d1c8      	bne.n	8004816 <UART_SetConfig+0xae>
 8004884:	4b50      	ldr	r3, [pc, #320]	; (80049c8 <UART_SetConfig+0x260>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800488e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004892:	d015      	beq.n	80048c0 <UART_SetConfig+0x158>
 8004894:	d806      	bhi.n	80048a4 <UART_SetConfig+0x13c>
 8004896:	b15b      	cbz	r3, 80048b0 <UART_SetConfig+0x148>
 8004898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489c:	d1bb      	bne.n	8004816 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 800489e:	f7fe f9e7 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
        break;
 80048a2:	e007      	b.n	80048b4 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048a8:	d1b5      	bne.n	8004816 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 80048aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80048ae:	e008      	b.n	80048c2 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fe fd56 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80048b4:	b928      	cbnz	r0, 80048c2 <UART_SetConfig+0x15a>
 80048b6:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 80048b8:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80048ba:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80048be:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4848      	ldr	r0, [pc, #288]	; (80049e4 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048c2:	6862      	ldr	r2, [r4, #4]
 80048c4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80048c8:	4283      	cmp	r3, r0
 80048ca:	d8a4      	bhi.n	8004816 <UART_SetConfig+0xae>
 80048cc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80048d0:	d8a1      	bhi.n	8004816 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048d2:	0851      	lsrs	r1, r2, #1
 80048d4:	2500      	movs	r5, #0
 80048d6:	468c      	mov	ip, r1
 80048d8:	f44f 7680 	mov.w	r6, #256	; 0x100
 80048dc:	4629      	mov	r1, r5
 80048de:	fbe0 c106 	umlal	ip, r1, r0, r6
 80048e2:	462b      	mov	r3, r5
 80048e4:	4660      	mov	r0, ip
 80048e6:	f7fc f9af 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048ea:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <UART_SetConfig+0x280>)
 80048ec:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d890      	bhi.n	8004816 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	60d8      	str	r0, [r3, #12]
 80048f8:	e7dd      	b.n	80048b6 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 80048fa:	483a      	ldr	r0, [pc, #232]	; (80049e4 <UART_SetConfig+0x27c>)
 80048fc:	e047      	b.n	800498e <UART_SetConfig+0x226>
    switch (clocksource)
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d889      	bhi.n	8004816 <UART_SetConfig+0xae>
 8004902:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x1a0>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800492d 	.word	0x0800492d
 800490c:	08004953 	.word	0x08004953
 8004910:	0800497d 	.word	0x0800497d
 8004914:	08004817 	.word	0x08004817
 8004918:	08004959 	.word	0x08004959
 800491c:	08004817 	.word	0x08004817
 8004920:	08004817 	.word	0x08004817
 8004924:	08004817 	.word	0x08004817
 8004928:	08004827 	.word	0x08004827
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7fe fd18 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004930:	2800      	cmp	r0, #0
 8004932:	d0c0      	beq.n	80048b6 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800493a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800493e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004942:	f1a3 0110 	sub.w	r1, r3, #16
 8004946:	4291      	cmp	r1, r2
 8004948:	f63f af65 	bhi.w	8004816 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800494c:	6822      	ldr	r2, [r4, #0]
 800494e:	60d3      	str	r3, [r2, #12]
 8004950:	e7b1      	b.n	80048b6 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004952:	f7fe fd17 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
        break;
 8004956:	e7eb      	b.n	8004930 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8004958:	f7fe f98a 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
        break;
 800495c:	e7e8      	b.n	8004930 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004962:	d1f6      	bne.n	8004952 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004964:	f7fe fd0e 	bl	8003384 <HAL_RCC_GetPCLK2Freq>
        break;
 8004968:	e00f      	b.n	800498a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800496e:	d1f3      	bne.n	8004958 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004970:	f7fe f97e 	bl	8002c70 <HAL_RCC_GetSysClockFreq>
        break;
 8004974:	e009      	b.n	800498a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004976:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800497a:	d0be      	beq.n	80048fa <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4819      	ldr	r0, [pc, #100]	; (80049e4 <UART_SetConfig+0x27c>)
 800497e:	e7d9      	b.n	8004934 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004980:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004984:	d1d2      	bne.n	800492c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fe fceb 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800498a:	2800      	cmp	r0, #0
 800498c:	d093      	beq.n	80048b6 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800498e:	6862      	ldr	r2, [r4, #4]
 8004990:	0853      	lsrs	r3, r2, #1
 8004992:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004996:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800499a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800499e:	f1a3 0110 	sub.w	r1, r3, #16
 80049a2:	4291      	cmp	r1, r2
 80049a4:	f63f af37 	bhi.w	8004816 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a8:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80049ac:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ae:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60cb      	str	r3, [r1, #12]
 80049b8:	e77d      	b.n	80048b6 <UART_SetConfig+0x14e>
 80049ba:	bf00      	nop
 80049bc:	efff69f3 	.word	0xefff69f3
 80049c0:	40008000 	.word	0x40008000
 80049c4:	40013800 	.word	0x40013800
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800f4f4 	.word	0x0800f4f4
 80049d0:	40004400 	.word	0x40004400
 80049d4:	0800f4f7 	.word	0x0800f4f7
 80049d8:	40004800 	.word	0x40004800
 80049dc:	40004c00 	.word	0x40004c00
 80049e0:	40005000 	.word	0x40005000
 80049e4:	00f42400 	.word	0x00f42400
 80049e8:	000ffcff 	.word	0x000ffcff

080049ec <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80049ee:	071a      	lsls	r2, r3, #28
{
 80049f0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049f2:	d506      	bpl.n	8004a02 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f4:	6801      	ldr	r1, [r0, #0]
 80049f6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80049f8:	684a      	ldr	r2, [r1, #4]
 80049fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049fe:	4322      	orrs	r2, r4
 8004a00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a02:	07dc      	lsls	r4, r3, #31
 8004a04:	d506      	bpl.n	8004a14 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a06:	6801      	ldr	r1, [r0, #0]
 8004a08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004a0a:	684a      	ldr	r2, [r1, #4]
 8004a0c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004a10:	4322      	orrs	r2, r4
 8004a12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a14:	0799      	lsls	r1, r3, #30
 8004a16:	d506      	bpl.n	8004a26 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a18:	6801      	ldr	r1, [r0, #0]
 8004a1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004a1c:	684a      	ldr	r2, [r1, #4]
 8004a1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a22:	4322      	orrs	r2, r4
 8004a24:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a26:	075a      	lsls	r2, r3, #29
 8004a28:	d506      	bpl.n	8004a38 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a2a:	6801      	ldr	r1, [r0, #0]
 8004a2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004a2e:	684a      	ldr	r2, [r1, #4]
 8004a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a34:	4322      	orrs	r2, r4
 8004a36:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a38:	06dc      	lsls	r4, r3, #27
 8004a3a:	d506      	bpl.n	8004a4a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a3c:	6801      	ldr	r1, [r0, #0]
 8004a3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004a40:	688a      	ldr	r2, [r1, #8]
 8004a42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a46:	4322      	orrs	r2, r4
 8004a48:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4a:	0699      	lsls	r1, r3, #26
 8004a4c:	d506      	bpl.n	8004a5c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4e:	6801      	ldr	r1, [r0, #0]
 8004a50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004a52:	688a      	ldr	r2, [r1, #8]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a58:	4322      	orrs	r2, r4
 8004a5a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a5c:	065a      	lsls	r2, r3, #25
 8004a5e:	d50f      	bpl.n	8004a80 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a60:	6801      	ldr	r1, [r0, #0]
 8004a62:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8004a64:	684a      	ldr	r2, [r1, #4]
 8004a66:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004a6a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a70:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a72:	d105      	bne.n	8004a80 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a74:	684a      	ldr	r2, [r1, #4]
 8004a76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8004a78:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8004a7c:	4322      	orrs	r2, r4
 8004a7e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a80:	061b      	lsls	r3, r3, #24
 8004a82:	d506      	bpl.n	8004a92 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a84:	6802      	ldr	r2, [r0, #0]
 8004a86:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004a88:	6853      	ldr	r3, [r2, #4]
 8004a8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6053      	str	r3, [r2, #4]
}
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <UART_WaitOnFlagUntilTimeout>:
{
 8004a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	4616      	mov	r6, r2
 8004aa2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	69d3      	ldr	r3, [r2, #28]
 8004aa8:	ea37 0303 	bics.w	r3, r7, r3
 8004aac:	bf0c      	ite	eq
 8004aae:	2301      	moveq	r3, #1
 8004ab0:	2300      	movne	r3, #0
 8004ab2:	42b3      	cmp	r3, r6
 8004ab4:	d001      	beq.n	8004aba <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e01e      	b.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004abe:	d0f2      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fd fa7c 	bl	8001fbc <HAL_GetTick>
 8004ac4:	eba0 0008 	sub.w	r0, r0, r8
 8004ac8:	4548      	cmp	r0, r9
 8004aca:	d825      	bhi.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x84>
 8004acc:	f1b9 0f00 	cmp.w	r9, #0
 8004ad0:	d022      	beq.n	8004b18 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad2:	6820      	ldr	r0, [r4, #0]
 8004ad4:	6803      	ldr	r3, [r0, #0]
 8004ad6:	075a      	lsls	r2, r3, #29
 8004ad8:	d5e4      	bpl.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ada:	69c5      	ldr	r5, [r0, #28]
 8004adc:	f015 0508 	ands.w	r5, r5, #8
 8004ae0:	d00c      	beq.n	8004afc <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae2:	2508      	movs	r5, #8
 8004ae4:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f7ff fe15 	bl	8004716 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8004aec:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aee:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004af2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 8004af6:	2001      	movs	r0, #1
}
 8004af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004afc:	69c3      	ldr	r3, [r0, #28]
 8004afe:	051b      	lsls	r3, r3, #20
 8004b00:	d5d0      	bpl.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b06:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8004b08:	4620      	mov	r0, r4
 8004b0a:	f7ff fe04 	bl	8004716 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8004b14:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8004b18:	2003      	movs	r0, #3
 8004b1a:	e7ed      	b.n	8004af8 <UART_WaitOnFlagUntilTimeout+0x64>

08004b1c <HAL_UART_Transmit>:
{
 8004b1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004b20:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b22:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004b24:	2b20      	cmp	r3, #32
{
 8004b26:	4604      	mov	r4, r0
 8004b28:	460e      	mov	r6, r1
 8004b2a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004b2c:	d144      	bne.n	8004bb8 <HAL_UART_Transmit+0x9c>
    if ((pData == NULL) || (Size == 0U))
 8004b2e:	2900      	cmp	r1, #0
 8004b30:	d044      	beq.n	8004bbc <HAL_UART_Transmit+0xa0>
 8004b32:	2a00      	cmp	r2, #0
 8004b34:	d042      	beq.n	8004bbc <HAL_UART_Transmit+0xa0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b36:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b38:	2500      	movs	r5, #0
 8004b3a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b3e:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8004b40:	f7fd fa3c 	bl	8001fbc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b44:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8004b46:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004b4e:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8004b50:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b54:	d103      	bne.n	8004b5e <HAL_UART_Transmit+0x42>
 8004b56:	6922      	ldr	r2, [r4, #16]
 8004b58:	b90a      	cbnz	r2, 8004b5e <HAL_UART_Transmit+0x42>
 8004b5a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004b5c:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8004b5e:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b62:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8004b66:	b292      	uxth	r2, r2
 8004b68:	b94a      	cbnz	r2, 8004b7e <HAL_UART_Transmit+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6a:	2140      	movs	r1, #64	; 0x40
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7ff ff91 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004b72:	2320      	movs	r3, #32
      huart->gState = HAL_UART_STATE_READY;
 8004b74:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b76:	b960      	cbnz	r0, 8004b92 <HAL_UART_Transmit+0x76>
}
 8004b78:	b004      	add	sp, #16
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2180      	movs	r1, #128	; 0x80
 8004b82:	4620      	mov	r0, r4
 8004b84:	9303      	str	r3, [sp, #12]
 8004b86:	f7ff ff85 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	9b03      	ldr	r3, [sp, #12]
 8004b8c:	b118      	cbz	r0, 8004b96 <HAL_UART_Transmit+0x7a>
        huart->gState = HAL_UART_STATE_READY;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004b92:	2003      	movs	r0, #3
 8004b94:	e7f0      	b.n	8004b78 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b96:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8004b98:	b95e      	cbnz	r6, 8004bb2 <HAL_UART_Transmit+0x96>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004b9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba2:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8004ba4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8004ba8:	3a01      	subs	r2, #1
 8004baa:	b292      	uxth	r2, r2
 8004bac:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004bb0:	e7d5      	b.n	8004b5e <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb2:	f816 2b01 	ldrb.w	r2, [r6], #1
 8004bb6:	e7f4      	b.n	8004ba2 <HAL_UART_Transmit+0x86>
    return HAL_BUSY;
 8004bb8:	2002      	movs	r0, #2
 8004bba:	e7dd      	b.n	8004b78 <HAL_UART_Transmit+0x5c>
      return  HAL_ERROR;
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7db      	b.n	8004b78 <HAL_UART_Transmit+0x5c>

08004bc0 <HAL_UART_Receive>:
{
 8004bc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004bc4:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bc6:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004bca:	2b20      	cmp	r3, #32
{
 8004bcc:	4604      	mov	r4, r0
 8004bce:	460e      	mov	r6, r1
 8004bd0:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd2:	d15e      	bne.n	8004c92 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	2900      	cmp	r1, #0
 8004bd6:	d05e      	beq.n	8004c96 <HAL_UART_Receive+0xd6>
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	d05c      	beq.n	8004c96 <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bdc:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bde:	2500      	movs	r5, #0
 8004be0:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004be4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be8:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8004bea:	f7fd f9e7 	bl	8001fbc <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8004bee:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8004bf0:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8004bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8004bf8:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8004bfa:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004bfe:	d116      	bne.n	8004c2e <HAL_UART_Receive+0x6e>
 8004c00:	6922      	ldr	r2, [r4, #16]
 8004c02:	42aa      	cmp	r2, r5
 8004c04:	f240 15ff 	movw	r5, #511	; 0x1ff
 8004c08:	bf18      	it	ne
 8004c0a:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 8004c10:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c14:	d11b      	bne.n	8004c4e <HAL_UART_Receive+0x8e>
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	b9cb      	cbnz	r3, 8004c4e <HAL_UART_Receive+0x8e>
 8004c1a:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8004c1c:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8004c1e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004c22:	b290      	uxth	r0, r2
 8004c24:	b9a8      	cbnz	r0, 8004c52 <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8004c26:	2320      	movs	r3, #32
 8004c28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    return HAL_OK;
 8004c2c:	e01e      	b.n	8004c6c <HAL_UART_Receive+0xac>
    UART_MASK_COMPUTATION(huart);
 8004c2e:	b92b      	cbnz	r3, 8004c3c <HAL_UART_Receive+0x7c>
 8004c30:	6922      	ldr	r2, [r4, #16]
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	bf14      	ite	ne
 8004c36:	257f      	movne	r5, #127	; 0x7f
 8004c38:	25ff      	moveq	r5, #255	; 0xff
 8004c3a:	e7e7      	b.n	8004c0c <HAL_UART_Receive+0x4c>
 8004c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c40:	d1e4      	bne.n	8004c0c <HAL_UART_Receive+0x4c>
 8004c42:	6922      	ldr	r2, [r4, #16]
 8004c44:	2a00      	cmp	r2, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	257f      	moveq	r5, #127	; 0x7f
 8004c4a:	253f      	movne	r5, #63	; 0x3f
 8004c4c:	e7de      	b.n	8004c0c <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8004c4e:	2700      	movs	r7, #0
 8004c50:	e7e5      	b.n	8004c1e <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c52:	f8cd 8000 	str.w	r8, [sp]
 8004c56:	464b      	mov	r3, r9
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f7ff ff19 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004c62:	b130      	cbz	r0, 8004c72 <HAL_UART_Receive+0xb2>
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	2320      	movs	r3, #32
 8004c66:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8004c6a:	2003      	movs	r0, #3
}
 8004c6c:	b003      	add	sp, #12
 8004c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c76:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8004c78:	b946      	cbnz	r6, 8004c8c <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c7a:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8004c7e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8004c82:	3a01      	subs	r2, #1
 8004c84:	b292      	uxth	r2, r2
 8004c86:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8004c8a:	e7c8      	b.n	8004c1e <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c8c:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8004c90:	e7f5      	b.n	8004c7e <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8004c92:	2002      	movs	r0, #2
 8004c94:	e7ea      	b.n	8004c6c <HAL_UART_Receive+0xac>
      return  HAL_ERROR;
 8004c96:	2001      	movs	r0, #1
 8004c98:	e7e8      	b.n	8004c6c <HAL_UART_Receive+0xac>

08004c9a <UART_CheckIdleState>:
{
 8004c9a:	b530      	push	{r4, r5, lr}
 8004c9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c9e:	2500      	movs	r5, #0
{
 8004ca0:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca2:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004ca6:	f7fd f989 	bl	8001fbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8004cb0:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cb2:	d51c      	bpl.n	8004cee <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004cb8:	9200      	str	r2, [sp, #0]
 8004cba:	9003      	str	r0, [sp, #12]
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f7ff fee6 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004cc8:	9b03      	ldr	r3, [sp, #12]
 8004cca:	b180      	cbz	r0, 8004cee <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ccc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	e852 3f00 	ldrex	r3, [r2]
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	e842 3100 	strex	r1, r3, [r2]
 8004cda:	2900      	cmp	r1, #0
 8004cdc:	d1f6      	bne.n	8004ccc <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8004cde:	2320      	movs	r3, #32
 8004ce0:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8004ce2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8004cea:	b005      	add	sp, #20
 8004cec:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cee:	6822      	ldr	r2, [r4, #0]
 8004cf0:	6812      	ldr	r2, [r2, #0]
 8004cf2:	0752      	lsls	r2, r2, #29
 8004cf4:	d523      	bpl.n	8004d3e <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf6:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004cfa:	9200      	str	r2, [sp, #0]
 8004cfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d00:	2200      	movs	r2, #0
 8004d02:	4620      	mov	r0, r4
 8004d04:	f7ff fec6 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8004d08:	b1c8      	cbz	r0, 8004d3e <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d0a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	e852 3f00 	ldrex	r3, [r2]
 8004d10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8004d18:	6822      	ldr	r2, [r4, #0]
 8004d1a:	2900      	cmp	r1, #0
 8004d1c:	d1f5      	bne.n	8004d0a <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	f102 0308 	add.w	r3, r2, #8
 8004d22:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d26:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	f102 0008 	add.w	r0, r2, #8
 8004d2e:	e840 3100 	strex	r1, r3, [r0]
 8004d32:	2900      	cmp	r1, #0
 8004d34:	d1f3      	bne.n	8004d1e <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8004d36:	2320      	movs	r3, #32
 8004d38:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004d3c:	e7d1      	b.n	8004ce2 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8004d3e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d40:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004d42:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d44:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d48:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d4a:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8004d4c:	e7ca      	b.n	8004ce4 <UART_CheckIdleState+0x4a>

08004d4e <HAL_HalfDuplex_Init>:
{
 8004d4e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004d50:	4604      	mov	r4, r0
 8004d52:	b360      	cbz	r0, 8004dae <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d54:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004d56:	b91b      	cbnz	r3, 8004d60 <HAL_HalfDuplex_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004d58:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8004d5c:	f7fc ffd8 	bl	8001d10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004d60:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004d62:	2324      	movs	r3, #36	; 0x24
 8004d64:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004d66:	6813      	ldr	r3, [r2, #0]
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d70:	b113      	cbz	r3, 8004d78 <HAL_HalfDuplex_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7ff fe3a 	bl	80049ec <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff fcf5 	bl	8004768 <UART_SetConfig>
 8004d7e:	2801      	cmp	r0, #1
 8004d80:	d015      	beq.n	8004dae <HAL_HalfDuplex_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004d92:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004da2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004daa:	f7ff bf76 	b.w	8004c9a <UART_CheckIdleState>
}
 8004dae:	2001      	movs	r0, #1
 8004db0:	bd10      	pop	{r4, pc}

08004db2 <bitmap_init>:
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8004db2:	7983      	ldrb	r3, [r0, #6]
 8004db4:	8802      	ldrh	r2, [r0, #0]
 8004db6:	08db      	lsrs	r3, r3, #3
 8004db8:	fb13 f302 	smulbb	r3, r3, r2
    bitmap->size = bitmap->pitch * bitmap->height;
 8004dbc:	8842      	ldrh	r2, [r0, #2]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	8083      	strh	r3, [r0, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8004dc2:	4353      	muls	r3, r2
    bitmap->buffer = buffer;
 8004dc4:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 8004dc8:	4770      	bx	lr

08004dca <clip_line>:

    return code;
}

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8004dca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dce:	b087      	sub	sp, #28
    if (x0 < window.x0) {
 8004dd0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8004dd4:	f8bd c040 	ldrh.w	ip, [sp, #64]	; 0x40
 8004dd8:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
 8004ddc:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 8004de0:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
    uint8_t code0 = code(*x0, *y0, window);
 8004de4:	f9b1 4000 	ldrsh.w	r4, [r1]
{
 8004de8:	9300      	str	r3, [sp, #0]
    if (x0 < window.x0) {
 8004dea:	4565      	cmp	r5, ip
 8004dec:	db5d      	blt.n	8004eaa <clip_line+0xe0>
    } else if (x0 > window.x1) {
 8004dee:	4545      	cmp	r5, r8
 8004df0:	bfd4      	ite	le
 8004df2:	2500      	movle	r5, #0
 8004df4:	2501      	movgt	r5, #1
 8004df6:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8004df8:	4574      	cmp	r4, lr
 8004dfa:	da58      	bge.n	8004eae <clip_line+0xe4>
        code |= BOTTOM;
 8004dfc:	f045 0504 	orr.w	r5, r5, #4
    if (x0 < window.x0) {
 8004e00:	f9b2 6000 	ldrsh.w	r6, [r2]
    uint8_t code1 = code(*x1, *y1, window);
 8004e04:	9b00      	ldr	r3, [sp, #0]
    if (x0 < window.x0) {
 8004e06:	4566      	cmp	r6, ip
    uint8_t code1 = code(*x1, *y1, window);
 8004e08:	f9b3 4000 	ldrsh.w	r4, [r3]
    if (x0 < window.x0) {
 8004e0c:	db54      	blt.n	8004eb8 <clip_line+0xee>
    } else if (x0 > window.x1) {
 8004e0e:	4546      	cmp	r6, r8
 8004e10:	bfd4      	ite	le
 8004e12:	2600      	movle	r6, #0
 8004e14:	2601      	movgt	r6, #1
 8004e16:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 8004e18:	4574      	cmp	r4, lr
 8004e1a:	da4f      	bge.n	8004ebc <clip_line+0xf2>
        code |= BOTTOM;
 8004e1c:	f046 0604 	orr.w	r6, r6, #4
            } else if (code3 & RIGHT) {
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
                x = window.x1;
            }  else if (code3 & LEFT) {
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
                x = window.x0;
 8004e20:	fa0f f48c 	sxth.w	r4, ip
 8004e24:	9402      	str	r4, [sp, #8]
                x = window.x1;
 8004e26:	fa0f f488 	sxth.w	r4, r8
 8004e2a:	9403      	str	r4, [sp, #12]
                y = window.y0;
 8004e2c:	fa0f f48e 	sxth.w	r4, lr
 8004e30:	9404      	str	r4, [sp, #16]
                y = window.y1;
 8004e32:	b23c      	sxth	r4, r7
 8004e34:	9405      	str	r4, [sp, #20]
        if (!(code0 | code1)) {
 8004e36:	ea55 0406 	orrs.w	r4, r5, r6
 8004e3a:	f000 80bb 	beq.w	8004fb4 <clip_line+0x1ea>
        } else if (code0 & code1) {
 8004e3e:	4235      	tst	r5, r6
 8004e40:	f040 80bc 	bne.w	8004fbc <clip_line+0x1f2>
            uint8_t code3 = code0 ? code0 : code1;
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	bf14      	ite	ne
 8004e48:	462c      	movne	r4, r5
 8004e4a:	4634      	moveq	r4, r6
 8004e4c:	4623      	mov	r3, r4
            if (code3 & TOP) {
 8004e4e:	0724      	lsls	r4, r4, #28
 8004e50:	d539      	bpl.n	8004ec6 <clip_line+0xfc>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8004e52:	f9b0 9000 	ldrsh.w	r9, [r0]
 8004e56:	f9b1 a000 	ldrsh.w	sl, [r1]
 8004e5a:	f9b2 4000 	ldrsh.w	r4, [r2]
 8004e5e:	eba7 0b0a 	sub.w	fp, r7, sl
 8004e62:	eba4 0409 	sub.w	r4, r4, r9
 8004e66:	fb0b f404 	mul.w	r4, fp, r4
 8004e6a:	9401      	str	r4, [sp, #4]
 8004e6c:	9c00      	ldr	r4, [sp, #0]
 8004e6e:	f9b4 b000 	ldrsh.w	fp, [r4]
 8004e72:	9c01      	ldr	r4, [sp, #4]
 8004e74:	ebab 0b0a 	sub.w	fp, fp, sl
 8004e78:	fb94 f4fb 	sdiv	r4, r4, fp
 8004e7c:	444c      	add	r4, r9
 8004e7e:	fa0f f984 	sxth.w	r9, r4
                y = window.y1;
 8004e82:	9c05      	ldr	r4, [sp, #20]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8004e84:	429d      	cmp	r5, r3
 8004e86:	d17b      	bne.n	8004f80 <clip_line+0x1b6>
                *x0 = x;
 8004e88:	f8a0 9000 	strh.w	r9, [r0]
                *y0 = y;
 8004e8c:	800c      	strh	r4, [r1, #0]
    if (x0 < window.x0) {
 8004e8e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8004e92:	45ac      	cmp	ip, r5
 8004e94:	dc6c      	bgt.n	8004f70 <clip_line+0x1a6>
    } else if (x0 > window.x1) {
 8004e96:	4545      	cmp	r5, r8
 8004e98:	bfd4      	ite	le
 8004e9a:	2500      	movle	r5, #0
 8004e9c:	2501      	movgt	r5, #1
 8004e9e:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8004ea0:	45a6      	cmp	lr, r4
 8004ea2:	dd67      	ble.n	8004f74 <clip_line+0x1aa>
        code |= BOTTOM;
 8004ea4:	f045 0504 	orr.w	r5, r5, #4
 8004ea8:	e7c5      	b.n	8004e36 <clip_line+0x6c>
        code |= LEFT;
 8004eaa:	2501      	movs	r5, #1
 8004eac:	e7a4      	b.n	8004df8 <clip_line+0x2e>
    } else if (y0 > window.y1) {
 8004eae:	42bc      	cmp	r4, r7
        code |= TOP;
 8004eb0:	bfc8      	it	gt
 8004eb2:	f045 0508 	orrgt.w	r5, r5, #8
 8004eb6:	e7a3      	b.n	8004e00 <clip_line+0x36>
        code |= LEFT;
 8004eb8:	2601      	movs	r6, #1
 8004eba:	e7ad      	b.n	8004e18 <clip_line+0x4e>
    } else if (y0 > window.y1) {
 8004ebc:	42bc      	cmp	r4, r7
        code |= TOP;
 8004ebe:	bfc8      	it	gt
 8004ec0:	f046 0608 	orrgt.w	r6, r6, #8
 8004ec4:	e7ac      	b.n	8004e20 <clip_line+0x56>
            } else if (code3 & BOTTOM) {
 8004ec6:	461c      	mov	r4, r3
 8004ec8:	0764      	lsls	r4, r4, #29
 8004eca:	d519      	bpl.n	8004f00 <clip_line+0x136>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 8004ecc:	f9b0 9000 	ldrsh.w	r9, [r0]
 8004ed0:	f9b1 a000 	ldrsh.w	sl, [r1]
 8004ed4:	f9b2 4000 	ldrsh.w	r4, [r2]
 8004ed8:	ebae 0b0a 	sub.w	fp, lr, sl
 8004edc:	eba4 0409 	sub.w	r4, r4, r9
 8004ee0:	fb0b f404 	mul.w	r4, fp, r4
 8004ee4:	9401      	str	r4, [sp, #4]
 8004ee6:	9c00      	ldr	r4, [sp, #0]
 8004ee8:	f9b4 b000 	ldrsh.w	fp, [r4]
 8004eec:	9c01      	ldr	r4, [sp, #4]
 8004eee:	ebab 0b0a 	sub.w	fp, fp, sl
 8004ef2:	fb94 f4fb 	sdiv	r4, r4, fp
 8004ef6:	444c      	add	r4, r9
 8004ef8:	fa0f f984 	sxth.w	r9, r4
                y = window.y0;
 8004efc:	9c04      	ldr	r4, [sp, #16]
 8004efe:	e7c1      	b.n	8004e84 <clip_line+0xba>
            } else if (code3 & RIGHT) {
 8004f00:	461c      	mov	r4, r3
 8004f02:	07a4      	lsls	r4, r4, #30
 8004f04:	d517      	bpl.n	8004f36 <clip_line+0x16c>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8004f06:	9c00      	ldr	r4, [sp, #0]
 8004f08:	f9b1 9000 	ldrsh.w	r9, [r1]
 8004f0c:	f9b0 a000 	ldrsh.w	sl, [r0]
 8004f10:	f9b4 4000 	ldrsh.w	r4, [r4]
 8004f14:	eba8 0b0a 	sub.w	fp, r8, sl
 8004f18:	eba4 0409 	sub.w	r4, r4, r9
 8004f1c:	fb0b f404 	mul.w	r4, fp, r4
 8004f20:	f9b2 b000 	ldrsh.w	fp, [r2]
 8004f24:	ebab 0b0a 	sub.w	fp, fp, sl
 8004f28:	fb94 f4fb 	sdiv	r4, r4, fp
 8004f2c:	444c      	add	r4, r9
 8004f2e:	b224      	sxth	r4, r4
                x = window.x1;
 8004f30:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004f34:	e7a6      	b.n	8004e84 <clip_line+0xba>
            }  else if (code3 & LEFT) {
 8004f36:	f013 0401 	ands.w	r4, r3, #1
 8004f3a:	d017      	beq.n	8004f6c <clip_line+0x1a2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 8004f3c:	9c00      	ldr	r4, [sp, #0]
 8004f3e:	f9b1 9000 	ldrsh.w	r9, [r1]
 8004f42:	f9b0 a000 	ldrsh.w	sl, [r0]
 8004f46:	f9b4 4000 	ldrsh.w	r4, [r4]
 8004f4a:	ebac 0b0a 	sub.w	fp, ip, sl
 8004f4e:	eba4 0409 	sub.w	r4, r4, r9
 8004f52:	fb0b f404 	mul.w	r4, fp, r4
 8004f56:	f9b2 b000 	ldrsh.w	fp, [r2]
 8004f5a:	ebab 0b0a 	sub.w	fp, fp, sl
 8004f5e:	fb94 f4fb 	sdiv	r4, r4, fp
 8004f62:	444c      	add	r4, r9
 8004f64:	b224      	sxth	r4, r4
                x = window.x0;
 8004f66:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004f6a:	e78b      	b.n	8004e84 <clip_line+0xba>
            int16_t x = 0;
 8004f6c:	46a1      	mov	r9, r4
 8004f6e:	e789      	b.n	8004e84 <clip_line+0xba>
        code |= LEFT;
 8004f70:	2501      	movs	r5, #1
 8004f72:	e795      	b.n	8004ea0 <clip_line+0xd6>
    } else if (y0 > window.y1) {
 8004f74:	42bc      	cmp	r4, r7
 8004f76:	f77f af5e 	ble.w	8004e36 <clip_line+0x6c>
        code |= TOP;
 8004f7a:	f045 0508 	orr.w	r5, r5, #8
    return code;
 8004f7e:	e75a      	b.n	8004e36 <clip_line+0x6c>
                code0 = code(*x0, *y0, window);
            } else {
                *x1 = x;
                *y1 = y;
 8004f80:	9b00      	ldr	r3, [sp, #0]
                *x1 = x;
 8004f82:	f8a2 9000 	strh.w	r9, [r2]
                *y1 = y;
 8004f86:	801c      	strh	r4, [r3, #0]
    if (x0 < window.x0) {
 8004f88:	f9b2 6000 	ldrsh.w	r6, [r2]
 8004f8c:	45b4      	cmp	ip, r6
 8004f8e:	dc09      	bgt.n	8004fa4 <clip_line+0x1da>
    } else if (x0 > window.x1) {
 8004f90:	4546      	cmp	r6, r8
 8004f92:	bfd4      	ite	le
 8004f94:	2600      	movle	r6, #0
 8004f96:	2601      	movgt	r6, #1
 8004f98:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 8004f9a:	45a6      	cmp	lr, r4
 8004f9c:	dd04      	ble.n	8004fa8 <clip_line+0x1de>
        code |= BOTTOM;
 8004f9e:	f046 0604 	orr.w	r6, r6, #4
 8004fa2:	e748      	b.n	8004e36 <clip_line+0x6c>
        code |= LEFT;
 8004fa4:	2601      	movs	r6, #1
 8004fa6:	e7f8      	b.n	8004f9a <clip_line+0x1d0>
    } else if (y0 > window.y1) {
 8004fa8:	42bc      	cmp	r4, r7
 8004faa:	f77f af44 	ble.w	8004e36 <clip_line+0x6c>
        code |= TOP;
 8004fae:	f046 0608 	orr.w	r6, r6, #8
    return code;
 8004fb2:	e740      	b.n	8004e36 <clip_line+0x6c>
            accept = true;
 8004fb4:	2001      	movs	r0, #1
            }
        }
    }

    return accept;
 8004fb6:	b007      	add	sp, #28
 8004fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool accept = false;
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	e7fa      	b.n	8004fb6 <clip_line+0x1ec>

08004fc0 <fontx_meta>:

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8004fc0:	f8d1 3006 	ldr.w	r3, [r1, #6]
 8004fc4:	6003      	str	r3, [r0, #0]
 8004fc6:	f8d1 300a 	ldr.w	r3, [r1, #10]
 8004fca:	6043      	str	r3, [r0, #4]
    meta->width = font[FONTX_WIDTH];
 8004fcc:	7b8b      	ldrb	r3, [r1, #14]
 8004fce:	7243      	strb	r3, [r0, #9]
    meta->height = font[FONTX_HEIGHT];
 8004fd0:	7bcb      	ldrb	r3, [r1, #15]
 8004fd2:	7283      	strb	r3, [r0, #10]
    meta->type = font[FONTX_TYPE];
 8004fd4:	7c0b      	ldrb	r3, [r1, #16]
 8004fd6:	72c3      	strb	r3, [r0, #11]

    return 0;
}
 8004fd8:	2000      	movs	r0, #0
 8004fda:	4770      	bx	lr

08004fdc <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 8004fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fe0:	b085      	sub	sp, #20
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	460f      	mov	r7, r1
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004fe6:	a801      	add	r0, sp, #4
 8004fe8:	4611      	mov	r1, r2
 8004fea:	f7ff ffe9 	bl	8004fc0 <fontx_meta>
    if (0 != status) {
 8004fee:	b9a8      	cbnz	r0, 800501c <fontx_glyph+0x40>
        return status;
    }

    glyph->width = meta.width;
 8004ff0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    glyph->height = meta.height;
 8004ff4:	f89d 300e 	ldrb.w	r3, [sp, #14]
    glyph->width = meta.width;
 8004ff8:	7021      	strb	r1, [r4, #0]
    glyph->pitch = (meta.width + 7) / 8;
 8004ffa:	3107      	adds	r1, #7
 8004ffc:	08c9      	lsrs	r1, r1, #3
    glyph->height = meta.height;
 8004ffe:	7063      	strb	r3, [r4, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8005000:	70e1      	strb	r1, [r4, #3]
    glyph->size = glyph->pitch * meta.height;
 8005002:	fb13 f301 	smulbb	r3, r3, r1

    if (FONTX_TYPE_SBCS == meta.type) {
 8005006:	f89d 100f 	ldrb.w	r1, [sp, #15]
    glyph->size = glyph->pitch * meta.height;
 800500a:	b2db      	uxtb	r3, r3
 800500c:	70a3      	strb	r3, [r4, #2]
    if (FONTX_TYPE_SBCS == meta.type) {
 800500e:	b941      	cbnz	r1, 8005022 <fontx_glyph+0x46>
        if (code < 0x100) {
 8005010:	2fff      	cmp	r7, #255	; 0xff
 8005012:	d80f      	bhi.n	8005034 <fontx_glyph+0x58>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8005014:	fb07 2303 	mla	r3, r7, r3, r2
 8005018:	3311      	adds	r3, #17

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
                /* Number of codes from top of the block_table. */
                nc += code - sb;
                glyph->buffer = &font[
 800501a:	6063      	str	r3, [r4, #4]
            block_table += 4;
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800501c:	b005      	add	sp, #20
 800501e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8005022:	f892 c011 	ldrb.w	ip, [r2, #17]
 8005026:	f102 0116 	add.w	r1, r2, #22
 800502a:	46e0      	mov	r8, ip
        nc = 0;
 800502c:	4606      	mov	r6, r0
        while (bc--) {
 800502e:	f1b8 0f00 	cmp.w	r8, #0
 8005032:	d101      	bne.n	8005038 <fontx_glyph+0x5c>
    return FONTX_ERR_GLYPH_NOT_FOUND;
 8005034:	2001      	movs	r0, #1
 8005036:	e7f1      	b.n	800501c <fontx_glyph+0x40>
            sb = block_table[0] + block_table[1] * 0x100;
 8005038:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 800503c:	f811 ec04 	ldrb.w	lr, [r1, #-4]
            eb = block_table[2] + block_table[3] * 0x100;
 8005040:	f811 9c01 	ldrb.w	r9, [r1, #-1]
            sb = block_table[0] + block_table[1] * 0x100;
 8005044:	eb0e 2e05 	add.w	lr, lr, r5, lsl #8
            eb = block_table[2] + block_table[3] * 0x100;
 8005048:	f811 5c02 	ldrb.w	r5, [r1, #-2]
            if (code >= sb && code <= eb) {
 800504c:	45be      	cmp	lr, r7
            eb = block_table[2] + block_table[3] * 0x100;
 800504e:	eb05 2509 	add.w	r5, r5, r9, lsl #8
            if (code >= sb && code <= eb) {
 8005052:	d80b      	bhi.n	800506c <fontx_glyph+0x90>
 8005054:	42bd      	cmp	r5, r7
 8005056:	d309      	bcc.n	800506c <fontx_glyph+0x90>
                nc += code - sb;
 8005058:	443e      	add	r6, r7
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 800505a:	2112      	movs	r1, #18
                nc += code - sb;
 800505c:	eba6 060e 	sub.w	r6, r6, lr
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 8005060:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8005064:	fb03 1306 	mla	r3, r3, r6, r1
                glyph->buffer = &font[
 8005068:	4413      	add	r3, r2
 800506a:	e7d6      	b.n	800501a <fontx_glyph+0x3e>
            nc += eb - sb + 1;
 800506c:	3501      	adds	r5, #1
 800506e:	4435      	add	r5, r6
 8005070:	eba5 060e 	sub.w	r6, r5, lr
            block_table += 4;
 8005074:	f108 38ff 	add.w	r8, r8, #4294967295
 8005078:	3104      	adds	r1, #4
 800507a:	e7d8      	b.n	800502e <fontx_glyph+0x52>

0800507c <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 800507c:	b470      	push	{r4, r5, r6}
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 800507e:	4c09      	ldr	r4, [pc, #36]	; (80050a4 <hagl_put_pixel+0x28>)
 8005080:	8826      	ldrh	r6, [r4, #0]
 8005082:	42b0      	cmp	r0, r6
 8005084:	db0b      	blt.n	800509e <hagl_put_pixel+0x22>
 8005086:	8866      	ldrh	r6, [r4, #2]
 8005088:	42b1      	cmp	r1, r6
 800508a:	db08      	blt.n	800509e <hagl_put_pixel+0x22>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 800508c:	88a6      	ldrh	r6, [r4, #4]
 800508e:	42b0      	cmp	r0, r6
 8005090:	dc05      	bgt.n	800509e <hagl_put_pixel+0x22>
 8005092:	88e4      	ldrh	r4, [r4, #6]
 8005094:	42a1      	cmp	r1, r4
 8005096:	dc02      	bgt.n	800509e <hagl_put_pixel+0x22>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
}
 8005098:	bc70      	pop	{r4, r5, r6}
    hagl_hal_put_pixel(x0, y0, color);
 800509a:	f7fc baab 	b.w	80015f4 <lcd_put_pixel>
}
 800509e:	bc70      	pop	{r4, r5, r6}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	b085      	sub	sp, #20
 80050ae:	f8ad 200a 	strh.w	r2, [sp, #10]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <hagl_draw_line+0xe8>)
{
 80050b4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80050b8:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80050bc:	6810      	ldr	r0, [r2, #0]
 80050be:	6851      	ldr	r1, [r2, #4]
{
 80050c0:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80050c4:	466b      	mov	r3, sp
{
 80050c6:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 80050ca:	f10d 020a 	add.w	r2, sp, #10
 80050ce:	c303      	stmia	r3!, {r0, r1}
 80050d0:	a903      	add	r1, sp, #12
 80050d2:	f10d 000e 	add.w	r0, sp, #14
 80050d6:	f7ff fe78 	bl	8004dca <clip_line>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d055      	beq.n	800518a <hagl_draw_line+0xe2>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 80050de:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80050e2:	f9bd 900a 	ldrsh.w	r9, [sp, #10]
    sx = x0 < x1 ? 1 : -1;
    dy = ABS(y1 - y0);
 80050e6:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
    dx = ABS(x1 - x0);
 80050ea:	eba9 0703 	sub.w	r7, r9, r3
 80050ee:	2f00      	cmp	r7, #0
 80050f0:	bfb8      	it	lt
 80050f2:	427f      	neglt	r7, r7
    sx = x0 < x1 ? 1 : -1;
 80050f4:	4599      	cmp	r9, r3
 80050f6:	bfcc      	ite	gt
 80050f8:	f04f 0901 	movgt.w	r9, #1
 80050fc:	f04f 39ff 	movle.w	r9, #4294967295
    dy = ABS(y1 - y0);
 8005100:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8005104:	eba6 0803 	sub.w	r8, r6, r3
 8005108:	f1b8 0f00 	cmp.w	r8, #0
 800510c:	bfb8      	it	lt
 800510e:	f1c8 0800 	rsblt	r8, r8, #0
    dx = ABS(x1 - x0);
 8005112:	b23d      	sxth	r5, r7
    dy = ABS(y1 - y0);
 8005114:	fa0f fb88 	sxth.w	fp, r8
    sy = y0 < y1 ? 1 : -1;
 8005118:	429e      	cmp	r6, r3
 800511a:	bfcc      	ite	gt
 800511c:	2601      	movgt	r6, #1
 800511e:	f04f 36ff 	movle.w	r6, #4294967295
    err = (dx > dy ? dx : -dy) / 2;
 8005122:	455d      	cmp	r5, fp
 8005124:	dd2b      	ble.n	800517e <hagl_draw_line+0xd6>
 8005126:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 800512a:	1064      	asrs	r4, r4, #1
            break;
        };

        e2 = err + err;

        if (e2 > -dx) {
 800512c:	426d      	negs	r5, r5
        hagl_put_pixel(x0, y0, color);
 800512e:	4652      	mov	r2, sl
 8005130:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8005134:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 8005138:	f7ff ffa0 	bl	800507c <hagl_put_pixel>
        if (x0 == x1 && y0 == y1) {
 800513c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8005140:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005144:	4293      	cmp	r3, r2
 8005146:	d105      	bne.n	8005154 <hagl_draw_line+0xac>
 8005148:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 800514c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8005150:	4299      	cmp	r1, r3
 8005152:	d01a      	beq.n	800518a <hagl_draw_line+0xe2>
        e2 = err + err;
 8005154:	b2a1      	uxth	r1, r4
 8005156:	004b      	lsls	r3, r1, #1
 8005158:	b21b      	sxth	r3, r3
        if (e2 > -dx) {
 800515a:	42ab      	cmp	r3, r5
            err -= dy;
 800515c:	bfc1      	itttt	gt
 800515e:	eba1 0108 	subgt.w	r1, r1, r8
            x0 += sx;
 8005162:	444a      	addgt	r2, r9
            err -= dy;
 8005164:	b20c      	sxthgt	r4, r1
            x0 += sx;
 8005166:	f8ad 200e 	strhgt.w	r2, [sp, #14]
        }

        if (e2 < dy) {
 800516a:	459b      	cmp	fp, r3
 800516c:	dddf      	ble.n	800512e <hagl_draw_line+0x86>
            err += dx;
            y0 += sy;
 800516e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            err += dx;
 8005172:	443c      	add	r4, r7
            y0 += sy;
 8005174:	4433      	add	r3, r6
            err += dx;
 8005176:	b224      	sxth	r4, r4
            y0 += sy;
 8005178:	f8ad 300c 	strh.w	r3, [sp, #12]
 800517c:	e7d7      	b.n	800512e <hagl_draw_line+0x86>
    err = (dx > dy ? dx : -dy) / 2;
 800517e:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 8005182:	1064      	asrs	r4, r4, #1
 8005184:	4264      	negs	r4, r4
 8005186:	b224      	sxth	r4, r4
 8005188:	e7d0      	b.n	800512c <hagl_draw_line+0x84>
        }
    }
}
 800518a:	b005      	add	sp, #20
 800518c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005190:	2000000c 	.word	0x2000000c

08005194 <hagl_draw_hline>:
void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 8005194:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 8005196:	4402      	add	r2, r0
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	b212      	sxth	r2, r2
 800519c:	460b      	mov	r3, r1
 800519e:	f7ff ff83 	bl	80050a8 <hagl_draw_line>
}
 80051a2:	b003      	add	sp, #12
 80051a4:	f85d fb04 	ldr.w	pc, [sp], #4

080051a8 <hagl_fill_rectangle>:
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80051a8:	4290      	cmp	r0, r2
{
 80051aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (x0 > x1) {
 80051ae:	bfc8      	it	gt
 80051b0:	4604      	movgt	r4, r0
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80051b2:	4e1e      	ldr	r6, [pc, #120]	; (800522c <hagl_fill_rectangle+0x84>)
{
 80051b4:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if (x0 > x1) {
 80051b8:	bfc4      	itt	gt
 80051ba:	4610      	movgt	r0, r2
 80051bc:	4622      	movgt	r2, r4
    if (y0 > y1) {
 80051be:	4299      	cmp	r1, r3
 80051c0:	bfc2      	ittt	gt
 80051c2:	460c      	movgt	r4, r1
 80051c4:	4619      	movgt	r1, r3
 80051c6:	4623      	movgt	r3, r4
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 80051c8:	8834      	ldrh	r4, [r6, #0]
 80051ca:	42a2      	cmp	r2, r4
 80051cc:	db22      	blt.n	8005214 <hagl_fill_rectangle+0x6c>
 80051ce:	8875      	ldrh	r5, [r6, #2]
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	db1f      	blt.n	8005214 <hagl_fill_rectangle+0x6c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80051d4:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 80051d8:	4570      	cmp	r0, lr
 80051da:	dc1b      	bgt.n	8005214 <hagl_fill_rectangle+0x6c>
 80051dc:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 80051e0:	4561      	cmp	r1, ip
 80051e2:	dc17      	bgt.n	8005214 <hagl_fill_rectangle+0x6c>
        return;
    }

    x0 = max(x0, clip_window.x0);
 80051e4:	42a0      	cmp	r0, r4
 80051e6:	bfb8      	it	lt
 80051e8:	4620      	movlt	r0, r4
    y0 = max(y0, clip_window.y0);
    x1 = min(x1, clip_window.x1);
    y1 = min(y1, clip_window.y1);

    uint16_t width = x1 - x0 + 1;
 80051ea:	4572      	cmp	r2, lr
 80051ec:	bfa8      	it	ge
 80051ee:	4672      	movge	r2, lr
    uint16_t height = y1 - y0 + 1;
 80051f0:	42a9      	cmp	r1, r5
 80051f2:	bfb8      	it	lt
 80051f4:	4629      	movlt	r1, r5
 80051f6:	4563      	cmp	r3, ip
 80051f8:	bfa8      	it	ge
 80051fa:	4663      	movge	r3, ip
 80051fc:	fa13 f581 	uxtah	r5, r3, r1
    uint16_t width = x1 - x0 + 1;
 8005200:	1c54      	adds	r4, r2, #1
    uint16_t height = y1 - y0 + 1;
 8005202:	b28e      	uxth	r6, r1
 8005204:	3501      	adds	r5, #1
    uint16_t width = x1 - x0 + 1;
 8005206:	1a24      	subs	r4, r4, r0
 8005208:	1bad      	subs	r5, r5, r6
    x0 = max(x0, clip_window.x0);
 800520a:	b207      	sxth	r7, r0
    uint16_t width = x1 - x0 + 1;
 800520c:	b2a4      	uxth	r4, r4

    for (uint16_t i = 0; i < height; i++) {
 800520e:	b2ad      	uxth	r5, r5
 8005210:	42ae      	cmp	r6, r5
 8005212:	d101      	bne.n	8005218 <hagl_fill_rectangle+0x70>
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
#endif
    }
}
 8005214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hagl_draw_hline(x0, y0 + i, width, color);
 8005218:	b231      	sxth	r1, r6
 800521a:	4643      	mov	r3, r8
 800521c:	4622      	mov	r2, r4
 800521e:	4638      	mov	r0, r7
 8005220:	3601      	adds	r6, #1
 8005222:	f7ff ffb7 	bl	8005194 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 8005226:	b2b6      	uxth	r6, r6
 8005228:	e7f2      	b.n	8005210 <hagl_fill_rectangle+0x68>
 800522a:	bf00      	nop
 800522c:	2000000c 	.word	0x2000000c

08005230 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8005230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8005234:	f8d2 a00c 	ldr.w	sl, [r2, #12]
void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8005238:	4607      	mov	r7, r0
 800523a:	4688      	mov	r8, r1
 800523c:	4615      	mov	r5, r2

    for (uint16_t y = 0; y < source->height; y++) {
 800523e:	2600      	movs	r6, #0
 8005240:	886a      	ldrh	r2, [r5, #2]
 8005242:	b2b3      	uxth	r3, r6
 8005244:	429a      	cmp	r2, r3
 8005246:	d811      	bhi.n	800526c <hagl_blit+0x3c>
            color = *(ptr++);
            hagl_put_pixel(x0 + x, y0 + y, color);
        }
    }
#endif
};
 8005248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hagl_put_pixel(x0 + x, y0 + y, color);
 800524c:	4438      	add	r0, r7
 800524e:	f83a 2b02 	ldrh.w	r2, [sl], #2
 8005252:	4621      	mov	r1, r4
 8005254:	b200      	sxth	r0, r0
 8005256:	f7ff ff11 	bl	800507c <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 800525a:	f109 0901 	add.w	r9, r9, #1
 800525e:	882b      	ldrh	r3, [r5, #0]
 8005260:	fa1f f089 	uxth.w	r0, r9
 8005264:	4283      	cmp	r3, r0
 8005266:	d8f1      	bhi.n	800524c <hagl_blit+0x1c>
    for (uint16_t y = 0; y < source->height; y++) {
 8005268:	3601      	adds	r6, #1
 800526a:	e7e9      	b.n	8005240 <hagl_blit+0x10>
            hagl_put_pixel(x0 + x, y0 + y, color);
 800526c:	4443      	add	r3, r8
 800526e:	f04f 0900 	mov.w	r9, #0
 8005272:	b21c      	sxth	r4, r3
 8005274:	e7f3      	b.n	800525e <hagl_blit+0x2e>

08005276 <hagl_put_char>:
{
 8005276:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527a:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800527e:	b087      	sub	sp, #28
 8005280:	4699      	mov	r9, r3
    status = fontx_glyph(&glyph, code, font);
 8005282:	f50d 5382 	add.w	r3, sp, #4160	; 0x1040
{
 8005286:	460f      	mov	r7, r1
 8005288:	4690      	mov	r8, r2
    status = fontx_glyph(&glyph, code, font);
 800528a:	4601      	mov	r1, r0
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4668      	mov	r0, sp
 8005290:	f7ff fea4 	bl	8004fdc <fontx_glyph>
    if (0 != status) {
 8005294:	4604      	mov	r4, r0
 8005296:	2800      	cmp	r0, #0
 8005298:	d141      	bne.n	800531e <hagl_put_char+0xa8>
    bitmap.width = glyph.width,
 800529a:	f89d 3000 	ldrb.w	r3, [sp]
 800529e:	f8ad 3008 	strh.w	r3, [sp, #8]
    bitmap.height = glyph.height,
 80052a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80052a6:	f8ad 300a 	strh.w	r3, [sp, #10]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80052aa:	a906      	add	r1, sp, #24
    bitmap.depth = DISPLAY_DEPTH,
 80052ac:	2310      	movs	r3, #16
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80052ae:	a802      	add	r0, sp, #8
    bitmap.depth = DISPLAY_DEPTH,
 80052b0:	f88d 300e 	strb.w	r3, [sp, #14]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80052b4:	f7ff fd7d 	bl	8004db2 <bitmap_init>
        for (uint8_t x = 0; x < glyph.width; x++) {
 80052b8:	f89d 1000 	ldrb.w	r1, [sp]
    color_t *ptr = (color_t *) bitmap.buffer;
 80052bc:	9b05      	ldr	r3, [sp, #20]
    for (uint8_t y = 0; y < glyph.height; y++) {
 80052be:	f89d e001 	ldrb.w	lr, [sp, #1]
        glyph.buffer += glyph.pitch;
 80052c2:	f89d c003 	ldrb.w	ip, [sp, #3]
 80052c6:	004a      	lsls	r2, r1, #1
    for (uint8_t y = 0; y < glyph.height; y++) {
 80052c8:	4620      	mov	r0, r4
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80052ca:	f04f 0a80 	mov.w	sl, #128	; 0x80
    for (uint8_t y = 0; y < glyph.height; y++) {
 80052ce:	b2c4      	uxtb	r4, r0
 80052d0:	45a6      	cmp	lr, r4
 80052d2:	d918      	bls.n	8005306 <hagl_put_char+0x90>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 80052d4:	9e01      	ldr	r6, [sp, #4]
 80052d6:	2500      	movs	r5, #0
 80052d8:	e00d      	b.n	80052f6 <hagl_put_char+0x80>
 80052da:	f896 b000 	ldrb.w	fp, [r6]
 80052de:	f004 0407 	and.w	r4, r4, #7
 80052e2:	fa4a f404 	asr.w	r4, sl, r4
                *(ptr++) = color;
 80052e6:	ea14 0f0b 	tst.w	r4, fp
 80052ea:	bf14      	ite	ne
 80052ec:	464c      	movne	r4, r9
 80052ee:	2400      	moveq	r4, #0
 80052f0:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
        for (uint8_t x = 0; x < glyph.width; x++) {
 80052f4:	3501      	adds	r5, #1
 80052f6:	b2ec      	uxtb	r4, r5
 80052f8:	42a1      	cmp	r1, r4
 80052fa:	d8ee      	bhi.n	80052da <hagl_put_char+0x64>
        glyph.buffer += glyph.pitch;
 80052fc:	4466      	add	r6, ip
 80052fe:	4413      	add	r3, r2
 8005300:	9601      	str	r6, [sp, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8005302:	3001      	adds	r0, #1
 8005304:	e7e3      	b.n	80052ce <hagl_put_char+0x58>
    hagl_blit(x0, y0, &bitmap);
 8005306:	4638      	mov	r0, r7
 8005308:	aa02      	add	r2, sp, #8
 800530a:	4641      	mov	r1, r8
 800530c:	f7ff ff90 	bl	8005230 <hagl_blit>
    return bitmap.width;
 8005310:	f89d 0008 	ldrb.w	r0, [sp, #8]
}
 8005314:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 8005318:	b007      	add	sp, #28
 800531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 800531e:	2000      	movs	r0, #0
 8005320:	e7f8      	b.n	8005314 <hagl_put_char+0x9e>

08005322 <hagl_put_text>:
{
 8005322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005326:	b087      	sub	sp, #28
 8005328:	4605      	mov	r5, r0
 800532a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800532e:	460f      	mov	r7, r1
    status = fontx_meta(&meta, font);
 8005330:	a803      	add	r0, sp, #12
 8005332:	4649      	mov	r1, r9
{
 8005334:	4616      	mov	r6, r2
 8005336:	4698      	mov	r8, r3
    status = fontx_meta(&meta, font);
 8005338:	f7ff fe42 	bl	8004fc0 <fontx_meta>
    if (0 != status) {
 800533c:	b9e8      	cbnz	r0, 800537a <hagl_put_text+0x58>
 800533e:	463c      	mov	r4, r7
        temp = *str++;
 8005340:	f855 0b04 	ldr.w	r0, [r5], #4
        if (13 == temp || 10 == temp) {
 8005344:	280d      	cmp	r0, #13
 8005346:	d001      	beq.n	800534c <hagl_put_text+0x2a>
 8005348:	280a      	cmp	r0, #10
 800534a:	d10c      	bne.n	8005366 <hagl_put_text+0x44>
            y0 += meta.height;
 800534c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005350:	4433      	add	r3, r6
 8005352:	b21e      	sxth	r6, r3
            x0 = 0;
 8005354:	2400      	movs	r4, #0
    } while (*str != 0);
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f1      	bne.n	8005340 <hagl_put_text+0x1e>
    return x0 - original;
 800535c:	1be1      	subs	r1, r4, r7
 800535e:	b288      	uxth	r0, r1
}
 8005360:	b007      	add	sp, #28
 8005362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            x0 += hagl_put_char(temp, x0, y0, color, font);
 8005366:	4621      	mov	r1, r4
 8005368:	f8cd 9000 	str.w	r9, [sp]
 800536c:	4643      	mov	r3, r8
 800536e:	4632      	mov	r2, r6
 8005370:	f7ff ff81 	bl	8005276 <hagl_put_char>
 8005374:	4404      	add	r4, r0
 8005376:	b224      	sxth	r4, r4
 8005378:	e7ed      	b.n	8005356 <hagl_put_text+0x34>
        return 0;
 800537a:	2000      	movs	r0, #0
 800537c:	e7f0      	b.n	8005360 <hagl_put_text+0x3e>
	...

08005380 <hagl_clear_screen>:
        }
    }
#endif
};

void hagl_clear_screen() {
 8005380:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
#ifdef HAGL_HAS_HAL_CLEAR_SCREEN
    hagl_hal_clear_screen();
#else
    uint16_t x0 = clip_window.x0;
 8005384:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <hagl_clear_screen+0x38>)
    clip_window.x0 = x0;
 8005386:	2100      	movs	r1, #0
    clip_window.x1 = x1;
 8005388:	229f      	movs	r2, #159	; 0x9f
    clip_window.y1 = y1;
 800538a:	237f      	movs	r3, #127	; 0x7f
    uint16_t y0 = clip_window.y0;
    uint16_t x1 = clip_window.x1;
    uint16_t y1 = clip_window.y1;

    hagl_set_clip_window(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1);
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 800538c:	9100      	str	r1, [sp, #0]
 800538e:	4608      	mov	r0, r1
    uint16_t x0 = clip_window.x0;
 8005390:	f8b4 8000 	ldrh.w	r8, [r4]
    uint16_t y0 = clip_window.y0;
 8005394:	8867      	ldrh	r7, [r4, #2]
    uint16_t x1 = clip_window.x1;
 8005396:	88a6      	ldrh	r6, [r4, #4]
    uint16_t y1 = clip_window.y1;
 8005398:	88e5      	ldrh	r5, [r4, #6]
    clip_window.x0 = x0;
 800539a:	8021      	strh	r1, [r4, #0]
    clip_window.y0 = y0;
 800539c:	8061      	strh	r1, [r4, #2]
    clip_window.x1 = x1;
 800539e:	80a2      	strh	r2, [r4, #4]
    clip_window.y1 = y1;
 80053a0:	80e3      	strh	r3, [r4, #6]
    hagl_fill_rectangle(0, 0, DISPLAY_WIDTH - 1, DISPLAY_HEIGHT -1, 0x00);
 80053a2:	f7ff ff01 	bl	80051a8 <hagl_fill_rectangle>
    clip_window.x0 = x0;
 80053a6:	f8a4 8000 	strh.w	r8, [r4]
    clip_window.y0 = y0;
 80053aa:	8067      	strh	r7, [r4, #2]
    clip_window.x1 = x1;
 80053ac:	80a6      	strh	r6, [r4, #4]
    clip_window.y1 = y1;
 80053ae:	80e5      	strh	r5, [r4, #6]
    hagl_set_clip_window(x0, y0, x1, y1);
#endif
}
 80053b0:	b002      	add	sp, #8
 80053b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <hagl_color>:
color_t hagl_color(uint8_t r, uint8_t g, uint8_t b)
{
#ifdef HAGL_HAS_HAL_COLOR
    return hagl_hal_color(r, g, b);
#else
    return rgb565(r, g, b);
 80053bc:	f000 b800 	b.w	80053c0 <rgb565>

080053c0 <rgb565>:

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <rgb565+0x18>)
 80053c2:	00c9      	lsls	r1, r1, #3
 80053c4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80053c8:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
 80053cc:	ea03 2000 	and.w	r0, r3, r0, lsl #8
 80053d0:	4310      	orrs	r0, r2
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);

    return rgb;
 80053d2:	ba40      	rev16	r0, r0
}
 80053d4:	b280      	uxth	r0, r0
 80053d6:	4770      	bx	lr
 80053d8:	fffff800 	.word	0xfffff800

080053dc <malloc>:
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <malloc+0xc>)
 80053de:	4601      	mov	r1, r0
 80053e0:	6818      	ldr	r0, [r3, #0]
 80053e2:	f000 b823 	b.w	800542c <_malloc_r>
 80053e6:	bf00      	nop
 80053e8:	2000006c 	.word	0x2000006c

080053ec <sbrk_aligned>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	4e0e      	ldr	r6, [pc, #56]	; (8005428 <sbrk_aligned+0x3c>)
 80053f0:	460c      	mov	r4, r1
 80053f2:	6831      	ldr	r1, [r6, #0]
 80053f4:	4605      	mov	r5, r0
 80053f6:	b911      	cbnz	r1, 80053fe <sbrk_aligned+0x12>
 80053f8:	f000 ff32 	bl	8006260 <_sbrk_r>
 80053fc:	6030      	str	r0, [r6, #0]
 80053fe:	4621      	mov	r1, r4
 8005400:	4628      	mov	r0, r5
 8005402:	f000 ff2d 	bl	8006260 <_sbrk_r>
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	d00a      	beq.n	8005420 <sbrk_aligned+0x34>
 800540a:	1cc4      	adds	r4, r0, #3
 800540c:	f024 0403 	bic.w	r4, r4, #3
 8005410:	42a0      	cmp	r0, r4
 8005412:	d007      	beq.n	8005424 <sbrk_aligned+0x38>
 8005414:	1a21      	subs	r1, r4, r0
 8005416:	4628      	mov	r0, r5
 8005418:	f000 ff22 	bl	8006260 <_sbrk_r>
 800541c:	3001      	adds	r0, #1
 800541e:	d101      	bne.n	8005424 <sbrk_aligned+0x38>
 8005420:	f04f 34ff 	mov.w	r4, #4294967295
 8005424:	4620      	mov	r0, r4
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	2000a44c 	.word	0x2000a44c

0800542c <_malloc_r>:
 800542c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005430:	1ccd      	adds	r5, r1, #3
 8005432:	f025 0503 	bic.w	r5, r5, #3
 8005436:	3508      	adds	r5, #8
 8005438:	2d0c      	cmp	r5, #12
 800543a:	bf38      	it	cc
 800543c:	250c      	movcc	r5, #12
 800543e:	2d00      	cmp	r5, #0
 8005440:	4607      	mov	r7, r0
 8005442:	db01      	blt.n	8005448 <_malloc_r+0x1c>
 8005444:	42a9      	cmp	r1, r5
 8005446:	d905      	bls.n	8005454 <_malloc_r+0x28>
 8005448:	230c      	movs	r3, #12
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	2600      	movs	r6, #0
 800544e:	4630      	mov	r0, r6
 8005450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005454:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005528 <_malloc_r+0xfc>
 8005458:	f000 f868 	bl	800552c <__malloc_lock>
 800545c:	f8d8 3000 	ldr.w	r3, [r8]
 8005460:	461c      	mov	r4, r3
 8005462:	bb5c      	cbnz	r4, 80054bc <_malloc_r+0x90>
 8005464:	4629      	mov	r1, r5
 8005466:	4638      	mov	r0, r7
 8005468:	f7ff ffc0 	bl	80053ec <sbrk_aligned>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	4604      	mov	r4, r0
 8005470:	d155      	bne.n	800551e <_malloc_r+0xf2>
 8005472:	f8d8 4000 	ldr.w	r4, [r8]
 8005476:	4626      	mov	r6, r4
 8005478:	2e00      	cmp	r6, #0
 800547a:	d145      	bne.n	8005508 <_malloc_r+0xdc>
 800547c:	2c00      	cmp	r4, #0
 800547e:	d048      	beq.n	8005512 <_malloc_r+0xe6>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	4631      	mov	r1, r6
 8005484:	4638      	mov	r0, r7
 8005486:	eb04 0903 	add.w	r9, r4, r3
 800548a:	f000 fee9 	bl	8006260 <_sbrk_r>
 800548e:	4581      	cmp	r9, r0
 8005490:	d13f      	bne.n	8005512 <_malloc_r+0xe6>
 8005492:	6821      	ldr	r1, [r4, #0]
 8005494:	1a6d      	subs	r5, r5, r1
 8005496:	4629      	mov	r1, r5
 8005498:	4638      	mov	r0, r7
 800549a:	f7ff ffa7 	bl	80053ec <sbrk_aligned>
 800549e:	3001      	adds	r0, #1
 80054a0:	d037      	beq.n	8005512 <_malloc_r+0xe6>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	442b      	add	r3, r5
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	f8d8 3000 	ldr.w	r3, [r8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d038      	beq.n	8005522 <_malloc_r+0xf6>
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	42a2      	cmp	r2, r4
 80054b4:	d12b      	bne.n	800550e <_malloc_r+0xe2>
 80054b6:	2200      	movs	r2, #0
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	e00f      	b.n	80054dc <_malloc_r+0xb0>
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	1b52      	subs	r2, r2, r5
 80054c0:	d41f      	bmi.n	8005502 <_malloc_r+0xd6>
 80054c2:	2a0b      	cmp	r2, #11
 80054c4:	d917      	bls.n	80054f6 <_malloc_r+0xca>
 80054c6:	1961      	adds	r1, r4, r5
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	6025      	str	r5, [r4, #0]
 80054cc:	bf18      	it	ne
 80054ce:	6059      	strne	r1, [r3, #4]
 80054d0:	6863      	ldr	r3, [r4, #4]
 80054d2:	bf08      	it	eq
 80054d4:	f8c8 1000 	streq.w	r1, [r8]
 80054d8:	5162      	str	r2, [r4, r5]
 80054da:	604b      	str	r3, [r1, #4]
 80054dc:	4638      	mov	r0, r7
 80054de:	f104 060b 	add.w	r6, r4, #11
 80054e2:	f000 f829 	bl	8005538 <__malloc_unlock>
 80054e6:	f026 0607 	bic.w	r6, r6, #7
 80054ea:	1d23      	adds	r3, r4, #4
 80054ec:	1af2      	subs	r2, r6, r3
 80054ee:	d0ae      	beq.n	800544e <_malloc_r+0x22>
 80054f0:	1b9b      	subs	r3, r3, r6
 80054f2:	50a3      	str	r3, [r4, r2]
 80054f4:	e7ab      	b.n	800544e <_malloc_r+0x22>
 80054f6:	42a3      	cmp	r3, r4
 80054f8:	6862      	ldr	r2, [r4, #4]
 80054fa:	d1dd      	bne.n	80054b8 <_malloc_r+0x8c>
 80054fc:	f8c8 2000 	str.w	r2, [r8]
 8005500:	e7ec      	b.n	80054dc <_malloc_r+0xb0>
 8005502:	4623      	mov	r3, r4
 8005504:	6864      	ldr	r4, [r4, #4]
 8005506:	e7ac      	b.n	8005462 <_malloc_r+0x36>
 8005508:	4634      	mov	r4, r6
 800550a:	6876      	ldr	r6, [r6, #4]
 800550c:	e7b4      	b.n	8005478 <_malloc_r+0x4c>
 800550e:	4613      	mov	r3, r2
 8005510:	e7cc      	b.n	80054ac <_malloc_r+0x80>
 8005512:	230c      	movs	r3, #12
 8005514:	603b      	str	r3, [r7, #0]
 8005516:	4638      	mov	r0, r7
 8005518:	f000 f80e 	bl	8005538 <__malloc_unlock>
 800551c:	e797      	b.n	800544e <_malloc_r+0x22>
 800551e:	6025      	str	r5, [r4, #0]
 8005520:	e7dc      	b.n	80054dc <_malloc_r+0xb0>
 8005522:	605b      	str	r3, [r3, #4]
 8005524:	deff      	udf	#255	; 0xff
 8005526:	bf00      	nop
 8005528:	2000a448 	.word	0x2000a448

0800552c <__malloc_lock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_lock+0x8>)
 800552e:	f000 bee4 	b.w	80062fa <__retarget_lock_acquire_recursive>
 8005532:	bf00      	nop
 8005534:	2000a590 	.word	0x2000a590

08005538 <__malloc_unlock>:
 8005538:	4801      	ldr	r0, [pc, #4]	; (8005540 <__malloc_unlock+0x8>)
 800553a:	f000 bedf 	b.w	80062fc <__retarget_lock_release_recursive>
 800553e:	bf00      	nop
 8005540:	2000a590 	.word	0x2000a590

08005544 <__cvt>:
 8005544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	ec55 4b10 	vmov	r4, r5, d0
 800554c:	2d00      	cmp	r5, #0
 800554e:	460e      	mov	r6, r1
 8005550:	4619      	mov	r1, r3
 8005552:	462b      	mov	r3, r5
 8005554:	bfbb      	ittet	lt
 8005556:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800555a:	461d      	movlt	r5, r3
 800555c:	2300      	movge	r3, #0
 800555e:	232d      	movlt	r3, #45	; 0x2d
 8005560:	700b      	strb	r3, [r1, #0]
 8005562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005564:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005568:	4691      	mov	r9, r2
 800556a:	f023 0820 	bic.w	r8, r3, #32
 800556e:	bfbc      	itt	lt
 8005570:	4622      	movlt	r2, r4
 8005572:	4614      	movlt	r4, r2
 8005574:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005578:	d005      	beq.n	8005586 <__cvt+0x42>
 800557a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800557e:	d100      	bne.n	8005582 <__cvt+0x3e>
 8005580:	3601      	adds	r6, #1
 8005582:	2102      	movs	r1, #2
 8005584:	e000      	b.n	8005588 <__cvt+0x44>
 8005586:	2103      	movs	r1, #3
 8005588:	ab03      	add	r3, sp, #12
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	ab02      	add	r3, sp, #8
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	ec45 4b10 	vmov	d0, r4, r5
 8005594:	4653      	mov	r3, sl
 8005596:	4632      	mov	r2, r6
 8005598:	f000 ff4a 	bl	8006430 <_dtoa_r>
 800559c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055a0:	4607      	mov	r7, r0
 80055a2:	d102      	bne.n	80055aa <__cvt+0x66>
 80055a4:	f019 0f01 	tst.w	r9, #1
 80055a8:	d022      	beq.n	80055f0 <__cvt+0xac>
 80055aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055ae:	eb07 0906 	add.w	r9, r7, r6
 80055b2:	d110      	bne.n	80055d6 <__cvt+0x92>
 80055b4:	783b      	ldrb	r3, [r7, #0]
 80055b6:	2b30      	cmp	r3, #48	; 0x30
 80055b8:	d10a      	bne.n	80055d0 <__cvt+0x8c>
 80055ba:	2200      	movs	r2, #0
 80055bc:	2300      	movs	r3, #0
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fb fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80055c6:	b918      	cbnz	r0, 80055d0 <__cvt+0x8c>
 80055c8:	f1c6 0601 	rsb	r6, r6, #1
 80055cc:	f8ca 6000 	str.w	r6, [sl]
 80055d0:	f8da 3000 	ldr.w	r3, [sl]
 80055d4:	4499      	add	r9, r3
 80055d6:	2200      	movs	r2, #0
 80055d8:	2300      	movs	r3, #0
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f7fb fa73 	bl	8000ac8 <__aeabi_dcmpeq>
 80055e2:	b108      	cbz	r0, 80055e8 <__cvt+0xa4>
 80055e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80055e8:	2230      	movs	r2, #48	; 0x30
 80055ea:	9b03      	ldr	r3, [sp, #12]
 80055ec:	454b      	cmp	r3, r9
 80055ee:	d307      	bcc.n	8005600 <__cvt+0xbc>
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055f4:	1bdb      	subs	r3, r3, r7
 80055f6:	4638      	mov	r0, r7
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	b004      	add	sp, #16
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005600:	1c59      	adds	r1, r3, #1
 8005602:	9103      	str	r1, [sp, #12]
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e7f0      	b.n	80055ea <__cvt+0xa6>

08005608 <__exponent>:
 8005608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800560a:	4603      	mov	r3, r0
 800560c:	2900      	cmp	r1, #0
 800560e:	bfb8      	it	lt
 8005610:	4249      	neglt	r1, r1
 8005612:	f803 2b02 	strb.w	r2, [r3], #2
 8005616:	bfb4      	ite	lt
 8005618:	222d      	movlt	r2, #45	; 0x2d
 800561a:	222b      	movge	r2, #43	; 0x2b
 800561c:	2909      	cmp	r1, #9
 800561e:	7042      	strb	r2, [r0, #1]
 8005620:	dd2a      	ble.n	8005678 <__exponent+0x70>
 8005622:	f10d 0207 	add.w	r2, sp, #7
 8005626:	4617      	mov	r7, r2
 8005628:	260a      	movs	r6, #10
 800562a:	4694      	mov	ip, r2
 800562c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005630:	fb06 1415 	mls	r4, r6, r5, r1
 8005634:	3430      	adds	r4, #48	; 0x30
 8005636:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800563a:	460c      	mov	r4, r1
 800563c:	2c63      	cmp	r4, #99	; 0x63
 800563e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005642:	4629      	mov	r1, r5
 8005644:	dcf1      	bgt.n	800562a <__exponent+0x22>
 8005646:	3130      	adds	r1, #48	; 0x30
 8005648:	f1ac 0402 	sub.w	r4, ip, #2
 800564c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005650:	1c41      	adds	r1, r0, #1
 8005652:	4622      	mov	r2, r4
 8005654:	42ba      	cmp	r2, r7
 8005656:	d30a      	bcc.n	800566e <__exponent+0x66>
 8005658:	f10d 0209 	add.w	r2, sp, #9
 800565c:	eba2 020c 	sub.w	r2, r2, ip
 8005660:	42bc      	cmp	r4, r7
 8005662:	bf88      	it	hi
 8005664:	2200      	movhi	r2, #0
 8005666:	4413      	add	r3, r2
 8005668:	1a18      	subs	r0, r3, r0
 800566a:	b003      	add	sp, #12
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800566e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005672:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005676:	e7ed      	b.n	8005654 <__exponent+0x4c>
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	3130      	adds	r1, #48	; 0x30
 800567c:	7083      	strb	r3, [r0, #2]
 800567e:	70c1      	strb	r1, [r0, #3]
 8005680:	1d03      	adds	r3, r0, #4
 8005682:	e7f1      	b.n	8005668 <__exponent+0x60>

08005684 <_printf_float>:
 8005684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005688:	ed2d 8b02 	vpush	{d8}
 800568c:	b08d      	sub	sp, #52	; 0x34
 800568e:	460c      	mov	r4, r1
 8005690:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005694:	4616      	mov	r6, r2
 8005696:	461f      	mov	r7, r3
 8005698:	4605      	mov	r5, r0
 800569a:	f000 fda9 	bl	80061f0 <_localeconv_r>
 800569e:	f8d0 a000 	ldr.w	sl, [r0]
 80056a2:	4650      	mov	r0, sl
 80056a4:	f7fa fde4 	bl	8000270 <strlen>
 80056a8:	2300      	movs	r3, #0
 80056aa:	930a      	str	r3, [sp, #40]	; 0x28
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	9305      	str	r3, [sp, #20]
 80056b0:	f8d8 3000 	ldr.w	r3, [r8]
 80056b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80056b8:	3307      	adds	r3, #7
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	f103 0208 	add.w	r2, r3, #8
 80056c2:	f8c8 2000 	str.w	r2, [r8]
 80056c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80056ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80056ce:	9307      	str	r3, [sp, #28]
 80056d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80056d4:	ee08 0a10 	vmov	s16, r0
 80056d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80056dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e0:	4b9e      	ldr	r3, [pc, #632]	; (800595c <_printf_float+0x2d8>)
 80056e2:	f04f 32ff 	mov.w	r2, #4294967295
 80056e6:	f7fb fa21 	bl	8000b2c <__aeabi_dcmpun>
 80056ea:	bb88      	cbnz	r0, 8005750 <_printf_float+0xcc>
 80056ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056f0:	4b9a      	ldr	r3, [pc, #616]	; (800595c <_printf_float+0x2d8>)
 80056f2:	f04f 32ff 	mov.w	r2, #4294967295
 80056f6:	f7fb f9fb 	bl	8000af0 <__aeabi_dcmple>
 80056fa:	bb48      	cbnz	r0, 8005750 <_printf_float+0xcc>
 80056fc:	2200      	movs	r2, #0
 80056fe:	2300      	movs	r3, #0
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fb f9ea 	bl	8000adc <__aeabi_dcmplt>
 8005708:	b110      	cbz	r0, 8005710 <_printf_float+0x8c>
 800570a:	232d      	movs	r3, #45	; 0x2d
 800570c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005710:	4a93      	ldr	r2, [pc, #588]	; (8005960 <_printf_float+0x2dc>)
 8005712:	4b94      	ldr	r3, [pc, #592]	; (8005964 <_printf_float+0x2e0>)
 8005714:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005718:	bf94      	ite	ls
 800571a:	4690      	movls	r8, r2
 800571c:	4698      	movhi	r8, r3
 800571e:	2303      	movs	r3, #3
 8005720:	6123      	str	r3, [r4, #16]
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	f04f 0900 	mov.w	r9, #0
 800572e:	9700      	str	r7, [sp, #0]
 8005730:	4633      	mov	r3, r6
 8005732:	aa0b      	add	r2, sp, #44	; 0x2c
 8005734:	4621      	mov	r1, r4
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f9da 	bl	8005af0 <_printf_common>
 800573c:	3001      	adds	r0, #1
 800573e:	f040 8090 	bne.w	8005862 <_printf_float+0x1de>
 8005742:	f04f 30ff 	mov.w	r0, #4294967295
 8005746:	b00d      	add	sp, #52	; 0x34
 8005748:	ecbd 8b02 	vpop	{d8}
 800574c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005750:	4642      	mov	r2, r8
 8005752:	464b      	mov	r3, r9
 8005754:	4640      	mov	r0, r8
 8005756:	4649      	mov	r1, r9
 8005758:	f7fb f9e8 	bl	8000b2c <__aeabi_dcmpun>
 800575c:	b140      	cbz	r0, 8005770 <_printf_float+0xec>
 800575e:	464b      	mov	r3, r9
 8005760:	2b00      	cmp	r3, #0
 8005762:	bfbc      	itt	lt
 8005764:	232d      	movlt	r3, #45	; 0x2d
 8005766:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800576a:	4a7f      	ldr	r2, [pc, #508]	; (8005968 <_printf_float+0x2e4>)
 800576c:	4b7f      	ldr	r3, [pc, #508]	; (800596c <_printf_float+0x2e8>)
 800576e:	e7d1      	b.n	8005714 <_printf_float+0x90>
 8005770:	6863      	ldr	r3, [r4, #4]
 8005772:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005776:	9206      	str	r2, [sp, #24]
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	d13f      	bne.n	80057fc <_printf_float+0x178>
 800577c:	2306      	movs	r3, #6
 800577e:	6063      	str	r3, [r4, #4]
 8005780:	9b05      	ldr	r3, [sp, #20]
 8005782:	6861      	ldr	r1, [r4, #4]
 8005784:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005788:	2300      	movs	r3, #0
 800578a:	9303      	str	r3, [sp, #12]
 800578c:	ab0a      	add	r3, sp, #40	; 0x28
 800578e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005792:	ab09      	add	r3, sp, #36	; 0x24
 8005794:	ec49 8b10 	vmov	d0, r8, r9
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80057a0:	4628      	mov	r0, r5
 80057a2:	f7ff fecf 	bl	8005544 <__cvt>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80057aa:	2b47      	cmp	r3, #71	; 0x47
 80057ac:	4680      	mov	r8, r0
 80057ae:	d108      	bne.n	80057c2 <_printf_float+0x13e>
 80057b0:	1cc8      	adds	r0, r1, #3
 80057b2:	db02      	blt.n	80057ba <_printf_float+0x136>
 80057b4:	6863      	ldr	r3, [r4, #4]
 80057b6:	4299      	cmp	r1, r3
 80057b8:	dd41      	ble.n	800583e <_printf_float+0x1ba>
 80057ba:	f1ab 0302 	sub.w	r3, fp, #2
 80057be:	fa5f fb83 	uxtb.w	fp, r3
 80057c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057c6:	d820      	bhi.n	800580a <_printf_float+0x186>
 80057c8:	3901      	subs	r1, #1
 80057ca:	465a      	mov	r2, fp
 80057cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057d0:	9109      	str	r1, [sp, #36]	; 0x24
 80057d2:	f7ff ff19 	bl	8005608 <__exponent>
 80057d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d8:	1813      	adds	r3, r2, r0
 80057da:	2a01      	cmp	r2, #1
 80057dc:	4681      	mov	r9, r0
 80057de:	6123      	str	r3, [r4, #16]
 80057e0:	dc02      	bgt.n	80057e8 <_printf_float+0x164>
 80057e2:	6822      	ldr	r2, [r4, #0]
 80057e4:	07d2      	lsls	r2, r2, #31
 80057e6:	d501      	bpl.n	80057ec <_printf_float+0x168>
 80057e8:	3301      	adds	r3, #1
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d09c      	beq.n	800572e <_printf_float+0xaa>
 80057f4:	232d      	movs	r3, #45	; 0x2d
 80057f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057fa:	e798      	b.n	800572e <_printf_float+0xaa>
 80057fc:	9a06      	ldr	r2, [sp, #24]
 80057fe:	2a47      	cmp	r2, #71	; 0x47
 8005800:	d1be      	bne.n	8005780 <_printf_float+0xfc>
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1bc      	bne.n	8005780 <_printf_float+0xfc>
 8005806:	2301      	movs	r3, #1
 8005808:	e7b9      	b.n	800577e <_printf_float+0xfa>
 800580a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800580e:	d118      	bne.n	8005842 <_printf_float+0x1be>
 8005810:	2900      	cmp	r1, #0
 8005812:	6863      	ldr	r3, [r4, #4]
 8005814:	dd0b      	ble.n	800582e <_printf_float+0x1aa>
 8005816:	6121      	str	r1, [r4, #16]
 8005818:	b913      	cbnz	r3, 8005820 <_printf_float+0x19c>
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	07d0      	lsls	r0, r2, #31
 800581e:	d502      	bpl.n	8005826 <_printf_float+0x1a2>
 8005820:	3301      	adds	r3, #1
 8005822:	440b      	add	r3, r1
 8005824:	6123      	str	r3, [r4, #16]
 8005826:	65a1      	str	r1, [r4, #88]	; 0x58
 8005828:	f04f 0900 	mov.w	r9, #0
 800582c:	e7de      	b.n	80057ec <_printf_float+0x168>
 800582e:	b913      	cbnz	r3, 8005836 <_printf_float+0x1b2>
 8005830:	6822      	ldr	r2, [r4, #0]
 8005832:	07d2      	lsls	r2, r2, #31
 8005834:	d501      	bpl.n	800583a <_printf_float+0x1b6>
 8005836:	3302      	adds	r3, #2
 8005838:	e7f4      	b.n	8005824 <_printf_float+0x1a0>
 800583a:	2301      	movs	r3, #1
 800583c:	e7f2      	b.n	8005824 <_printf_float+0x1a0>
 800583e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005844:	4299      	cmp	r1, r3
 8005846:	db05      	blt.n	8005854 <_printf_float+0x1d0>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	6121      	str	r1, [r4, #16]
 800584c:	07d8      	lsls	r0, r3, #31
 800584e:	d5ea      	bpl.n	8005826 <_printf_float+0x1a2>
 8005850:	1c4b      	adds	r3, r1, #1
 8005852:	e7e7      	b.n	8005824 <_printf_float+0x1a0>
 8005854:	2900      	cmp	r1, #0
 8005856:	bfd4      	ite	le
 8005858:	f1c1 0202 	rsble	r2, r1, #2
 800585c:	2201      	movgt	r2, #1
 800585e:	4413      	add	r3, r2
 8005860:	e7e0      	b.n	8005824 <_printf_float+0x1a0>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	055a      	lsls	r2, r3, #21
 8005866:	d407      	bmi.n	8005878 <_printf_float+0x1f4>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	4642      	mov	r2, r8
 800586c:	4631      	mov	r1, r6
 800586e:	4628      	mov	r0, r5
 8005870:	47b8      	blx	r7
 8005872:	3001      	adds	r0, #1
 8005874:	d12c      	bne.n	80058d0 <_printf_float+0x24c>
 8005876:	e764      	b.n	8005742 <_printf_float+0xbe>
 8005878:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800587c:	f240 80e0 	bls.w	8005a40 <_printf_float+0x3bc>
 8005880:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005884:	2200      	movs	r2, #0
 8005886:	2300      	movs	r3, #0
 8005888:	f7fb f91e 	bl	8000ac8 <__aeabi_dcmpeq>
 800588c:	2800      	cmp	r0, #0
 800588e:	d034      	beq.n	80058fa <_printf_float+0x276>
 8005890:	4a37      	ldr	r2, [pc, #220]	; (8005970 <_printf_float+0x2ec>)
 8005892:	2301      	movs	r3, #1
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f af51 	beq.w	8005742 <_printf_float+0xbe>
 80058a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058a4:	429a      	cmp	r2, r3
 80058a6:	db02      	blt.n	80058ae <_printf_float+0x22a>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07d8      	lsls	r0, r3, #31
 80058ac:	d510      	bpl.n	80058d0 <_printf_float+0x24c>
 80058ae:	ee18 3a10 	vmov	r3, s16
 80058b2:	4652      	mov	r2, sl
 80058b4:	4631      	mov	r1, r6
 80058b6:	4628      	mov	r0, r5
 80058b8:	47b8      	blx	r7
 80058ba:	3001      	adds	r0, #1
 80058bc:	f43f af41 	beq.w	8005742 <_printf_float+0xbe>
 80058c0:	f04f 0800 	mov.w	r8, #0
 80058c4:	f104 091a 	add.w	r9, r4, #26
 80058c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ca:	3b01      	subs	r3, #1
 80058cc:	4543      	cmp	r3, r8
 80058ce:	dc09      	bgt.n	80058e4 <_printf_float+0x260>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	079b      	lsls	r3, r3, #30
 80058d4:	f100 8107 	bmi.w	8005ae6 <_printf_float+0x462>
 80058d8:	68e0      	ldr	r0, [r4, #12]
 80058da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058dc:	4298      	cmp	r0, r3
 80058de:	bfb8      	it	lt
 80058e0:	4618      	movlt	r0, r3
 80058e2:	e730      	b.n	8005746 <_printf_float+0xc2>
 80058e4:	2301      	movs	r3, #1
 80058e6:	464a      	mov	r2, r9
 80058e8:	4631      	mov	r1, r6
 80058ea:	4628      	mov	r0, r5
 80058ec:	47b8      	blx	r7
 80058ee:	3001      	adds	r0, #1
 80058f0:	f43f af27 	beq.w	8005742 <_printf_float+0xbe>
 80058f4:	f108 0801 	add.w	r8, r8, #1
 80058f8:	e7e6      	b.n	80058c8 <_printf_float+0x244>
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	dc39      	bgt.n	8005974 <_printf_float+0x2f0>
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <_printf_float+0x2ec>)
 8005902:	2301      	movs	r3, #1
 8005904:	4631      	mov	r1, r6
 8005906:	4628      	mov	r0, r5
 8005908:	47b8      	blx	r7
 800590a:	3001      	adds	r0, #1
 800590c:	f43f af19 	beq.w	8005742 <_printf_float+0xbe>
 8005910:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005914:	4313      	orrs	r3, r2
 8005916:	d102      	bne.n	800591e <_printf_float+0x29a>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	07d9      	lsls	r1, r3, #31
 800591c:	d5d8      	bpl.n	80058d0 <_printf_float+0x24c>
 800591e:	ee18 3a10 	vmov	r3, s16
 8005922:	4652      	mov	r2, sl
 8005924:	4631      	mov	r1, r6
 8005926:	4628      	mov	r0, r5
 8005928:	47b8      	blx	r7
 800592a:	3001      	adds	r0, #1
 800592c:	f43f af09 	beq.w	8005742 <_printf_float+0xbe>
 8005930:	f04f 0900 	mov.w	r9, #0
 8005934:	f104 0a1a 	add.w	sl, r4, #26
 8005938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800593a:	425b      	negs	r3, r3
 800593c:	454b      	cmp	r3, r9
 800593e:	dc01      	bgt.n	8005944 <_printf_float+0x2c0>
 8005940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005942:	e792      	b.n	800586a <_printf_float+0x1e6>
 8005944:	2301      	movs	r3, #1
 8005946:	4652      	mov	r2, sl
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	f43f aef7 	beq.w	8005742 <_printf_float+0xbe>
 8005954:	f109 0901 	add.w	r9, r9, #1
 8005958:	e7ee      	b.n	8005938 <_printf_float+0x2b4>
 800595a:	bf00      	nop
 800595c:	7fefffff 	.word	0x7fefffff
 8005960:	0800f504 	.word	0x0800f504
 8005964:	0800f508 	.word	0x0800f508
 8005968:	0800f50c 	.word	0x0800f50c
 800596c:	0800f510 	.word	0x0800f510
 8005970:	0800f514 	.word	0x0800f514
 8005974:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005978:	429a      	cmp	r2, r3
 800597a:	bfa8      	it	ge
 800597c:	461a      	movge	r2, r3
 800597e:	2a00      	cmp	r2, #0
 8005980:	4691      	mov	r9, r2
 8005982:	dc37      	bgt.n	80059f4 <_printf_float+0x370>
 8005984:	f04f 0b00 	mov.w	fp, #0
 8005988:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800598c:	f104 021a 	add.w	r2, r4, #26
 8005990:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005992:	9305      	str	r3, [sp, #20]
 8005994:	eba3 0309 	sub.w	r3, r3, r9
 8005998:	455b      	cmp	r3, fp
 800599a:	dc33      	bgt.n	8005a04 <_printf_float+0x380>
 800599c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a0:	429a      	cmp	r2, r3
 80059a2:	db3b      	blt.n	8005a1c <_printf_float+0x398>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	07da      	lsls	r2, r3, #31
 80059a8:	d438      	bmi.n	8005a1c <_printf_float+0x398>
 80059aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059ae:	eba2 0903 	sub.w	r9, r2, r3
 80059b2:	9b05      	ldr	r3, [sp, #20]
 80059b4:	1ad2      	subs	r2, r2, r3
 80059b6:	4591      	cmp	r9, r2
 80059b8:	bfa8      	it	ge
 80059ba:	4691      	movge	r9, r2
 80059bc:	f1b9 0f00 	cmp.w	r9, #0
 80059c0:	dc35      	bgt.n	8005a2e <_printf_float+0x3aa>
 80059c2:	f04f 0800 	mov.w	r8, #0
 80059c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ca:	f104 0a1a 	add.w	sl, r4, #26
 80059ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	eba3 0309 	sub.w	r3, r3, r9
 80059d8:	4543      	cmp	r3, r8
 80059da:	f77f af79 	ble.w	80058d0 <_printf_float+0x24c>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	f43f aeaa 	beq.w	8005742 <_printf_float+0xbe>
 80059ee:	f108 0801 	add.w	r8, r8, #1
 80059f2:	e7ec      	b.n	80059ce <_printf_float+0x34a>
 80059f4:	4613      	mov	r3, r2
 80059f6:	4631      	mov	r1, r6
 80059f8:	4642      	mov	r2, r8
 80059fa:	4628      	mov	r0, r5
 80059fc:	47b8      	blx	r7
 80059fe:	3001      	adds	r0, #1
 8005a00:	d1c0      	bne.n	8005984 <_printf_float+0x300>
 8005a02:	e69e      	b.n	8005742 <_printf_float+0xbe>
 8005a04:	2301      	movs	r3, #1
 8005a06:	4631      	mov	r1, r6
 8005a08:	4628      	mov	r0, r5
 8005a0a:	9205      	str	r2, [sp, #20]
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f ae97 	beq.w	8005742 <_printf_float+0xbe>
 8005a14:	9a05      	ldr	r2, [sp, #20]
 8005a16:	f10b 0b01 	add.w	fp, fp, #1
 8005a1a:	e7b9      	b.n	8005990 <_printf_float+0x30c>
 8005a1c:	ee18 3a10 	vmov	r3, s16
 8005a20:	4652      	mov	r2, sl
 8005a22:	4631      	mov	r1, r6
 8005a24:	4628      	mov	r0, r5
 8005a26:	47b8      	blx	r7
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d1be      	bne.n	80059aa <_printf_float+0x326>
 8005a2c:	e689      	b.n	8005742 <_printf_float+0xbe>
 8005a2e:	9a05      	ldr	r2, [sp, #20]
 8005a30:	464b      	mov	r3, r9
 8005a32:	4442      	add	r2, r8
 8005a34:	4631      	mov	r1, r6
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b8      	blx	r7
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d1c1      	bne.n	80059c2 <_printf_float+0x33e>
 8005a3e:	e680      	b.n	8005742 <_printf_float+0xbe>
 8005a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a42:	2a01      	cmp	r2, #1
 8005a44:	dc01      	bgt.n	8005a4a <_printf_float+0x3c6>
 8005a46:	07db      	lsls	r3, r3, #31
 8005a48:	d53a      	bpl.n	8005ac0 <_printf_float+0x43c>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	4642      	mov	r2, r8
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b8      	blx	r7
 8005a54:	3001      	adds	r0, #1
 8005a56:	f43f ae74 	beq.w	8005742 <_printf_float+0xbe>
 8005a5a:	ee18 3a10 	vmov	r3, s16
 8005a5e:	4652      	mov	r2, sl
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f ae6b 	beq.w	8005742 <_printf_float+0xbe>
 8005a6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a70:	2200      	movs	r2, #0
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a78:	f7fb f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a7c:	b9d8      	cbnz	r0, 8005ab6 <_printf_float+0x432>
 8005a7e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a82:	f108 0201 	add.w	r2, r8, #1
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d10e      	bne.n	8005aae <_printf_float+0x42a>
 8005a90:	e657      	b.n	8005742 <_printf_float+0xbe>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4652      	mov	r2, sl
 8005a96:	4631      	mov	r1, r6
 8005a98:	4628      	mov	r0, r5
 8005a9a:	47b8      	blx	r7
 8005a9c:	3001      	adds	r0, #1
 8005a9e:	f43f ae50 	beq.w	8005742 <_printf_float+0xbe>
 8005aa2:	f108 0801 	add.w	r8, r8, #1
 8005aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	4543      	cmp	r3, r8
 8005aac:	dcf1      	bgt.n	8005a92 <_printf_float+0x40e>
 8005aae:	464b      	mov	r3, r9
 8005ab0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ab4:	e6da      	b.n	800586c <_printf_float+0x1e8>
 8005ab6:	f04f 0800 	mov.w	r8, #0
 8005aba:	f104 0a1a 	add.w	sl, r4, #26
 8005abe:	e7f2      	b.n	8005aa6 <_printf_float+0x422>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	4642      	mov	r2, r8
 8005ac4:	e7df      	b.n	8005a86 <_printf_float+0x402>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	464a      	mov	r2, r9
 8005aca:	4631      	mov	r1, r6
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b8      	blx	r7
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	f43f ae36 	beq.w	8005742 <_printf_float+0xbe>
 8005ad6:	f108 0801 	add.w	r8, r8, #1
 8005ada:	68e3      	ldr	r3, [r4, #12]
 8005adc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ade:	1a5b      	subs	r3, r3, r1
 8005ae0:	4543      	cmp	r3, r8
 8005ae2:	dcf0      	bgt.n	8005ac6 <_printf_float+0x442>
 8005ae4:	e6f8      	b.n	80058d8 <_printf_float+0x254>
 8005ae6:	f04f 0800 	mov.w	r8, #0
 8005aea:	f104 0919 	add.w	r9, r4, #25
 8005aee:	e7f4      	b.n	8005ada <_printf_float+0x456>

08005af0 <_printf_common>:
 8005af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	4616      	mov	r6, r2
 8005af6:	4699      	mov	r9, r3
 8005af8:	688a      	ldr	r2, [r1, #8]
 8005afa:	690b      	ldr	r3, [r1, #16]
 8005afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bfb8      	it	lt
 8005b04:	4613      	movlt	r3, r2
 8005b06:	6033      	str	r3, [r6, #0]
 8005b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	b10a      	cbz	r2, 8005b16 <_printf_common+0x26>
 8005b12:	3301      	adds	r3, #1
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	0699      	lsls	r1, r3, #26
 8005b1a:	bf42      	ittt	mi
 8005b1c:	6833      	ldrmi	r3, [r6, #0]
 8005b1e:	3302      	addmi	r3, #2
 8005b20:	6033      	strmi	r3, [r6, #0]
 8005b22:	6825      	ldr	r5, [r4, #0]
 8005b24:	f015 0506 	ands.w	r5, r5, #6
 8005b28:	d106      	bne.n	8005b38 <_printf_common+0x48>
 8005b2a:	f104 0a19 	add.w	sl, r4, #25
 8005b2e:	68e3      	ldr	r3, [r4, #12]
 8005b30:	6832      	ldr	r2, [r6, #0]
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	dc26      	bgt.n	8005b86 <_printf_common+0x96>
 8005b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b3c:	1e13      	subs	r3, r2, #0
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	bf18      	it	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	0692      	lsls	r2, r2, #26
 8005b46:	d42b      	bmi.n	8005ba0 <_printf_common+0xb0>
 8005b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4638      	mov	r0, r7
 8005b50:	47c0      	blx	r8
 8005b52:	3001      	adds	r0, #1
 8005b54:	d01e      	beq.n	8005b94 <_printf_common+0xa4>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	bf02      	ittt	eq
 8005b62:	68e5      	ldreq	r5, [r4, #12]
 8005b64:	6833      	ldreq	r3, [r6, #0]
 8005b66:	1aed      	subeq	r5, r5, r3
 8005b68:	68a3      	ldr	r3, [r4, #8]
 8005b6a:	bf0c      	ite	eq
 8005b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b70:	2500      	movne	r5, #0
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bfc4      	itt	gt
 8005b76:	1a9b      	subgt	r3, r3, r2
 8005b78:	18ed      	addgt	r5, r5, r3
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	341a      	adds	r4, #26
 8005b7e:	42b5      	cmp	r5, r6
 8005b80:	d11a      	bne.n	8005bb8 <_printf_common+0xc8>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e008      	b.n	8005b98 <_printf_common+0xa8>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4652      	mov	r2, sl
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	47c0      	blx	r8
 8005b90:	3001      	adds	r0, #1
 8005b92:	d103      	bne.n	8005b9c <_printf_common+0xac>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	e7c6      	b.n	8005b2e <_printf_common+0x3e>
 8005ba0:	18e1      	adds	r1, r4, r3
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	2030      	movs	r0, #48	; 0x30
 8005ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005baa:	4422      	add	r2, r4
 8005bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	e7c7      	b.n	8005b48 <_printf_common+0x58>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d0e6      	beq.n	8005b94 <_printf_common+0xa4>
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7d9      	b.n	8005b7e <_printf_common+0x8e>
	...

08005bcc <_printf_i>:
 8005bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	7e0f      	ldrb	r7, [r1, #24]
 8005bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd4:	2f78      	cmp	r7, #120	; 0x78
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	4680      	mov	r8, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	469a      	mov	sl, r3
 8005bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be2:	d807      	bhi.n	8005bf4 <_printf_i+0x28>
 8005be4:	2f62      	cmp	r7, #98	; 0x62
 8005be6:	d80a      	bhi.n	8005bfe <_printf_i+0x32>
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	f000 80d4 	beq.w	8005d96 <_printf_i+0x1ca>
 8005bee:	2f58      	cmp	r7, #88	; 0x58
 8005bf0:	f000 80c0 	beq.w	8005d74 <_printf_i+0x1a8>
 8005bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bfc:	e03a      	b.n	8005c74 <_printf_i+0xa8>
 8005bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c02:	2b15      	cmp	r3, #21
 8005c04:	d8f6      	bhi.n	8005bf4 <_printf_i+0x28>
 8005c06:	a101      	add	r1, pc, #4	; (adr r1, 8005c0c <_printf_i+0x40>)
 8005c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005bf5 	.word	0x08005bf5
 8005c18:	08005bf5 	.word	0x08005bf5
 8005c1c:	08005bf5 	.word	0x08005bf5
 8005c20:	08005bf5 	.word	0x08005bf5
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005bf5 	.word	0x08005bf5
 8005c2c:	08005bf5 	.word	0x08005bf5
 8005c30:	08005bf5 	.word	0x08005bf5
 8005c34:	08005bf5 	.word	0x08005bf5
 8005c38:	08005d7d 	.word	0x08005d7d
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005d37 	.word	0x08005d37
 8005c44:	08005bf5 	.word	0x08005bf5
 8005c48:	08005bf5 	.word	0x08005bf5
 8005c4c:	08005d9f 	.word	0x08005d9f
 8005c50:	08005bf5 	.word	0x08005bf5
 8005c54:	08005ca5 	.word	0x08005ca5
 8005c58:	08005bf5 	.word	0x08005bf5
 8005c5c:	08005bf5 	.word	0x08005bf5
 8005c60:	08005d3f 	.word	0x08005d3f
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c74:	2301      	movs	r3, #1
 8005c76:	e09f      	b.n	8005db8 <_printf_i+0x1ec>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	0607      	lsls	r7, r0, #24
 8005c7e:	f103 0104 	add.w	r1, r3, #4
 8005c82:	6029      	str	r1, [r5, #0]
 8005c84:	d501      	bpl.n	8005c8a <_printf_i+0xbe>
 8005c86:	681e      	ldr	r6, [r3, #0]
 8005c88:	e003      	b.n	8005c92 <_printf_i+0xc6>
 8005c8a:	0646      	lsls	r6, r0, #25
 8005c8c:	d5fb      	bpl.n	8005c86 <_printf_i+0xba>
 8005c8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	da03      	bge.n	8005c9e <_printf_i+0xd2>
 8005c96:	232d      	movs	r3, #45	; 0x2d
 8005c98:	4276      	negs	r6, r6
 8005c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9e:	485a      	ldr	r0, [pc, #360]	; (8005e08 <_printf_i+0x23c>)
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	e012      	b.n	8005cca <_printf_i+0xfe>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	1d19      	adds	r1, r3, #4
 8005caa:	6029      	str	r1, [r5, #0]
 8005cac:	0605      	lsls	r5, r0, #24
 8005cae:	d501      	bpl.n	8005cb4 <_printf_i+0xe8>
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <_printf_i+0xee>
 8005cb4:	0641      	lsls	r1, r0, #25
 8005cb6:	d5fb      	bpl.n	8005cb0 <_printf_i+0xe4>
 8005cb8:	881e      	ldrh	r6, [r3, #0]
 8005cba:	4853      	ldr	r0, [pc, #332]	; (8005e08 <_printf_i+0x23c>)
 8005cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2308      	moveq	r3, #8
 8005cc2:	230a      	movne	r3, #10
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cca:	6865      	ldr	r5, [r4, #4]
 8005ccc:	60a5      	str	r5, [r4, #8]
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	bfa2      	ittt	ge
 8005cd2:	6821      	ldrge	r1, [r4, #0]
 8005cd4:	f021 0104 	bicge.w	r1, r1, #4
 8005cd8:	6021      	strge	r1, [r4, #0]
 8005cda:	b90e      	cbnz	r6, 8005ce0 <_printf_i+0x114>
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	d04b      	beq.n	8005d78 <_printf_i+0x1ac>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cea:	5dc7      	ldrb	r7, [r0, r7]
 8005cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	42bb      	cmp	r3, r7
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	d9f4      	bls.n	8005ce2 <_printf_i+0x116>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d10b      	bne.n	8005d14 <_printf_i+0x148>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07de      	lsls	r6, r3, #31
 8005d00:	d508      	bpl.n	8005d14 <_printf_i+0x148>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6861      	ldr	r1, [r4, #4]
 8005d06:	4299      	cmp	r1, r3
 8005d08:	bfde      	ittt	le
 8005d0a:	2330      	movle	r3, #48	; 0x30
 8005d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d14:	1b52      	subs	r2, r2, r5
 8005d16:	6122      	str	r2, [r4, #16]
 8005d18:	f8cd a000 	str.w	sl, [sp]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	aa03      	add	r2, sp, #12
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f7ff fee4 	bl	8005af0 <_printf_common>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d14a      	bne.n	8005dc2 <_printf_i+0x1f6>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	b004      	add	sp, #16
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	4833      	ldr	r0, [pc, #204]	; (8005e0c <_printf_i+0x240>)
 8005d40:	2778      	movs	r7, #120	; 0x78
 8005d42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6829      	ldr	r1, [r5, #0]
 8005d4a:	061f      	lsls	r7, r3, #24
 8005d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d50:	d402      	bmi.n	8005d58 <_printf_i+0x18c>
 8005d52:	065f      	lsls	r7, r3, #25
 8005d54:	bf48      	it	mi
 8005d56:	b2b6      	uxthmi	r6, r6
 8005d58:	07df      	lsls	r7, r3, #31
 8005d5a:	bf48      	it	mi
 8005d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d60:	6029      	str	r1, [r5, #0]
 8005d62:	bf48      	it	mi
 8005d64:	6023      	strmi	r3, [r4, #0]
 8005d66:	b91e      	cbnz	r6, 8005d70 <_printf_i+0x1a4>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	f023 0320 	bic.w	r3, r3, #32
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	2310      	movs	r3, #16
 8005d72:	e7a7      	b.n	8005cc4 <_printf_i+0xf8>
 8005d74:	4824      	ldr	r0, [pc, #144]	; (8005e08 <_printf_i+0x23c>)
 8005d76:	e7e4      	b.n	8005d42 <_printf_i+0x176>
 8005d78:	4615      	mov	r5, r2
 8005d7a:	e7bd      	b.n	8005cf8 <_printf_i+0x12c>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	6826      	ldr	r6, [r4, #0]
 8005d80:	6961      	ldr	r1, [r4, #20]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6028      	str	r0, [r5, #0]
 8005d86:	0635      	lsls	r5, r6, #24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0x1c4>
 8005d8c:	6019      	str	r1, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <_printf_i+0x1ca>
 8005d90:	0670      	lsls	r0, r6, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0x1c0>
 8005d94:	8019      	strh	r1, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	4615      	mov	r5, r2
 8005d9c:	e7bc      	b.n	8005d18 <_printf_i+0x14c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	602a      	str	r2, [r5, #0]
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	2100      	movs	r1, #0
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fa fa10 	bl	80001d0 <memchr>
 8005db0:	b108      	cbz	r0, 8005db6 <_printf_i+0x1ea>
 8005db2:	1b40      	subs	r0, r0, r5
 8005db4:	6060      	str	r0, [r4, #4]
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc0:	e7aa      	b.n	8005d18 <_printf_i+0x14c>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4640      	mov	r0, r8
 8005dca:	47d0      	blx	sl
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d0ad      	beq.n	8005d2c <_printf_i+0x160>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	079b      	lsls	r3, r3, #30
 8005dd4:	d413      	bmi.n	8005dfe <_printf_i+0x232>
 8005dd6:	68e0      	ldr	r0, [r4, #12]
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	4298      	cmp	r0, r3
 8005ddc:	bfb8      	it	lt
 8005dde:	4618      	movlt	r0, r3
 8005de0:	e7a6      	b.n	8005d30 <_printf_i+0x164>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4632      	mov	r2, r6
 8005de6:	4649      	mov	r1, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	47d0      	blx	sl
 8005dec:	3001      	adds	r0, #1
 8005dee:	d09d      	beq.n	8005d2c <_printf_i+0x160>
 8005df0:	3501      	adds	r5, #1
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	9903      	ldr	r1, [sp, #12]
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	42ab      	cmp	r3, r5
 8005dfa:	dcf2      	bgt.n	8005de2 <_printf_i+0x216>
 8005dfc:	e7eb      	b.n	8005dd6 <_printf_i+0x20a>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	f104 0619 	add.w	r6, r4, #25
 8005e04:	e7f5      	b.n	8005df2 <_printf_i+0x226>
 8005e06:	bf00      	nop
 8005e08:	0800f516 	.word	0x0800f516
 8005e0c:	0800f527 	.word	0x0800f527

08005e10 <__sflush_r>:
 8005e10:	898a      	ldrh	r2, [r1, #12]
 8005e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e16:	4605      	mov	r5, r0
 8005e18:	0710      	lsls	r0, r2, #28
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	d458      	bmi.n	8005ed0 <__sflush_r+0xc0>
 8005e1e:	684b      	ldr	r3, [r1, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	dc05      	bgt.n	8005e30 <__sflush_r+0x20>
 8005e24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dc02      	bgt.n	8005e30 <__sflush_r+0x20>
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d0f9      	beq.n	8005e2a <__sflush_r+0x1a>
 8005e36:	2300      	movs	r3, #0
 8005e38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e3c:	682f      	ldr	r7, [r5, #0]
 8005e3e:	6a21      	ldr	r1, [r4, #32]
 8005e40:	602b      	str	r3, [r5, #0]
 8005e42:	d032      	beq.n	8005eaa <__sflush_r+0x9a>
 8005e44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	075a      	lsls	r2, r3, #29
 8005e4a:	d505      	bpl.n	8005e58 <__sflush_r+0x48>
 8005e4c:	6863      	ldr	r3, [r4, #4]
 8005e4e:	1ac0      	subs	r0, r0, r3
 8005e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e52:	b10b      	cbz	r3, 8005e58 <__sflush_r+0x48>
 8005e54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e56:	1ac0      	subs	r0, r0, r3
 8005e58:	2300      	movs	r3, #0
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e5e:	6a21      	ldr	r1, [r4, #32]
 8005e60:	4628      	mov	r0, r5
 8005e62:	47b0      	blx	r6
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	d106      	bne.n	8005e78 <__sflush_r+0x68>
 8005e6a:	6829      	ldr	r1, [r5, #0]
 8005e6c:	291d      	cmp	r1, #29
 8005e6e:	d82b      	bhi.n	8005ec8 <__sflush_r+0xb8>
 8005e70:	4a29      	ldr	r2, [pc, #164]	; (8005f18 <__sflush_r+0x108>)
 8005e72:	410a      	asrs	r2, r1
 8005e74:	07d6      	lsls	r6, r2, #31
 8005e76:	d427      	bmi.n	8005ec8 <__sflush_r+0xb8>
 8005e78:	2200      	movs	r2, #0
 8005e7a:	6062      	str	r2, [r4, #4]
 8005e7c:	04d9      	lsls	r1, r3, #19
 8005e7e:	6922      	ldr	r2, [r4, #16]
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	d504      	bpl.n	8005e8e <__sflush_r+0x7e>
 8005e84:	1c42      	adds	r2, r0, #1
 8005e86:	d101      	bne.n	8005e8c <__sflush_r+0x7c>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b903      	cbnz	r3, 8005e8e <__sflush_r+0x7e>
 8005e8c:	6560      	str	r0, [r4, #84]	; 0x54
 8005e8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e90:	602f      	str	r7, [r5, #0]
 8005e92:	2900      	cmp	r1, #0
 8005e94:	d0c9      	beq.n	8005e2a <__sflush_r+0x1a>
 8005e96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	d002      	beq.n	8005ea4 <__sflush_r+0x94>
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f001 f8b8 	bl	8007014 <_free_r>
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	6360      	str	r0, [r4, #52]	; 0x34
 8005ea8:	e7c0      	b.n	8005e2c <__sflush_r+0x1c>
 8005eaa:	2301      	movs	r3, #1
 8005eac:	4628      	mov	r0, r5
 8005eae:	47b0      	blx	r6
 8005eb0:	1c41      	adds	r1, r0, #1
 8005eb2:	d1c8      	bne.n	8005e46 <__sflush_r+0x36>
 8005eb4:	682b      	ldr	r3, [r5, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0c5      	beq.n	8005e46 <__sflush_r+0x36>
 8005eba:	2b1d      	cmp	r3, #29
 8005ebc:	d001      	beq.n	8005ec2 <__sflush_r+0xb2>
 8005ebe:	2b16      	cmp	r3, #22
 8005ec0:	d101      	bne.n	8005ec6 <__sflush_r+0xb6>
 8005ec2:	602f      	str	r7, [r5, #0]
 8005ec4:	e7b1      	b.n	8005e2a <__sflush_r+0x1a>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	e7ad      	b.n	8005e2c <__sflush_r+0x1c>
 8005ed0:	690f      	ldr	r7, [r1, #16]
 8005ed2:	2f00      	cmp	r7, #0
 8005ed4:	d0a9      	beq.n	8005e2a <__sflush_r+0x1a>
 8005ed6:	0793      	lsls	r3, r2, #30
 8005ed8:	680e      	ldr	r6, [r1, #0]
 8005eda:	bf08      	it	eq
 8005edc:	694b      	ldreq	r3, [r1, #20]
 8005ede:	600f      	str	r7, [r1, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	eba6 0807 	sub.w	r8, r6, r7
 8005ee8:	608b      	str	r3, [r1, #8]
 8005eea:	f1b8 0f00 	cmp.w	r8, #0
 8005eee:	dd9c      	ble.n	8005e2a <__sflush_r+0x1a>
 8005ef0:	6a21      	ldr	r1, [r4, #32]
 8005ef2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4628      	mov	r0, r5
 8005efa:	47b0      	blx	r6
 8005efc:	2800      	cmp	r0, #0
 8005efe:	dc06      	bgt.n	8005f0e <__sflush_r+0xfe>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f06:	81a3      	strh	r3, [r4, #12]
 8005f08:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0c:	e78e      	b.n	8005e2c <__sflush_r+0x1c>
 8005f0e:	4407      	add	r7, r0
 8005f10:	eba8 0800 	sub.w	r8, r8, r0
 8005f14:	e7e9      	b.n	8005eea <__sflush_r+0xda>
 8005f16:	bf00      	nop
 8005f18:	dfbffffe 	.word	0xdfbffffe

08005f1c <_fflush_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	690b      	ldr	r3, [r1, #16]
 8005f20:	4605      	mov	r5, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	b913      	cbnz	r3, 8005f2c <_fflush_r+0x10>
 8005f26:	2500      	movs	r5, #0
 8005f28:	4628      	mov	r0, r5
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	b118      	cbz	r0, 8005f36 <_fflush_r+0x1a>
 8005f2e:	6a03      	ldr	r3, [r0, #32]
 8005f30:	b90b      	cbnz	r3, 8005f36 <_fflush_r+0x1a>
 8005f32:	f000 f8a7 	bl	8006084 <__sinit>
 8005f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0f3      	beq.n	8005f26 <_fflush_r+0xa>
 8005f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f40:	07d0      	lsls	r0, r2, #31
 8005f42:	d404      	bmi.n	8005f4e <_fflush_r+0x32>
 8005f44:	0599      	lsls	r1, r3, #22
 8005f46:	d402      	bmi.n	8005f4e <_fflush_r+0x32>
 8005f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4a:	f000 f9d6 	bl	80062fa <__retarget_lock_acquire_recursive>
 8005f4e:	4628      	mov	r0, r5
 8005f50:	4621      	mov	r1, r4
 8005f52:	f7ff ff5d 	bl	8005e10 <__sflush_r>
 8005f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f58:	07da      	lsls	r2, r3, #31
 8005f5a:	4605      	mov	r5, r0
 8005f5c:	d4e4      	bmi.n	8005f28 <_fflush_r+0xc>
 8005f5e:	89a3      	ldrh	r3, [r4, #12]
 8005f60:	059b      	lsls	r3, r3, #22
 8005f62:	d4e1      	bmi.n	8005f28 <_fflush_r+0xc>
 8005f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f66:	f000 f9c9 	bl	80062fc <__retarget_lock_release_recursive>
 8005f6a:	e7dd      	b.n	8005f28 <_fflush_r+0xc>

08005f6c <std>:
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	b510      	push	{r4, lr}
 8005f70:	4604      	mov	r4, r0
 8005f72:	e9c0 3300 	strd	r3, r3, [r0]
 8005f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f7a:	6083      	str	r3, [r0, #8]
 8005f7c:	8181      	strh	r1, [r0, #12]
 8005f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005f80:	81c2      	strh	r2, [r0, #14]
 8005f82:	6183      	str	r3, [r0, #24]
 8005f84:	4619      	mov	r1, r3
 8005f86:	2208      	movs	r2, #8
 8005f88:	305c      	adds	r0, #92	; 0x5c
 8005f8a:	f000 f929 	bl	80061e0 <memset>
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	; (8005fc4 <std+0x58>)
 8005f90:	6263      	str	r3, [r4, #36]	; 0x24
 8005f92:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <std+0x5c>)
 8005f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f96:	4b0d      	ldr	r3, [pc, #52]	; (8005fcc <std+0x60>)
 8005f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f9a:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <std+0x64>)
 8005f9c:	6323      	str	r3, [r4, #48]	; 0x30
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	; (8005fd4 <std+0x68>)
 8005fa0:	6224      	str	r4, [r4, #32]
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d006      	beq.n	8005fb4 <std+0x48>
 8005fa6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005faa:	4294      	cmp	r4, r2
 8005fac:	d002      	beq.n	8005fb4 <std+0x48>
 8005fae:	33d0      	adds	r3, #208	; 0xd0
 8005fb0:	429c      	cmp	r4, r3
 8005fb2:	d105      	bne.n	8005fc0 <std+0x54>
 8005fb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fbc:	f000 b99c 	b.w	80062f8 <__retarget_lock_init_recursive>
 8005fc0:	bd10      	pop	{r4, pc}
 8005fc2:	bf00      	nop
 8005fc4:	080060f1 	.word	0x080060f1
 8005fc8:	08006113 	.word	0x08006113
 8005fcc:	0800614b 	.word	0x0800614b
 8005fd0:	0800616f 	.word	0x0800616f
 8005fd4:	2000a450 	.word	0x2000a450

08005fd8 <stdio_exit_handler>:
 8005fd8:	4a02      	ldr	r2, [pc, #8]	; (8005fe4 <stdio_exit_handler+0xc>)
 8005fda:	4903      	ldr	r1, [pc, #12]	; (8005fe8 <stdio_exit_handler+0x10>)
 8005fdc:	4803      	ldr	r0, [pc, #12]	; (8005fec <stdio_exit_handler+0x14>)
 8005fde:	f000 b869 	b.w	80060b4 <_fwalk_sglue>
 8005fe2:	bf00      	nop
 8005fe4:	20000014 	.word	0x20000014
 8005fe8:	08005f1d 	.word	0x08005f1d
 8005fec:	20000020 	.word	0x20000020

08005ff0 <cleanup_stdio>:
 8005ff0:	6841      	ldr	r1, [r0, #4]
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <cleanup_stdio+0x34>)
 8005ff4:	4299      	cmp	r1, r3
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	d001      	beq.n	8006000 <cleanup_stdio+0x10>
 8005ffc:	f7ff ff8e 	bl	8005f1c <_fflush_r>
 8006000:	68a1      	ldr	r1, [r4, #8]
 8006002:	4b09      	ldr	r3, [pc, #36]	; (8006028 <cleanup_stdio+0x38>)
 8006004:	4299      	cmp	r1, r3
 8006006:	d002      	beq.n	800600e <cleanup_stdio+0x1e>
 8006008:	4620      	mov	r0, r4
 800600a:	f7ff ff87 	bl	8005f1c <_fflush_r>
 800600e:	68e1      	ldr	r1, [r4, #12]
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <cleanup_stdio+0x3c>)
 8006012:	4299      	cmp	r1, r3
 8006014:	d004      	beq.n	8006020 <cleanup_stdio+0x30>
 8006016:	4620      	mov	r0, r4
 8006018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601c:	f7ff bf7e 	b.w	8005f1c <_fflush_r>
 8006020:	bd10      	pop	{r4, pc}
 8006022:	bf00      	nop
 8006024:	2000a450 	.word	0x2000a450
 8006028:	2000a4b8 	.word	0x2000a4b8
 800602c:	2000a520 	.word	0x2000a520

08006030 <global_stdio_init.part.0>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <global_stdio_init.part.0+0x30>)
 8006034:	4c0b      	ldr	r4, [pc, #44]	; (8006064 <global_stdio_init.part.0+0x34>)
 8006036:	4a0c      	ldr	r2, [pc, #48]	; (8006068 <global_stdio_init.part.0+0x38>)
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	4620      	mov	r0, r4
 800603c:	2200      	movs	r2, #0
 800603e:	2104      	movs	r1, #4
 8006040:	f7ff ff94 	bl	8005f6c <std>
 8006044:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006048:	2201      	movs	r2, #1
 800604a:	2109      	movs	r1, #9
 800604c:	f7ff ff8e 	bl	8005f6c <std>
 8006050:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006054:	2202      	movs	r2, #2
 8006056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605a:	2112      	movs	r1, #18
 800605c:	f7ff bf86 	b.w	8005f6c <std>
 8006060:	2000a588 	.word	0x2000a588
 8006064:	2000a450 	.word	0x2000a450
 8006068:	08005fd9 	.word	0x08005fd9

0800606c <__sfp_lock_acquire>:
 800606c:	4801      	ldr	r0, [pc, #4]	; (8006074 <__sfp_lock_acquire+0x8>)
 800606e:	f000 b944 	b.w	80062fa <__retarget_lock_acquire_recursive>
 8006072:	bf00      	nop
 8006074:	2000a591 	.word	0x2000a591

08006078 <__sfp_lock_release>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__sfp_lock_release+0x8>)
 800607a:	f000 b93f 	b.w	80062fc <__retarget_lock_release_recursive>
 800607e:	bf00      	nop
 8006080:	2000a591 	.word	0x2000a591

08006084 <__sinit>:
 8006084:	b510      	push	{r4, lr}
 8006086:	4604      	mov	r4, r0
 8006088:	f7ff fff0 	bl	800606c <__sfp_lock_acquire>
 800608c:	6a23      	ldr	r3, [r4, #32]
 800608e:	b11b      	cbz	r3, 8006098 <__sinit+0x14>
 8006090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006094:	f7ff bff0 	b.w	8006078 <__sfp_lock_release>
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <__sinit+0x28>)
 800609a:	6223      	str	r3, [r4, #32]
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <__sinit+0x2c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1f5      	bne.n	8006090 <__sinit+0xc>
 80060a4:	f7ff ffc4 	bl	8006030 <global_stdio_init.part.0>
 80060a8:	e7f2      	b.n	8006090 <__sinit+0xc>
 80060aa:	bf00      	nop
 80060ac:	08005ff1 	.word	0x08005ff1
 80060b0:	2000a588 	.word	0x2000a588

080060b4 <_fwalk_sglue>:
 80060b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b8:	4607      	mov	r7, r0
 80060ba:	4688      	mov	r8, r1
 80060bc:	4614      	mov	r4, r2
 80060be:	2600      	movs	r6, #0
 80060c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060c4:	f1b9 0901 	subs.w	r9, r9, #1
 80060c8:	d505      	bpl.n	80060d6 <_fwalk_sglue+0x22>
 80060ca:	6824      	ldr	r4, [r4, #0]
 80060cc:	2c00      	cmp	r4, #0
 80060ce:	d1f7      	bne.n	80060c0 <_fwalk_sglue+0xc>
 80060d0:	4630      	mov	r0, r6
 80060d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d907      	bls.n	80060ec <_fwalk_sglue+0x38>
 80060dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060e0:	3301      	adds	r3, #1
 80060e2:	d003      	beq.n	80060ec <_fwalk_sglue+0x38>
 80060e4:	4629      	mov	r1, r5
 80060e6:	4638      	mov	r0, r7
 80060e8:	47c0      	blx	r8
 80060ea:	4306      	orrs	r6, r0
 80060ec:	3568      	adds	r5, #104	; 0x68
 80060ee:	e7e9      	b.n	80060c4 <_fwalk_sglue+0x10>

080060f0 <__sread>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	460c      	mov	r4, r1
 80060f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f8:	f000 f8a0 	bl	800623c <_read_r>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	bfab      	itete	ge
 8006100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006102:	89a3      	ldrhlt	r3, [r4, #12]
 8006104:	181b      	addge	r3, r3, r0
 8006106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800610a:	bfac      	ite	ge
 800610c:	6563      	strge	r3, [r4, #84]	; 0x54
 800610e:	81a3      	strhlt	r3, [r4, #12]
 8006110:	bd10      	pop	{r4, pc}

08006112 <__swrite>:
 8006112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006116:	461f      	mov	r7, r3
 8006118:	898b      	ldrh	r3, [r1, #12]
 800611a:	05db      	lsls	r3, r3, #23
 800611c:	4605      	mov	r5, r0
 800611e:	460c      	mov	r4, r1
 8006120:	4616      	mov	r6, r2
 8006122:	d505      	bpl.n	8006130 <__swrite+0x1e>
 8006124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006128:	2302      	movs	r3, #2
 800612a:	2200      	movs	r2, #0
 800612c:	f000 f874 	bl	8006218 <_lseek_r>
 8006130:	89a3      	ldrh	r3, [r4, #12]
 8006132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	4632      	mov	r2, r6
 800613e:	463b      	mov	r3, r7
 8006140:	4628      	mov	r0, r5
 8006142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006146:	f000 b89b 	b.w	8006280 <_write_r>

0800614a <__sseek>:
 800614a:	b510      	push	{r4, lr}
 800614c:	460c      	mov	r4, r1
 800614e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006152:	f000 f861 	bl	8006218 <_lseek_r>
 8006156:	1c43      	adds	r3, r0, #1
 8006158:	89a3      	ldrh	r3, [r4, #12]
 800615a:	bf15      	itete	ne
 800615c:	6560      	strne	r0, [r4, #84]	; 0x54
 800615e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006166:	81a3      	strheq	r3, [r4, #12]
 8006168:	bf18      	it	ne
 800616a:	81a3      	strhne	r3, [r4, #12]
 800616c:	bd10      	pop	{r4, pc}

0800616e <__sclose>:
 800616e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006172:	f000 b841 	b.w	80061f8 <_close_r>
	...

08006178 <swprintf>:
 8006178:	b40c      	push	{r2, r3}
 800617a:	b530      	push	{r4, r5, lr}
 800617c:	4b17      	ldr	r3, [pc, #92]	; (80061dc <swprintf+0x64>)
 800617e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006182:	681d      	ldr	r5, [r3, #0]
 8006184:	b09d      	sub	sp, #116	; 0x74
 8006186:	460c      	mov	r4, r1
 8006188:	d308      	bcc.n	800619c <swprintf+0x24>
 800618a:	238b      	movs	r3, #139	; 0x8b
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	b01d      	add	sp, #116	; 0x74
 8006194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006198:	b002      	add	sp, #8
 800619a:	4770      	bx	lr
 800619c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061a4:	9002      	str	r0, [sp, #8]
 80061a6:	9006      	str	r0, [sp, #24]
 80061a8:	b1b1      	cbz	r1, 80061d8 <swprintf+0x60>
 80061aa:	1e4b      	subs	r3, r1, #1
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061bc:	ab21      	add	r3, sp, #132	; 0x84
 80061be:	a902      	add	r1, sp, #8
 80061c0:	4628      	mov	r0, r5
 80061c2:	9301      	str	r3, [sp, #4]
 80061c4:	f001 fbc0 	bl	8007948 <_svfwprintf_r>
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	d0de      	beq.n	800618a <swprintf+0x12>
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	2200      	movs	r2, #0
 80061d0:	42a0      	cmp	r0, r4
 80061d2:	601a      	str	r2, [r3, #0]
 80061d4:	d3dd      	bcc.n	8006192 <swprintf+0x1a>
 80061d6:	e7d8      	b.n	800618a <swprintf+0x12>
 80061d8:	460b      	mov	r3, r1
 80061da:	e7e8      	b.n	80061ae <swprintf+0x36>
 80061dc:	2000006c 	.word	0x2000006c

080061e0 <memset>:
 80061e0:	4402      	add	r2, r0
 80061e2:	4603      	mov	r3, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <_localeconv_r>:
 80061f0:	4800      	ldr	r0, [pc, #0]	; (80061f4 <_localeconv_r+0x4>)
 80061f2:	4770      	bx	lr
 80061f4:	20000160 	.word	0x20000160

080061f8 <_close_r>:
 80061f8:	b538      	push	{r3, r4, r5, lr}
 80061fa:	4d06      	ldr	r5, [pc, #24]	; (8006214 <_close_r+0x1c>)
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	4608      	mov	r0, r1
 8006202:	602b      	str	r3, [r5, #0]
 8006204:	f7fb fc62 	bl	8001acc <_close>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_close_r+0x1a>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_close_r+0x1a>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	2000a58c 	.word	0x2000a58c

08006218 <_lseek_r>:
 8006218:	b538      	push	{r3, r4, r5, lr}
 800621a:	4d07      	ldr	r5, [pc, #28]	; (8006238 <_lseek_r+0x20>)
 800621c:	4604      	mov	r4, r0
 800621e:	4608      	mov	r0, r1
 8006220:	4611      	mov	r1, r2
 8006222:	2200      	movs	r2, #0
 8006224:	602a      	str	r2, [r5, #0]
 8006226:	461a      	mov	r2, r3
 8006228:	f7fb fc5a 	bl	8001ae0 <_lseek>
 800622c:	1c43      	adds	r3, r0, #1
 800622e:	d102      	bne.n	8006236 <_lseek_r+0x1e>
 8006230:	682b      	ldr	r3, [r5, #0]
 8006232:	b103      	cbz	r3, 8006236 <_lseek_r+0x1e>
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	bd38      	pop	{r3, r4, r5, pc}
 8006238:	2000a58c 	.word	0x2000a58c

0800623c <_read_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4d07      	ldr	r5, [pc, #28]	; (800625c <_read_r+0x20>)
 8006240:	4604      	mov	r4, r0
 8006242:	4608      	mov	r0, r1
 8006244:	4611      	mov	r1, r2
 8006246:	2200      	movs	r2, #0
 8006248:	602a      	str	r2, [r5, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	f7fb fc22 	bl	8001a94 <_read>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d102      	bne.n	800625a <_read_r+0x1e>
 8006254:	682b      	ldr	r3, [r5, #0]
 8006256:	b103      	cbz	r3, 800625a <_read_r+0x1e>
 8006258:	6023      	str	r3, [r4, #0]
 800625a:	bd38      	pop	{r3, r4, r5, pc}
 800625c:	2000a58c 	.word	0x2000a58c

08006260 <_sbrk_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4d06      	ldr	r5, [pc, #24]	; (800627c <_sbrk_r+0x1c>)
 8006264:	2300      	movs	r3, #0
 8006266:	4604      	mov	r4, r0
 8006268:	4608      	mov	r0, r1
 800626a:	602b      	str	r3, [r5, #0]
 800626c:	f7fb fc3a 	bl	8001ae4 <_sbrk>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d102      	bne.n	800627a <_sbrk_r+0x1a>
 8006274:	682b      	ldr	r3, [r5, #0]
 8006276:	b103      	cbz	r3, 800627a <_sbrk_r+0x1a>
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	2000a58c 	.word	0x2000a58c

08006280 <_write_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4d07      	ldr	r5, [pc, #28]	; (80062a0 <_write_r+0x20>)
 8006284:	4604      	mov	r4, r0
 8006286:	4608      	mov	r0, r1
 8006288:	4611      	mov	r1, r2
 800628a:	2200      	movs	r2, #0
 800628c:	602a      	str	r2, [r5, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fb fc0e 	bl	8001ab0 <_write>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_write_r+0x1e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_write_r+0x1e>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	2000a58c 	.word	0x2000a58c

080062a4 <__errno>:
 80062a4:	4b01      	ldr	r3, [pc, #4]	; (80062ac <__errno+0x8>)
 80062a6:	6818      	ldr	r0, [r3, #0]
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	2000006c 	.word	0x2000006c

080062b0 <__libc_init_array>:
 80062b0:	b570      	push	{r4, r5, r6, lr}
 80062b2:	4d0d      	ldr	r5, [pc, #52]	; (80062e8 <__libc_init_array+0x38>)
 80062b4:	4c0d      	ldr	r4, [pc, #52]	; (80062ec <__libc_init_array+0x3c>)
 80062b6:	1b64      	subs	r4, r4, r5
 80062b8:	10a4      	asrs	r4, r4, #2
 80062ba:	2600      	movs	r6, #0
 80062bc:	42a6      	cmp	r6, r4
 80062be:	d109      	bne.n	80062d4 <__libc_init_array+0x24>
 80062c0:	4d0b      	ldr	r5, [pc, #44]	; (80062f0 <__libc_init_array+0x40>)
 80062c2:	4c0c      	ldr	r4, [pc, #48]	; (80062f4 <__libc_init_array+0x44>)
 80062c4:	f003 fdb8 	bl	8009e38 <_init>
 80062c8:	1b64      	subs	r4, r4, r5
 80062ca:	10a4      	asrs	r4, r4, #2
 80062cc:	2600      	movs	r6, #0
 80062ce:	42a6      	cmp	r6, r4
 80062d0:	d105      	bne.n	80062de <__libc_init_array+0x2e>
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d8:	4798      	blx	r3
 80062da:	3601      	adds	r6, #1
 80062dc:	e7ee      	b.n	80062bc <__libc_init_array+0xc>
 80062de:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e2:	4798      	blx	r3
 80062e4:	3601      	adds	r6, #1
 80062e6:	e7f2      	b.n	80062ce <__libc_init_array+0x1e>
 80062e8:	0800fbf8 	.word	0x0800fbf8
 80062ec:	0800fbf8 	.word	0x0800fbf8
 80062f0:	0800fbf8 	.word	0x0800fbf8
 80062f4:	0800fbfc 	.word	0x0800fbfc

080062f8 <__retarget_lock_init_recursive>:
 80062f8:	4770      	bx	lr

080062fa <__retarget_lock_acquire_recursive>:
 80062fa:	4770      	bx	lr

080062fc <__retarget_lock_release_recursive>:
 80062fc:	4770      	bx	lr

080062fe <memcpy>:
 80062fe:	440a      	add	r2, r1
 8006300:	4291      	cmp	r1, r2
 8006302:	f100 33ff 	add.w	r3, r0, #4294967295
 8006306:	d100      	bne.n	800630a <memcpy+0xc>
 8006308:	4770      	bx	lr
 800630a:	b510      	push	{r4, lr}
 800630c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006310:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006314:	4291      	cmp	r1, r2
 8006316:	d1f9      	bne.n	800630c <memcpy+0xe>
 8006318:	bd10      	pop	{r4, pc}

0800631a <quorem>:
 800631a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631e:	6903      	ldr	r3, [r0, #16]
 8006320:	690c      	ldr	r4, [r1, #16]
 8006322:	42a3      	cmp	r3, r4
 8006324:	4607      	mov	r7, r0
 8006326:	db7e      	blt.n	8006426 <quorem+0x10c>
 8006328:	3c01      	subs	r4, #1
 800632a:	f101 0814 	add.w	r8, r1, #20
 800632e:	f100 0514 	add.w	r5, r0, #20
 8006332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800633c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006340:	3301      	adds	r3, #1
 8006342:	429a      	cmp	r2, r3
 8006344:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006348:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800634c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006350:	d331      	bcc.n	80063b6 <quorem+0x9c>
 8006352:	f04f 0e00 	mov.w	lr, #0
 8006356:	4640      	mov	r0, r8
 8006358:	46ac      	mov	ip, r5
 800635a:	46f2      	mov	sl, lr
 800635c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006360:	b293      	uxth	r3, r2
 8006362:	fb06 e303 	mla	r3, r6, r3, lr
 8006366:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800636a:	0c1a      	lsrs	r2, r3, #16
 800636c:	b29b      	uxth	r3, r3
 800636e:	ebaa 0303 	sub.w	r3, sl, r3
 8006372:	f8dc a000 	ldr.w	sl, [ip]
 8006376:	fa13 f38a 	uxtah	r3, r3, sl
 800637a:	fb06 220e 	mla	r2, r6, lr, r2
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	9b00      	ldr	r3, [sp, #0]
 8006382:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006386:	b292      	uxth	r2, r2
 8006388:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800638c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006390:	f8bd 3000 	ldrh.w	r3, [sp]
 8006394:	4581      	cmp	r9, r0
 8006396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800639a:	f84c 3b04 	str.w	r3, [ip], #4
 800639e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063a2:	d2db      	bcs.n	800635c <quorem+0x42>
 80063a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063a8:	b92b      	cbnz	r3, 80063b6 <quorem+0x9c>
 80063aa:	9b01      	ldr	r3, [sp, #4]
 80063ac:	3b04      	subs	r3, #4
 80063ae:	429d      	cmp	r5, r3
 80063b0:	461a      	mov	r2, r3
 80063b2:	d32c      	bcc.n	800640e <quorem+0xf4>
 80063b4:	613c      	str	r4, [r7, #16]
 80063b6:	4638      	mov	r0, r7
 80063b8:	f001 f8f4 	bl	80075a4 <__mcmp>
 80063bc:	2800      	cmp	r0, #0
 80063be:	db22      	blt.n	8006406 <quorem+0xec>
 80063c0:	3601      	adds	r6, #1
 80063c2:	4629      	mov	r1, r5
 80063c4:	2000      	movs	r0, #0
 80063c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80063ca:	f8d1 c000 	ldr.w	ip, [r1]
 80063ce:	b293      	uxth	r3, r2
 80063d0:	1ac3      	subs	r3, r0, r3
 80063d2:	0c12      	lsrs	r2, r2, #16
 80063d4:	fa13 f38c 	uxtah	r3, r3, ip
 80063d8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80063dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063e6:	45c1      	cmp	r9, r8
 80063e8:	f841 3b04 	str.w	r3, [r1], #4
 80063ec:	ea4f 4022 	mov.w	r0, r2, asr #16
 80063f0:	d2e9      	bcs.n	80063c6 <quorem+0xac>
 80063f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063fa:	b922      	cbnz	r2, 8006406 <quorem+0xec>
 80063fc:	3b04      	subs	r3, #4
 80063fe:	429d      	cmp	r5, r3
 8006400:	461a      	mov	r2, r3
 8006402:	d30a      	bcc.n	800641a <quorem+0x100>
 8006404:	613c      	str	r4, [r7, #16]
 8006406:	4630      	mov	r0, r6
 8006408:	b003      	add	sp, #12
 800640a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	3b04      	subs	r3, #4
 8006412:	2a00      	cmp	r2, #0
 8006414:	d1ce      	bne.n	80063b4 <quorem+0x9a>
 8006416:	3c01      	subs	r4, #1
 8006418:	e7c9      	b.n	80063ae <quorem+0x94>
 800641a:	6812      	ldr	r2, [r2, #0]
 800641c:	3b04      	subs	r3, #4
 800641e:	2a00      	cmp	r2, #0
 8006420:	d1f0      	bne.n	8006404 <quorem+0xea>
 8006422:	3c01      	subs	r4, #1
 8006424:	e7eb      	b.n	80063fe <quorem+0xe4>
 8006426:	2000      	movs	r0, #0
 8006428:	e7ee      	b.n	8006408 <quorem+0xee>
 800642a:	0000      	movs	r0, r0
 800642c:	0000      	movs	r0, r0
	...

08006430 <_dtoa_r>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	ed2d 8b04 	vpush	{d8-d9}
 8006438:	69c5      	ldr	r5, [r0, #28]
 800643a:	b093      	sub	sp, #76	; 0x4c
 800643c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006440:	ec57 6b10 	vmov	r6, r7, d0
 8006444:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006448:	9107      	str	r1, [sp, #28]
 800644a:	4604      	mov	r4, r0
 800644c:	920a      	str	r2, [sp, #40]	; 0x28
 800644e:	930d      	str	r3, [sp, #52]	; 0x34
 8006450:	b975      	cbnz	r5, 8006470 <_dtoa_r+0x40>
 8006452:	2010      	movs	r0, #16
 8006454:	f7fe ffc2 	bl	80053dc <malloc>
 8006458:	4602      	mov	r2, r0
 800645a:	61e0      	str	r0, [r4, #28]
 800645c:	b920      	cbnz	r0, 8006468 <_dtoa_r+0x38>
 800645e:	4bae      	ldr	r3, [pc, #696]	; (8006718 <_dtoa_r+0x2e8>)
 8006460:	21ef      	movs	r1, #239	; 0xef
 8006462:	48ae      	ldr	r0, [pc, #696]	; (800671c <_dtoa_r+0x2ec>)
 8006464:	f002 f820 	bl	80084a8 <__assert_func>
 8006468:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800646c:	6005      	str	r5, [r0, #0]
 800646e:	60c5      	str	r5, [r0, #12]
 8006470:	69e3      	ldr	r3, [r4, #28]
 8006472:	6819      	ldr	r1, [r3, #0]
 8006474:	b151      	cbz	r1, 800648c <_dtoa_r+0x5c>
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	604a      	str	r2, [r1, #4]
 800647a:	2301      	movs	r3, #1
 800647c:	4093      	lsls	r3, r2
 800647e:	608b      	str	r3, [r1, #8]
 8006480:	4620      	mov	r0, r4
 8006482:	f000 fe53 	bl	800712c <_Bfree>
 8006486:	69e3      	ldr	r3, [r4, #28]
 8006488:	2200      	movs	r2, #0
 800648a:	601a      	str	r2, [r3, #0]
 800648c:	1e3b      	subs	r3, r7, #0
 800648e:	bfbb      	ittet	lt
 8006490:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006494:	9303      	strlt	r3, [sp, #12]
 8006496:	2300      	movge	r3, #0
 8006498:	2201      	movlt	r2, #1
 800649a:	bfac      	ite	ge
 800649c:	f8c8 3000 	strge.w	r3, [r8]
 80064a0:	f8c8 2000 	strlt.w	r2, [r8]
 80064a4:	4b9e      	ldr	r3, [pc, #632]	; (8006720 <_dtoa_r+0x2f0>)
 80064a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80064aa:	ea33 0308 	bics.w	r3, r3, r8
 80064ae:	d11b      	bne.n	80064e8 <_dtoa_r+0xb8>
 80064b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80064bc:	4333      	orrs	r3, r6
 80064be:	f000 8593 	beq.w	8006fe8 <_dtoa_r+0xbb8>
 80064c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c4:	b963      	cbnz	r3, 80064e0 <_dtoa_r+0xb0>
 80064c6:	4b97      	ldr	r3, [pc, #604]	; (8006724 <_dtoa_r+0x2f4>)
 80064c8:	e027      	b.n	800651a <_dtoa_r+0xea>
 80064ca:	4b97      	ldr	r3, [pc, #604]	; (8006728 <_dtoa_r+0x2f8>)
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	3308      	adds	r3, #8
 80064d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	9800      	ldr	r0, [sp, #0]
 80064d6:	b013      	add	sp, #76	; 0x4c
 80064d8:	ecbd 8b04 	vpop	{d8-d9}
 80064dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e0:	4b90      	ldr	r3, [pc, #576]	; (8006724 <_dtoa_r+0x2f4>)
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	3303      	adds	r3, #3
 80064e6:	e7f3      	b.n	80064d0 <_dtoa_r+0xa0>
 80064e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064ec:	2200      	movs	r2, #0
 80064ee:	ec51 0b17 	vmov	r0, r1, d7
 80064f2:	eeb0 8a47 	vmov.f32	s16, s14
 80064f6:	eef0 8a67 	vmov.f32	s17, s15
 80064fa:	2300      	movs	r3, #0
 80064fc:	f7fa fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006500:	4681      	mov	r9, r0
 8006502:	b160      	cbz	r0, 800651e <_dtoa_r+0xee>
 8006504:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006506:	2301      	movs	r3, #1
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 8568 	beq.w	8006fe2 <_dtoa_r+0xbb2>
 8006512:	4b86      	ldr	r3, [pc, #536]	; (800672c <_dtoa_r+0x2fc>)
 8006514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	3b01      	subs	r3, #1
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	e7da      	b.n	80064d4 <_dtoa_r+0xa4>
 800651e:	aa10      	add	r2, sp, #64	; 0x40
 8006520:	a911      	add	r1, sp, #68	; 0x44
 8006522:	4620      	mov	r0, r4
 8006524:	eeb0 0a48 	vmov.f32	s0, s16
 8006528:	eef0 0a68 	vmov.f32	s1, s17
 800652c:	f001 f8e0 	bl	80076f0 <__d2b>
 8006530:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006534:	4682      	mov	sl, r0
 8006536:	2d00      	cmp	r5, #0
 8006538:	d07f      	beq.n	800663a <_dtoa_r+0x20a>
 800653a:	ee18 3a90 	vmov	r3, s17
 800653e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006542:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006546:	ec51 0b18 	vmov	r0, r1, d8
 800654a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800654e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006552:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006556:	4619      	mov	r1, r3
 8006558:	2200      	movs	r2, #0
 800655a:	4b75      	ldr	r3, [pc, #468]	; (8006730 <_dtoa_r+0x300>)
 800655c:	f7f9 fe94 	bl	8000288 <__aeabi_dsub>
 8006560:	a367      	add	r3, pc, #412	; (adr r3, 8006700 <_dtoa_r+0x2d0>)
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f7fa f847 	bl	80005f8 <__aeabi_dmul>
 800656a:	a367      	add	r3, pc, #412	; (adr r3, 8006708 <_dtoa_r+0x2d8>)
 800656c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006570:	f7f9 fe8c 	bl	800028c <__adddf3>
 8006574:	4606      	mov	r6, r0
 8006576:	4628      	mov	r0, r5
 8006578:	460f      	mov	r7, r1
 800657a:	f7f9 ffd3 	bl	8000524 <__aeabi_i2d>
 800657e:	a364      	add	r3, pc, #400	; (adr r3, 8006710 <_dtoa_r+0x2e0>)
 8006580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006584:	f7fa f838 	bl	80005f8 <__aeabi_dmul>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4630      	mov	r0, r6
 800658e:	4639      	mov	r1, r7
 8006590:	f7f9 fe7c 	bl	800028c <__adddf3>
 8006594:	4606      	mov	r6, r0
 8006596:	460f      	mov	r7, r1
 8006598:	f7fa fade 	bl	8000b58 <__aeabi_d2iz>
 800659c:	2200      	movs	r2, #0
 800659e:	4683      	mov	fp, r0
 80065a0:	2300      	movs	r3, #0
 80065a2:	4630      	mov	r0, r6
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7fa fa99 	bl	8000adc <__aeabi_dcmplt>
 80065aa:	b148      	cbz	r0, 80065c0 <_dtoa_r+0x190>
 80065ac:	4658      	mov	r0, fp
 80065ae:	f7f9 ffb9 	bl	8000524 <__aeabi_i2d>
 80065b2:	4632      	mov	r2, r6
 80065b4:	463b      	mov	r3, r7
 80065b6:	f7fa fa87 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ba:	b908      	cbnz	r0, 80065c0 <_dtoa_r+0x190>
 80065bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065c0:	f1bb 0f16 	cmp.w	fp, #22
 80065c4:	d857      	bhi.n	8006676 <_dtoa_r+0x246>
 80065c6:	4b5b      	ldr	r3, [pc, #364]	; (8006734 <_dtoa_r+0x304>)
 80065c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	ec51 0b18 	vmov	r0, r1, d8
 80065d4:	f7fa fa82 	bl	8000adc <__aeabi_dcmplt>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d04e      	beq.n	800667a <_dtoa_r+0x24a>
 80065dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065e0:	2300      	movs	r3, #0
 80065e2:	930c      	str	r3, [sp, #48]	; 0x30
 80065e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065e6:	1b5b      	subs	r3, r3, r5
 80065e8:	1e5a      	subs	r2, r3, #1
 80065ea:	bf45      	ittet	mi
 80065ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80065f0:	9305      	strmi	r3, [sp, #20]
 80065f2:	2300      	movpl	r3, #0
 80065f4:	2300      	movmi	r3, #0
 80065f6:	9206      	str	r2, [sp, #24]
 80065f8:	bf54      	ite	pl
 80065fa:	9305      	strpl	r3, [sp, #20]
 80065fc:	9306      	strmi	r3, [sp, #24]
 80065fe:	f1bb 0f00 	cmp.w	fp, #0
 8006602:	db3c      	blt.n	800667e <_dtoa_r+0x24e>
 8006604:	9b06      	ldr	r3, [sp, #24]
 8006606:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800660a:	445b      	add	r3, fp
 800660c:	9306      	str	r3, [sp, #24]
 800660e:	2300      	movs	r3, #0
 8006610:	9308      	str	r3, [sp, #32]
 8006612:	9b07      	ldr	r3, [sp, #28]
 8006614:	2b09      	cmp	r3, #9
 8006616:	d868      	bhi.n	80066ea <_dtoa_r+0x2ba>
 8006618:	2b05      	cmp	r3, #5
 800661a:	bfc4      	itt	gt
 800661c:	3b04      	subgt	r3, #4
 800661e:	9307      	strgt	r3, [sp, #28]
 8006620:	9b07      	ldr	r3, [sp, #28]
 8006622:	f1a3 0302 	sub.w	r3, r3, #2
 8006626:	bfcc      	ite	gt
 8006628:	2500      	movgt	r5, #0
 800662a:	2501      	movle	r5, #1
 800662c:	2b03      	cmp	r3, #3
 800662e:	f200 8085 	bhi.w	800673c <_dtoa_r+0x30c>
 8006632:	e8df f003 	tbb	[pc, r3]
 8006636:	3b2e      	.short	0x3b2e
 8006638:	5839      	.short	0x5839
 800663a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800663e:	441d      	add	r5, r3
 8006640:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006644:	2b20      	cmp	r3, #32
 8006646:	bfc1      	itttt	gt
 8006648:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800664c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006650:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006654:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006658:	bfd6      	itet	le
 800665a:	f1c3 0320 	rsble	r3, r3, #32
 800665e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006662:	fa06 f003 	lslle.w	r0, r6, r3
 8006666:	f7f9 ff4d 	bl	8000504 <__aeabi_ui2d>
 800666a:	2201      	movs	r2, #1
 800666c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006670:	3d01      	subs	r5, #1
 8006672:	920e      	str	r2, [sp, #56]	; 0x38
 8006674:	e76f      	b.n	8006556 <_dtoa_r+0x126>
 8006676:	2301      	movs	r3, #1
 8006678:	e7b3      	b.n	80065e2 <_dtoa_r+0x1b2>
 800667a:	900c      	str	r0, [sp, #48]	; 0x30
 800667c:	e7b2      	b.n	80065e4 <_dtoa_r+0x1b4>
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	eba3 030b 	sub.w	r3, r3, fp
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	f1cb 0300 	rsb	r3, fp, #0
 800668a:	9308      	str	r3, [sp, #32]
 800668c:	2300      	movs	r3, #0
 800668e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006690:	e7bf      	b.n	8006612 <_dtoa_r+0x1e2>
 8006692:	2300      	movs	r3, #0
 8006694:	9309      	str	r3, [sp, #36]	; 0x24
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	dc52      	bgt.n	8006742 <_dtoa_r+0x312>
 800669c:	2301      	movs	r3, #1
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	461a      	mov	r2, r3
 80066a4:	920a      	str	r2, [sp, #40]	; 0x28
 80066a6:	e00b      	b.n	80066c0 <_dtoa_r+0x290>
 80066a8:	2301      	movs	r3, #1
 80066aa:	e7f3      	b.n	8006694 <_dtoa_r+0x264>
 80066ac:	2300      	movs	r3, #0
 80066ae:	9309      	str	r3, [sp, #36]	; 0x24
 80066b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b2:	445b      	add	r3, fp
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	3301      	adds	r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	9304      	str	r3, [sp, #16]
 80066bc:	bfb8      	it	lt
 80066be:	2301      	movlt	r3, #1
 80066c0:	69e0      	ldr	r0, [r4, #28]
 80066c2:	2100      	movs	r1, #0
 80066c4:	2204      	movs	r2, #4
 80066c6:	f102 0614 	add.w	r6, r2, #20
 80066ca:	429e      	cmp	r6, r3
 80066cc:	d93d      	bls.n	800674a <_dtoa_r+0x31a>
 80066ce:	6041      	str	r1, [r0, #4]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 fceb 	bl	80070ac <_Balloc>
 80066d6:	9000      	str	r0, [sp, #0]
 80066d8:	2800      	cmp	r0, #0
 80066da:	d139      	bne.n	8006750 <_dtoa_r+0x320>
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <_dtoa_r+0x308>)
 80066de:	4602      	mov	r2, r0
 80066e0:	f240 11af 	movw	r1, #431	; 0x1af
 80066e4:	e6bd      	b.n	8006462 <_dtoa_r+0x32>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e7e1      	b.n	80066ae <_dtoa_r+0x27e>
 80066ea:	2501      	movs	r5, #1
 80066ec:	2300      	movs	r3, #0
 80066ee:	9307      	str	r3, [sp, #28]
 80066f0:	9509      	str	r5, [sp, #36]	; 0x24
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	9304      	str	r3, [sp, #16]
 80066fa:	2200      	movs	r2, #0
 80066fc:	2312      	movs	r3, #18
 80066fe:	e7d1      	b.n	80066a4 <_dtoa_r+0x274>
 8006700:	636f4361 	.word	0x636f4361
 8006704:	3fd287a7 	.word	0x3fd287a7
 8006708:	8b60c8b3 	.word	0x8b60c8b3
 800670c:	3fc68a28 	.word	0x3fc68a28
 8006710:	509f79fb 	.word	0x509f79fb
 8006714:	3fd34413 	.word	0x3fd34413
 8006718:	0800f545 	.word	0x0800f545
 800671c:	0800f55c 	.word	0x0800f55c
 8006720:	7ff00000 	.word	0x7ff00000
 8006724:	0800f541 	.word	0x0800f541
 8006728:	0800f538 	.word	0x0800f538
 800672c:	0800f515 	.word	0x0800f515
 8006730:	3ff80000 	.word	0x3ff80000
 8006734:	0800f648 	.word	0x0800f648
 8006738:	0800f5b4 	.word	0x0800f5b4
 800673c:	2301      	movs	r3, #1
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	e7d7      	b.n	80066f2 <_dtoa_r+0x2c2>
 8006742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	e7ba      	b.n	80066c0 <_dtoa_r+0x290>
 800674a:	3101      	adds	r1, #1
 800674c:	0052      	lsls	r2, r2, #1
 800674e:	e7ba      	b.n	80066c6 <_dtoa_r+0x296>
 8006750:	69e3      	ldr	r3, [r4, #28]
 8006752:	9a00      	ldr	r2, [sp, #0]
 8006754:	601a      	str	r2, [r3, #0]
 8006756:	9b04      	ldr	r3, [sp, #16]
 8006758:	2b0e      	cmp	r3, #14
 800675a:	f200 80a8 	bhi.w	80068ae <_dtoa_r+0x47e>
 800675e:	2d00      	cmp	r5, #0
 8006760:	f000 80a5 	beq.w	80068ae <_dtoa_r+0x47e>
 8006764:	f1bb 0f00 	cmp.w	fp, #0
 8006768:	dd38      	ble.n	80067dc <_dtoa_r+0x3ac>
 800676a:	4bc0      	ldr	r3, [pc, #768]	; (8006a6c <_dtoa_r+0x63c>)
 800676c:	f00b 020f 	and.w	r2, fp, #15
 8006770:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006774:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006778:	e9d3 6700 	ldrd	r6, r7, [r3]
 800677c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006780:	d019      	beq.n	80067b6 <_dtoa_r+0x386>
 8006782:	4bbb      	ldr	r3, [pc, #748]	; (8006a70 <_dtoa_r+0x640>)
 8006784:	ec51 0b18 	vmov	r0, r1, d8
 8006788:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800678c:	f7fa f85e 	bl	800084c <__aeabi_ddiv>
 8006790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006794:	f008 080f 	and.w	r8, r8, #15
 8006798:	2503      	movs	r5, #3
 800679a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006a70 <_dtoa_r+0x640>
 800679e:	f1b8 0f00 	cmp.w	r8, #0
 80067a2:	d10a      	bne.n	80067ba <_dtoa_r+0x38a>
 80067a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067a8:	4632      	mov	r2, r6
 80067aa:	463b      	mov	r3, r7
 80067ac:	f7fa f84e 	bl	800084c <__aeabi_ddiv>
 80067b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b4:	e02b      	b.n	800680e <_dtoa_r+0x3de>
 80067b6:	2502      	movs	r5, #2
 80067b8:	e7ef      	b.n	800679a <_dtoa_r+0x36a>
 80067ba:	f018 0f01 	tst.w	r8, #1
 80067be:	d008      	beq.n	80067d2 <_dtoa_r+0x3a2>
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067c8:	f7f9 ff16 	bl	80005f8 <__aeabi_dmul>
 80067cc:	3501      	adds	r5, #1
 80067ce:	4606      	mov	r6, r0
 80067d0:	460f      	mov	r7, r1
 80067d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067d6:	f109 0908 	add.w	r9, r9, #8
 80067da:	e7e0      	b.n	800679e <_dtoa_r+0x36e>
 80067dc:	f000 809f 	beq.w	800691e <_dtoa_r+0x4ee>
 80067e0:	f1cb 0600 	rsb	r6, fp, #0
 80067e4:	4ba1      	ldr	r3, [pc, #644]	; (8006a6c <_dtoa_r+0x63c>)
 80067e6:	4fa2      	ldr	r7, [pc, #648]	; (8006a70 <_dtoa_r+0x640>)
 80067e8:	f006 020f 	and.w	r2, r6, #15
 80067ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f4:	ec51 0b18 	vmov	r0, r1, d8
 80067f8:	f7f9 fefe 	bl	80005f8 <__aeabi_dmul>
 80067fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006800:	1136      	asrs	r6, r6, #4
 8006802:	2300      	movs	r3, #0
 8006804:	2502      	movs	r5, #2
 8006806:	2e00      	cmp	r6, #0
 8006808:	d17e      	bne.n	8006908 <_dtoa_r+0x4d8>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1d0      	bne.n	80067b0 <_dtoa_r+0x380>
 800680e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006810:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8084 	beq.w	8006922 <_dtoa_r+0x4f2>
 800681a:	4b96      	ldr	r3, [pc, #600]	; (8006a74 <_dtoa_r+0x644>)
 800681c:	2200      	movs	r2, #0
 800681e:	4640      	mov	r0, r8
 8006820:	4649      	mov	r1, r9
 8006822:	f7fa f95b 	bl	8000adc <__aeabi_dcmplt>
 8006826:	2800      	cmp	r0, #0
 8006828:	d07b      	beq.n	8006922 <_dtoa_r+0x4f2>
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d078      	beq.n	8006922 <_dtoa_r+0x4f2>
 8006830:	9b01      	ldr	r3, [sp, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd39      	ble.n	80068aa <_dtoa_r+0x47a>
 8006836:	4b90      	ldr	r3, [pc, #576]	; (8006a78 <_dtoa_r+0x648>)
 8006838:	2200      	movs	r2, #0
 800683a:	4640      	mov	r0, r8
 800683c:	4649      	mov	r1, r9
 800683e:	f7f9 fedb 	bl	80005f8 <__aeabi_dmul>
 8006842:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006846:	9e01      	ldr	r6, [sp, #4]
 8006848:	f10b 37ff 	add.w	r7, fp, #4294967295
 800684c:	3501      	adds	r5, #1
 800684e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006852:	4628      	mov	r0, r5
 8006854:	f7f9 fe66 	bl	8000524 <__aeabi_i2d>
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	f7f9 fecc 	bl	80005f8 <__aeabi_dmul>
 8006860:	4b86      	ldr	r3, [pc, #536]	; (8006a7c <_dtoa_r+0x64c>)
 8006862:	2200      	movs	r2, #0
 8006864:	f7f9 fd12 	bl	800028c <__adddf3>
 8006868:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800686c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006870:	9303      	str	r3, [sp, #12]
 8006872:	2e00      	cmp	r6, #0
 8006874:	d158      	bne.n	8006928 <_dtoa_r+0x4f8>
 8006876:	4b82      	ldr	r3, [pc, #520]	; (8006a80 <_dtoa_r+0x650>)
 8006878:	2200      	movs	r2, #0
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7f9 fd03 	bl	8000288 <__aeabi_dsub>
 8006882:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006886:	4680      	mov	r8, r0
 8006888:	4689      	mov	r9, r1
 800688a:	f7fa f945 	bl	8000b18 <__aeabi_dcmpgt>
 800688e:	2800      	cmp	r0, #0
 8006890:	f040 8296 	bne.w	8006dc0 <_dtoa_r+0x990>
 8006894:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006898:	4640      	mov	r0, r8
 800689a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800689e:	4649      	mov	r1, r9
 80068a0:	f7fa f91c 	bl	8000adc <__aeabi_dcmplt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	f040 8289 	bne.w	8006dbc <_dtoa_r+0x98c>
 80068aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80068ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f2c0 814e 	blt.w	8006b52 <_dtoa_r+0x722>
 80068b6:	f1bb 0f0e 	cmp.w	fp, #14
 80068ba:	f300 814a 	bgt.w	8006b52 <_dtoa_r+0x722>
 80068be:	4b6b      	ldr	r3, [pc, #428]	; (8006a6c <_dtoa_r+0x63c>)
 80068c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80068c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f280 80dc 	bge.w	8006a88 <_dtoa_r+0x658>
 80068d0:	9b04      	ldr	r3, [sp, #16]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f300 80d8 	bgt.w	8006a88 <_dtoa_r+0x658>
 80068d8:	f040 826f 	bne.w	8006dba <_dtoa_r+0x98a>
 80068dc:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <_dtoa_r+0x650>)
 80068de:	2200      	movs	r2, #0
 80068e0:	4640      	mov	r0, r8
 80068e2:	4649      	mov	r1, r9
 80068e4:	f7f9 fe88 	bl	80005f8 <__aeabi_dmul>
 80068e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ec:	f7fa f90a 	bl	8000b04 <__aeabi_dcmpge>
 80068f0:	9e04      	ldr	r6, [sp, #16]
 80068f2:	4637      	mov	r7, r6
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f040 8245 	bne.w	8006d84 <_dtoa_r+0x954>
 80068fa:	9d00      	ldr	r5, [sp, #0]
 80068fc:	2331      	movs	r3, #49	; 0x31
 80068fe:	f805 3b01 	strb.w	r3, [r5], #1
 8006902:	f10b 0b01 	add.w	fp, fp, #1
 8006906:	e241      	b.n	8006d8c <_dtoa_r+0x95c>
 8006908:	07f2      	lsls	r2, r6, #31
 800690a:	d505      	bpl.n	8006918 <_dtoa_r+0x4e8>
 800690c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006910:	f7f9 fe72 	bl	80005f8 <__aeabi_dmul>
 8006914:	3501      	adds	r5, #1
 8006916:	2301      	movs	r3, #1
 8006918:	1076      	asrs	r6, r6, #1
 800691a:	3708      	adds	r7, #8
 800691c:	e773      	b.n	8006806 <_dtoa_r+0x3d6>
 800691e:	2502      	movs	r5, #2
 8006920:	e775      	b.n	800680e <_dtoa_r+0x3de>
 8006922:	9e04      	ldr	r6, [sp, #16]
 8006924:	465f      	mov	r7, fp
 8006926:	e792      	b.n	800684e <_dtoa_r+0x41e>
 8006928:	9900      	ldr	r1, [sp, #0]
 800692a:	4b50      	ldr	r3, [pc, #320]	; (8006a6c <_dtoa_r+0x63c>)
 800692c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006930:	4431      	add	r1, r6
 8006932:	9102      	str	r1, [sp, #8]
 8006934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006936:	eeb0 9a47 	vmov.f32	s18, s14
 800693a:	eef0 9a67 	vmov.f32	s19, s15
 800693e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006942:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006946:	2900      	cmp	r1, #0
 8006948:	d044      	beq.n	80069d4 <_dtoa_r+0x5a4>
 800694a:	494e      	ldr	r1, [pc, #312]	; (8006a84 <_dtoa_r+0x654>)
 800694c:	2000      	movs	r0, #0
 800694e:	f7f9 ff7d 	bl	800084c <__aeabi_ddiv>
 8006952:	ec53 2b19 	vmov	r2, r3, d9
 8006956:	f7f9 fc97 	bl	8000288 <__aeabi_dsub>
 800695a:	9d00      	ldr	r5, [sp, #0]
 800695c:	ec41 0b19 	vmov	d9, r0, r1
 8006960:	4649      	mov	r1, r9
 8006962:	4640      	mov	r0, r8
 8006964:	f7fa f8f8 	bl	8000b58 <__aeabi_d2iz>
 8006968:	4606      	mov	r6, r0
 800696a:	f7f9 fddb 	bl	8000524 <__aeabi_i2d>
 800696e:	4602      	mov	r2, r0
 8006970:	460b      	mov	r3, r1
 8006972:	4640      	mov	r0, r8
 8006974:	4649      	mov	r1, r9
 8006976:	f7f9 fc87 	bl	8000288 <__aeabi_dsub>
 800697a:	3630      	adds	r6, #48	; 0x30
 800697c:	f805 6b01 	strb.w	r6, [r5], #1
 8006980:	ec53 2b19 	vmov	r2, r3, d9
 8006984:	4680      	mov	r8, r0
 8006986:	4689      	mov	r9, r1
 8006988:	f7fa f8a8 	bl	8000adc <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	d164      	bne.n	8006a5a <_dtoa_r+0x62a>
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	4937      	ldr	r1, [pc, #220]	; (8006a74 <_dtoa_r+0x644>)
 8006996:	2000      	movs	r0, #0
 8006998:	f7f9 fc76 	bl	8000288 <__aeabi_dsub>
 800699c:	ec53 2b19 	vmov	r2, r3, d9
 80069a0:	f7fa f89c 	bl	8000adc <__aeabi_dcmplt>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f040 80b6 	bne.w	8006b16 <_dtoa_r+0x6e6>
 80069aa:	9b02      	ldr	r3, [sp, #8]
 80069ac:	429d      	cmp	r5, r3
 80069ae:	f43f af7c 	beq.w	80068aa <_dtoa_r+0x47a>
 80069b2:	4b31      	ldr	r3, [pc, #196]	; (8006a78 <_dtoa_r+0x648>)
 80069b4:	ec51 0b19 	vmov	r0, r1, d9
 80069b8:	2200      	movs	r2, #0
 80069ba:	f7f9 fe1d 	bl	80005f8 <__aeabi_dmul>
 80069be:	4b2e      	ldr	r3, [pc, #184]	; (8006a78 <_dtoa_r+0x648>)
 80069c0:	ec41 0b19 	vmov	d9, r0, r1
 80069c4:	2200      	movs	r2, #0
 80069c6:	4640      	mov	r0, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	f7f9 fe15 	bl	80005f8 <__aeabi_dmul>
 80069ce:	4680      	mov	r8, r0
 80069d0:	4689      	mov	r9, r1
 80069d2:	e7c5      	b.n	8006960 <_dtoa_r+0x530>
 80069d4:	ec51 0b17 	vmov	r0, r1, d7
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	9b02      	ldr	r3, [sp, #8]
 80069de:	9d00      	ldr	r5, [sp, #0]
 80069e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80069e2:	ec41 0b19 	vmov	d9, r0, r1
 80069e6:	4649      	mov	r1, r9
 80069e8:	4640      	mov	r0, r8
 80069ea:	f7fa f8b5 	bl	8000b58 <__aeabi_d2iz>
 80069ee:	4606      	mov	r6, r0
 80069f0:	f7f9 fd98 	bl	8000524 <__aeabi_i2d>
 80069f4:	3630      	adds	r6, #48	; 0x30
 80069f6:	4602      	mov	r2, r0
 80069f8:	460b      	mov	r3, r1
 80069fa:	4640      	mov	r0, r8
 80069fc:	4649      	mov	r1, r9
 80069fe:	f7f9 fc43 	bl	8000288 <__aeabi_dsub>
 8006a02:	f805 6b01 	strb.w	r6, [r5], #1
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	429d      	cmp	r5, r3
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	4689      	mov	r9, r1
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	d124      	bne.n	8006a5e <_dtoa_r+0x62e>
 8006a14:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <_dtoa_r+0x654>)
 8006a16:	ec51 0b19 	vmov	r0, r1, d9
 8006a1a:	f7f9 fc37 	bl	800028c <__adddf3>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4640      	mov	r0, r8
 8006a24:	4649      	mov	r1, r9
 8006a26:	f7fa f877 	bl	8000b18 <__aeabi_dcmpgt>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d173      	bne.n	8006b16 <_dtoa_r+0x6e6>
 8006a2e:	ec53 2b19 	vmov	r2, r3, d9
 8006a32:	4914      	ldr	r1, [pc, #80]	; (8006a84 <_dtoa_r+0x654>)
 8006a34:	2000      	movs	r0, #0
 8006a36:	f7f9 fc27 	bl	8000288 <__aeabi_dsub>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7fa f84b 	bl	8000adc <__aeabi_dcmplt>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	f43f af2f 	beq.w	80068aa <_dtoa_r+0x47a>
 8006a4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006a4e:	1e6b      	subs	r3, r5, #1
 8006a50:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006a56:	2b30      	cmp	r3, #48	; 0x30
 8006a58:	d0f8      	beq.n	8006a4c <_dtoa_r+0x61c>
 8006a5a:	46bb      	mov	fp, r7
 8006a5c:	e04a      	b.n	8006af4 <_dtoa_r+0x6c4>
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <_dtoa_r+0x648>)
 8006a60:	f7f9 fdca 	bl	80005f8 <__aeabi_dmul>
 8006a64:	4680      	mov	r8, r0
 8006a66:	4689      	mov	r9, r1
 8006a68:	e7bd      	b.n	80069e6 <_dtoa_r+0x5b6>
 8006a6a:	bf00      	nop
 8006a6c:	0800f648 	.word	0x0800f648
 8006a70:	0800f620 	.word	0x0800f620
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	40240000 	.word	0x40240000
 8006a7c:	401c0000 	.word	0x401c0000
 8006a80:	40140000 	.word	0x40140000
 8006a84:	3fe00000 	.word	0x3fe00000
 8006a88:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a8c:	9d00      	ldr	r5, [sp, #0]
 8006a8e:	4642      	mov	r2, r8
 8006a90:	464b      	mov	r3, r9
 8006a92:	4630      	mov	r0, r6
 8006a94:	4639      	mov	r1, r7
 8006a96:	f7f9 fed9 	bl	800084c <__aeabi_ddiv>
 8006a9a:	f7fa f85d 	bl	8000b58 <__aeabi_d2iz>
 8006a9e:	9001      	str	r0, [sp, #4]
 8006aa0:	f7f9 fd40 	bl	8000524 <__aeabi_i2d>
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	f7f9 fda6 	bl	80005f8 <__aeabi_dmul>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7f9 fbe8 	bl	8000288 <__aeabi_dsub>
 8006ab8:	9e01      	ldr	r6, [sp, #4]
 8006aba:	9f04      	ldr	r7, [sp, #16]
 8006abc:	3630      	adds	r6, #48	; 0x30
 8006abe:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac2:	9e00      	ldr	r6, [sp, #0]
 8006ac4:	1bae      	subs	r6, r5, r6
 8006ac6:	42b7      	cmp	r7, r6
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	d134      	bne.n	8006b38 <_dtoa_r+0x708>
 8006ace:	f7f9 fbdd 	bl	800028c <__adddf3>
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	f7fa f81d 	bl	8000b18 <__aeabi_dcmpgt>
 8006ade:	b9c8      	cbnz	r0, 8006b14 <_dtoa_r+0x6e4>
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	464b      	mov	r3, r9
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	4639      	mov	r1, r7
 8006ae8:	f7f9 ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aec:	b110      	cbz	r0, 8006af4 <_dtoa_r+0x6c4>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	07db      	lsls	r3, r3, #31
 8006af2:	d40f      	bmi.n	8006b14 <_dtoa_r+0x6e4>
 8006af4:	4651      	mov	r1, sl
 8006af6:	4620      	mov	r0, r4
 8006af8:	f000 fb18 	bl	800712c <_Bfree>
 8006afc:	2300      	movs	r3, #0
 8006afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b00:	702b      	strb	r3, [r5, #0]
 8006b02:	f10b 0301 	add.w	r3, fp, #1
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f43f ace2 	beq.w	80064d4 <_dtoa_r+0xa4>
 8006b10:	601d      	str	r5, [r3, #0]
 8006b12:	e4df      	b.n	80064d4 <_dtoa_r+0xa4>
 8006b14:	465f      	mov	r7, fp
 8006b16:	462b      	mov	r3, r5
 8006b18:	461d      	mov	r5, r3
 8006b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b1e:	2a39      	cmp	r2, #57	; 0x39
 8006b20:	d106      	bne.n	8006b30 <_dtoa_r+0x700>
 8006b22:	9a00      	ldr	r2, [sp, #0]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d1f7      	bne.n	8006b18 <_dtoa_r+0x6e8>
 8006b28:	9900      	ldr	r1, [sp, #0]
 8006b2a:	2230      	movs	r2, #48	; 0x30
 8006b2c:	3701      	adds	r7, #1
 8006b2e:	700a      	strb	r2, [r1, #0]
 8006b30:	781a      	ldrb	r2, [r3, #0]
 8006b32:	3201      	adds	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e790      	b.n	8006a5a <_dtoa_r+0x62a>
 8006b38:	4ba3      	ldr	r3, [pc, #652]	; (8006dc8 <_dtoa_r+0x998>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f7f9 fd5c 	bl	80005f8 <__aeabi_dmul>
 8006b40:	2200      	movs	r2, #0
 8006b42:	2300      	movs	r3, #0
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f7f9 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4c:	2800      	cmp	r0, #0
 8006b4e:	d09e      	beq.n	8006a8e <_dtoa_r+0x65e>
 8006b50:	e7d0      	b.n	8006af4 <_dtoa_r+0x6c4>
 8006b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	f000 80ca 	beq.w	8006cee <_dtoa_r+0x8be>
 8006b5a:	9a07      	ldr	r2, [sp, #28]
 8006b5c:	2a01      	cmp	r2, #1
 8006b5e:	f300 80ad 	bgt.w	8006cbc <_dtoa_r+0x88c>
 8006b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f000 80a5 	beq.w	8006cb4 <_dtoa_r+0x884>
 8006b6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b6e:	9e08      	ldr	r6, [sp, #32]
 8006b70:	9d05      	ldr	r5, [sp, #20]
 8006b72:	9a05      	ldr	r2, [sp, #20]
 8006b74:	441a      	add	r2, r3
 8006b76:	9205      	str	r2, [sp, #20]
 8006b78:	9a06      	ldr	r2, [sp, #24]
 8006b7a:	2101      	movs	r1, #1
 8006b7c:	441a      	add	r2, r3
 8006b7e:	4620      	mov	r0, r4
 8006b80:	9206      	str	r2, [sp, #24]
 8006b82:	f000 fb89 	bl	8007298 <__i2b>
 8006b86:	4607      	mov	r7, r0
 8006b88:	b165      	cbz	r5, 8006ba4 <_dtoa_r+0x774>
 8006b8a:	9b06      	ldr	r3, [sp, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd09      	ble.n	8006ba4 <_dtoa_r+0x774>
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	9a05      	ldr	r2, [sp, #20]
 8006b94:	bfa8      	it	ge
 8006b96:	462b      	movge	r3, r5
 8006b98:	1ad2      	subs	r2, r2, r3
 8006b9a:	9205      	str	r2, [sp, #20]
 8006b9c:	9a06      	ldr	r2, [sp, #24]
 8006b9e:	1aed      	subs	r5, r5, r3
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	b1f3      	cbz	r3, 8006be6 <_dtoa_r+0x7b6>
 8006ba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 80a3 	beq.w	8006cf6 <_dtoa_r+0x8c6>
 8006bb0:	2e00      	cmp	r6, #0
 8006bb2:	dd10      	ble.n	8006bd6 <_dtoa_r+0x7a6>
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fc2d 	bl	8007418 <__pow5mult>
 8006bbe:	4652      	mov	r2, sl
 8006bc0:	4601      	mov	r1, r0
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fb7d 	bl	80072c4 <__multiply>
 8006bca:	4651      	mov	r1, sl
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 faac 	bl	800712c <_Bfree>
 8006bd4:	46c2      	mov	sl, r8
 8006bd6:	9b08      	ldr	r3, [sp, #32]
 8006bd8:	1b9a      	subs	r2, r3, r6
 8006bda:	d004      	beq.n	8006be6 <_dtoa_r+0x7b6>
 8006bdc:	4651      	mov	r1, sl
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fc1a 	bl	8007418 <__pow5mult>
 8006be4:	4682      	mov	sl, r0
 8006be6:	2101      	movs	r1, #1
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fb55 	bl	8007298 <__i2b>
 8006bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	4606      	mov	r6, r0
 8006bf4:	f340 8081 	ble.w	8006cfa <_dtoa_r+0x8ca>
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4601      	mov	r1, r0
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fc0b 	bl	8007418 <__pow5mult>
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	4606      	mov	r6, r0
 8006c08:	dd7a      	ble.n	8006d00 <_dtoa_r+0x8d0>
 8006c0a:	f04f 0800 	mov.w	r8, #0
 8006c0e:	6933      	ldr	r3, [r6, #16]
 8006c10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c14:	6918      	ldr	r0, [r3, #16]
 8006c16:	f000 faf1 	bl	80071fc <__hi0bits>
 8006c1a:	f1c0 0020 	rsb	r0, r0, #32
 8006c1e:	9b06      	ldr	r3, [sp, #24]
 8006c20:	4418      	add	r0, r3
 8006c22:	f010 001f 	ands.w	r0, r0, #31
 8006c26:	f000 8094 	beq.w	8006d52 <_dtoa_r+0x922>
 8006c2a:	f1c0 0320 	rsb	r3, r0, #32
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	f340 8085 	ble.w	8006d3e <_dtoa_r+0x90e>
 8006c34:	9b05      	ldr	r3, [sp, #20]
 8006c36:	f1c0 001c 	rsb	r0, r0, #28
 8006c3a:	4403      	add	r3, r0
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	9b06      	ldr	r3, [sp, #24]
 8006c40:	4403      	add	r3, r0
 8006c42:	4405      	add	r5, r0
 8006c44:	9306      	str	r3, [sp, #24]
 8006c46:	9b05      	ldr	r3, [sp, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dd05      	ble.n	8006c58 <_dtoa_r+0x828>
 8006c4c:	4651      	mov	r1, sl
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 fc3b 	bl	80074cc <__lshift>
 8006c56:	4682      	mov	sl, r0
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	dd05      	ble.n	8006c6a <_dtoa_r+0x83a>
 8006c5e:	4631      	mov	r1, r6
 8006c60:	461a      	mov	r2, r3
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 fc32 	bl	80074cc <__lshift>
 8006c68:	4606      	mov	r6, r0
 8006c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d072      	beq.n	8006d56 <_dtoa_r+0x926>
 8006c70:	4631      	mov	r1, r6
 8006c72:	4650      	mov	r0, sl
 8006c74:	f000 fc96 	bl	80075a4 <__mcmp>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	da6c      	bge.n	8006d56 <_dtoa_r+0x926>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4651      	mov	r1, sl
 8006c80:	220a      	movs	r2, #10
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fa74 	bl	8007170 <__multadd>
 8006c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c8e:	4682      	mov	sl, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 81b0 	beq.w	8006ff6 <_dtoa_r+0xbc6>
 8006c96:	2300      	movs	r3, #0
 8006c98:	4639      	mov	r1, r7
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f000 fa67 	bl	8007170 <__multadd>
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	f300 8096 	bgt.w	8006dd8 <_dtoa_r+0x9a8>
 8006cac:	9b07      	ldr	r3, [sp, #28]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	dc59      	bgt.n	8006d66 <_dtoa_r+0x936>
 8006cb2:	e091      	b.n	8006dd8 <_dtoa_r+0x9a8>
 8006cb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006cb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cba:	e758      	b.n	8006b6e <_dtoa_r+0x73e>
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	1e5e      	subs	r6, r3, #1
 8006cc0:	9b08      	ldr	r3, [sp, #32]
 8006cc2:	42b3      	cmp	r3, r6
 8006cc4:	bfbf      	itttt	lt
 8006cc6:	9b08      	ldrlt	r3, [sp, #32]
 8006cc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006cca:	9608      	strlt	r6, [sp, #32]
 8006ccc:	1af3      	sublt	r3, r6, r3
 8006cce:	bfb4      	ite	lt
 8006cd0:	18d2      	addlt	r2, r2, r3
 8006cd2:	1b9e      	subge	r6, r3, r6
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	bfbc      	itt	lt
 8006cd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006cda:	2600      	movlt	r6, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bfb7      	itett	lt
 8006ce0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006ce4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006ce8:	1a9d      	sublt	r5, r3, r2
 8006cea:	2300      	movlt	r3, #0
 8006cec:	e741      	b.n	8006b72 <_dtoa_r+0x742>
 8006cee:	9e08      	ldr	r6, [sp, #32]
 8006cf0:	9d05      	ldr	r5, [sp, #20]
 8006cf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006cf4:	e748      	b.n	8006b88 <_dtoa_r+0x758>
 8006cf6:	9a08      	ldr	r2, [sp, #32]
 8006cf8:	e770      	b.n	8006bdc <_dtoa_r+0x7ac>
 8006cfa:	9b07      	ldr	r3, [sp, #28]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	dc19      	bgt.n	8006d34 <_dtoa_r+0x904>
 8006d00:	9b02      	ldr	r3, [sp, #8]
 8006d02:	b9bb      	cbnz	r3, 8006d34 <_dtoa_r+0x904>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d0a:	b99b      	cbnz	r3, 8006d34 <_dtoa_r+0x904>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d12:	0d1b      	lsrs	r3, r3, #20
 8006d14:	051b      	lsls	r3, r3, #20
 8006d16:	b183      	cbz	r3, 8006d3a <_dtoa_r+0x90a>
 8006d18:	9b05      	ldr	r3, [sp, #20]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	9b06      	ldr	r3, [sp, #24]
 8006d20:	3301      	adds	r3, #1
 8006d22:	9306      	str	r3, [sp, #24]
 8006d24:	f04f 0801 	mov.w	r8, #1
 8006d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f af6f 	bne.w	8006c0e <_dtoa_r+0x7de>
 8006d30:	2001      	movs	r0, #1
 8006d32:	e774      	b.n	8006c1e <_dtoa_r+0x7ee>
 8006d34:	f04f 0800 	mov.w	r8, #0
 8006d38:	e7f6      	b.n	8006d28 <_dtoa_r+0x8f8>
 8006d3a:	4698      	mov	r8, r3
 8006d3c:	e7f4      	b.n	8006d28 <_dtoa_r+0x8f8>
 8006d3e:	d082      	beq.n	8006c46 <_dtoa_r+0x816>
 8006d40:	9a05      	ldr	r2, [sp, #20]
 8006d42:	331c      	adds	r3, #28
 8006d44:	441a      	add	r2, r3
 8006d46:	9205      	str	r2, [sp, #20]
 8006d48:	9a06      	ldr	r2, [sp, #24]
 8006d4a:	441a      	add	r2, r3
 8006d4c:	441d      	add	r5, r3
 8006d4e:	9206      	str	r2, [sp, #24]
 8006d50:	e779      	b.n	8006c46 <_dtoa_r+0x816>
 8006d52:	4603      	mov	r3, r0
 8006d54:	e7f4      	b.n	8006d40 <_dtoa_r+0x910>
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	dc37      	bgt.n	8006dcc <_dtoa_r+0x99c>
 8006d5c:	9b07      	ldr	r3, [sp, #28]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	dd34      	ble.n	8006dcc <_dtoa_r+0x99c>
 8006d62:	9b04      	ldr	r3, [sp, #16]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	9b01      	ldr	r3, [sp, #4]
 8006d68:	b963      	cbnz	r3, 8006d84 <_dtoa_r+0x954>
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f000 f9fe 	bl	8007170 <__multadd>
 8006d74:	4601      	mov	r1, r0
 8006d76:	4606      	mov	r6, r0
 8006d78:	4650      	mov	r0, sl
 8006d7a:	f000 fc13 	bl	80075a4 <__mcmp>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f73f adbb 	bgt.w	80068fa <_dtoa_r+0x4ca>
 8006d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d86:	9d00      	ldr	r5, [sp, #0]
 8006d88:	ea6f 0b03 	mvn.w	fp, r3
 8006d8c:	f04f 0800 	mov.w	r8, #0
 8006d90:	4631      	mov	r1, r6
 8006d92:	4620      	mov	r0, r4
 8006d94:	f000 f9ca 	bl	800712c <_Bfree>
 8006d98:	2f00      	cmp	r7, #0
 8006d9a:	f43f aeab 	beq.w	8006af4 <_dtoa_r+0x6c4>
 8006d9e:	f1b8 0f00 	cmp.w	r8, #0
 8006da2:	d005      	beq.n	8006db0 <_dtoa_r+0x980>
 8006da4:	45b8      	cmp	r8, r7
 8006da6:	d003      	beq.n	8006db0 <_dtoa_r+0x980>
 8006da8:	4641      	mov	r1, r8
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 f9be 	bl	800712c <_Bfree>
 8006db0:	4639      	mov	r1, r7
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f9ba 	bl	800712c <_Bfree>
 8006db8:	e69c      	b.n	8006af4 <_dtoa_r+0x6c4>
 8006dba:	2600      	movs	r6, #0
 8006dbc:	4637      	mov	r7, r6
 8006dbe:	e7e1      	b.n	8006d84 <_dtoa_r+0x954>
 8006dc0:	46bb      	mov	fp, r7
 8006dc2:	4637      	mov	r7, r6
 8006dc4:	e599      	b.n	80068fa <_dtoa_r+0x4ca>
 8006dc6:	bf00      	nop
 8006dc8:	40240000 	.word	0x40240000
 8006dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f000 80c8 	beq.w	8006f64 <_dtoa_r+0xb34>
 8006dd4:	9b04      	ldr	r3, [sp, #16]
 8006dd6:	9301      	str	r3, [sp, #4]
 8006dd8:	2d00      	cmp	r5, #0
 8006dda:	dd05      	ble.n	8006de8 <_dtoa_r+0x9b8>
 8006ddc:	4639      	mov	r1, r7
 8006dde:	462a      	mov	r2, r5
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fb73 	bl	80074cc <__lshift>
 8006de6:	4607      	mov	r7, r0
 8006de8:	f1b8 0f00 	cmp.w	r8, #0
 8006dec:	d05b      	beq.n	8006ea6 <_dtoa_r+0xa76>
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4620      	mov	r0, r4
 8006df2:	f000 f95b 	bl	80070ac <_Balloc>
 8006df6:	4605      	mov	r5, r0
 8006df8:	b928      	cbnz	r0, 8006e06 <_dtoa_r+0x9d6>
 8006dfa:	4b83      	ldr	r3, [pc, #524]	; (8007008 <_dtoa_r+0xbd8>)
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e02:	f7ff bb2e 	b.w	8006462 <_dtoa_r+0x32>
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	3202      	adds	r2, #2
 8006e0a:	0092      	lsls	r2, r2, #2
 8006e0c:	f107 010c 	add.w	r1, r7, #12
 8006e10:	300c      	adds	r0, #12
 8006e12:	f7ff fa74 	bl	80062fe <memcpy>
 8006e16:	2201      	movs	r2, #1
 8006e18:	4629      	mov	r1, r5
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fb56 	bl	80074cc <__lshift>
 8006e20:	9b00      	ldr	r3, [sp, #0]
 8006e22:	3301      	adds	r3, #1
 8006e24:	9304      	str	r3, [sp, #16]
 8006e26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	9308      	str	r3, [sp, #32]
 8006e2e:	9b02      	ldr	r3, [sp, #8]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	46b8      	mov	r8, r7
 8006e36:	9306      	str	r3, [sp, #24]
 8006e38:	4607      	mov	r7, r0
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	4650      	mov	r0, sl
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	f7ff fa69 	bl	800631a <quorem>
 8006e48:	4641      	mov	r1, r8
 8006e4a:	9002      	str	r0, [sp, #8]
 8006e4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e50:	4650      	mov	r0, sl
 8006e52:	f000 fba7 	bl	80075a4 <__mcmp>
 8006e56:	463a      	mov	r2, r7
 8006e58:	9005      	str	r0, [sp, #20]
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 fbbd 	bl	80075dc <__mdiff>
 8006e62:	68c2      	ldr	r2, [r0, #12]
 8006e64:	4605      	mov	r5, r0
 8006e66:	bb02      	cbnz	r2, 8006eaa <_dtoa_r+0xa7a>
 8006e68:	4601      	mov	r1, r0
 8006e6a:	4650      	mov	r0, sl
 8006e6c:	f000 fb9a 	bl	80075a4 <__mcmp>
 8006e70:	4602      	mov	r2, r0
 8006e72:	4629      	mov	r1, r5
 8006e74:	4620      	mov	r0, r4
 8006e76:	9209      	str	r2, [sp, #36]	; 0x24
 8006e78:	f000 f958 	bl	800712c <_Bfree>
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e80:	9d04      	ldr	r5, [sp, #16]
 8006e82:	ea43 0102 	orr.w	r1, r3, r2
 8006e86:	9b06      	ldr	r3, [sp, #24]
 8006e88:	4319      	orrs	r1, r3
 8006e8a:	d110      	bne.n	8006eae <_dtoa_r+0xa7e>
 8006e8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e90:	d029      	beq.n	8006ee6 <_dtoa_r+0xab6>
 8006e92:	9b05      	ldr	r3, [sp, #20]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	dd02      	ble.n	8006e9e <_dtoa_r+0xa6e>
 8006e98:	9b02      	ldr	r3, [sp, #8]
 8006e9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	f883 9000 	strb.w	r9, [r3]
 8006ea4:	e774      	b.n	8006d90 <_dtoa_r+0x960>
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	e7ba      	b.n	8006e20 <_dtoa_r+0x9f0>
 8006eaa:	2201      	movs	r2, #1
 8006eac:	e7e1      	b.n	8006e72 <_dtoa_r+0xa42>
 8006eae:	9b05      	ldr	r3, [sp, #20]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	db04      	blt.n	8006ebe <_dtoa_r+0xa8e>
 8006eb4:	9907      	ldr	r1, [sp, #28]
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	9906      	ldr	r1, [sp, #24]
 8006eba:	430b      	orrs	r3, r1
 8006ebc:	d120      	bne.n	8006f00 <_dtoa_r+0xad0>
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	dded      	ble.n	8006e9e <_dtoa_r+0xa6e>
 8006ec2:	4651      	mov	r1, sl
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f000 fb00 	bl	80074cc <__lshift>
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4682      	mov	sl, r0
 8006ed0:	f000 fb68 	bl	80075a4 <__mcmp>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	dc03      	bgt.n	8006ee0 <_dtoa_r+0xab0>
 8006ed8:	d1e1      	bne.n	8006e9e <_dtoa_r+0xa6e>
 8006eda:	f019 0f01 	tst.w	r9, #1
 8006ede:	d0de      	beq.n	8006e9e <_dtoa_r+0xa6e>
 8006ee0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ee4:	d1d8      	bne.n	8006e98 <_dtoa_r+0xa68>
 8006ee6:	9a01      	ldr	r2, [sp, #4]
 8006ee8:	2339      	movs	r3, #57	; 0x39
 8006eea:	7013      	strb	r3, [r2, #0]
 8006eec:	462b      	mov	r3, r5
 8006eee:	461d      	mov	r5, r3
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ef6:	2a39      	cmp	r2, #57	; 0x39
 8006ef8:	d06c      	beq.n	8006fd4 <_dtoa_r+0xba4>
 8006efa:	3201      	adds	r2, #1
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	e747      	b.n	8006d90 <_dtoa_r+0x960>
 8006f00:	2a00      	cmp	r2, #0
 8006f02:	dd07      	ble.n	8006f14 <_dtoa_r+0xae4>
 8006f04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f08:	d0ed      	beq.n	8006ee6 <_dtoa_r+0xab6>
 8006f0a:	9a01      	ldr	r2, [sp, #4]
 8006f0c:	f109 0301 	add.w	r3, r9, #1
 8006f10:	7013      	strb	r3, [r2, #0]
 8006f12:	e73d      	b.n	8006d90 <_dtoa_r+0x960>
 8006f14:	9b04      	ldr	r3, [sp, #16]
 8006f16:	9a08      	ldr	r2, [sp, #32]
 8006f18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d043      	beq.n	8006fa8 <_dtoa_r+0xb78>
 8006f20:	4651      	mov	r1, sl
 8006f22:	2300      	movs	r3, #0
 8006f24:	220a      	movs	r2, #10
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f922 	bl	8007170 <__multadd>
 8006f2c:	45b8      	cmp	r8, r7
 8006f2e:	4682      	mov	sl, r0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	f04f 020a 	mov.w	r2, #10
 8006f38:	4641      	mov	r1, r8
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	d107      	bne.n	8006f4e <_dtoa_r+0xb1e>
 8006f3e:	f000 f917 	bl	8007170 <__multadd>
 8006f42:	4680      	mov	r8, r0
 8006f44:	4607      	mov	r7, r0
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	e775      	b.n	8006e3a <_dtoa_r+0xa0a>
 8006f4e:	f000 f90f 	bl	8007170 <__multadd>
 8006f52:	4639      	mov	r1, r7
 8006f54:	4680      	mov	r8, r0
 8006f56:	2300      	movs	r3, #0
 8006f58:	220a      	movs	r2, #10
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 f908 	bl	8007170 <__multadd>
 8006f60:	4607      	mov	r7, r0
 8006f62:	e7f0      	b.n	8006f46 <_dtoa_r+0xb16>
 8006f64:	9b04      	ldr	r3, [sp, #16]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	9d00      	ldr	r5, [sp, #0]
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	f7ff f9d4 	bl	800631a <quorem>
 8006f72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006f76:	9b00      	ldr	r3, [sp, #0]
 8006f78:	f805 9b01 	strb.w	r9, [r5], #1
 8006f7c:	1aea      	subs	r2, r5, r3
 8006f7e:	9b01      	ldr	r3, [sp, #4]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	dd07      	ble.n	8006f94 <_dtoa_r+0xb64>
 8006f84:	4651      	mov	r1, sl
 8006f86:	2300      	movs	r3, #0
 8006f88:	220a      	movs	r2, #10
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f8f0 	bl	8007170 <__multadd>
 8006f90:	4682      	mov	sl, r0
 8006f92:	e7ea      	b.n	8006f6a <_dtoa_r+0xb3a>
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	bfc8      	it	gt
 8006f9a:	461d      	movgt	r5, r3
 8006f9c:	9b00      	ldr	r3, [sp, #0]
 8006f9e:	bfd8      	it	le
 8006fa0:	2501      	movle	r5, #1
 8006fa2:	441d      	add	r5, r3
 8006fa4:	f04f 0800 	mov.w	r8, #0
 8006fa8:	4651      	mov	r1, sl
 8006faa:	2201      	movs	r2, #1
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 fa8d 	bl	80074cc <__lshift>
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	f000 faf5 	bl	80075a4 <__mcmp>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	dc96      	bgt.n	8006eec <_dtoa_r+0xabc>
 8006fbe:	d102      	bne.n	8006fc6 <_dtoa_r+0xb96>
 8006fc0:	f019 0f01 	tst.w	r9, #1
 8006fc4:	d192      	bne.n	8006eec <_dtoa_r+0xabc>
 8006fc6:	462b      	mov	r3, r5
 8006fc8:	461d      	mov	r5, r3
 8006fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fce:	2a30      	cmp	r2, #48	; 0x30
 8006fd0:	d0fa      	beq.n	8006fc8 <_dtoa_r+0xb98>
 8006fd2:	e6dd      	b.n	8006d90 <_dtoa_r+0x960>
 8006fd4:	9a00      	ldr	r2, [sp, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d189      	bne.n	8006eee <_dtoa_r+0xabe>
 8006fda:	f10b 0b01 	add.w	fp, fp, #1
 8006fde:	2331      	movs	r3, #49	; 0x31
 8006fe0:	e796      	b.n	8006f10 <_dtoa_r+0xae0>
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <_dtoa_r+0xbdc>)
 8006fe4:	f7ff ba99 	b.w	800651a <_dtoa_r+0xea>
 8006fe8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f47f aa6d 	bne.w	80064ca <_dtoa_r+0x9a>
 8006ff0:	4b07      	ldr	r3, [pc, #28]	; (8007010 <_dtoa_r+0xbe0>)
 8006ff2:	f7ff ba92 	b.w	800651a <_dtoa_r+0xea>
 8006ff6:	9b01      	ldr	r3, [sp, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dcb5      	bgt.n	8006f68 <_dtoa_r+0xb38>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	f73f aeb1 	bgt.w	8006d66 <_dtoa_r+0x936>
 8007004:	e7b0      	b.n	8006f68 <_dtoa_r+0xb38>
 8007006:	bf00      	nop
 8007008:	0800f5b4 	.word	0x0800f5b4
 800700c:	0800f514 	.word	0x0800f514
 8007010:	0800f538 	.word	0x0800f538

08007014 <_free_r>:
 8007014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007016:	2900      	cmp	r1, #0
 8007018:	d044      	beq.n	80070a4 <_free_r+0x90>
 800701a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800701e:	9001      	str	r0, [sp, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	f1a1 0404 	sub.w	r4, r1, #4
 8007026:	bfb8      	it	lt
 8007028:	18e4      	addlt	r4, r4, r3
 800702a:	f7fe fa7f 	bl	800552c <__malloc_lock>
 800702e:	4a1e      	ldr	r2, [pc, #120]	; (80070a8 <_free_r+0x94>)
 8007030:	9801      	ldr	r0, [sp, #4]
 8007032:	6813      	ldr	r3, [r2, #0]
 8007034:	b933      	cbnz	r3, 8007044 <_free_r+0x30>
 8007036:	6063      	str	r3, [r4, #4]
 8007038:	6014      	str	r4, [r2, #0]
 800703a:	b003      	add	sp, #12
 800703c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007040:	f7fe ba7a 	b.w	8005538 <__malloc_unlock>
 8007044:	42a3      	cmp	r3, r4
 8007046:	d908      	bls.n	800705a <_free_r+0x46>
 8007048:	6825      	ldr	r5, [r4, #0]
 800704a:	1961      	adds	r1, r4, r5
 800704c:	428b      	cmp	r3, r1
 800704e:	bf01      	itttt	eq
 8007050:	6819      	ldreq	r1, [r3, #0]
 8007052:	685b      	ldreq	r3, [r3, #4]
 8007054:	1949      	addeq	r1, r1, r5
 8007056:	6021      	streq	r1, [r4, #0]
 8007058:	e7ed      	b.n	8007036 <_free_r+0x22>
 800705a:	461a      	mov	r2, r3
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	b10b      	cbz	r3, 8007064 <_free_r+0x50>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d9fa      	bls.n	800705a <_free_r+0x46>
 8007064:	6811      	ldr	r1, [r2, #0]
 8007066:	1855      	adds	r5, r2, r1
 8007068:	42a5      	cmp	r5, r4
 800706a:	d10b      	bne.n	8007084 <_free_r+0x70>
 800706c:	6824      	ldr	r4, [r4, #0]
 800706e:	4421      	add	r1, r4
 8007070:	1854      	adds	r4, r2, r1
 8007072:	42a3      	cmp	r3, r4
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	d1e0      	bne.n	800703a <_free_r+0x26>
 8007078:	681c      	ldr	r4, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	6053      	str	r3, [r2, #4]
 800707e:	440c      	add	r4, r1
 8007080:	6014      	str	r4, [r2, #0]
 8007082:	e7da      	b.n	800703a <_free_r+0x26>
 8007084:	d902      	bls.n	800708c <_free_r+0x78>
 8007086:	230c      	movs	r3, #12
 8007088:	6003      	str	r3, [r0, #0]
 800708a:	e7d6      	b.n	800703a <_free_r+0x26>
 800708c:	6825      	ldr	r5, [r4, #0]
 800708e:	1961      	adds	r1, r4, r5
 8007090:	428b      	cmp	r3, r1
 8007092:	bf04      	itt	eq
 8007094:	6819      	ldreq	r1, [r3, #0]
 8007096:	685b      	ldreq	r3, [r3, #4]
 8007098:	6063      	str	r3, [r4, #4]
 800709a:	bf04      	itt	eq
 800709c:	1949      	addeq	r1, r1, r5
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	6054      	str	r4, [r2, #4]
 80070a2:	e7ca      	b.n	800703a <_free_r+0x26>
 80070a4:	b003      	add	sp, #12
 80070a6:	bd30      	pop	{r4, r5, pc}
 80070a8:	2000a448 	.word	0x2000a448

080070ac <_Balloc>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	69c6      	ldr	r6, [r0, #28]
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	b976      	cbnz	r6, 80070d4 <_Balloc+0x28>
 80070b6:	2010      	movs	r0, #16
 80070b8:	f7fe f990 	bl	80053dc <malloc>
 80070bc:	4602      	mov	r2, r0
 80070be:	61e0      	str	r0, [r4, #28]
 80070c0:	b920      	cbnz	r0, 80070cc <_Balloc+0x20>
 80070c2:	4b18      	ldr	r3, [pc, #96]	; (8007124 <_Balloc+0x78>)
 80070c4:	4818      	ldr	r0, [pc, #96]	; (8007128 <_Balloc+0x7c>)
 80070c6:	216b      	movs	r1, #107	; 0x6b
 80070c8:	f001 f9ee 	bl	80084a8 <__assert_func>
 80070cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070d0:	6006      	str	r6, [r0, #0]
 80070d2:	60c6      	str	r6, [r0, #12]
 80070d4:	69e6      	ldr	r6, [r4, #28]
 80070d6:	68f3      	ldr	r3, [r6, #12]
 80070d8:	b183      	cbz	r3, 80070fc <_Balloc+0x50>
 80070da:	69e3      	ldr	r3, [r4, #28]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070e2:	b9b8      	cbnz	r0, 8007114 <_Balloc+0x68>
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f605 	lsl.w	r6, r1, r5
 80070ea:	1d72      	adds	r2, r6, #5
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	4620      	mov	r0, r4
 80070f0:	f001 f9f8 	bl	80084e4 <_calloc_r>
 80070f4:	b160      	cbz	r0, 8007110 <_Balloc+0x64>
 80070f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070fa:	e00e      	b.n	800711a <_Balloc+0x6e>
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	2104      	movs	r1, #4
 8007100:	4620      	mov	r0, r4
 8007102:	f001 f9ef 	bl	80084e4 <_calloc_r>
 8007106:	69e3      	ldr	r3, [r4, #28]
 8007108:	60f0      	str	r0, [r6, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e4      	bne.n	80070da <_Balloc+0x2e>
 8007110:	2000      	movs	r0, #0
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	6802      	ldr	r2, [r0, #0]
 8007116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800711a:	2300      	movs	r3, #0
 800711c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007120:	e7f7      	b.n	8007112 <_Balloc+0x66>
 8007122:	bf00      	nop
 8007124:	0800f545 	.word	0x0800f545
 8007128:	0800f5c5 	.word	0x0800f5c5

0800712c <_Bfree>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	69c6      	ldr	r6, [r0, #28]
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	b976      	cbnz	r6, 8007154 <_Bfree+0x28>
 8007136:	2010      	movs	r0, #16
 8007138:	f7fe f950 	bl	80053dc <malloc>
 800713c:	4602      	mov	r2, r0
 800713e:	61e8      	str	r0, [r5, #28]
 8007140:	b920      	cbnz	r0, 800714c <_Bfree+0x20>
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <_Bfree+0x3c>)
 8007144:	4809      	ldr	r0, [pc, #36]	; (800716c <_Bfree+0x40>)
 8007146:	218f      	movs	r1, #143	; 0x8f
 8007148:	f001 f9ae 	bl	80084a8 <__assert_func>
 800714c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007150:	6006      	str	r6, [r0, #0]
 8007152:	60c6      	str	r6, [r0, #12]
 8007154:	b13c      	cbz	r4, 8007166 <_Bfree+0x3a>
 8007156:	69eb      	ldr	r3, [r5, #28]
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007160:	6021      	str	r1, [r4, #0]
 8007162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	0800f545 	.word	0x0800f545
 800716c:	0800f5c5 	.word	0x0800f5c5

08007170 <__multadd>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	690d      	ldr	r5, [r1, #16]
 8007176:	4607      	mov	r7, r0
 8007178:	460c      	mov	r4, r1
 800717a:	461e      	mov	r6, r3
 800717c:	f101 0c14 	add.w	ip, r1, #20
 8007180:	2000      	movs	r0, #0
 8007182:	f8dc 3000 	ldr.w	r3, [ip]
 8007186:	b299      	uxth	r1, r3
 8007188:	fb02 6101 	mla	r1, r2, r1, r6
 800718c:	0c1e      	lsrs	r6, r3, #16
 800718e:	0c0b      	lsrs	r3, r1, #16
 8007190:	fb02 3306 	mla	r3, r2, r6, r3
 8007194:	b289      	uxth	r1, r1
 8007196:	3001      	adds	r0, #1
 8007198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800719c:	4285      	cmp	r5, r0
 800719e:	f84c 1b04 	str.w	r1, [ip], #4
 80071a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071a6:	dcec      	bgt.n	8007182 <__multadd+0x12>
 80071a8:	b30e      	cbz	r6, 80071ee <__multadd+0x7e>
 80071aa:	68a3      	ldr	r3, [r4, #8]
 80071ac:	42ab      	cmp	r3, r5
 80071ae:	dc19      	bgt.n	80071e4 <__multadd+0x74>
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4638      	mov	r0, r7
 80071b4:	3101      	adds	r1, #1
 80071b6:	f7ff ff79 	bl	80070ac <_Balloc>
 80071ba:	4680      	mov	r8, r0
 80071bc:	b928      	cbnz	r0, 80071ca <__multadd+0x5a>
 80071be:	4602      	mov	r2, r0
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <__multadd+0x84>)
 80071c2:	480d      	ldr	r0, [pc, #52]	; (80071f8 <__multadd+0x88>)
 80071c4:	21ba      	movs	r1, #186	; 0xba
 80071c6:	f001 f96f 	bl	80084a8 <__assert_func>
 80071ca:	6922      	ldr	r2, [r4, #16]
 80071cc:	3202      	adds	r2, #2
 80071ce:	f104 010c 	add.w	r1, r4, #12
 80071d2:	0092      	lsls	r2, r2, #2
 80071d4:	300c      	adds	r0, #12
 80071d6:	f7ff f892 	bl	80062fe <memcpy>
 80071da:	4621      	mov	r1, r4
 80071dc:	4638      	mov	r0, r7
 80071de:	f7ff ffa5 	bl	800712c <_Bfree>
 80071e2:	4644      	mov	r4, r8
 80071e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071e8:	3501      	adds	r5, #1
 80071ea:	615e      	str	r6, [r3, #20]
 80071ec:	6125      	str	r5, [r4, #16]
 80071ee:	4620      	mov	r0, r4
 80071f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f4:	0800f5b4 	.word	0x0800f5b4
 80071f8:	0800f5c5 	.word	0x0800f5c5

080071fc <__hi0bits>:
 80071fc:	0c03      	lsrs	r3, r0, #16
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	b9d3      	cbnz	r3, 8007238 <__hi0bits+0x3c>
 8007202:	0400      	lsls	r0, r0, #16
 8007204:	2310      	movs	r3, #16
 8007206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800720a:	bf04      	itt	eq
 800720c:	0200      	lsleq	r0, r0, #8
 800720e:	3308      	addeq	r3, #8
 8007210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007214:	bf04      	itt	eq
 8007216:	0100      	lsleq	r0, r0, #4
 8007218:	3304      	addeq	r3, #4
 800721a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800721e:	bf04      	itt	eq
 8007220:	0080      	lsleq	r0, r0, #2
 8007222:	3302      	addeq	r3, #2
 8007224:	2800      	cmp	r0, #0
 8007226:	db05      	blt.n	8007234 <__hi0bits+0x38>
 8007228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800722c:	f103 0301 	add.w	r3, r3, #1
 8007230:	bf08      	it	eq
 8007232:	2320      	moveq	r3, #32
 8007234:	4618      	mov	r0, r3
 8007236:	4770      	bx	lr
 8007238:	2300      	movs	r3, #0
 800723a:	e7e4      	b.n	8007206 <__hi0bits+0xa>

0800723c <__lo0bits>:
 800723c:	6803      	ldr	r3, [r0, #0]
 800723e:	f013 0207 	ands.w	r2, r3, #7
 8007242:	d00c      	beq.n	800725e <__lo0bits+0x22>
 8007244:	07d9      	lsls	r1, r3, #31
 8007246:	d422      	bmi.n	800728e <__lo0bits+0x52>
 8007248:	079a      	lsls	r2, r3, #30
 800724a:	bf49      	itett	mi
 800724c:	085b      	lsrmi	r3, r3, #1
 800724e:	089b      	lsrpl	r3, r3, #2
 8007250:	6003      	strmi	r3, [r0, #0]
 8007252:	2201      	movmi	r2, #1
 8007254:	bf5c      	itt	pl
 8007256:	6003      	strpl	r3, [r0, #0]
 8007258:	2202      	movpl	r2, #2
 800725a:	4610      	mov	r0, r2
 800725c:	4770      	bx	lr
 800725e:	b299      	uxth	r1, r3
 8007260:	b909      	cbnz	r1, 8007266 <__lo0bits+0x2a>
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	2210      	movs	r2, #16
 8007266:	b2d9      	uxtb	r1, r3
 8007268:	b909      	cbnz	r1, 800726e <__lo0bits+0x32>
 800726a:	3208      	adds	r2, #8
 800726c:	0a1b      	lsrs	r3, r3, #8
 800726e:	0719      	lsls	r1, r3, #28
 8007270:	bf04      	itt	eq
 8007272:	091b      	lsreq	r3, r3, #4
 8007274:	3204      	addeq	r2, #4
 8007276:	0799      	lsls	r1, r3, #30
 8007278:	bf04      	itt	eq
 800727a:	089b      	lsreq	r3, r3, #2
 800727c:	3202      	addeq	r2, #2
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d403      	bmi.n	800728a <__lo0bits+0x4e>
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	f102 0201 	add.w	r2, r2, #1
 8007288:	d003      	beq.n	8007292 <__lo0bits+0x56>
 800728a:	6003      	str	r3, [r0, #0]
 800728c:	e7e5      	b.n	800725a <__lo0bits+0x1e>
 800728e:	2200      	movs	r2, #0
 8007290:	e7e3      	b.n	800725a <__lo0bits+0x1e>
 8007292:	2220      	movs	r2, #32
 8007294:	e7e1      	b.n	800725a <__lo0bits+0x1e>
	...

08007298 <__i2b>:
 8007298:	b510      	push	{r4, lr}
 800729a:	460c      	mov	r4, r1
 800729c:	2101      	movs	r1, #1
 800729e:	f7ff ff05 	bl	80070ac <_Balloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	b928      	cbnz	r0, 80072b2 <__i2b+0x1a>
 80072a6:	4b05      	ldr	r3, [pc, #20]	; (80072bc <__i2b+0x24>)
 80072a8:	4805      	ldr	r0, [pc, #20]	; (80072c0 <__i2b+0x28>)
 80072aa:	f240 1145 	movw	r1, #325	; 0x145
 80072ae:	f001 f8fb 	bl	80084a8 <__assert_func>
 80072b2:	2301      	movs	r3, #1
 80072b4:	6144      	str	r4, [r0, #20]
 80072b6:	6103      	str	r3, [r0, #16]
 80072b8:	bd10      	pop	{r4, pc}
 80072ba:	bf00      	nop
 80072bc:	0800f5b4 	.word	0x0800f5b4
 80072c0:	0800f5c5 	.word	0x0800f5c5

080072c4 <__multiply>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	4691      	mov	r9, r2
 80072ca:	690a      	ldr	r2, [r1, #16]
 80072cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bfb8      	it	lt
 80072d4:	460b      	movlt	r3, r1
 80072d6:	460c      	mov	r4, r1
 80072d8:	bfbc      	itt	lt
 80072da:	464c      	movlt	r4, r9
 80072dc:	4699      	movlt	r9, r3
 80072de:	6927      	ldr	r7, [r4, #16]
 80072e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072e4:	68a3      	ldr	r3, [r4, #8]
 80072e6:	6861      	ldr	r1, [r4, #4]
 80072e8:	eb07 060a 	add.w	r6, r7, sl
 80072ec:	42b3      	cmp	r3, r6
 80072ee:	b085      	sub	sp, #20
 80072f0:	bfb8      	it	lt
 80072f2:	3101      	addlt	r1, #1
 80072f4:	f7ff feda 	bl	80070ac <_Balloc>
 80072f8:	b930      	cbnz	r0, 8007308 <__multiply+0x44>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b44      	ldr	r3, [pc, #272]	; (8007410 <__multiply+0x14c>)
 80072fe:	4845      	ldr	r0, [pc, #276]	; (8007414 <__multiply+0x150>)
 8007300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007304:	f001 f8d0 	bl	80084a8 <__assert_func>
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007310:	462b      	mov	r3, r5
 8007312:	2200      	movs	r2, #0
 8007314:	4543      	cmp	r3, r8
 8007316:	d321      	bcc.n	800735c <__multiply+0x98>
 8007318:	f104 0314 	add.w	r3, r4, #20
 800731c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007320:	f109 0314 	add.w	r3, r9, #20
 8007324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007328:	9202      	str	r2, [sp, #8]
 800732a:	1b3a      	subs	r2, r7, r4
 800732c:	3a15      	subs	r2, #21
 800732e:	f022 0203 	bic.w	r2, r2, #3
 8007332:	3204      	adds	r2, #4
 8007334:	f104 0115 	add.w	r1, r4, #21
 8007338:	428f      	cmp	r7, r1
 800733a:	bf38      	it	cc
 800733c:	2204      	movcc	r2, #4
 800733e:	9201      	str	r2, [sp, #4]
 8007340:	9a02      	ldr	r2, [sp, #8]
 8007342:	9303      	str	r3, [sp, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d80c      	bhi.n	8007362 <__multiply+0x9e>
 8007348:	2e00      	cmp	r6, #0
 800734a:	dd03      	ble.n	8007354 <__multiply+0x90>
 800734c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007350:	2b00      	cmp	r3, #0
 8007352:	d05b      	beq.n	800740c <__multiply+0x148>
 8007354:	6106      	str	r6, [r0, #16]
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800735c:	f843 2b04 	str.w	r2, [r3], #4
 8007360:	e7d8      	b.n	8007314 <__multiply+0x50>
 8007362:	f8b3 a000 	ldrh.w	sl, [r3]
 8007366:	f1ba 0f00 	cmp.w	sl, #0
 800736a:	d024      	beq.n	80073b6 <__multiply+0xf2>
 800736c:	f104 0e14 	add.w	lr, r4, #20
 8007370:	46a9      	mov	r9, r5
 8007372:	f04f 0c00 	mov.w	ip, #0
 8007376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800737a:	f8d9 1000 	ldr.w	r1, [r9]
 800737e:	fa1f fb82 	uxth.w	fp, r2
 8007382:	b289      	uxth	r1, r1
 8007384:	fb0a 110b 	mla	r1, sl, fp, r1
 8007388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800738c:	f8d9 2000 	ldr.w	r2, [r9]
 8007390:	4461      	add	r1, ip
 8007392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007396:	fb0a c20b 	mla	r2, sl, fp, ip
 800739a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800739e:	b289      	uxth	r1, r1
 80073a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073a4:	4577      	cmp	r7, lr
 80073a6:	f849 1b04 	str.w	r1, [r9], #4
 80073aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80073ae:	d8e2      	bhi.n	8007376 <__multiply+0xb2>
 80073b0:	9a01      	ldr	r2, [sp, #4]
 80073b2:	f845 c002 	str.w	ip, [r5, r2]
 80073b6:	9a03      	ldr	r2, [sp, #12]
 80073b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073bc:	3304      	adds	r3, #4
 80073be:	f1b9 0f00 	cmp.w	r9, #0
 80073c2:	d021      	beq.n	8007408 <__multiply+0x144>
 80073c4:	6829      	ldr	r1, [r5, #0]
 80073c6:	f104 0c14 	add.w	ip, r4, #20
 80073ca:	46ae      	mov	lr, r5
 80073cc:	f04f 0a00 	mov.w	sl, #0
 80073d0:	f8bc b000 	ldrh.w	fp, [ip]
 80073d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073d8:	fb09 220b 	mla	r2, r9, fp, r2
 80073dc:	4452      	add	r2, sl
 80073de:	b289      	uxth	r1, r1
 80073e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80073e4:	f84e 1b04 	str.w	r1, [lr], #4
 80073e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073f0:	f8be 1000 	ldrh.w	r1, [lr]
 80073f4:	fb09 110a 	mla	r1, r9, sl, r1
 80073f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80073fc:	4567      	cmp	r7, ip
 80073fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007402:	d8e5      	bhi.n	80073d0 <__multiply+0x10c>
 8007404:	9a01      	ldr	r2, [sp, #4]
 8007406:	50a9      	str	r1, [r5, r2]
 8007408:	3504      	adds	r5, #4
 800740a:	e799      	b.n	8007340 <__multiply+0x7c>
 800740c:	3e01      	subs	r6, #1
 800740e:	e79b      	b.n	8007348 <__multiply+0x84>
 8007410:	0800f5b4 	.word	0x0800f5b4
 8007414:	0800f5c5 	.word	0x0800f5c5

08007418 <__pow5mult>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4615      	mov	r5, r2
 800741e:	f012 0203 	ands.w	r2, r2, #3
 8007422:	4606      	mov	r6, r0
 8007424:	460f      	mov	r7, r1
 8007426:	d007      	beq.n	8007438 <__pow5mult+0x20>
 8007428:	4c25      	ldr	r4, [pc, #148]	; (80074c0 <__pow5mult+0xa8>)
 800742a:	3a01      	subs	r2, #1
 800742c:	2300      	movs	r3, #0
 800742e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007432:	f7ff fe9d 	bl	8007170 <__multadd>
 8007436:	4607      	mov	r7, r0
 8007438:	10ad      	asrs	r5, r5, #2
 800743a:	d03d      	beq.n	80074b8 <__pow5mult+0xa0>
 800743c:	69f4      	ldr	r4, [r6, #28]
 800743e:	b97c      	cbnz	r4, 8007460 <__pow5mult+0x48>
 8007440:	2010      	movs	r0, #16
 8007442:	f7fd ffcb 	bl	80053dc <malloc>
 8007446:	4602      	mov	r2, r0
 8007448:	61f0      	str	r0, [r6, #28]
 800744a:	b928      	cbnz	r0, 8007458 <__pow5mult+0x40>
 800744c:	4b1d      	ldr	r3, [pc, #116]	; (80074c4 <__pow5mult+0xac>)
 800744e:	481e      	ldr	r0, [pc, #120]	; (80074c8 <__pow5mult+0xb0>)
 8007450:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007454:	f001 f828 	bl	80084a8 <__assert_func>
 8007458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800745c:	6004      	str	r4, [r0, #0]
 800745e:	60c4      	str	r4, [r0, #12]
 8007460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007468:	b94c      	cbnz	r4, 800747e <__pow5mult+0x66>
 800746a:	f240 2171 	movw	r1, #625	; 0x271
 800746e:	4630      	mov	r0, r6
 8007470:	f7ff ff12 	bl	8007298 <__i2b>
 8007474:	2300      	movs	r3, #0
 8007476:	f8c8 0008 	str.w	r0, [r8, #8]
 800747a:	4604      	mov	r4, r0
 800747c:	6003      	str	r3, [r0, #0]
 800747e:	f04f 0900 	mov.w	r9, #0
 8007482:	07eb      	lsls	r3, r5, #31
 8007484:	d50a      	bpl.n	800749c <__pow5mult+0x84>
 8007486:	4639      	mov	r1, r7
 8007488:	4622      	mov	r2, r4
 800748a:	4630      	mov	r0, r6
 800748c:	f7ff ff1a 	bl	80072c4 <__multiply>
 8007490:	4639      	mov	r1, r7
 8007492:	4680      	mov	r8, r0
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff fe49 	bl	800712c <_Bfree>
 800749a:	4647      	mov	r7, r8
 800749c:	106d      	asrs	r5, r5, #1
 800749e:	d00b      	beq.n	80074b8 <__pow5mult+0xa0>
 80074a0:	6820      	ldr	r0, [r4, #0]
 80074a2:	b938      	cbnz	r0, 80074b4 <__pow5mult+0x9c>
 80074a4:	4622      	mov	r2, r4
 80074a6:	4621      	mov	r1, r4
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ff0b 	bl	80072c4 <__multiply>
 80074ae:	6020      	str	r0, [r4, #0]
 80074b0:	f8c0 9000 	str.w	r9, [r0]
 80074b4:	4604      	mov	r4, r0
 80074b6:	e7e4      	b.n	8007482 <__pow5mult+0x6a>
 80074b8:	4638      	mov	r0, r7
 80074ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074be:	bf00      	nop
 80074c0:	0800f710 	.word	0x0800f710
 80074c4:	0800f545 	.word	0x0800f545
 80074c8:	0800f5c5 	.word	0x0800f5c5

080074cc <__lshift>:
 80074cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d0:	460c      	mov	r4, r1
 80074d2:	6849      	ldr	r1, [r1, #4]
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074da:	68a3      	ldr	r3, [r4, #8]
 80074dc:	4607      	mov	r7, r0
 80074de:	4691      	mov	r9, r2
 80074e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074e4:	f108 0601 	add.w	r6, r8, #1
 80074e8:	42b3      	cmp	r3, r6
 80074ea:	db0b      	blt.n	8007504 <__lshift+0x38>
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff fddd 	bl	80070ac <_Balloc>
 80074f2:	4605      	mov	r5, r0
 80074f4:	b948      	cbnz	r0, 800750a <__lshift+0x3e>
 80074f6:	4602      	mov	r2, r0
 80074f8:	4b28      	ldr	r3, [pc, #160]	; (800759c <__lshift+0xd0>)
 80074fa:	4829      	ldr	r0, [pc, #164]	; (80075a0 <__lshift+0xd4>)
 80074fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007500:	f000 ffd2 	bl	80084a8 <__assert_func>
 8007504:	3101      	adds	r1, #1
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	e7ee      	b.n	80074e8 <__lshift+0x1c>
 800750a:	2300      	movs	r3, #0
 800750c:	f100 0114 	add.w	r1, r0, #20
 8007510:	f100 0210 	add.w	r2, r0, #16
 8007514:	4618      	mov	r0, r3
 8007516:	4553      	cmp	r3, sl
 8007518:	db33      	blt.n	8007582 <__lshift+0xb6>
 800751a:	6920      	ldr	r0, [r4, #16]
 800751c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007520:	f104 0314 	add.w	r3, r4, #20
 8007524:	f019 091f 	ands.w	r9, r9, #31
 8007528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800752c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007530:	d02b      	beq.n	800758a <__lshift+0xbe>
 8007532:	f1c9 0e20 	rsb	lr, r9, #32
 8007536:	468a      	mov	sl, r1
 8007538:	2200      	movs	r2, #0
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	fa00 f009 	lsl.w	r0, r0, r9
 8007540:	4310      	orrs	r0, r2
 8007542:	f84a 0b04 	str.w	r0, [sl], #4
 8007546:	f853 2b04 	ldr.w	r2, [r3], #4
 800754a:	459c      	cmp	ip, r3
 800754c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007550:	d8f3      	bhi.n	800753a <__lshift+0x6e>
 8007552:	ebac 0304 	sub.w	r3, ip, r4
 8007556:	3b15      	subs	r3, #21
 8007558:	f023 0303 	bic.w	r3, r3, #3
 800755c:	3304      	adds	r3, #4
 800755e:	f104 0015 	add.w	r0, r4, #21
 8007562:	4584      	cmp	ip, r0
 8007564:	bf38      	it	cc
 8007566:	2304      	movcc	r3, #4
 8007568:	50ca      	str	r2, [r1, r3]
 800756a:	b10a      	cbz	r2, 8007570 <__lshift+0xa4>
 800756c:	f108 0602 	add.w	r6, r8, #2
 8007570:	3e01      	subs	r6, #1
 8007572:	4638      	mov	r0, r7
 8007574:	612e      	str	r6, [r5, #16]
 8007576:	4621      	mov	r1, r4
 8007578:	f7ff fdd8 	bl	800712c <_Bfree>
 800757c:	4628      	mov	r0, r5
 800757e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007582:	f842 0f04 	str.w	r0, [r2, #4]!
 8007586:	3301      	adds	r3, #1
 8007588:	e7c5      	b.n	8007516 <__lshift+0x4a>
 800758a:	3904      	subs	r1, #4
 800758c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007590:	f841 2f04 	str.w	r2, [r1, #4]!
 8007594:	459c      	cmp	ip, r3
 8007596:	d8f9      	bhi.n	800758c <__lshift+0xc0>
 8007598:	e7ea      	b.n	8007570 <__lshift+0xa4>
 800759a:	bf00      	nop
 800759c:	0800f5b4 	.word	0x0800f5b4
 80075a0:	0800f5c5 	.word	0x0800f5c5

080075a4 <__mcmp>:
 80075a4:	b530      	push	{r4, r5, lr}
 80075a6:	6902      	ldr	r2, [r0, #16]
 80075a8:	690c      	ldr	r4, [r1, #16]
 80075aa:	1b12      	subs	r2, r2, r4
 80075ac:	d10e      	bne.n	80075cc <__mcmp+0x28>
 80075ae:	f100 0314 	add.w	r3, r0, #20
 80075b2:	3114      	adds	r1, #20
 80075b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075c4:	42a5      	cmp	r5, r4
 80075c6:	d003      	beq.n	80075d0 <__mcmp+0x2c>
 80075c8:	d305      	bcc.n	80075d6 <__mcmp+0x32>
 80075ca:	2201      	movs	r2, #1
 80075cc:	4610      	mov	r0, r2
 80075ce:	bd30      	pop	{r4, r5, pc}
 80075d0:	4283      	cmp	r3, r0
 80075d2:	d3f3      	bcc.n	80075bc <__mcmp+0x18>
 80075d4:	e7fa      	b.n	80075cc <__mcmp+0x28>
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	e7f7      	b.n	80075cc <__mcmp+0x28>

080075dc <__mdiff>:
 80075dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	460c      	mov	r4, r1
 80075e2:	4606      	mov	r6, r0
 80075e4:	4611      	mov	r1, r2
 80075e6:	4620      	mov	r0, r4
 80075e8:	4690      	mov	r8, r2
 80075ea:	f7ff ffdb 	bl	80075a4 <__mcmp>
 80075ee:	1e05      	subs	r5, r0, #0
 80075f0:	d110      	bne.n	8007614 <__mdiff+0x38>
 80075f2:	4629      	mov	r1, r5
 80075f4:	4630      	mov	r0, r6
 80075f6:	f7ff fd59 	bl	80070ac <_Balloc>
 80075fa:	b930      	cbnz	r0, 800760a <__mdiff+0x2e>
 80075fc:	4b3a      	ldr	r3, [pc, #232]	; (80076e8 <__mdiff+0x10c>)
 80075fe:	4602      	mov	r2, r0
 8007600:	f240 2137 	movw	r1, #567	; 0x237
 8007604:	4839      	ldr	r0, [pc, #228]	; (80076ec <__mdiff+0x110>)
 8007606:	f000 ff4f 	bl	80084a8 <__assert_func>
 800760a:	2301      	movs	r3, #1
 800760c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007614:	bfa4      	itt	ge
 8007616:	4643      	movge	r3, r8
 8007618:	46a0      	movge	r8, r4
 800761a:	4630      	mov	r0, r6
 800761c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007620:	bfa6      	itte	ge
 8007622:	461c      	movge	r4, r3
 8007624:	2500      	movge	r5, #0
 8007626:	2501      	movlt	r5, #1
 8007628:	f7ff fd40 	bl	80070ac <_Balloc>
 800762c:	b920      	cbnz	r0, 8007638 <__mdiff+0x5c>
 800762e:	4b2e      	ldr	r3, [pc, #184]	; (80076e8 <__mdiff+0x10c>)
 8007630:	4602      	mov	r2, r0
 8007632:	f240 2145 	movw	r1, #581	; 0x245
 8007636:	e7e5      	b.n	8007604 <__mdiff+0x28>
 8007638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800763c:	6926      	ldr	r6, [r4, #16]
 800763e:	60c5      	str	r5, [r0, #12]
 8007640:	f104 0914 	add.w	r9, r4, #20
 8007644:	f108 0514 	add.w	r5, r8, #20
 8007648:	f100 0e14 	add.w	lr, r0, #20
 800764c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007654:	f108 0210 	add.w	r2, r8, #16
 8007658:	46f2      	mov	sl, lr
 800765a:	2100      	movs	r1, #0
 800765c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007664:	fa11 f88b 	uxtah	r8, r1, fp
 8007668:	b299      	uxth	r1, r3
 800766a:	0c1b      	lsrs	r3, r3, #16
 800766c:	eba8 0801 	sub.w	r8, r8, r1
 8007670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007678:	fa1f f888 	uxth.w	r8, r8
 800767c:	1419      	asrs	r1, r3, #16
 800767e:	454e      	cmp	r6, r9
 8007680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007684:	f84a 3b04 	str.w	r3, [sl], #4
 8007688:	d8e8      	bhi.n	800765c <__mdiff+0x80>
 800768a:	1b33      	subs	r3, r6, r4
 800768c:	3b15      	subs	r3, #21
 800768e:	f023 0303 	bic.w	r3, r3, #3
 8007692:	3304      	adds	r3, #4
 8007694:	3415      	adds	r4, #21
 8007696:	42a6      	cmp	r6, r4
 8007698:	bf38      	it	cc
 800769a:	2304      	movcc	r3, #4
 800769c:	441d      	add	r5, r3
 800769e:	4473      	add	r3, lr
 80076a0:	469e      	mov	lr, r3
 80076a2:	462e      	mov	r6, r5
 80076a4:	4566      	cmp	r6, ip
 80076a6:	d30e      	bcc.n	80076c6 <__mdiff+0xea>
 80076a8:	f10c 0203 	add.w	r2, ip, #3
 80076ac:	1b52      	subs	r2, r2, r5
 80076ae:	f022 0203 	bic.w	r2, r2, #3
 80076b2:	3d03      	subs	r5, #3
 80076b4:	45ac      	cmp	ip, r5
 80076b6:	bf38      	it	cc
 80076b8:	2200      	movcc	r2, #0
 80076ba:	4413      	add	r3, r2
 80076bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80076c0:	b17a      	cbz	r2, 80076e2 <__mdiff+0x106>
 80076c2:	6107      	str	r7, [r0, #16]
 80076c4:	e7a4      	b.n	8007610 <__mdiff+0x34>
 80076c6:	f856 8b04 	ldr.w	r8, [r6], #4
 80076ca:	fa11 f288 	uxtah	r2, r1, r8
 80076ce:	1414      	asrs	r4, r2, #16
 80076d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076d4:	b292      	uxth	r2, r2
 80076d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076da:	f84e 2b04 	str.w	r2, [lr], #4
 80076de:	1421      	asrs	r1, r4, #16
 80076e0:	e7e0      	b.n	80076a4 <__mdiff+0xc8>
 80076e2:	3f01      	subs	r7, #1
 80076e4:	e7ea      	b.n	80076bc <__mdiff+0xe0>
 80076e6:	bf00      	nop
 80076e8:	0800f5b4 	.word	0x0800f5b4
 80076ec:	0800f5c5 	.word	0x0800f5c5

080076f0 <__d2b>:
 80076f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	460f      	mov	r7, r1
 80076f6:	2101      	movs	r1, #1
 80076f8:	ec59 8b10 	vmov	r8, r9, d0
 80076fc:	4616      	mov	r6, r2
 80076fe:	f7ff fcd5 	bl	80070ac <_Balloc>
 8007702:	4604      	mov	r4, r0
 8007704:	b930      	cbnz	r0, 8007714 <__d2b+0x24>
 8007706:	4602      	mov	r2, r0
 8007708:	4b24      	ldr	r3, [pc, #144]	; (800779c <__d2b+0xac>)
 800770a:	4825      	ldr	r0, [pc, #148]	; (80077a0 <__d2b+0xb0>)
 800770c:	f240 310f 	movw	r1, #783	; 0x30f
 8007710:	f000 feca 	bl	80084a8 <__assert_func>
 8007714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800771c:	bb2d      	cbnz	r5, 800776a <__d2b+0x7a>
 800771e:	9301      	str	r3, [sp, #4]
 8007720:	f1b8 0300 	subs.w	r3, r8, #0
 8007724:	d026      	beq.n	8007774 <__d2b+0x84>
 8007726:	4668      	mov	r0, sp
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	f7ff fd87 	bl	800723c <__lo0bits>
 800772e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007732:	b1e8      	cbz	r0, 8007770 <__d2b+0x80>
 8007734:	f1c0 0320 	rsb	r3, r0, #32
 8007738:	fa02 f303 	lsl.w	r3, r2, r3
 800773c:	430b      	orrs	r3, r1
 800773e:	40c2      	lsrs	r2, r0
 8007740:	6163      	str	r3, [r4, #20]
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	9b01      	ldr	r3, [sp, #4]
 8007746:	61a3      	str	r3, [r4, #24]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bf14      	ite	ne
 800774c:	2202      	movne	r2, #2
 800774e:	2201      	moveq	r2, #1
 8007750:	6122      	str	r2, [r4, #16]
 8007752:	b1bd      	cbz	r5, 8007784 <__d2b+0x94>
 8007754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007758:	4405      	add	r5, r0
 800775a:	603d      	str	r5, [r7, #0]
 800775c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007760:	6030      	str	r0, [r6, #0]
 8007762:	4620      	mov	r0, r4
 8007764:	b003      	add	sp, #12
 8007766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800776e:	e7d6      	b.n	800771e <__d2b+0x2e>
 8007770:	6161      	str	r1, [r4, #20]
 8007772:	e7e7      	b.n	8007744 <__d2b+0x54>
 8007774:	a801      	add	r0, sp, #4
 8007776:	f7ff fd61 	bl	800723c <__lo0bits>
 800777a:	9b01      	ldr	r3, [sp, #4]
 800777c:	6163      	str	r3, [r4, #20]
 800777e:	3020      	adds	r0, #32
 8007780:	2201      	movs	r2, #1
 8007782:	e7e5      	b.n	8007750 <__d2b+0x60>
 8007784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800778c:	6038      	str	r0, [r7, #0]
 800778e:	6918      	ldr	r0, [r3, #16]
 8007790:	f7ff fd34 	bl	80071fc <__hi0bits>
 8007794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007798:	e7e2      	b.n	8007760 <__d2b+0x70>
 800779a:	bf00      	nop
 800779c:	0800f5b4 	.word	0x0800f5b4
 80077a0:	0800f5c5 	.word	0x0800f5c5

080077a4 <__swhatbuf_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	460c      	mov	r4, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	2900      	cmp	r1, #0
 80077ae:	b096      	sub	sp, #88	; 0x58
 80077b0:	4615      	mov	r5, r2
 80077b2:	461e      	mov	r6, r3
 80077b4:	da0d      	bge.n	80077d2 <__swhatbuf_r+0x2e>
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80077bc:	f04f 0100 	mov.w	r1, #0
 80077c0:	bf0c      	ite	eq
 80077c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80077c6:	2340      	movne	r3, #64	; 0x40
 80077c8:	2000      	movs	r0, #0
 80077ca:	6031      	str	r1, [r6, #0]
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	b016      	add	sp, #88	; 0x58
 80077d0:	bd70      	pop	{r4, r5, r6, pc}
 80077d2:	466a      	mov	r2, sp
 80077d4:	f000 fe46 	bl	8008464 <_fstat_r>
 80077d8:	2800      	cmp	r0, #0
 80077da:	dbec      	blt.n	80077b6 <__swhatbuf_r+0x12>
 80077dc:	9901      	ldr	r1, [sp, #4]
 80077de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80077e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80077e6:	4259      	negs	r1, r3
 80077e8:	4159      	adcs	r1, r3
 80077ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ee:	e7eb      	b.n	80077c8 <__swhatbuf_r+0x24>

080077f0 <__smakebuf_r>:
 80077f0:	898b      	ldrh	r3, [r1, #12]
 80077f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f4:	079d      	lsls	r5, r3, #30
 80077f6:	4606      	mov	r6, r0
 80077f8:	460c      	mov	r4, r1
 80077fa:	d507      	bpl.n	800780c <__smakebuf_r+0x1c>
 80077fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	6123      	str	r3, [r4, #16]
 8007804:	2301      	movs	r3, #1
 8007806:	6163      	str	r3, [r4, #20]
 8007808:	b002      	add	sp, #8
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	ab01      	add	r3, sp, #4
 800780e:	466a      	mov	r2, sp
 8007810:	f7ff ffc8 	bl	80077a4 <__swhatbuf_r>
 8007814:	9900      	ldr	r1, [sp, #0]
 8007816:	4605      	mov	r5, r0
 8007818:	4630      	mov	r0, r6
 800781a:	f7fd fe07 	bl	800542c <_malloc_r>
 800781e:	b948      	cbnz	r0, 8007834 <__smakebuf_r+0x44>
 8007820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007824:	059a      	lsls	r2, r3, #22
 8007826:	d4ef      	bmi.n	8007808 <__smakebuf_r+0x18>
 8007828:	f023 0303 	bic.w	r3, r3, #3
 800782c:	f043 0302 	orr.w	r3, r3, #2
 8007830:	81a3      	strh	r3, [r4, #12]
 8007832:	e7e3      	b.n	80077fc <__smakebuf_r+0xc>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6163      	str	r3, [r4, #20]
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	6120      	str	r0, [r4, #16]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x70>
 8007848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784c:	4630      	mov	r0, r6
 800784e:	f000 fe1b 	bl	8008488 <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x70>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	431d      	orrs	r5, r3
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cf      	b.n	8007808 <__smakebuf_r+0x18>

08007868 <wcvt>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	b085      	sub	sp, #20
 800786e:	2b00      	cmp	r3, #0
 8007870:	461d      	mov	r5, r3
 8007872:	4614      	mov	r4, r2
 8007874:	bfbc      	itt	lt
 8007876:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800787a:	4614      	movlt	r4, r2
 800787c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800787e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007880:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8007884:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
 8007888:	bfb6      	itet	lt
 800788a:	461d      	movlt	r5, r3
 800788c:	2300      	movge	r3, #0
 800788e:	232d      	movlt	r3, #45	; 0x2d
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007894:	f023 0820 	bic.w	r8, r3, #32
 8007898:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800789c:	d005      	beq.n	80078aa <wcvt+0x42>
 800789e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80078a2:	d100      	bne.n	80078a6 <wcvt+0x3e>
 80078a4:	3601      	adds	r6, #1
 80078a6:	2102      	movs	r1, #2
 80078a8:	e000      	b.n	80078ac <wcvt+0x44>
 80078aa:	2103      	movs	r1, #3
 80078ac:	ab03      	add	r3, sp, #12
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	ab02      	add	r3, sp, #8
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	ec45 4b10 	vmov	d0, r4, r5
 80078b8:	4653      	mov	r3, sl
 80078ba:	4632      	mov	r2, r6
 80078bc:	f7fe fdb8 	bl	8006430 <_dtoa_r>
 80078c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80078c4:	4607      	mov	r7, r0
 80078c6:	d112      	bne.n	80078ee <wcvt+0x86>
 80078c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80078ca:	07db      	lsls	r3, r3, #31
 80078cc:	d40f      	bmi.n	80078ee <wcvt+0x86>
 80078ce:	9b03      	ldr	r3, [sp, #12]
 80078d0:	1bdb      	subs	r3, r3, r7
 80078d2:	f8cb 3000 	str.w	r3, [fp]
 80078d6:	2300      	movs	r3, #0
 80078d8:	f8db 2000 	ldr.w	r2, [fp]
 80078dc:	429a      	cmp	r2, r3
 80078de:	dd02      	ble.n	80078e6 <wcvt+0x7e>
 80078e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80078e2:	4293      	cmp	r3, r2
 80078e4:	db2a      	blt.n	800793c <wcvt+0xd4>
 80078e6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80078e8:	b005      	add	sp, #20
 80078ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80078f2:	eb07 0906 	add.w	r9, r7, r6
 80078f6:	d110      	bne.n	800791a <wcvt+0xb2>
 80078f8:	783b      	ldrb	r3, [r7, #0]
 80078fa:	2b30      	cmp	r3, #48	; 0x30
 80078fc:	d10a      	bne.n	8007914 <wcvt+0xac>
 80078fe:	2200      	movs	r2, #0
 8007900:	2300      	movs	r3, #0
 8007902:	4620      	mov	r0, r4
 8007904:	4629      	mov	r1, r5
 8007906:	f7f9 f8df 	bl	8000ac8 <__aeabi_dcmpeq>
 800790a:	b918      	cbnz	r0, 8007914 <wcvt+0xac>
 800790c:	f1c6 0601 	rsb	r6, r6, #1
 8007910:	f8ca 6000 	str.w	r6, [sl]
 8007914:	f8da 3000 	ldr.w	r3, [sl]
 8007918:	4499      	add	r9, r3
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f9 f8d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007926:	b108      	cbz	r0, 800792c <wcvt+0xc4>
 8007928:	f8cd 900c 	str.w	r9, [sp, #12]
 800792c:	2230      	movs	r2, #48	; 0x30
 800792e:	9b03      	ldr	r3, [sp, #12]
 8007930:	454b      	cmp	r3, r9
 8007932:	d2cc      	bcs.n	80078ce <wcvt+0x66>
 8007934:	1c59      	adds	r1, r3, #1
 8007936:	9103      	str	r1, [sp, #12]
 8007938:	701a      	strb	r2, [r3, #0]
 800793a:	e7f8      	b.n	800792e <wcvt+0xc6>
 800793c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800793e:	5cfa      	ldrb	r2, [r7, r3]
 8007940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007944:	3301      	adds	r3, #1
 8007946:	e7c7      	b.n	80078d8 <wcvt+0x70>

08007948 <_svfwprintf_r>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	ed2d 8b04 	vpush	{d8-d9}
 8007950:	b0d3      	sub	sp, #332	; 0x14c
 8007952:	461d      	mov	r5, r3
 8007954:	2300      	movs	r3, #0
 8007956:	4689      	mov	r9, r1
 8007958:	9319      	str	r3, [sp, #100]	; 0x64
 800795a:	4683      	mov	fp, r0
 800795c:	920b      	str	r2, [sp, #44]	; 0x2c
 800795e:	f7fe fc47 	bl	80061f0 <_localeconv_r>
 8007962:	6803      	ldr	r3, [r0, #0]
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	9316      	str	r3, [sp, #88]	; 0x58
 8007968:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800796c:	061e      	lsls	r6, r3, #24
 800796e:	d51a      	bpl.n	80079a6 <_svfwprintf_r+0x5e>
 8007970:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007974:	b9bb      	cbnz	r3, 80079a6 <_svfwprintf_r+0x5e>
 8007976:	2140      	movs	r1, #64	; 0x40
 8007978:	4658      	mov	r0, fp
 800797a:	f7fd fd57 	bl	800542c <_malloc_r>
 800797e:	f8c9 0000 	str.w	r0, [r9]
 8007982:	f8c9 0010 	str.w	r0, [r9, #16]
 8007986:	b958      	cbnz	r0, 80079a0 <_svfwprintf_r+0x58>
 8007988:	230c      	movs	r3, #12
 800798a:	f8cb 3000 	str.w	r3, [fp]
 800798e:	f04f 33ff 	mov.w	r3, #4294967295
 8007992:	930d      	str	r3, [sp, #52]	; 0x34
 8007994:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007996:	b053      	add	sp, #332	; 0x14c
 8007998:	ecbd 8b04 	vpop	{d8-d9}
 800799c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	f8c9 3014 	str.w	r3, [r9, #20]
 80079a6:	ed9f 7b8c 	vldr	d7, [pc, #560]	; 8007bd8 <_svfwprintf_r+0x290>
 80079aa:	2300      	movs	r3, #0
 80079ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ae:	9311      	str	r3, [sp, #68]	; 0x44
 80079b0:	930d      	str	r3, [sp, #52]	; 0x34
 80079b2:	eeb0 8a47 	vmov.f32	s16, s14
 80079b6:	eef0 8a67 	vmov.f32	s17, s15
 80079ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079bc:	461c      	mov	r4, r3
 80079be:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c2:	b10a      	cbz	r2, 80079c8 <_svfwprintf_r+0x80>
 80079c4:	2a25      	cmp	r2, #37	; 0x25
 80079c6:	d1f9      	bne.n	80079bc <_svfwprintf_r+0x74>
 80079c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ca:	42a3      	cmp	r3, r4
 80079cc:	d00d      	beq.n	80079ea <_svfwprintf_r+0xa2>
 80079ce:	1ae6      	subs	r6, r4, r3
 80079d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d2:	4633      	mov	r3, r6
 80079d4:	4649      	mov	r1, r9
 80079d6:	4658      	mov	r0, fp
 80079d8:	f000 fe04 	bl	80085e4 <__ssputs_r>
 80079dc:	3001      	adds	r0, #1
 80079de:	f000 80e7 	beq.w	8007bb0 <_svfwprintf_r+0x268>
 80079e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079e4:	eb03 03a6 	add.w	r3, r3, r6, asr #2
 80079e8:	930d      	str	r3, [sp, #52]	; 0x34
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 80df 	beq.w	8007bb0 <_svfwprintf_r+0x268>
 80079f2:	2300      	movs	r3, #0
 80079f4:	1d21      	adds	r1, r4, #4
 80079f6:	9315      	str	r3, [sp, #84]	; 0x54
 80079f8:	461a      	mov	r2, r3
 80079fa:	f04f 34ff 	mov.w	r4, #4294967295
 80079fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007a00:	461f      	mov	r7, r3
 8007a02:	200a      	movs	r0, #10
 8007a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a08:	9609      	str	r6, [sp, #36]	; 0x24
 8007a0a:	910b      	str	r1, [sp, #44]	; 0x2c
 8007a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a0e:	2939      	cmp	r1, #57	; 0x39
 8007a10:	d84c      	bhi.n	8007aac <_svfwprintf_r+0x164>
 8007a12:	291f      	cmp	r1, #31
 8007a14:	d94f      	bls.n	8007ab6 <_svfwprintf_r+0x16e>
 8007a16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a18:	3920      	subs	r1, #32
 8007a1a:	2919      	cmp	r1, #25
 8007a1c:	d84a      	bhi.n	8007ab4 <_svfwprintf_r+0x16c>
 8007a1e:	e8df f001 	tbb	[pc, r1]
 8007a22:	496b      	.short	0x496b
 8007a24:	49497049 	.word	0x49497049
 8007a28:	49494949 	.word	0x49494949
 8007a2c:	7a496c73 	.word	0x7a496c73
 8007a30:	9a97497d 	.word	0x9a97497d
 8007a34:	9a9a9a9a 	.word	0x9a9a9a9a
 8007a38:	9a9a9a9a 	.word	0x9a9a9a9a
 8007a3c:	2933      	cmp	r1, #51	; 0x33
 8007a3e:	d839      	bhi.n	8007ab4 <_svfwprintf_r+0x16c>
 8007a40:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007a44:	003800e2 	.word	0x003800e2
 8007a48:	003800e2 	.word	0x003800e2
 8007a4c:	00380038 	.word	0x00380038
 8007a50:	009b0038 	.word	0x009b0038
 8007a54:	00380038 	.word	0x00380038
 8007a58:	00380038 	.word	0x00380038
 8007a5c:	00380038 	.word	0x00380038
 8007a60:	00380038 	.word	0x00380038
 8007a64:	00380038 	.word	0x00380038
 8007a68:	031c0038 	.word	0x031c0038
 8007a6c:	00380038 	.word	0x00380038
 8007a70:	00380038 	.word	0x00380038
 8007a74:	00380038 	.word	0x00380038
 8007a78:	00380038 	.word	0x00380038
 8007a7c:	00380038 	.word	0x00380038
 8007a80:	00d000a4 	.word	0x00d000a4
 8007a84:	00e200e2 	.word	0x00e200e2
 8007a88:	009e00e2 	.word	0x009e00e2
 8007a8c:	003800d0 	.word	0x003800d0
 8007a90:	00a10038 	.word	0x00a10038
 8007a94:	02820038 	.word	0x02820038
 8007a98:	02b10293 	.word	0x02b10293
 8007a9c:	003800a1 	.word	0x003800a1
 8007aa0:	003802c0 	.word	0x003802c0
 8007aa4:	00380310 	.word	0x00380310
 8007aa8:	00420038 	.word	0x00420038
 8007aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aae:	3945      	subs	r1, #69	; 0x45
 8007ab0:	2933      	cmp	r1, #51	; 0x33
 8007ab2:	d9c3      	bls.n	8007a3c <_svfwprintf_r+0xf4>
 8007ab4:	b113      	cbz	r3, 8007abc <_svfwprintf_r+0x174>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d079      	beq.n	8007bb0 <_svfwprintf_r+0x268>
 8007abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007abe:	932a      	str	r3, [sp, #168]	; 0xa8
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	9315      	str	r3, [sp, #84]	; 0x54
 8007ac4:	950a      	str	r5, [sp, #40]	; 0x28
 8007ac6:	e080      	b.n	8007bca <_svfwprintf_r+0x282>
 8007ac8:	b103      	cbz	r3, 8007acc <_svfwprintf_r+0x184>
 8007aca:	9215      	str	r2, [sp, #84]	; 0x54
 8007acc:	4b44      	ldr	r3, [pc, #272]	; (8007be0 <_svfwprintf_r+0x298>)
 8007ace:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	06f8      	lsls	r0, r7, #27
 8007ad4:	f852 3b04 	ldr.w	r3, [r2], #4
 8007ad8:	920a      	str	r2, [sp, #40]	; 0x28
 8007ada:	d402      	bmi.n	8007ae2 <_svfwprintf_r+0x19a>
 8007adc:	0679      	lsls	r1, r7, #25
 8007ade:	bf48      	it	mi
 8007ae0:	b29b      	uxthmi	r3, r3
 8007ae2:	07fa      	lsls	r2, r7, #31
 8007ae4:	d506      	bpl.n	8007af4 <_svfwprintf_r+0x1ac>
 8007ae6:	b12b      	cbz	r3, 8007af4 <_svfwprintf_r+0x1ac>
 8007ae8:	2230      	movs	r2, #48	; 0x30
 8007aea:	921a      	str	r2, [sp, #104]	; 0x68
 8007aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aee:	921b      	str	r2, [sp, #108]	; 0x6c
 8007af0:	f047 0702 	orr.w	r7, r7, #2
 8007af4:	2202      	movs	r2, #2
 8007af6:	e240      	b.n	8007f7a <_svfwprintf_r+0x632>
 8007af8:	b90a      	cbnz	r2, 8007afe <_svfwprintf_r+0x1b6>
 8007afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afc:	2301      	movs	r3, #1
 8007afe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b00:	e780      	b.n	8007a04 <_svfwprintf_r+0xbc>
 8007b02:	f047 0701 	orr.w	r7, r7, #1
 8007b06:	e7fa      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b08:	f855 1b04 	ldr.w	r1, [r5], #4
 8007b0c:	910c      	str	r1, [sp, #48]	; 0x30
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	daf5      	bge.n	8007afe <_svfwprintf_r+0x1b6>
 8007b12:	4249      	negs	r1, r1
 8007b14:	910c      	str	r1, [sp, #48]	; 0x30
 8007b16:	f047 0704 	orr.w	r7, r7, #4
 8007b1a:	e7f0      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b1e:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b22:	9409      	str	r4, [sp, #36]	; 0x24
 8007b24:	2c2a      	cmp	r4, #42	; 0x2a
 8007b26:	d111      	bne.n	8007b4c <_svfwprintf_r+0x204>
 8007b28:	f855 4b04 	ldr.w	r4, [r5], #4
 8007b2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b2e:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8007b32:	e7e4      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b34:	fb00 6404 	mla	r4, r0, r4, r6
 8007b38:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b3c:	9609      	str	r6, [sp, #36]	; 0x24
 8007b3e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b40:	3e30      	subs	r6, #48	; 0x30
 8007b42:	2e09      	cmp	r6, #9
 8007b44:	d9f6      	bls.n	8007b34 <_svfwprintf_r+0x1ec>
 8007b46:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8007b4a:	e75e      	b.n	8007a0a <_svfwprintf_r+0xc2>
 8007b4c:	2400      	movs	r4, #0
 8007b4e:	e7f6      	b.n	8007b3e <_svfwprintf_r+0x1f6>
 8007b50:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8007b54:	e7d3      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b56:	2100      	movs	r1, #0
 8007b58:	910c      	str	r1, [sp, #48]	; 0x30
 8007b5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b5e:	fb00 1106 	mla	r1, r0, r6, r1
 8007b62:	3930      	subs	r1, #48	; 0x30
 8007b64:	910c      	str	r1, [sp, #48]	; 0x30
 8007b66:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007b68:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b6c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007b6e:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 8007b72:	2909      	cmp	r1, #9
 8007b74:	9609      	str	r6, [sp, #36]	; 0x24
 8007b76:	d9f0      	bls.n	8007b5a <_svfwprintf_r+0x212>
 8007b78:	e748      	b.n	8007a0c <_svfwprintf_r+0xc4>
 8007b7a:	f047 0708 	orr.w	r7, r7, #8
 8007b7e:	e7be      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b80:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8007b84:	e7bb      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b86:	f047 0710 	orr.w	r7, r7, #16
 8007b8a:	e7b8      	b.n	8007afe <_svfwprintf_r+0x1b6>
 8007b8c:	b103      	cbz	r3, 8007b90 <_svfwprintf_r+0x248>
 8007b8e:	9215      	str	r2, [sp, #84]	; 0x54
 8007b90:	462b      	mov	r3, r5
 8007b92:	06fd      	lsls	r5, r7, #27
 8007b94:	f853 0b04 	ldr.w	r0, [r3], #4
 8007b98:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9a:	d412      	bmi.n	8007bc2 <_svfwprintf_r+0x27a>
 8007b9c:	f000 fcd8 	bl	8008550 <btowc>
 8007ba0:	1c44      	adds	r4, r0, #1
 8007ba2:	d10e      	bne.n	8007bc2 <_svfwprintf_r+0x27a>
 8007ba4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bac:	f8a9 300c 	strh.w	r3, [r9, #12]
 8007bb0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007bb4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bba:	bf18      	it	ne
 8007bbc:	f04f 33ff 	movne.w	r3, #4294967295
 8007bc0:	e6e7      	b.n	8007992 <_svfwprintf_r+0x4a>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	902a      	str	r0, [sp, #168]	; 0xa8
 8007bc6:	932b      	str	r3, [sp, #172]	; 0xac
 8007bc8:	9315      	str	r3, [sp, #84]	; 0x54
 8007bca:	4698      	mov	r8, r3
 8007bcc:	2401      	movs	r4, #1
 8007bce:	461e      	mov	r6, r3
 8007bd0:	461d      	mov	r5, r3
 8007bd2:	f10d 0aa8 	add.w	sl, sp, #168	; 0xa8
 8007bd6:	e101      	b.n	8007ddc <_svfwprintf_r+0x494>
	...
 8007be0:	0800f7a0 	.word	0x0800f7a0
 8007be4:	b103      	cbz	r3, 8007be8 <_svfwprintf_r+0x2a0>
 8007be6:	9215      	str	r2, [sp, #84]	; 0x54
 8007be8:	462a      	mov	r2, r5
 8007bea:	06f9      	lsls	r1, r7, #27
 8007bec:	f852 3b04 	ldr.w	r3, [r2], #4
 8007bf0:	920a      	str	r2, [sp, #40]	; 0x28
 8007bf2:	d402      	bmi.n	8007bfa <_svfwprintf_r+0x2b2>
 8007bf4:	067a      	lsls	r2, r7, #25
 8007bf6:	bf48      	it	mi
 8007bf8:	b21b      	sxthmi	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da02      	bge.n	8007c04 <_svfwprintf_r+0x2bc>
 8007bfe:	222d      	movs	r2, #45	; 0x2d
 8007c00:	425b      	negs	r3, r3
 8007c02:	9215      	str	r2, [sp, #84]	; 0x54
 8007c04:	2201      	movs	r2, #1
 8007c06:	e1ba      	b.n	8007f7e <_svfwprintf_r+0x636>
 8007c08:	b103      	cbz	r3, 8007c0c <_svfwprintf_r+0x2c4>
 8007c0a:	9215      	str	r2, [sp, #84]	; 0x54
 8007c0c:	3507      	adds	r5, #7
 8007c0e:	f025 0307 	bic.w	r3, r5, #7
 8007c12:	ecb3 7b02 	vldmia	r3!, {d7}
 8007c16:	930a      	str	r3, [sp, #40]	; 0x28
 8007c18:	eeb0 8a47 	vmov.f32	s16, s14
 8007c1c:	eef0 8a67 	vmov.f32	s17, s15
 8007c20:	ee18 3a90 	vmov	r3, s17
 8007c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c28:	ee09 3a90 	vmov	s19, r3
 8007c2c:	eeb0 9a47 	vmov.f32	s18, s14
 8007c30:	4ba6      	ldr	r3, [pc, #664]	; (8007ecc <_svfwprintf_r+0x584>)
 8007c32:	ec51 0b19 	vmov	r0, r1, d9
 8007c36:	f04f 32ff 	mov.w	r2, #4294967295
 8007c3a:	f7f8 ff77 	bl	8000b2c <__aeabi_dcmpun>
 8007c3e:	b9f0      	cbnz	r0, 8007c7e <_svfwprintf_r+0x336>
 8007c40:	4ba2      	ldr	r3, [pc, #648]	; (8007ecc <_svfwprintf_r+0x584>)
 8007c42:	ec51 0b19 	vmov	r0, r1, d9
 8007c46:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4a:	f7f8 ff51 	bl	8000af0 <__aeabi_dcmple>
 8007c4e:	b9b0      	cbnz	r0, 8007c7e <_svfwprintf_r+0x336>
 8007c50:	ec51 0b18 	vmov	r0, r1, d8
 8007c54:	2200      	movs	r2, #0
 8007c56:	2300      	movs	r3, #0
 8007c58:	f7f8 ff40 	bl	8000adc <__aeabi_dcmplt>
 8007c5c:	b108      	cbz	r0, 8007c62 <_svfwprintf_r+0x31a>
 8007c5e:	232d      	movs	r3, #45	; 0x2d
 8007c60:	9315      	str	r3, [sp, #84]	; 0x54
 8007c62:	4a9b      	ldr	r2, [pc, #620]	; (8007ed0 <_svfwprintf_r+0x588>)
 8007c64:	4b9b      	ldr	r3, [pc, #620]	; (8007ed4 <_svfwprintf_r+0x58c>)
 8007c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c68:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8007c6c:	2947      	cmp	r1, #71	; 0x47
 8007c6e:	bf94      	ite	ls
 8007c70:	4692      	movls	sl, r2
 8007c72:	469a      	movhi	sl, r3
 8007c74:	f04f 0800 	mov.w	r8, #0
 8007c78:	2403      	movs	r4, #3
 8007c7a:	4646      	mov	r6, r8
 8007c7c:	e3d4      	b.n	8008428 <_svfwprintf_r+0xae0>
 8007c7e:	ec53 2b18 	vmov	r2, r3, d8
 8007c82:	ec51 0b18 	vmov	r0, r1, d8
 8007c86:	f7f8 ff51 	bl	8000b2c <__aeabi_dcmpun>
 8007c8a:	b140      	cbz	r0, 8007c9e <_svfwprintf_r+0x356>
 8007c8c:	ee18 3a90 	vmov	r3, s17
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbc      	itt	lt
 8007c94:	232d      	movlt	r3, #45	; 0x2d
 8007c96:	9315      	strlt	r3, [sp, #84]	; 0x54
 8007c98:	4a8f      	ldr	r2, [pc, #572]	; (8007ed8 <_svfwprintf_r+0x590>)
 8007c9a:	4b90      	ldr	r3, [pc, #576]	; (8007edc <_svfwprintf_r+0x594>)
 8007c9c:	e7e3      	b.n	8007c66 <_svfwprintf_r+0x31e>
 8007c9e:	1c63      	adds	r3, r4, #1
 8007ca0:	f000 810e 	beq.w	8007ec0 <_svfwprintf_r+0x578>
 8007ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca6:	f023 0320 	bic.w	r3, r3, #32
 8007caa:	2b47      	cmp	r3, #71	; 0x47
 8007cac:	d102      	bne.n	8007cb4 <_svfwprintf_r+0x36c>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	bf08      	it	eq
 8007cb2:	2401      	moveq	r4, #1
 8007cb4:	f447 7380 	orr.w	r3, r7, #256	; 0x100
 8007cb8:	930e      	str	r3, [sp, #56]	; 0x38
 8007cba:	2328      	movs	r3, #40	; 0x28
 8007cbc:	9307      	str	r3, [sp, #28]
 8007cbe:	ab19      	add	r3, sp, #100	; 0x64
 8007cc0:	9305      	str	r3, [sp, #20]
 8007cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc4:	9304      	str	r3, [sp, #16]
 8007cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cc8:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 8007ccc:	ae18      	add	r6, sp, #96	; 0x60
 8007cce:	ad17      	add	r5, sp, #92	; 0x5c
 8007cd0:	e9cd 4300 	strd	r4, r3, [sp]
 8007cd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cd8:	ec53 2b18 	vmov	r2, r3, d8
 8007cdc:	9603      	str	r6, [sp, #12]
 8007cde:	9502      	str	r5, [sp, #8]
 8007ce0:	4658      	mov	r0, fp
 8007ce2:	f7ff fdc1 	bl	8007868 <wcvt>
 8007ce6:	4540      	cmp	r0, r8
 8007ce8:	4682      	mov	sl, r0
 8007cea:	f040 80eb 	bne.w	8007ec4 <_svfwprintf_r+0x57c>
 8007cee:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007cf0:	2928      	cmp	r1, #40	; 0x28
 8007cf2:	f340 80e7 	ble.w	8007ec4 <_svfwprintf_r+0x57c>
 8007cf6:	0089      	lsls	r1, r1, #2
 8007cf8:	4658      	mov	r0, fp
 8007cfa:	f7fd fb97 	bl	800542c <_malloc_r>
 8007cfe:	4680      	mov	r8, r0
 8007d00:	2800      	cmp	r0, #0
 8007d02:	f43f af4f 	beq.w	8007ba4 <_svfwprintf_r+0x25c>
 8007d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d08:	9502      	str	r5, [sp, #8]
 8007d0a:	e9cd 0306 	strd	r0, r3, [sp, #24]
 8007d0e:	ab19      	add	r3, sp, #100	; 0x64
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d14:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8007d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d1a:	4658      	mov	r0, fp
 8007d1c:	e9cd 4300 	strd	r4, r3, [sp]
 8007d20:	ec53 2b18 	vmov	r2, r3, d8
 8007d24:	f7ff fda0 	bl	8007868 <wcvt>
 8007d28:	4682      	mov	sl, r0
 8007d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8007d2e:	f023 0320 	bic.w	r3, r3, #32
 8007d32:	2b47      	cmp	r3, #71	; 0x47
 8007d34:	f040 80d6 	bne.w	8007ee4 <_svfwprintf_r+0x59c>
 8007d38:	1cee      	adds	r6, r5, #3
 8007d3a:	db02      	blt.n	8007d42 <_svfwprintf_r+0x3fa>
 8007d3c:	42ac      	cmp	r4, r5
 8007d3e:	f280 80e9 	bge.w	8007f14 <_svfwprintf_r+0x5cc>
 8007d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d44:	3b02      	subs	r3, #2
 8007d46:	9309      	str	r3, [sp, #36]	; 0x24
 8007d48:	1e6b      	subs	r3, r5, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d4e:	9318      	str	r3, [sp, #96]	; 0x60
 8007d50:	bfb8      	it	lt
 8007d52:	f1c5 0301 	rsblt	r3, r5, #1
 8007d56:	921c      	str	r2, [sp, #112]	; 0x70
 8007d58:	bfb4      	ite	lt
 8007d5a:	222d      	movlt	r2, #45	; 0x2d
 8007d5c:	222b      	movge	r2, #43	; 0x2b
 8007d5e:	2b09      	cmp	r3, #9
 8007d60:	921d      	str	r2, [sp, #116]	; 0x74
 8007d62:	f340 80d1 	ble.w	8007f08 <_svfwprintf_r+0x5c0>
 8007d66:	a92a      	add	r1, sp, #168	; 0xa8
 8007d68:	250a      	movs	r5, #10
 8007d6a:	460a      	mov	r2, r1
 8007d6c:	fb93 f4f5 	sdiv	r4, r3, r5
 8007d70:	fb05 3014 	mls	r0, r5, r4, r3
 8007d74:	3030      	adds	r0, #48	; 0x30
 8007d76:	f842 0c04 	str.w	r0, [r2, #-4]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	2863      	cmp	r0, #99	; 0x63
 8007d7e:	f1a1 0104 	sub.w	r1, r1, #4
 8007d82:	4623      	mov	r3, r4
 8007d84:	dcf1      	bgt.n	8007d6a <_svfwprintf_r+0x422>
 8007d86:	3330      	adds	r3, #48	; 0x30
 8007d88:	f841 3c04 	str.w	r3, [r1, #-4]
 8007d8c:	f1a2 0008 	sub.w	r0, r2, #8
 8007d90:	ab1d      	add	r3, sp, #116	; 0x74
 8007d92:	a92a      	add	r1, sp, #168	; 0xa8
 8007d94:	4288      	cmp	r0, r1
 8007d96:	f0c0 80b2 	bcc.w	8007efe <_svfwprintf_r+0x5b6>
 8007d9a:	f10d 03b3 	add.w	r3, sp, #179	; 0xb3
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	f023 0303 	bic.w	r3, r3, #3
 8007da4:	3a0b      	subs	r2, #11
 8007da6:	428a      	cmp	r2, r1
 8007da8:	bf88      	it	hi
 8007daa:	2300      	movhi	r3, #0
 8007dac:	aa1e      	add	r2, sp, #120	; 0x78
 8007dae:	18d4      	adds	r4, r2, r3
 8007db0:	ab1c      	add	r3, sp, #112	; 0x70
 8007db2:	1ae4      	subs	r4, r4, r3
 8007db4:	10a3      	asrs	r3, r4, #2
 8007db6:	9311      	str	r3, [sp, #68]	; 0x44
 8007db8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	eb03 04a4 	add.w	r4, r3, r4, asr #2
 8007dc0:	dc02      	bgt.n	8007dc8 <_svfwprintf_r+0x480>
 8007dc2:	f017 0501 	ands.w	r5, r7, #1
 8007dc6:	d001      	beq.n	8007dcc <_svfwprintf_r+0x484>
 8007dc8:	3401      	adds	r4, #1
 8007dca:	2500      	movs	r5, #0
 8007dcc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007dce:	2e00      	cmp	r6, #0
 8007dd0:	f000 8180 	beq.w	80080d4 <_svfwprintf_r+0x78c>
 8007dd4:	232d      	movs	r3, #45	; 0x2d
 8007dd6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007dd8:	9315      	str	r3, [sp, #84]	; 0x54
 8007dda:	2600      	movs	r6, #0
 8007ddc:	42a6      	cmp	r6, r4
 8007dde:	4633      	mov	r3, r6
 8007de0:	bfb8      	it	lt
 8007de2:	4623      	movlt	r3, r4
 8007de4:	930e      	str	r3, [sp, #56]	; 0x38
 8007de6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007de8:	b113      	cbz	r3, 8007df0 <_svfwprintf_r+0x4a8>
 8007dea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dec:	3301      	adds	r3, #1
 8007dee:	930e      	str	r3, [sp, #56]	; 0x38
 8007df0:	f017 0302 	ands.w	r3, r7, #2
 8007df4:	9312      	str	r3, [sp, #72]	; 0x48
 8007df6:	bf1e      	ittt	ne
 8007df8:	9b0e      	ldrne	r3, [sp, #56]	; 0x38
 8007dfa:	3302      	addne	r3, #2
 8007dfc:	930e      	strne	r3, [sp, #56]	; 0x38
 8007dfe:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8007e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e04:	f000 8168 	beq.w	80080d8 <_svfwprintf_r+0x790>
 8007e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e0a:	b143      	cbz	r3, 8007e1e <_svfwprintf_r+0x4d6>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	aa15      	add	r2, sp, #84	; 0x54
 8007e10:	4649      	mov	r1, r9
 8007e12:	4658      	mov	r0, fp
 8007e14:	f000 fbe6 	bl	80085e4 <__ssputs_r>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f000 8170 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8007e1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e20:	b143      	cbz	r3, 8007e34 <_svfwprintf_r+0x4ec>
 8007e22:	2308      	movs	r3, #8
 8007e24:	aa1a      	add	r2, sp, #104	; 0x68
 8007e26:	4649      	mov	r1, r9
 8007e28:	4658      	mov	r0, fp
 8007e2a:	f000 fbdb 	bl	80085e4 <__ssputs_r>
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f000 8165 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8007e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d113      	bne.n	8007e62 <_svfwprintf_r+0x51a>
 8007e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	9310      	str	r3, [sp, #64]	; 0x40
 8007e44:	dd0d      	ble.n	8007e62 <_svfwprintf_r+0x51a>
 8007e46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e48:	4a25      	ldr	r2, [pc, #148]	; (8007ee0 <_svfwprintf_r+0x598>)
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	f300 816c 	bgt.w	8008128 <_svfwprintf_r+0x7e0>
 8007e50:	4a23      	ldr	r2, [pc, #140]	; (8007ee0 <_svfwprintf_r+0x598>)
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4649      	mov	r1, r9
 8007e56:	4658      	mov	r0, fp
 8007e58:	f000 fbc4 	bl	80085e4 <__ssputs_r>
 8007e5c:	3001      	adds	r0, #1
 8007e5e:	f000 814e 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8007e62:	1b36      	subs	r6, r6, r4
 8007e64:	2e00      	cmp	r6, #0
 8007e66:	dd0c      	ble.n	8007e82 <_svfwprintf_r+0x53a>
 8007e68:	2e10      	cmp	r6, #16
 8007e6a:	4a1d      	ldr	r2, [pc, #116]	; (8007ee0 <_svfwprintf_r+0x598>)
 8007e6c:	f300 8167 	bgt.w	800813e <_svfwprintf_r+0x7f6>
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <_svfwprintf_r+0x598>)
 8007e72:	00b3      	lsls	r3, r6, #2
 8007e74:	4649      	mov	r1, r9
 8007e76:	4658      	mov	r0, fp
 8007e78:	f000 fbb4 	bl	80085e4 <__ssputs_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f000 813e 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8007e82:	05f9      	lsls	r1, r7, #23
 8007e84:	f100 8164 	bmi.w	8008150 <_svfwprintf_r+0x808>
 8007e88:	00a3      	lsls	r3, r4, #2
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f000 fba8 	bl	80085e4 <__ssputs_r>
 8007e94:	3001      	adds	r0, #1
 8007e96:	f000 8132 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8007e9a:	077a      	lsls	r2, r7, #29
 8007e9c:	f100 8282 	bmi.w	80083a4 <_svfwprintf_r+0xa5c>
 8007ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ea4:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007ea6:	428a      	cmp	r2, r1
 8007ea8:	bfac      	ite	ge
 8007eaa:	189b      	addge	r3, r3, r2
 8007eac:	185b      	addlt	r3, r3, r1
 8007eae:	930d      	str	r3, [sp, #52]	; 0x34
 8007eb0:	f1b8 0f00 	cmp.w	r8, #0
 8007eb4:	d057      	beq.n	8007f66 <_svfwprintf_r+0x61e>
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4658      	mov	r0, fp
 8007eba:	f7ff f8ab 	bl	8007014 <_free_r>
 8007ebe:	e052      	b.n	8007f66 <_svfwprintf_r+0x61e>
 8007ec0:	2406      	movs	r4, #6
 8007ec2:	e6f7      	b.n	8007cb4 <_svfwprintf_r+0x36c>
 8007ec4:	f04f 0800 	mov.w	r8, #0
 8007ec8:	e72f      	b.n	8007d2a <_svfwprintf_r+0x3e2>
 8007eca:	bf00      	nop
 8007ecc:	7fefffff 	.word	0x7fefffff
 8007ed0:	0800f71c 	.word	0x0800f71c
 8007ed4:	0800f72c 	.word	0x0800f72c
 8007ed8:	0800f73c 	.word	0x0800f73c
 8007edc:	0800f74c 	.word	0x0800f74c
 8007ee0:	0800f824 	.word	0x0800f824
 8007ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee6:	2b66      	cmp	r3, #102	; 0x66
 8007ee8:	f47f af2e 	bne.w	8007d48 <_svfwprintf_r+0x400>
 8007eec:	f007 0301 	and.w	r3, r7, #1
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	ea43 0304 	orr.w	r3, r3, r4
 8007ef6:	dc17      	bgt.n	8007f28 <_svfwprintf_r+0x5e0>
 8007ef8:	b313      	cbz	r3, 8007f40 <_svfwprintf_r+0x5f8>
 8007efa:	3402      	adds	r4, #2
 8007efc:	e766      	b.n	8007dcc <_svfwprintf_r+0x484>
 8007efe:	f850 4b04 	ldr.w	r4, [r0], #4
 8007f02:	f843 4f04 	str.w	r4, [r3, #4]!
 8007f06:	e745      	b.n	8007d94 <_svfwprintf_r+0x44c>
 8007f08:	2230      	movs	r2, #48	; 0x30
 8007f0a:	4413      	add	r3, r2
 8007f0c:	921e      	str	r2, [sp, #120]	; 0x78
 8007f0e:	931f      	str	r3, [sp, #124]	; 0x7c
 8007f10:	ac20      	add	r4, sp, #128	; 0x80
 8007f12:	e74d      	b.n	8007db0 <_svfwprintf_r+0x468>
 8007f14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f16:	42ab      	cmp	r3, r5
 8007f18:	dd0a      	ble.n	8007f30 <_svfwprintf_r+0x5e8>
 8007f1a:	2d00      	cmp	r5, #0
 8007f1c:	bfd4      	ite	le
 8007f1e:	f1c5 0402 	rsble	r4, r5, #2
 8007f22:	2401      	movgt	r4, #1
 8007f24:	441c      	add	r4, r3
 8007f26:	e006      	b.n	8007f36 <_svfwprintf_r+0x5ee>
 8007f28:	b143      	cbz	r3, 8007f3c <_svfwprintf_r+0x5f4>
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	442c      	add	r4, r5
 8007f2e:	e74d      	b.n	8007dcc <_svfwprintf_r+0x484>
 8007f30:	07fc      	lsls	r4, r7, #31
 8007f32:	d507      	bpl.n	8007f44 <_svfwprintf_r+0x5fc>
 8007f34:	1c6c      	adds	r4, r5, #1
 8007f36:	2367      	movs	r3, #103	; 0x67
 8007f38:	9309      	str	r3, [sp, #36]	; 0x24
 8007f3a:	e747      	b.n	8007dcc <_svfwprintf_r+0x484>
 8007f3c:	462c      	mov	r4, r5
 8007f3e:	e745      	b.n	8007dcc <_svfwprintf_r+0x484>
 8007f40:	2401      	movs	r4, #1
 8007f42:	e743      	b.n	8007dcc <_svfwprintf_r+0x484>
 8007f44:	462c      	mov	r4, r5
 8007f46:	e7f6      	b.n	8007f36 <_svfwprintf_r+0x5ee>
 8007f48:	b103      	cbz	r3, 8007f4c <_svfwprintf_r+0x604>
 8007f4a:	9215      	str	r2, [sp, #84]	; 0x54
 8007f4c:	1d2b      	adds	r3, r5, #4
 8007f4e:	06f8      	lsls	r0, r7, #27
 8007f50:	930a      	str	r3, [sp, #40]	; 0x28
 8007f52:	d503      	bpl.n	8007f5c <_svfwprintf_r+0x614>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f58:	601a      	str	r2, [r3, #0]
 8007f5a:	e004      	b.n	8007f66 <_svfwprintf_r+0x61e>
 8007f5c:	0679      	lsls	r1, r7, #25
 8007f5e:	d5f9      	bpl.n	8007f54 <_svfwprintf_r+0x60c>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007f68:	e527      	b.n	80079ba <_svfwprintf_r+0x72>
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	f017 0110 	ands.w	r1, r7, #16
 8007f70:	f852 3b04 	ldr.w	r3, [r2], #4
 8007f74:	920a      	str	r2, [sp, #40]	; 0x28
 8007f76:	d011      	beq.n	8007f9c <_svfwprintf_r+0x654>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	9115      	str	r1, [sp, #84]	; 0x54
 8007f7e:	1c66      	adds	r6, r4, #1
 8007f80:	f000 822d 	beq.w	80083de <_svfwprintf_r+0xa96>
 8007f84:	f027 0180 	bic.w	r1, r7, #128	; 0x80
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 822c 	bne.w	80083e6 <_svfwprintf_r+0xa9e>
 8007f8e:	2c00      	cmp	r4, #0
 8007f90:	f000 8098 	beq.w	80080c4 <_svfwprintf_r+0x77c>
 8007f94:	2a01      	cmp	r2, #1
 8007f96:	f040 8229 	bne.w	80083ec <_svfwprintf_r+0xaa4>
 8007f9a:	e075      	b.n	8008088 <_svfwprintf_r+0x740>
 8007f9c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
 8007fa0:	d0eb      	beq.n	8007f7a <_svfwprintf_r+0x632>
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	e7e8      	b.n	8007f78 <_svfwprintf_r+0x630>
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	2178      	movs	r1, #120	; 0x78
 8007faa:	f852 3b04 	ldr.w	r3, [r2], #4
 8007fae:	920a      	str	r2, [sp, #40]	; 0x28
 8007fb0:	2230      	movs	r2, #48	; 0x30
 8007fb2:	e9cd 211a 	strd	r2, r1, [sp, #104]	; 0x68
 8007fb6:	4a9e      	ldr	r2, [pc, #632]	; (8008230 <_svfwprintf_r+0x8e8>)
 8007fb8:	920f      	str	r2, [sp, #60]	; 0x3c
 8007fba:	f047 0702 	orr.w	r7, r7, #2
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	9109      	str	r1, [sp, #36]	; 0x24
 8007fc2:	e7da      	b.n	8007f7a <_svfwprintf_r+0x632>
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	2600      	movs	r6, #0
 8007fc8:	f853 ab04 	ldr.w	sl, [r3], #4
 8007fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8007fce:	f017 0510 	ands.w	r5, r7, #16
 8007fd2:	9615      	str	r6, [sp, #84]	; 0x54
 8007fd4:	d12d      	bne.n	8008032 <_svfwprintf_r+0x6ea>
 8007fd6:	1c62      	adds	r2, r4, #1
 8007fd8:	d014      	beq.n	8008004 <_svfwprintf_r+0x6bc>
 8007fda:	4622      	mov	r2, r4
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4650      	mov	r0, sl
 8007fe0:	4626      	mov	r6, r4
 8007fe2:	f7f8 f8f5 	bl	80001d0 <memchr>
 8007fe6:	b108      	cbz	r0, 8007fec <_svfwprintf_r+0x6a4>
 8007fe8:	eba0 060a 	sub.w	r6, r0, sl
 8007fec:	2e27      	cmp	r6, #39	; 0x27
 8007fee:	d90e      	bls.n	800800e <_svfwprintf_r+0x6c6>
 8007ff0:	1c71      	adds	r1, r6, #1
 8007ff2:	0089      	lsls	r1, r1, #2
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	f7fd fa19 	bl	800542c <_malloc_r>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	f43f add2 	beq.w	8007ba4 <_svfwprintf_r+0x25c>
 8008000:	4680      	mov	r8, r0
 8008002:	e007      	b.n	8008014 <_svfwprintf_r+0x6cc>
 8008004:	4650      	mov	r0, sl
 8008006:	f7f8 f933 	bl	8000270 <strlen>
 800800a:	4606      	mov	r6, r0
 800800c:	e7ee      	b.n	8007fec <_svfwprintf_r+0x6a4>
 800800e:	f04f 0800 	mov.w	r8, #0
 8008012:	a82a      	add	r0, sp, #168	; 0xa8
 8008014:	4634      	mov	r4, r6
 8008016:	2300      	movs	r3, #0
 8008018:	42b3      	cmp	r3, r6
 800801a:	d104      	bne.n	8008026 <_svfwprintf_r+0x6de>
 800801c:	2600      	movs	r6, #0
 800801e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8008022:	4682      	mov	sl, r0
 8008024:	e6da      	b.n	8007ddc <_svfwprintf_r+0x494>
 8008026:	f81a 2003 	ldrb.w	r2, [sl, r3]
 800802a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800802e:	3301      	adds	r3, #1
 8008030:	e7f2      	b.n	8008018 <_svfwprintf_r+0x6d0>
 8008032:	1c63      	adds	r3, r4, #1
 8008034:	d011      	beq.n	800805a <_svfwprintf_r+0x712>
 8008036:	4622      	mov	r2, r4
 8008038:	4631      	mov	r1, r6
 800803a:	4650      	mov	r0, sl
 800803c:	f000 fa03 	bl	8008446 <wmemchr>
 8008040:	4680      	mov	r8, r0
 8008042:	2800      	cmp	r0, #0
 8008044:	f43f ae19 	beq.w	8007c7a <_svfwprintf_r+0x332>
 8008048:	eba0 080a 	sub.w	r8, r0, sl
 800804c:	ea4f 08a8 	mov.w	r8, r8, asr #2
 8008050:	4544      	cmp	r4, r8
 8008052:	bfa8      	it	ge
 8008054:	4644      	movge	r4, r8
 8008056:	46b0      	mov	r8, r6
 8008058:	e60f      	b.n	8007c7a <_svfwprintf_r+0x332>
 800805a:	4650      	mov	r0, sl
 800805c:	f000 f9ea 	bl	8008434 <wcslen>
 8008060:	4604      	mov	r4, r0
 8008062:	e7f8      	b.n	8008056 <_svfwprintf_r+0x70e>
 8008064:	462a      	mov	r2, r5
 8008066:	06fe      	lsls	r6, r7, #27
 8008068:	f852 3b04 	ldr.w	r3, [r2], #4
 800806c:	920a      	str	r2, [sp, #40]	; 0x28
 800806e:	d501      	bpl.n	8008074 <_svfwprintf_r+0x72c>
 8008070:	2201      	movs	r2, #1
 8008072:	e782      	b.n	8007f7a <_svfwprintf_r+0x632>
 8008074:	067d      	lsls	r5, r7, #25
 8008076:	bf48      	it	mi
 8008078:	b29b      	uxthmi	r3, r3
 800807a:	e7f9      	b.n	8008070 <_svfwprintf_r+0x728>
 800807c:	b103      	cbz	r3, 8008080 <_svfwprintf_r+0x738>
 800807e:	9215      	str	r2, [sp, #84]	; 0x54
 8008080:	4b6c      	ldr	r3, [pc, #432]	; (8008234 <_svfwprintf_r+0x8ec>)
 8008082:	e524      	b.n	8007ace <_svfwprintf_r+0x186>
 8008084:	2b09      	cmp	r3, #9
 8008086:	d804      	bhi.n	8008092 <_svfwprintf_r+0x74a>
 8008088:	3330      	adds	r3, #48	; 0x30
 800808a:	9351      	str	r3, [sp, #324]	; 0x144
 800808c:	f50d 7aa2 	add.w	sl, sp, #324	; 0x144
 8008090:	e1c2      	b.n	8008418 <_svfwprintf_r+0xad0>
 8008092:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 8008096:	250a      	movs	r5, #10
 8008098:	fbb3 f0f5 	udiv	r0, r3, r5
 800809c:	fb05 3210 	mls	r2, r5, r0, r3
 80080a0:	3230      	adds	r2, #48	; 0x30
 80080a2:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80080a6:	461a      	mov	r2, r3
 80080a8:	2a09      	cmp	r2, #9
 80080aa:	4603      	mov	r3, r0
 80080ac:	d8f4      	bhi.n	8008098 <_svfwprintf_r+0x750>
 80080ae:	e1b3      	b.n	8008418 <_svfwprintf_r+0xad0>
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80080b6:	091b      	lsrs	r3, r3, #4
 80080b8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80080bc:	f84a 2d04 	str.w	r2, [sl, #-4]!
 80080c0:	d1f6      	bne.n	80080b0 <_svfwprintf_r+0x768>
 80080c2:	e1a9      	b.n	8008418 <_svfwprintf_r+0xad0>
 80080c4:	b91a      	cbnz	r2, 80080ce <_svfwprintf_r+0x786>
 80080c6:	07f8      	lsls	r0, r7, #31
 80080c8:	d501      	bpl.n	80080ce <_svfwprintf_r+0x786>
 80080ca:	2330      	movs	r3, #48	; 0x30
 80080cc:	e7dd      	b.n	800808a <_svfwprintf_r+0x742>
 80080ce:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80080d2:	e1a1      	b.n	8008418 <_svfwprintf_r+0xad0>
 80080d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80080d6:	e681      	b.n	8007ddc <_svfwprintf_r+0x494>
 80080d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080dc:	1a9b      	subs	r3, r3, r2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	9310      	str	r3, [sp, #64]	; 0x40
 80080e2:	f77f ae91 	ble.w	8007e08 <_svfwprintf_r+0x4c0>
 80080e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	dc11      	bgt.n	8008110 <_svfwprintf_r+0x7c8>
 80080ec:	4a52      	ldr	r2, [pc, #328]	; (8008238 <_svfwprintf_r+0x8f0>)
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4649      	mov	r1, r9
 80080f2:	4658      	mov	r0, fp
 80080f4:	f000 fa76 	bl	80085e4 <__ssputs_r>
 80080f8:	3001      	adds	r0, #1
 80080fa:	f47f ae85 	bne.w	8007e08 <_svfwprintf_r+0x4c0>
 80080fe:	f1b8 0f00 	cmp.w	r8, #0
 8008102:	f43f ad55 	beq.w	8007bb0 <_svfwprintf_r+0x268>
 8008106:	4641      	mov	r1, r8
 8008108:	4658      	mov	r0, fp
 800810a:	f7fe ff83 	bl	8007014 <_free_r>
 800810e:	e54f      	b.n	8007bb0 <_svfwprintf_r+0x268>
 8008110:	4a49      	ldr	r2, [pc, #292]	; (8008238 <_svfwprintf_r+0x8f0>)
 8008112:	2340      	movs	r3, #64	; 0x40
 8008114:	4649      	mov	r1, r9
 8008116:	4658      	mov	r0, fp
 8008118:	f000 fa64 	bl	80085e4 <__ssputs_r>
 800811c:	3001      	adds	r0, #1
 800811e:	d0ee      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 8008120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008122:	3b10      	subs	r3, #16
 8008124:	9310      	str	r3, [sp, #64]	; 0x40
 8008126:	e7de      	b.n	80080e6 <_svfwprintf_r+0x79e>
 8008128:	2340      	movs	r3, #64	; 0x40
 800812a:	4649      	mov	r1, r9
 800812c:	4658      	mov	r0, fp
 800812e:	f000 fa59 	bl	80085e4 <__ssputs_r>
 8008132:	3001      	adds	r0, #1
 8008134:	d0e3      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 8008136:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008138:	3b10      	subs	r3, #16
 800813a:	9310      	str	r3, [sp, #64]	; 0x40
 800813c:	e683      	b.n	8007e46 <_svfwprintf_r+0x4fe>
 800813e:	2340      	movs	r3, #64	; 0x40
 8008140:	4649      	mov	r1, r9
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fa4e 	bl	80085e4 <__ssputs_r>
 8008148:	3001      	adds	r0, #1
 800814a:	d0d8      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 800814c:	3e10      	subs	r6, #16
 800814e:	e68b      	b.n	8007e68 <_svfwprintf_r+0x520>
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	2b65      	cmp	r3, #101	; 0x65
 8008154:	f240 80e4 	bls.w	8008320 <_svfwprintf_r+0x9d8>
 8008158:	ec51 0b18 	vmov	r0, r1, d8
 800815c:	2200      	movs	r2, #0
 800815e:	2300      	movs	r3, #0
 8008160:	f7f8 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008164:	b358      	cbz	r0, 80081be <_svfwprintf_r+0x876>
 8008166:	4a35      	ldr	r2, [pc, #212]	; (800823c <_svfwprintf_r+0x8f4>)
 8008168:	2304      	movs	r3, #4
 800816a:	4649      	mov	r1, r9
 800816c:	4658      	mov	r0, fp
 800816e:	f000 fa39 	bl	80085e4 <__ssputs_r>
 8008172:	3001      	adds	r0, #1
 8008174:	d0c3      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 8008176:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800817a:	429a      	cmp	r2, r3
 800817c:	db02      	blt.n	8008184 <_svfwprintf_r+0x83c>
 800817e:	07fb      	lsls	r3, r7, #31
 8008180:	f57f ae8b 	bpl.w	8007e9a <_svfwprintf_r+0x552>
 8008184:	2304      	movs	r3, #4
 8008186:	aa16      	add	r2, sp, #88	; 0x58
 8008188:	4649      	mov	r1, r9
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fa2a 	bl	80085e4 <__ssputs_r>
 8008190:	3001      	adds	r0, #1
 8008192:	d0b4      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 8008194:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008196:	3c01      	subs	r4, #1
 8008198:	2c00      	cmp	r4, #0
 800819a:	f77f ae7e 	ble.w	8007e9a <_svfwprintf_r+0x552>
 800819e:	4d28      	ldr	r5, [pc, #160]	; (8008240 <_svfwprintf_r+0x8f8>)
 80081a0:	2c10      	cmp	r4, #16
 80081a2:	dc02      	bgt.n	80081aa <_svfwprintf_r+0x862>
 80081a4:	00a3      	lsls	r3, r4, #2
 80081a6:	4a26      	ldr	r2, [pc, #152]	; (8008240 <_svfwprintf_r+0x8f8>)
 80081a8:	e670      	b.n	8007e8c <_svfwprintf_r+0x544>
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	462a      	mov	r2, r5
 80081ae:	4649      	mov	r1, r9
 80081b0:	4658      	mov	r0, fp
 80081b2:	f000 fa17 	bl	80085e4 <__ssputs_r>
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0a1      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 80081ba:	3c10      	subs	r4, #16
 80081bc:	e7f0      	b.n	80081a0 <_svfwprintf_r+0x858>
 80081be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	dc3f      	bgt.n	8008244 <_svfwprintf_r+0x8fc>
 80081c4:	4a1d      	ldr	r2, [pc, #116]	; (800823c <_svfwprintf_r+0x8f4>)
 80081c6:	2304      	movs	r3, #4
 80081c8:	4649      	mov	r1, r9
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 fa0a 	bl	80085e4 <__ssputs_r>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d094      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 80081d4:	e9dd 3218 	ldrd	r3, r2, [sp, #96]	; 0x60
 80081d8:	4313      	orrs	r3, r2
 80081da:	f007 0201 	and.w	r2, r7, #1
 80081de:	4313      	orrs	r3, r2
 80081e0:	f43f ae5b 	beq.w	8007e9a <_svfwprintf_r+0x552>
 80081e4:	2304      	movs	r3, #4
 80081e6:	aa16      	add	r2, sp, #88	; 0x58
 80081e8:	4649      	mov	r1, r9
 80081ea:	4658      	mov	r0, fp
 80081ec:	f000 f9fa 	bl	80085e4 <__ssputs_r>
 80081f0:	3001      	adds	r0, #1
 80081f2:	d084      	beq.n	80080fe <_svfwprintf_r+0x7b6>
 80081f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80081f6:	2c00      	cmp	r4, #0
 80081f8:	da0c      	bge.n	8008214 <_svfwprintf_r+0x8cc>
 80081fa:	4d11      	ldr	r5, [pc, #68]	; (8008240 <_svfwprintf_r+0x8f8>)
 80081fc:	4264      	negs	r4, r4
 80081fe:	2c10      	cmp	r4, #16
 8008200:	dc0b      	bgt.n	800821a <_svfwprintf_r+0x8d2>
 8008202:	4a0f      	ldr	r2, [pc, #60]	; (8008240 <_svfwprintf_r+0x8f8>)
 8008204:	00a3      	lsls	r3, r4, #2
 8008206:	4649      	mov	r1, r9
 8008208:	4658      	mov	r0, fp
 800820a:	f000 f9eb 	bl	80085e4 <__ssputs_r>
 800820e:	3001      	adds	r0, #1
 8008210:	f43f af75 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8008214:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	e637      	b.n	8007e8a <_svfwprintf_r+0x542>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	462a      	mov	r2, r5
 800821e:	4649      	mov	r1, r9
 8008220:	4658      	mov	r0, fp
 8008222:	f000 f9df 	bl	80085e4 <__ssputs_r>
 8008226:	3001      	adds	r0, #1
 8008228:	f43f af69 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 800822c:	3c10      	subs	r4, #16
 800822e:	e7e6      	b.n	80081fe <_svfwprintf_r+0x8b6>
 8008230:	0800f7a0 	.word	0x0800f7a0
 8008234:	0800f75c 	.word	0x0800f75c
 8008238:	0800f7e4 	.word	0x0800f7e4
 800823c:	0800f468 	.word	0x0800f468
 8008240:	0800f824 	.word	0x0800f824
 8008244:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008246:	f344 041d 	sbfx	r4, r4, #0, #30
 800824a:	42ac      	cmp	r4, r5
 800824c:	bfa8      	it	ge
 800824e:	462c      	movge	r4, r5
 8008250:	2c00      	cmp	r4, #0
 8008252:	dc20      	bgt.n	8008296 <_svfwprintf_r+0x94e>
 8008254:	2c00      	cmp	r4, #0
 8008256:	bfac      	ite	ge
 8008258:	1b2e      	subge	r6, r5, r4
 800825a:	462e      	movlt	r6, r5
 800825c:	2e00      	cmp	r6, #0
 800825e:	dd0b      	ble.n	8008278 <_svfwprintf_r+0x930>
 8008260:	4c72      	ldr	r4, [pc, #456]	; (800842c <_svfwprintf_r+0xae4>)
 8008262:	2e10      	cmp	r6, #16
 8008264:	dc20      	bgt.n	80082a8 <_svfwprintf_r+0x960>
 8008266:	4a71      	ldr	r2, [pc, #452]	; (800842c <_svfwprintf_r+0xae4>)
 8008268:	00b3      	lsls	r3, r6, #2
 800826a:	4649      	mov	r1, r9
 800826c:	4658      	mov	r0, fp
 800826e:	f000 f9b9 	bl	80085e4 <__ssputs_r>
 8008272:	3001      	adds	r0, #1
 8008274:	f43f af43 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8008278:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800827c:	429a      	cmp	r2, r3
 800827e:	ea4f 0585 	mov.w	r5, r5, lsl #2
 8008282:	da1c      	bge.n	80082be <_svfwprintf_r+0x976>
 8008284:	2304      	movs	r3, #4
 8008286:	aa16      	add	r2, sp, #88	; 0x58
 8008288:	4649      	mov	r1, r9
 800828a:	4658      	mov	r0, fp
 800828c:	f000 f9aa 	bl	80085e4 <__ssputs_r>
 8008290:	3001      	adds	r0, #1
 8008292:	d116      	bne.n	80082c2 <_svfwprintf_r+0x97a>
 8008294:	e733      	b.n	80080fe <_svfwprintf_r+0x7b6>
 8008296:	00a3      	lsls	r3, r4, #2
 8008298:	4652      	mov	r2, sl
 800829a:	4649      	mov	r1, r9
 800829c:	4658      	mov	r0, fp
 800829e:	f000 f9a1 	bl	80085e4 <__ssputs_r>
 80082a2:	3001      	adds	r0, #1
 80082a4:	d1d6      	bne.n	8008254 <_svfwprintf_r+0x90c>
 80082a6:	e72a      	b.n	80080fe <_svfwprintf_r+0x7b6>
 80082a8:	2340      	movs	r3, #64	; 0x40
 80082aa:	4622      	mov	r2, r4
 80082ac:	4649      	mov	r1, r9
 80082ae:	4658      	mov	r0, fp
 80082b0:	f000 f998 	bl	80085e4 <__ssputs_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f af22 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 80082ba:	3e10      	subs	r6, #16
 80082bc:	e7d1      	b.n	8008262 <_svfwprintf_r+0x91a>
 80082be:	07fe      	lsls	r6, r7, #31
 80082c0:	d4e0      	bmi.n	8008284 <_svfwprintf_r+0x93c>
 80082c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80082c6:	ebc5 0483 	rsb	r4, r5, r3, lsl #2
 80082ca:	10a4      	asrs	r4, r4, #2
 80082cc:	1a9b      	subs	r3, r3, r2
 80082ce:	429c      	cmp	r4, r3
 80082d0:	bfa8      	it	ge
 80082d2:	461c      	movge	r4, r3
 80082d4:	2c00      	cmp	r4, #0
 80082d6:	dd09      	ble.n	80082ec <_svfwprintf_r+0x9a4>
 80082d8:	00a3      	lsls	r3, r4, #2
 80082da:	eb0a 0205 	add.w	r2, sl, r5
 80082de:	4649      	mov	r1, r9
 80082e0:	4658      	mov	r0, fp
 80082e2:	f000 f97f 	bl	80085e4 <__ssputs_r>
 80082e6:	3001      	adds	r0, #1
 80082e8:	f43f af09 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 80082ec:	e9dd 3518 	ldrd	r3, r5, [sp, #96]	; 0x60
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	eba5 0503 	sub.w	r5, r5, r3
 80082f6:	bfa8      	it	ge
 80082f8:	1b2d      	subge	r5, r5, r4
 80082fa:	2d00      	cmp	r5, #0
 80082fc:	f77f adcd 	ble.w	8007e9a <_svfwprintf_r+0x552>
 8008300:	4c4a      	ldr	r4, [pc, #296]	; (800842c <_svfwprintf_r+0xae4>)
 8008302:	2d10      	cmp	r5, #16
 8008304:	dc01      	bgt.n	800830a <_svfwprintf_r+0x9c2>
 8008306:	00ab      	lsls	r3, r5, #2
 8008308:	e74d      	b.n	80081a6 <_svfwprintf_r+0x85e>
 800830a:	2340      	movs	r3, #64	; 0x40
 800830c:	4622      	mov	r2, r4
 800830e:	4649      	mov	r1, r9
 8008310:	4658      	mov	r0, fp
 8008312:	f000 f967 	bl	80085e4 <__ssputs_r>
 8008316:	3001      	adds	r0, #1
 8008318:	f43f aef1 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 800831c:	3d10      	subs	r5, #16
 800831e:	e7f0      	b.n	8008302 <_svfwprintf_r+0x9ba>
 8008320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008322:	2b01      	cmp	r3, #1
 8008324:	4652      	mov	r2, sl
 8008326:	f04f 0304 	mov.w	r3, #4
 800832a:	4649      	mov	r1, r9
 800832c:	4658      	mov	r0, fp
 800832e:	dc01      	bgt.n	8008334 <_svfwprintf_r+0x9ec>
 8008330:	07fc      	lsls	r4, r7, #31
 8008332:	d51b      	bpl.n	800836c <_svfwprintf_r+0xa24>
 8008334:	f000 f956 	bl	80085e4 <__ssputs_r>
 8008338:	3001      	adds	r0, #1
 800833a:	f43f aee0 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 800833e:	2304      	movs	r3, #4
 8008340:	aa16      	add	r2, sp, #88	; 0x58
 8008342:	4649      	mov	r1, r9
 8008344:	4658      	mov	r0, fp
 8008346:	f000 f94d 	bl	80085e4 <__ssputs_r>
 800834a:	3001      	adds	r0, #1
 800834c:	f43f aed7 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8008350:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8008352:	ec51 0b18 	vmov	r0, r1, d8
 8008356:	2200      	movs	r2, #0
 8008358:	2300      	movs	r3, #0
 800835a:	3c01      	subs	r4, #1
 800835c:	f7f8 fbb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008360:	b968      	cbnz	r0, 800837e <_svfwprintf_r+0xa36>
 8008362:	00a3      	lsls	r3, r4, #2
 8008364:	f10a 0204 	add.w	r2, sl, #4
 8008368:	4649      	mov	r1, r9
 800836a:	4658      	mov	r0, fp
 800836c:	f000 f93a 	bl	80085e4 <__ssputs_r>
 8008370:	3001      	adds	r0, #1
 8008372:	f43f aec4 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 8008376:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008378:	aa1c      	add	r2, sp, #112	; 0x70
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	e586      	b.n	8007e8c <_svfwprintf_r+0x544>
 800837e:	2c00      	cmp	r4, #0
 8008380:	ddf9      	ble.n	8008376 <_svfwprintf_r+0xa2e>
 8008382:	4d2a      	ldr	r5, [pc, #168]	; (800842c <_svfwprintf_r+0xae4>)
 8008384:	2c10      	cmp	r4, #16
 8008386:	dc02      	bgt.n	800838e <_svfwprintf_r+0xa46>
 8008388:	4a28      	ldr	r2, [pc, #160]	; (800842c <_svfwprintf_r+0xae4>)
 800838a:	00a3      	lsls	r3, r4, #2
 800838c:	e7ec      	b.n	8008368 <_svfwprintf_r+0xa20>
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	462a      	mov	r2, r5
 8008392:	4649      	mov	r1, r9
 8008394:	4658      	mov	r0, fp
 8008396:	f000 f925 	bl	80085e4 <__ssputs_r>
 800839a:	3001      	adds	r0, #1
 800839c:	f43f aeaf 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 80083a0:	3c10      	subs	r4, #16
 80083a2:	e7ef      	b.n	8008384 <_svfwprintf_r+0xa3c>
 80083a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083a8:	1a9c      	subs	r4, r3, r2
 80083aa:	2c00      	cmp	r4, #0
 80083ac:	f77f ad78 	ble.w	8007ea0 <_svfwprintf_r+0x558>
 80083b0:	2c10      	cmp	r4, #16
 80083b2:	dc09      	bgt.n	80083c8 <_svfwprintf_r+0xa80>
 80083b4:	4a1e      	ldr	r2, [pc, #120]	; (8008430 <_svfwprintf_r+0xae8>)
 80083b6:	00a3      	lsls	r3, r4, #2
 80083b8:	4649      	mov	r1, r9
 80083ba:	4658      	mov	r0, fp
 80083bc:	f000 f912 	bl	80085e4 <__ssputs_r>
 80083c0:	3001      	adds	r0, #1
 80083c2:	f47f ad6d 	bne.w	8007ea0 <_svfwprintf_r+0x558>
 80083c6:	e69a      	b.n	80080fe <_svfwprintf_r+0x7b6>
 80083c8:	4a19      	ldr	r2, [pc, #100]	; (8008430 <_svfwprintf_r+0xae8>)
 80083ca:	2340      	movs	r3, #64	; 0x40
 80083cc:	4649      	mov	r1, r9
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 f908 	bl	80085e4 <__ssputs_r>
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae92 	beq.w	80080fe <_svfwprintf_r+0x7b6>
 80083da:	3c10      	subs	r4, #16
 80083dc:	e7e8      	b.n	80083b0 <_svfwprintf_r+0xa68>
 80083de:	4639      	mov	r1, r7
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f43f add7 	beq.w	8007f94 <_svfwprintf_r+0x64c>
 80083e6:	2a01      	cmp	r2, #1
 80083e8:	f43f ae4c 	beq.w	8008084 <_svfwprintf_r+0x73c>
 80083ec:	2a02      	cmp	r2, #2
 80083ee:	f50d 7aa4 	add.w	sl, sp, #328	; 0x148
 80083f2:	f43f ae5d 	beq.w	80080b0 <_svfwprintf_r+0x768>
 80083f6:	f003 0207 	and.w	r2, r3, #7
 80083fa:	3230      	adds	r2, #48	; 0x30
 80083fc:	08db      	lsrs	r3, r3, #3
 80083fe:	4650      	mov	r0, sl
 8008400:	f84a 2d04 	str.w	r2, [sl, #-4]!
 8008404:	d1f7      	bne.n	80083f6 <_svfwprintf_r+0xaae>
 8008406:	07cd      	lsls	r5, r1, #31
 8008408:	d506      	bpl.n	8008418 <_svfwprintf_r+0xad0>
 800840a:	2a30      	cmp	r2, #48	; 0x30
 800840c:	d004      	beq.n	8008418 <_svfwprintf_r+0xad0>
 800840e:	2330      	movs	r3, #48	; 0x30
 8008410:	f84a 3c04 	str.w	r3, [sl, #-4]
 8008414:	f1a0 0a08 	sub.w	sl, r0, #8
 8008418:	ab52      	add	r3, sp, #328	; 0x148
 800841a:	eba3 030a 	sub.w	r3, r3, sl
 800841e:	4626      	mov	r6, r4
 8008420:	460f      	mov	r7, r1
 8008422:	109c      	asrs	r4, r3, #2
 8008424:	f04f 0800 	mov.w	r8, #0
 8008428:	4645      	mov	r5, r8
 800842a:	e4d7      	b.n	8007ddc <_svfwprintf_r+0x494>
 800842c:	0800f824 	.word	0x0800f824
 8008430:	0800f7e4 	.word	0x0800f7e4

08008434 <wcslen>:
 8008434:	4602      	mov	r2, r0
 8008436:	4613      	mov	r3, r2
 8008438:	3204      	adds	r2, #4
 800843a:	6819      	ldr	r1, [r3, #0]
 800843c:	2900      	cmp	r1, #0
 800843e:	d1fa      	bne.n	8008436 <wcslen+0x2>
 8008440:	1a18      	subs	r0, r3, r0
 8008442:	1080      	asrs	r0, r0, #2
 8008444:	4770      	bx	lr

08008446 <wmemchr>:
 8008446:	b530      	push	{r4, r5, lr}
 8008448:	2400      	movs	r4, #0
 800844a:	4294      	cmp	r4, r2
 800844c:	4603      	mov	r3, r0
 800844e:	d102      	bne.n	8008456 <wmemchr+0x10>
 8008450:	2300      	movs	r3, #0
 8008452:	4618      	mov	r0, r3
 8008454:	bd30      	pop	{r4, r5, pc}
 8008456:	681d      	ldr	r5, [r3, #0]
 8008458:	428d      	cmp	r5, r1
 800845a:	f100 0004 	add.w	r0, r0, #4
 800845e:	d0f8      	beq.n	8008452 <wmemchr+0xc>
 8008460:	3401      	adds	r4, #1
 8008462:	e7f2      	b.n	800844a <wmemchr+0x4>

08008464 <_fstat_r>:
 8008464:	b538      	push	{r3, r4, r5, lr}
 8008466:	4d07      	ldr	r5, [pc, #28]	; (8008484 <_fstat_r+0x20>)
 8008468:	2300      	movs	r3, #0
 800846a:	4604      	mov	r4, r0
 800846c:	4608      	mov	r0, r1
 800846e:	4611      	mov	r1, r2
 8008470:	602b      	str	r3, [r5, #0]
 8008472:	f7f9 fb2e 	bl	8001ad2 <_fstat>
 8008476:	1c43      	adds	r3, r0, #1
 8008478:	d102      	bne.n	8008480 <_fstat_r+0x1c>
 800847a:	682b      	ldr	r3, [r5, #0]
 800847c:	b103      	cbz	r3, 8008480 <_fstat_r+0x1c>
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	bd38      	pop	{r3, r4, r5, pc}
 8008482:	bf00      	nop
 8008484:	2000a58c 	.word	0x2000a58c

08008488 <_isatty_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d06      	ldr	r5, [pc, #24]	; (80084a4 <_isatty_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f9 fb22 	bl	8001adc <_isatty>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_isatty_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_isatty_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	2000a58c 	.word	0x2000a58c

080084a8 <__assert_func>:
 80084a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084aa:	4614      	mov	r4, r2
 80084ac:	461a      	mov	r2, r3
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <__assert_func+0x2c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4605      	mov	r5, r0
 80084b4:	68d8      	ldr	r0, [r3, #12]
 80084b6:	b14c      	cbz	r4, 80084cc <__assert_func+0x24>
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <__assert_func+0x30>)
 80084ba:	9100      	str	r1, [sp, #0]
 80084bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c0:	4906      	ldr	r1, [pc, #24]	; (80084dc <__assert_func+0x34>)
 80084c2:	462b      	mov	r3, r5
 80084c4:	f000 f8e8 	bl	8008698 <fiprintf>
 80084c8:	f000 f912 	bl	80086f0 <abort>
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <__assert_func+0x38>)
 80084ce:	461c      	mov	r4, r3
 80084d0:	e7f3      	b.n	80084ba <__assert_func+0x12>
 80084d2:	bf00      	nop
 80084d4:	2000006c 	.word	0x2000006c
 80084d8:	0800f86e 	.word	0x0800f86e
 80084dc:	0800f87b 	.word	0x0800f87b
 80084e0:	0800f8a9 	.word	0x0800f8a9

080084e4 <_calloc_r>:
 80084e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084e6:	fba1 2402 	umull	r2, r4, r1, r2
 80084ea:	b94c      	cbnz	r4, 8008500 <_calloc_r+0x1c>
 80084ec:	4611      	mov	r1, r2
 80084ee:	9201      	str	r2, [sp, #4]
 80084f0:	f7fc ff9c 	bl	800542c <_malloc_r>
 80084f4:	9a01      	ldr	r2, [sp, #4]
 80084f6:	4605      	mov	r5, r0
 80084f8:	b930      	cbnz	r0, 8008508 <_calloc_r+0x24>
 80084fa:	4628      	mov	r0, r5
 80084fc:	b003      	add	sp, #12
 80084fe:	bd30      	pop	{r4, r5, pc}
 8008500:	220c      	movs	r2, #12
 8008502:	6002      	str	r2, [r0, #0]
 8008504:	2500      	movs	r5, #0
 8008506:	e7f8      	b.n	80084fa <_calloc_r+0x16>
 8008508:	4621      	mov	r1, r4
 800850a:	f7fd fe69 	bl	80061e0 <memset>
 800850e:	e7f4      	b.n	80084fa <_calloc_r+0x16>

08008510 <__ascii_mbtowc>:
 8008510:	b082      	sub	sp, #8
 8008512:	b901      	cbnz	r1, 8008516 <__ascii_mbtowc+0x6>
 8008514:	a901      	add	r1, sp, #4
 8008516:	b142      	cbz	r2, 800852a <__ascii_mbtowc+0x1a>
 8008518:	b14b      	cbz	r3, 800852e <__ascii_mbtowc+0x1e>
 800851a:	7813      	ldrb	r3, [r2, #0]
 800851c:	600b      	str	r3, [r1, #0]
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	1e10      	subs	r0, r2, #0
 8008522:	bf18      	it	ne
 8008524:	2001      	movne	r0, #1
 8008526:	b002      	add	sp, #8
 8008528:	4770      	bx	lr
 800852a:	4610      	mov	r0, r2
 800852c:	e7fb      	b.n	8008526 <__ascii_mbtowc+0x16>
 800852e:	f06f 0001 	mvn.w	r0, #1
 8008532:	e7f8      	b.n	8008526 <__ascii_mbtowc+0x16>

08008534 <__ascii_wctomb>:
 8008534:	b149      	cbz	r1, 800854a <__ascii_wctomb+0x16>
 8008536:	2aff      	cmp	r2, #255	; 0xff
 8008538:	bf85      	ittet	hi
 800853a:	238a      	movhi	r3, #138	; 0x8a
 800853c:	6003      	strhi	r3, [r0, #0]
 800853e:	700a      	strbls	r2, [r1, #0]
 8008540:	f04f 30ff 	movhi.w	r0, #4294967295
 8008544:	bf98      	it	ls
 8008546:	2001      	movls	r0, #1
 8008548:	4770      	bx	lr
 800854a:	4608      	mov	r0, r1
 800854c:	4770      	bx	lr
	...

08008550 <btowc>:
 8008550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008552:	1c43      	adds	r3, r0, #1
 8008554:	b087      	sub	sp, #28
 8008556:	d103      	bne.n	8008560 <btowc+0x10>
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	b007      	add	sp, #28
 800855e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008560:	4d1c      	ldr	r5, [pc, #112]	; (80085d4 <btowc+0x84>)
 8008562:	f88d 000b 	strb.w	r0, [sp, #11]
 8008566:	ae04      	add	r6, sp, #16
 8008568:	2208      	movs	r2, #8
 800856a:	2100      	movs	r1, #0
 800856c:	4630      	mov	r0, r6
 800856e:	f7fd fe37 	bl	80061e0 <memset>
 8008572:	682f      	ldr	r7, [r5, #0]
 8008574:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8008576:	b9fc      	cbnz	r4, 80085b8 <btowc+0x68>
 8008578:	2050      	movs	r0, #80	; 0x50
 800857a:	f7fc ff2f 	bl	80053dc <malloc>
 800857e:	4602      	mov	r2, r0
 8008580:	6478      	str	r0, [r7, #68]	; 0x44
 8008582:	b920      	cbnz	r0, 800858e <btowc+0x3e>
 8008584:	4b14      	ldr	r3, [pc, #80]	; (80085d8 <btowc+0x88>)
 8008586:	4815      	ldr	r0, [pc, #84]	; (80085dc <btowc+0x8c>)
 8008588:	2118      	movs	r1, #24
 800858a:	f7ff ff8d 	bl	80084a8 <__assert_func>
 800858e:	682b      	ldr	r3, [r5, #0]
 8008590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008592:	e9c3 4400 	strd	r4, r4, [r3]
 8008596:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800859a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800859e:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
 80085a2:	e9c3 440c 	strd	r4, r4, [r3, #48]	; 0x30
 80085a6:	e9c3 440e 	strd	r4, r4, [r3, #56]	; 0x38
 80085aa:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
 80085ae:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
 80085b2:	619c      	str	r4, [r3, #24]
 80085b4:	771c      	strb	r4, [r3, #28]
 80085b6:	625c      	str	r4, [r3, #36]	; 0x24
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <btowc+0x90>)
 80085ba:	9600      	str	r6, [sp, #0]
 80085bc:	f8d3 40e4 	ldr.w	r4, [r3, #228]	; 0xe4
 80085c0:	6828      	ldr	r0, [r5, #0]
 80085c2:	2301      	movs	r3, #1
 80085c4:	f10d 020b 	add.w	r2, sp, #11
 80085c8:	a903      	add	r1, sp, #12
 80085ca:	47a0      	blx	r4
 80085cc:	2801      	cmp	r0, #1
 80085ce:	d8c3      	bhi.n	8008558 <btowc+0x8>
 80085d0:	9803      	ldr	r0, [sp, #12]
 80085d2:	e7c3      	b.n	800855c <btowc+0xc>
 80085d4:	2000006c 	.word	0x2000006c
 80085d8:	0800f545 	.word	0x0800f545
 80085dc:	0800f8aa 	.word	0x0800f8aa
 80085e0:	20000070 	.word	0x20000070

080085e4 <__ssputs_r>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	688e      	ldr	r6, [r1, #8]
 80085ea:	461f      	mov	r7, r3
 80085ec:	42be      	cmp	r6, r7
 80085ee:	680b      	ldr	r3, [r1, #0]
 80085f0:	4682      	mov	sl, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	4690      	mov	r8, r2
 80085f6:	d82c      	bhi.n	8008652 <__ssputs_r+0x6e>
 80085f8:	898a      	ldrh	r2, [r1, #12]
 80085fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085fe:	d026      	beq.n	800864e <__ssputs_r+0x6a>
 8008600:	6965      	ldr	r5, [r4, #20]
 8008602:	6909      	ldr	r1, [r1, #16]
 8008604:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008608:	eba3 0901 	sub.w	r9, r3, r1
 800860c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008610:	1c7b      	adds	r3, r7, #1
 8008612:	444b      	add	r3, r9
 8008614:	106d      	asrs	r5, r5, #1
 8008616:	429d      	cmp	r5, r3
 8008618:	bf38      	it	cc
 800861a:	461d      	movcc	r5, r3
 800861c:	0553      	lsls	r3, r2, #21
 800861e:	d527      	bpl.n	8008670 <__ssputs_r+0x8c>
 8008620:	4629      	mov	r1, r5
 8008622:	f7fc ff03 	bl	800542c <_malloc_r>
 8008626:	4606      	mov	r6, r0
 8008628:	b360      	cbz	r0, 8008684 <__ssputs_r+0xa0>
 800862a:	6921      	ldr	r1, [r4, #16]
 800862c:	464a      	mov	r2, r9
 800862e:	f7fd fe66 	bl	80062fe <memcpy>
 8008632:	89a3      	ldrh	r3, [r4, #12]
 8008634:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800863c:	81a3      	strh	r3, [r4, #12]
 800863e:	6126      	str	r6, [r4, #16]
 8008640:	6165      	str	r5, [r4, #20]
 8008642:	444e      	add	r6, r9
 8008644:	eba5 0509 	sub.w	r5, r5, r9
 8008648:	6026      	str	r6, [r4, #0]
 800864a:	60a5      	str	r5, [r4, #8]
 800864c:	463e      	mov	r6, r7
 800864e:	42be      	cmp	r6, r7
 8008650:	d900      	bls.n	8008654 <__ssputs_r+0x70>
 8008652:	463e      	mov	r6, r7
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	4632      	mov	r2, r6
 8008658:	4641      	mov	r1, r8
 800865a:	f000 f82f 	bl	80086bc <memmove>
 800865e:	68a3      	ldr	r3, [r4, #8]
 8008660:	1b9b      	subs	r3, r3, r6
 8008662:	60a3      	str	r3, [r4, #8]
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	4433      	add	r3, r6
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	2000      	movs	r0, #0
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	462a      	mov	r2, r5
 8008672:	f000 f844 	bl	80086fe <_realloc_r>
 8008676:	4606      	mov	r6, r0
 8008678:	2800      	cmp	r0, #0
 800867a:	d1e0      	bne.n	800863e <__ssputs_r+0x5a>
 800867c:	6921      	ldr	r1, [r4, #16]
 800867e:	4650      	mov	r0, sl
 8008680:	f7fe fcc8 	bl	8007014 <_free_r>
 8008684:	230c      	movs	r3, #12
 8008686:	f8ca 3000 	str.w	r3, [sl]
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008690:	81a3      	strh	r3, [r4, #12]
 8008692:	f04f 30ff 	mov.w	r0, #4294967295
 8008696:	e7e9      	b.n	800866c <__ssputs_r+0x88>

08008698 <fiprintf>:
 8008698:	b40e      	push	{r1, r2, r3}
 800869a:	b503      	push	{r0, r1, lr}
 800869c:	4601      	mov	r1, r0
 800869e:	ab03      	add	r3, sp, #12
 80086a0:	4805      	ldr	r0, [pc, #20]	; (80086b8 <fiprintf+0x20>)
 80086a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a6:	6800      	ldr	r0, [r0, #0]
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	f000 f881 	bl	80087b0 <_vfiprintf_r>
 80086ae:	b002      	add	sp, #8
 80086b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b4:	b003      	add	sp, #12
 80086b6:	4770      	bx	lr
 80086b8:	2000006c 	.word	0x2000006c

080086bc <memmove>:
 80086bc:	4288      	cmp	r0, r1
 80086be:	b510      	push	{r4, lr}
 80086c0:	eb01 0402 	add.w	r4, r1, r2
 80086c4:	d902      	bls.n	80086cc <memmove+0x10>
 80086c6:	4284      	cmp	r4, r0
 80086c8:	4623      	mov	r3, r4
 80086ca:	d807      	bhi.n	80086dc <memmove+0x20>
 80086cc:	1e43      	subs	r3, r0, #1
 80086ce:	42a1      	cmp	r1, r4
 80086d0:	d008      	beq.n	80086e4 <memmove+0x28>
 80086d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086da:	e7f8      	b.n	80086ce <memmove+0x12>
 80086dc:	4402      	add	r2, r0
 80086de:	4601      	mov	r1, r0
 80086e0:	428a      	cmp	r2, r1
 80086e2:	d100      	bne.n	80086e6 <memmove+0x2a>
 80086e4:	bd10      	pop	{r4, pc}
 80086e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ee:	e7f7      	b.n	80086e0 <memmove+0x24>

080086f0 <abort>:
 80086f0:	b508      	push	{r3, lr}
 80086f2:	2006      	movs	r0, #6
 80086f4:	f000 fa34 	bl	8008b60 <raise>
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7f9 f9c5 	bl	8001a88 <_exit>

080086fe <_realloc_r>:
 80086fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008702:	4680      	mov	r8, r0
 8008704:	4614      	mov	r4, r2
 8008706:	460e      	mov	r6, r1
 8008708:	b921      	cbnz	r1, 8008714 <_realloc_r+0x16>
 800870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	4611      	mov	r1, r2
 8008710:	f7fc be8c 	b.w	800542c <_malloc_r>
 8008714:	b92a      	cbnz	r2, 8008722 <_realloc_r+0x24>
 8008716:	f7fe fc7d 	bl	8007014 <_free_r>
 800871a:	4625      	mov	r5, r4
 800871c:	4628      	mov	r0, r5
 800871e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008722:	f000 fa39 	bl	8008b98 <_malloc_usable_size_r>
 8008726:	4284      	cmp	r4, r0
 8008728:	4607      	mov	r7, r0
 800872a:	d802      	bhi.n	8008732 <_realloc_r+0x34>
 800872c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008730:	d812      	bhi.n	8008758 <_realloc_r+0x5a>
 8008732:	4621      	mov	r1, r4
 8008734:	4640      	mov	r0, r8
 8008736:	f7fc fe79 	bl	800542c <_malloc_r>
 800873a:	4605      	mov	r5, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	d0ed      	beq.n	800871c <_realloc_r+0x1e>
 8008740:	42bc      	cmp	r4, r7
 8008742:	4622      	mov	r2, r4
 8008744:	4631      	mov	r1, r6
 8008746:	bf28      	it	cs
 8008748:	463a      	movcs	r2, r7
 800874a:	f7fd fdd8 	bl	80062fe <memcpy>
 800874e:	4631      	mov	r1, r6
 8008750:	4640      	mov	r0, r8
 8008752:	f7fe fc5f 	bl	8007014 <_free_r>
 8008756:	e7e1      	b.n	800871c <_realloc_r+0x1e>
 8008758:	4635      	mov	r5, r6
 800875a:	e7df      	b.n	800871c <_realloc_r+0x1e>

0800875c <__sfputc_r>:
 800875c:	6893      	ldr	r3, [r2, #8]
 800875e:	3b01      	subs	r3, #1
 8008760:	2b00      	cmp	r3, #0
 8008762:	b410      	push	{r4}
 8008764:	6093      	str	r3, [r2, #8]
 8008766:	da08      	bge.n	800877a <__sfputc_r+0x1e>
 8008768:	6994      	ldr	r4, [r2, #24]
 800876a:	42a3      	cmp	r3, r4
 800876c:	db01      	blt.n	8008772 <__sfputc_r+0x16>
 800876e:	290a      	cmp	r1, #10
 8008770:	d103      	bne.n	800877a <__sfputc_r+0x1e>
 8008772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008776:	f000 b935 	b.w	80089e4 <__swbuf_r>
 800877a:	6813      	ldr	r3, [r2, #0]
 800877c:	1c58      	adds	r0, r3, #1
 800877e:	6010      	str	r0, [r2, #0]
 8008780:	7019      	strb	r1, [r3, #0]
 8008782:	4608      	mov	r0, r1
 8008784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008788:	4770      	bx	lr

0800878a <__sfputs_r>:
 800878a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	4614      	mov	r4, r2
 8008792:	18d5      	adds	r5, r2, r3
 8008794:	42ac      	cmp	r4, r5
 8008796:	d101      	bne.n	800879c <__sfputs_r+0x12>
 8008798:	2000      	movs	r0, #0
 800879a:	e007      	b.n	80087ac <__sfputs_r+0x22>
 800879c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087a0:	463a      	mov	r2, r7
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff ffda 	bl	800875c <__sfputc_r>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d1f3      	bne.n	8008794 <__sfputs_r+0xa>
 80087ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080087b0 <_vfiprintf_r>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	460d      	mov	r5, r1
 80087b6:	b09d      	sub	sp, #116	; 0x74
 80087b8:	4614      	mov	r4, r2
 80087ba:	4698      	mov	r8, r3
 80087bc:	4606      	mov	r6, r0
 80087be:	b118      	cbz	r0, 80087c8 <_vfiprintf_r+0x18>
 80087c0:	6a03      	ldr	r3, [r0, #32]
 80087c2:	b90b      	cbnz	r3, 80087c8 <_vfiprintf_r+0x18>
 80087c4:	f7fd fc5e 	bl	8006084 <__sinit>
 80087c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	d405      	bmi.n	80087da <_vfiprintf_r+0x2a>
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	059a      	lsls	r2, r3, #22
 80087d2:	d402      	bmi.n	80087da <_vfiprintf_r+0x2a>
 80087d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d6:	f7fd fd90 	bl	80062fa <__retarget_lock_acquire_recursive>
 80087da:	89ab      	ldrh	r3, [r5, #12]
 80087dc:	071b      	lsls	r3, r3, #28
 80087de:	d501      	bpl.n	80087e4 <_vfiprintf_r+0x34>
 80087e0:	692b      	ldr	r3, [r5, #16]
 80087e2:	b99b      	cbnz	r3, 800880c <_vfiprintf_r+0x5c>
 80087e4:	4629      	mov	r1, r5
 80087e6:	4630      	mov	r0, r6
 80087e8:	f000 f93a 	bl	8008a60 <__swsetup_r>
 80087ec:	b170      	cbz	r0, 800880c <_vfiprintf_r+0x5c>
 80087ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087f0:	07dc      	lsls	r4, r3, #31
 80087f2:	d504      	bpl.n	80087fe <_vfiprintf_r+0x4e>
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b01d      	add	sp, #116	; 0x74
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	0598      	lsls	r0, r3, #22
 8008802:	d4f7      	bmi.n	80087f4 <_vfiprintf_r+0x44>
 8008804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008806:	f7fd fd79 	bl	80062fc <__retarget_lock_release_recursive>
 800880a:	e7f3      	b.n	80087f4 <_vfiprintf_r+0x44>
 800880c:	2300      	movs	r3, #0
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	2320      	movs	r3, #32
 8008812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008816:	f8cd 800c 	str.w	r8, [sp, #12]
 800881a:	2330      	movs	r3, #48	; 0x30
 800881c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80089d0 <_vfiprintf_r+0x220>
 8008820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008824:	f04f 0901 	mov.w	r9, #1
 8008828:	4623      	mov	r3, r4
 800882a:	469a      	mov	sl, r3
 800882c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008830:	b10a      	cbz	r2, 8008836 <_vfiprintf_r+0x86>
 8008832:	2a25      	cmp	r2, #37	; 0x25
 8008834:	d1f9      	bne.n	800882a <_vfiprintf_r+0x7a>
 8008836:	ebba 0b04 	subs.w	fp, sl, r4
 800883a:	d00b      	beq.n	8008854 <_vfiprintf_r+0xa4>
 800883c:	465b      	mov	r3, fp
 800883e:	4622      	mov	r2, r4
 8008840:	4629      	mov	r1, r5
 8008842:	4630      	mov	r0, r6
 8008844:	f7ff ffa1 	bl	800878a <__sfputs_r>
 8008848:	3001      	adds	r0, #1
 800884a:	f000 80a9 	beq.w	80089a0 <_vfiprintf_r+0x1f0>
 800884e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008850:	445a      	add	r2, fp
 8008852:	9209      	str	r2, [sp, #36]	; 0x24
 8008854:	f89a 3000 	ldrb.w	r3, [sl]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80a1 	beq.w	80089a0 <_vfiprintf_r+0x1f0>
 800885e:	2300      	movs	r3, #0
 8008860:	f04f 32ff 	mov.w	r2, #4294967295
 8008864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008868:	f10a 0a01 	add.w	sl, sl, #1
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	9307      	str	r3, [sp, #28]
 8008870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008874:	931a      	str	r3, [sp, #104]	; 0x68
 8008876:	4654      	mov	r4, sl
 8008878:	2205      	movs	r2, #5
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4854      	ldr	r0, [pc, #336]	; (80089d0 <_vfiprintf_r+0x220>)
 8008880:	f7f7 fca6 	bl	80001d0 <memchr>
 8008884:	9a04      	ldr	r2, [sp, #16]
 8008886:	b9d8      	cbnz	r0, 80088c0 <_vfiprintf_r+0x110>
 8008888:	06d1      	lsls	r1, r2, #27
 800888a:	bf44      	itt	mi
 800888c:	2320      	movmi	r3, #32
 800888e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008892:	0713      	lsls	r3, r2, #28
 8008894:	bf44      	itt	mi
 8008896:	232b      	movmi	r3, #43	; 0x2b
 8008898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889c:	f89a 3000 	ldrb.w	r3, [sl]
 80088a0:	2b2a      	cmp	r3, #42	; 0x2a
 80088a2:	d015      	beq.n	80088d0 <_vfiprintf_r+0x120>
 80088a4:	9a07      	ldr	r2, [sp, #28]
 80088a6:	4654      	mov	r4, sl
 80088a8:	2000      	movs	r0, #0
 80088aa:	f04f 0c0a 	mov.w	ip, #10
 80088ae:	4621      	mov	r1, r4
 80088b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b4:	3b30      	subs	r3, #48	; 0x30
 80088b6:	2b09      	cmp	r3, #9
 80088b8:	d94d      	bls.n	8008956 <_vfiprintf_r+0x1a6>
 80088ba:	b1b0      	cbz	r0, 80088ea <_vfiprintf_r+0x13a>
 80088bc:	9207      	str	r2, [sp, #28]
 80088be:	e014      	b.n	80088ea <_vfiprintf_r+0x13a>
 80088c0:	eba0 0308 	sub.w	r3, r0, r8
 80088c4:	fa09 f303 	lsl.w	r3, r9, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	46a2      	mov	sl, r4
 80088ce:	e7d2      	b.n	8008876 <_vfiprintf_r+0xc6>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1d19      	adds	r1, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9103      	str	r1, [sp, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfbb      	ittet	lt
 80088dc:	425b      	neglt	r3, r3
 80088de:	f042 0202 	orrlt.w	r2, r2, #2
 80088e2:	9307      	strge	r3, [sp, #28]
 80088e4:	9307      	strlt	r3, [sp, #28]
 80088e6:	bfb8      	it	lt
 80088e8:	9204      	strlt	r2, [sp, #16]
 80088ea:	7823      	ldrb	r3, [r4, #0]
 80088ec:	2b2e      	cmp	r3, #46	; 0x2e
 80088ee:	d10c      	bne.n	800890a <_vfiprintf_r+0x15a>
 80088f0:	7863      	ldrb	r3, [r4, #1]
 80088f2:	2b2a      	cmp	r3, #42	; 0x2a
 80088f4:	d134      	bne.n	8008960 <_vfiprintf_r+0x1b0>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9203      	str	r2, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfb8      	it	lt
 8008902:	f04f 33ff 	movlt.w	r3, #4294967295
 8008906:	3402      	adds	r4, #2
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80089e0 <_vfiprintf_r+0x230>
 800890e:	7821      	ldrb	r1, [r4, #0]
 8008910:	2203      	movs	r2, #3
 8008912:	4650      	mov	r0, sl
 8008914:	f7f7 fc5c 	bl	80001d0 <memchr>
 8008918:	b138      	cbz	r0, 800892a <_vfiprintf_r+0x17a>
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	eba0 000a 	sub.w	r0, r0, sl
 8008920:	2240      	movs	r2, #64	; 0x40
 8008922:	4082      	lsls	r2, r0
 8008924:	4313      	orrs	r3, r2
 8008926:	3401      	adds	r4, #1
 8008928:	9304      	str	r3, [sp, #16]
 800892a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892e:	4829      	ldr	r0, [pc, #164]	; (80089d4 <_vfiprintf_r+0x224>)
 8008930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008934:	2206      	movs	r2, #6
 8008936:	f7f7 fc4b 	bl	80001d0 <memchr>
 800893a:	2800      	cmp	r0, #0
 800893c:	d03f      	beq.n	80089be <_vfiprintf_r+0x20e>
 800893e:	4b26      	ldr	r3, [pc, #152]	; (80089d8 <_vfiprintf_r+0x228>)
 8008940:	bb1b      	cbnz	r3, 800898a <_vfiprintf_r+0x1da>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	3307      	adds	r3, #7
 8008946:	f023 0307 	bic.w	r3, r3, #7
 800894a:	3308      	adds	r3, #8
 800894c:	9303      	str	r3, [sp, #12]
 800894e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008950:	443b      	add	r3, r7
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	e768      	b.n	8008828 <_vfiprintf_r+0x78>
 8008956:	fb0c 3202 	mla	r2, ip, r2, r3
 800895a:	460c      	mov	r4, r1
 800895c:	2001      	movs	r0, #1
 800895e:	e7a6      	b.n	80088ae <_vfiprintf_r+0xfe>
 8008960:	2300      	movs	r3, #0
 8008962:	3401      	adds	r4, #1
 8008964:	9305      	str	r3, [sp, #20]
 8008966:	4619      	mov	r1, r3
 8008968:	f04f 0c0a 	mov.w	ip, #10
 800896c:	4620      	mov	r0, r4
 800896e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008972:	3a30      	subs	r2, #48	; 0x30
 8008974:	2a09      	cmp	r2, #9
 8008976:	d903      	bls.n	8008980 <_vfiprintf_r+0x1d0>
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0c6      	beq.n	800890a <_vfiprintf_r+0x15a>
 800897c:	9105      	str	r1, [sp, #20]
 800897e:	e7c4      	b.n	800890a <_vfiprintf_r+0x15a>
 8008980:	fb0c 2101 	mla	r1, ip, r1, r2
 8008984:	4604      	mov	r4, r0
 8008986:	2301      	movs	r3, #1
 8008988:	e7f0      	b.n	800896c <_vfiprintf_r+0x1bc>
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b12      	ldr	r3, [pc, #72]	; (80089dc <_vfiprintf_r+0x22c>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4630      	mov	r0, r6
 8008996:	f7fc fe75 	bl	8005684 <_printf_float>
 800899a:	4607      	mov	r7, r0
 800899c:	1c78      	adds	r0, r7, #1
 800899e:	d1d6      	bne.n	800894e <_vfiprintf_r+0x19e>
 80089a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a2:	07d9      	lsls	r1, r3, #31
 80089a4:	d405      	bmi.n	80089b2 <_vfiprintf_r+0x202>
 80089a6:	89ab      	ldrh	r3, [r5, #12]
 80089a8:	059a      	lsls	r2, r3, #22
 80089aa:	d402      	bmi.n	80089b2 <_vfiprintf_r+0x202>
 80089ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089ae:	f7fd fca5 	bl	80062fc <__retarget_lock_release_recursive>
 80089b2:	89ab      	ldrh	r3, [r5, #12]
 80089b4:	065b      	lsls	r3, r3, #25
 80089b6:	f53f af1d 	bmi.w	80087f4 <_vfiprintf_r+0x44>
 80089ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089bc:	e71c      	b.n	80087f8 <_vfiprintf_r+0x48>
 80089be:	ab03      	add	r3, sp, #12
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	462a      	mov	r2, r5
 80089c4:	4b05      	ldr	r3, [pc, #20]	; (80089dc <_vfiprintf_r+0x22c>)
 80089c6:	a904      	add	r1, sp, #16
 80089c8:	4630      	mov	r0, r6
 80089ca:	f7fd f8ff 	bl	8005bcc <_printf_i>
 80089ce:	e7e4      	b.n	800899a <_vfiprintf_r+0x1ea>
 80089d0:	0800fa04 	.word	0x0800fa04
 80089d4:	0800fa0e 	.word	0x0800fa0e
 80089d8:	08005685 	.word	0x08005685
 80089dc:	0800878b 	.word	0x0800878b
 80089e0:	0800fa0a 	.word	0x0800fa0a

080089e4 <__swbuf_r>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	460e      	mov	r6, r1
 80089e8:	4614      	mov	r4, r2
 80089ea:	4605      	mov	r5, r0
 80089ec:	b118      	cbz	r0, 80089f6 <__swbuf_r+0x12>
 80089ee:	6a03      	ldr	r3, [r0, #32]
 80089f0:	b90b      	cbnz	r3, 80089f6 <__swbuf_r+0x12>
 80089f2:	f7fd fb47 	bl	8006084 <__sinit>
 80089f6:	69a3      	ldr	r3, [r4, #24]
 80089f8:	60a3      	str	r3, [r4, #8]
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	071a      	lsls	r2, r3, #28
 80089fe:	d525      	bpl.n	8008a4c <__swbuf_r+0x68>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	b31b      	cbz	r3, 8008a4c <__swbuf_r+0x68>
 8008a04:	6823      	ldr	r3, [r4, #0]
 8008a06:	6922      	ldr	r2, [r4, #16]
 8008a08:	1a98      	subs	r0, r3, r2
 8008a0a:	6963      	ldr	r3, [r4, #20]
 8008a0c:	b2f6      	uxtb	r6, r6
 8008a0e:	4283      	cmp	r3, r0
 8008a10:	4637      	mov	r7, r6
 8008a12:	dc04      	bgt.n	8008a1e <__swbuf_r+0x3a>
 8008a14:	4621      	mov	r1, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	f7fd fa80 	bl	8005f1c <_fflush_r>
 8008a1c:	b9e0      	cbnz	r0, 8008a58 <__swbuf_r+0x74>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	3b01      	subs	r3, #1
 8008a22:	60a3      	str	r3, [r4, #8]
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	6022      	str	r2, [r4, #0]
 8008a2a:	701e      	strb	r6, [r3, #0]
 8008a2c:	6962      	ldr	r2, [r4, #20]
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d004      	beq.n	8008a3e <__swbuf_r+0x5a>
 8008a34:	89a3      	ldrh	r3, [r4, #12]
 8008a36:	07db      	lsls	r3, r3, #31
 8008a38:	d506      	bpl.n	8008a48 <__swbuf_r+0x64>
 8008a3a:	2e0a      	cmp	r6, #10
 8008a3c:	d104      	bne.n	8008a48 <__swbuf_r+0x64>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	f7fd fa6b 	bl	8005f1c <_fflush_r>
 8008a46:	b938      	cbnz	r0, 8008a58 <__swbuf_r+0x74>
 8008a48:	4638      	mov	r0, r7
 8008a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f000 f806 	bl	8008a60 <__swsetup_r>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d0d5      	beq.n	8008a04 <__swbuf_r+0x20>
 8008a58:	f04f 37ff 	mov.w	r7, #4294967295
 8008a5c:	e7f4      	b.n	8008a48 <__swbuf_r+0x64>
	...

08008a60 <__swsetup_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4b2a      	ldr	r3, [pc, #168]	; (8008b0c <__swsetup_r+0xac>)
 8008a64:	4605      	mov	r5, r0
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	460c      	mov	r4, r1
 8008a6a:	b118      	cbz	r0, 8008a74 <__swsetup_r+0x14>
 8008a6c:	6a03      	ldr	r3, [r0, #32]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <__swsetup_r+0x14>
 8008a70:	f7fd fb08 	bl	8006084 <__sinit>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a7a:	0718      	lsls	r0, r3, #28
 8008a7c:	d422      	bmi.n	8008ac4 <__swsetup_r+0x64>
 8008a7e:	06d9      	lsls	r1, r3, #27
 8008a80:	d407      	bmi.n	8008a92 <__swsetup_r+0x32>
 8008a82:	2309      	movs	r3, #9
 8008a84:	602b      	str	r3, [r5, #0]
 8008a86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	e034      	b.n	8008afc <__swsetup_r+0x9c>
 8008a92:	0758      	lsls	r0, r3, #29
 8008a94:	d512      	bpl.n	8008abc <__swsetup_r+0x5c>
 8008a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a98:	b141      	cbz	r1, 8008aac <__swsetup_r+0x4c>
 8008a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	d002      	beq.n	8008aa8 <__swsetup_r+0x48>
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	f7fe fab6 	bl	8007014 <_free_r>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6363      	str	r3, [r4, #52]	; 0x34
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ab2:	81a3      	strh	r3, [r4, #12]
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	6063      	str	r3, [r4, #4]
 8008ab8:	6923      	ldr	r3, [r4, #16]
 8008aba:	6023      	str	r3, [r4, #0]
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f043 0308 	orr.w	r3, r3, #8
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	6923      	ldr	r3, [r4, #16]
 8008ac6:	b94b      	cbnz	r3, 8008adc <__swsetup_r+0x7c>
 8008ac8:	89a3      	ldrh	r3, [r4, #12]
 8008aca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad2:	d003      	beq.n	8008adc <__swsetup_r+0x7c>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	f7fe fe8a 	bl	80077f0 <__smakebuf_r>
 8008adc:	89a0      	ldrh	r0, [r4, #12]
 8008ade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ae2:	f010 0301 	ands.w	r3, r0, #1
 8008ae6:	d00a      	beq.n	8008afe <__swsetup_r+0x9e>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60a3      	str	r3, [r4, #8]
 8008aec:	6963      	ldr	r3, [r4, #20]
 8008aee:	425b      	negs	r3, r3
 8008af0:	61a3      	str	r3, [r4, #24]
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	b943      	cbnz	r3, 8008b08 <__swsetup_r+0xa8>
 8008af6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008afa:	d1c4      	bne.n	8008a86 <__swsetup_r+0x26>
 8008afc:	bd38      	pop	{r3, r4, r5, pc}
 8008afe:	0781      	lsls	r1, r0, #30
 8008b00:	bf58      	it	pl
 8008b02:	6963      	ldrpl	r3, [r4, #20]
 8008b04:	60a3      	str	r3, [r4, #8]
 8008b06:	e7f4      	b.n	8008af2 <__swsetup_r+0x92>
 8008b08:	2000      	movs	r0, #0
 8008b0a:	e7f7      	b.n	8008afc <__swsetup_r+0x9c>
 8008b0c:	2000006c 	.word	0x2000006c

08008b10 <_raise_r>:
 8008b10:	291f      	cmp	r1, #31
 8008b12:	b538      	push	{r3, r4, r5, lr}
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	d904      	bls.n	8008b24 <_raise_r+0x14>
 8008b1a:	2316      	movs	r3, #22
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008b26:	b112      	cbz	r2, 8008b2e <_raise_r+0x1e>
 8008b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b2c:	b94b      	cbnz	r3, 8008b42 <_raise_r+0x32>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f830 	bl	8008b94 <_getpid_r>
 8008b34:	462a      	mov	r2, r5
 8008b36:	4601      	mov	r1, r0
 8008b38:	4620      	mov	r0, r4
 8008b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b3e:	f000 b817 	b.w	8008b70 <_kill_r>
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d00a      	beq.n	8008b5c <_raise_r+0x4c>
 8008b46:	1c59      	adds	r1, r3, #1
 8008b48:	d103      	bne.n	8008b52 <_raise_r+0x42>
 8008b4a:	2316      	movs	r3, #22
 8008b4c:	6003      	str	r3, [r0, #0]
 8008b4e:	2001      	movs	r0, #1
 8008b50:	e7e7      	b.n	8008b22 <_raise_r+0x12>
 8008b52:	2400      	movs	r4, #0
 8008b54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b58:	4628      	mov	r0, r5
 8008b5a:	4798      	blx	r3
 8008b5c:	2000      	movs	r0, #0
 8008b5e:	e7e0      	b.n	8008b22 <_raise_r+0x12>

08008b60 <raise>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <raise+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f7ff bfd3 	b.w	8008b10 <_raise_r>
 8008b6a:	bf00      	nop
 8008b6c:	2000006c 	.word	0x2000006c

08008b70 <_kill_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	; (8008b90 <_kill_r+0x20>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f7f8 ff7b 	bl	8001a78 <_kill>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d102      	bne.n	8008b8c <_kill_r+0x1c>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b103      	cbz	r3, 8008b8c <_kill_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	2000a58c 	.word	0x2000a58c

08008b94 <_getpid_r>:
 8008b94:	f7f8 bf6e 	b.w	8001a74 <_getpid>

08008b98 <_malloc_usable_size_r>:
 8008b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9c:	1f18      	subs	r0, r3, #4
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	bfbc      	itt	lt
 8008ba2:	580b      	ldrlt	r3, [r1, r0]
 8008ba4:	18c0      	addlt	r0, r0, r3
 8008ba6:	4770      	bx	lr

08008ba8 <sqrt>:
 8008ba8:	b538      	push	{r3, r4, r5, lr}
 8008baa:	ed2d 8b02 	vpush	{d8}
 8008bae:	ec55 4b10 	vmov	r4, r5, d0
 8008bb2:	f000 f87d 	bl	8008cb0 <__ieee754_sqrt>
 8008bb6:	4622      	mov	r2, r4
 8008bb8:	462b      	mov	r3, r5
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	eeb0 8a40 	vmov.f32	s16, s0
 8008bc2:	eef0 8a60 	vmov.f32	s17, s1
 8008bc6:	f7f7 ffb1 	bl	8000b2c <__aeabi_dcmpun>
 8008bca:	b990      	cbnz	r0, 8008bf2 <sqrt+0x4a>
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2300      	movs	r3, #0
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	f7f7 ff82 	bl	8000adc <__aeabi_dcmplt>
 8008bd8:	b158      	cbz	r0, 8008bf2 <sqrt+0x4a>
 8008bda:	f7fd fb63 	bl	80062a4 <__errno>
 8008bde:	2321      	movs	r3, #33	; 0x21
 8008be0:	6003      	str	r3, [r0, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	2300      	movs	r3, #0
 8008be6:	4610      	mov	r0, r2
 8008be8:	4619      	mov	r1, r3
 8008bea:	f7f7 fe2f 	bl	800084c <__aeabi_ddiv>
 8008bee:	ec41 0b18 	vmov	d8, r0, r1
 8008bf2:	eeb0 0a48 	vmov.f32	s0, s16
 8008bf6:	eef0 0a68 	vmov.f32	s1, s17
 8008bfa:	ecbd 8b02 	vpop	{d8}
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}

08008c00 <sin>:
 8008c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c02:	ec53 2b10 	vmov	r2, r3, d0
 8008c06:	4828      	ldr	r0, [pc, #160]	; (8008ca8 <sin+0xa8>)
 8008c08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c0c:	4281      	cmp	r1, r0
 8008c0e:	dc07      	bgt.n	8008c20 <sin+0x20>
 8008c10:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008ca0 <sin+0xa0>
 8008c14:	2000      	movs	r0, #0
 8008c16:	b005      	add	sp, #20
 8008c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c1c:	f000 b9ec 	b.w	8008ff8 <__kernel_sin>
 8008c20:	4822      	ldr	r0, [pc, #136]	; (8008cac <sin+0xac>)
 8008c22:	4281      	cmp	r1, r0
 8008c24:	dd09      	ble.n	8008c3a <sin+0x3a>
 8008c26:	ee10 0a10 	vmov	r0, s0
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f7f7 fb2c 	bl	8000288 <__aeabi_dsub>
 8008c30:	ec41 0b10 	vmov	d0, r0, r1
 8008c34:	b005      	add	sp, #20
 8008c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c3a:	4668      	mov	r0, sp
 8008c3c:	f000 fa9c 	bl	8009178 <__ieee754_rem_pio2>
 8008c40:	f000 0003 	and.w	r0, r0, #3
 8008c44:	2801      	cmp	r0, #1
 8008c46:	d00c      	beq.n	8008c62 <sin+0x62>
 8008c48:	2802      	cmp	r0, #2
 8008c4a:	d011      	beq.n	8008c70 <sin+0x70>
 8008c4c:	b9f0      	cbnz	r0, 8008c8c <sin+0x8c>
 8008c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c52:	ed9d 0b00 	vldr	d0, [sp]
 8008c56:	2001      	movs	r0, #1
 8008c58:	f000 f9ce 	bl	8008ff8 <__kernel_sin>
 8008c5c:	ec51 0b10 	vmov	r0, r1, d0
 8008c60:	e7e6      	b.n	8008c30 <sin+0x30>
 8008c62:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c66:	ed9d 0b00 	vldr	d0, [sp]
 8008c6a:	f000 f8fd 	bl	8008e68 <__kernel_cos>
 8008c6e:	e7f5      	b.n	8008c5c <sin+0x5c>
 8008c70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c74:	ed9d 0b00 	vldr	d0, [sp]
 8008c78:	2001      	movs	r0, #1
 8008c7a:	f000 f9bd 	bl	8008ff8 <__kernel_sin>
 8008c7e:	ec53 2b10 	vmov	r2, r3, d0
 8008c82:	ee10 0a10 	vmov	r0, s0
 8008c86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c8a:	e7d1      	b.n	8008c30 <sin+0x30>
 8008c8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c90:	ed9d 0b00 	vldr	d0, [sp]
 8008c94:	f000 f8e8 	bl	8008e68 <__kernel_cos>
 8008c98:	e7f1      	b.n	8008c7e <sin+0x7e>
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w
	...
 8008ca8:	3fe921fb 	.word	0x3fe921fb
 8008cac:	7fefffff 	.word	0x7fefffff

08008cb0 <__ieee754_sqrt>:
 8008cb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	ec55 4b10 	vmov	r4, r5, d0
 8008cb8:	4e67      	ldr	r6, [pc, #412]	; (8008e58 <__ieee754_sqrt+0x1a8>)
 8008cba:	43ae      	bics	r6, r5
 8008cbc:	ee10 0a10 	vmov	r0, s0
 8008cc0:	ee10 2a10 	vmov	r2, s0
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	d10d      	bne.n	8008ce6 <__ieee754_sqrt+0x36>
 8008cca:	f7f7 fc95 	bl	80005f8 <__aeabi_dmul>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fad9 	bl	800028c <__adddf3>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	460d      	mov	r5, r1
 8008cde:	ec45 4b10 	vmov	d0, r4, r5
 8008ce2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	dc0b      	bgt.n	8008d02 <__ieee754_sqrt+0x52>
 8008cea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008cee:	4326      	orrs	r6, r4
 8008cf0:	d0f5      	beq.n	8008cde <__ieee754_sqrt+0x2e>
 8008cf2:	b135      	cbz	r5, 8008d02 <__ieee754_sqrt+0x52>
 8008cf4:	f7f7 fac8 	bl	8000288 <__aeabi_dsub>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	f7f7 fda6 	bl	800084c <__aeabi_ddiv>
 8008d00:	e7eb      	b.n	8008cda <__ieee754_sqrt+0x2a>
 8008d02:	1509      	asrs	r1, r1, #20
 8008d04:	f000 808d 	beq.w	8008e22 <__ieee754_sqrt+0x172>
 8008d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d14:	07c9      	lsls	r1, r1, #31
 8008d16:	bf5c      	itt	pl
 8008d18:	005b      	lslpl	r3, r3, #1
 8008d1a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8008d1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d22:	bf58      	it	pl
 8008d24:	0052      	lslpl	r2, r2, #1
 8008d26:	2500      	movs	r5, #0
 8008d28:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008d2c:	1076      	asrs	r6, r6, #1
 8008d2e:	0052      	lsls	r2, r2, #1
 8008d30:	f04f 0e16 	mov.w	lr, #22
 8008d34:	46ac      	mov	ip, r5
 8008d36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d3a:	eb0c 0001 	add.w	r0, ip, r1
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	bfde      	ittt	le
 8008d42:	1a1b      	suble	r3, r3, r0
 8008d44:	eb00 0c01 	addle.w	ip, r0, r1
 8008d48:	186d      	addle	r5, r5, r1
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	f1be 0e01 	subs.w	lr, lr, #1
 8008d50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008d54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008d58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008d5c:	d1ed      	bne.n	8008d3a <__ieee754_sqrt+0x8a>
 8008d5e:	4674      	mov	r4, lr
 8008d60:	2720      	movs	r7, #32
 8008d62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008d66:	4563      	cmp	r3, ip
 8008d68:	eb01 000e 	add.w	r0, r1, lr
 8008d6c:	dc02      	bgt.n	8008d74 <__ieee754_sqrt+0xc4>
 8008d6e:	d113      	bne.n	8008d98 <__ieee754_sqrt+0xe8>
 8008d70:	4290      	cmp	r0, r2
 8008d72:	d811      	bhi.n	8008d98 <__ieee754_sqrt+0xe8>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	eb00 0e01 	add.w	lr, r0, r1
 8008d7a:	da57      	bge.n	8008e2c <__ieee754_sqrt+0x17c>
 8008d7c:	f1be 0f00 	cmp.w	lr, #0
 8008d80:	db54      	blt.n	8008e2c <__ieee754_sqrt+0x17c>
 8008d82:	f10c 0801 	add.w	r8, ip, #1
 8008d86:	eba3 030c 	sub.w	r3, r3, ip
 8008d8a:	4290      	cmp	r0, r2
 8008d8c:	bf88      	it	hi
 8008d8e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008d92:	1a12      	subs	r2, r2, r0
 8008d94:	440c      	add	r4, r1
 8008d96:	46c4      	mov	ip, r8
 8008d98:	005b      	lsls	r3, r3, #1
 8008d9a:	3f01      	subs	r7, #1
 8008d9c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8008da0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008da4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8008da8:	d1dd      	bne.n	8008d66 <__ieee754_sqrt+0xb6>
 8008daa:	4313      	orrs	r3, r2
 8008dac:	d01b      	beq.n	8008de6 <__ieee754_sqrt+0x136>
 8008dae:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8008e5c <__ieee754_sqrt+0x1ac>
 8008db2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8008e60 <__ieee754_sqrt+0x1b0>
 8008db6:	e9da 0100 	ldrd	r0, r1, [sl]
 8008dba:	e9db 2300 	ldrd	r2, r3, [fp]
 8008dbe:	f7f7 fa63 	bl	8000288 <__aeabi_dsub>
 8008dc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4640      	mov	r0, r8
 8008dcc:	4649      	mov	r1, r9
 8008dce:	f7f7 fe8f 	bl	8000af0 <__aeabi_dcmple>
 8008dd2:	b140      	cbz	r0, 8008de6 <__ieee754_sqrt+0x136>
 8008dd4:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008dd8:	e9da 0100 	ldrd	r0, r1, [sl]
 8008ddc:	e9db 2300 	ldrd	r2, r3, [fp]
 8008de0:	d126      	bne.n	8008e30 <__ieee754_sqrt+0x180>
 8008de2:	3501      	adds	r5, #1
 8008de4:	463c      	mov	r4, r7
 8008de6:	106a      	asrs	r2, r5, #1
 8008de8:	0863      	lsrs	r3, r4, #1
 8008dea:	07e9      	lsls	r1, r5, #31
 8008dec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008df0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008df4:	bf48      	it	mi
 8008df6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008dfa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8008dfe:	461c      	mov	r4, r3
 8008e00:	e76d      	b.n	8008cde <__ieee754_sqrt+0x2e>
 8008e02:	0ad3      	lsrs	r3, r2, #11
 8008e04:	3815      	subs	r0, #21
 8008e06:	0552      	lsls	r2, r2, #21
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0fa      	beq.n	8008e02 <__ieee754_sqrt+0x152>
 8008e0c:	02dc      	lsls	r4, r3, #11
 8008e0e:	d50a      	bpl.n	8008e26 <__ieee754_sqrt+0x176>
 8008e10:	f1c1 0420 	rsb	r4, r1, #32
 8008e14:	fa22 f404 	lsr.w	r4, r2, r4
 8008e18:	1e4d      	subs	r5, r1, #1
 8008e1a:	408a      	lsls	r2, r1
 8008e1c:	4323      	orrs	r3, r4
 8008e1e:	1b41      	subs	r1, r0, r5
 8008e20:	e772      	b.n	8008d08 <__ieee754_sqrt+0x58>
 8008e22:	4608      	mov	r0, r1
 8008e24:	e7f0      	b.n	8008e08 <__ieee754_sqrt+0x158>
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	3101      	adds	r1, #1
 8008e2a:	e7ef      	b.n	8008e0c <__ieee754_sqrt+0x15c>
 8008e2c:	46e0      	mov	r8, ip
 8008e2e:	e7aa      	b.n	8008d86 <__ieee754_sqrt+0xd6>
 8008e30:	f7f7 fa2c 	bl	800028c <__adddf3>
 8008e34:	e9da 8900 	ldrd	r8, r9, [sl]
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	4649      	mov	r1, r9
 8008e40:	f7f7 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8008e44:	b120      	cbz	r0, 8008e50 <__ieee754_sqrt+0x1a0>
 8008e46:	1ca0      	adds	r0, r4, #2
 8008e48:	bf08      	it	eq
 8008e4a:	3501      	addeq	r5, #1
 8008e4c:	3402      	adds	r4, #2
 8008e4e:	e7ca      	b.n	8008de6 <__ieee754_sqrt+0x136>
 8008e50:	3401      	adds	r4, #1
 8008e52:	f024 0401 	bic.w	r4, r4, #1
 8008e56:	e7c6      	b.n	8008de6 <__ieee754_sqrt+0x136>
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	200001e0 	.word	0x200001e0
 8008e60:	200001e8 	.word	0x200001e8
 8008e64:	00000000 	.word	0x00000000

08008e68 <__kernel_cos>:
 8008e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	ec57 6b10 	vmov	r6, r7, d0
 8008e70:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008e74:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008e78:	ed8d 1b00 	vstr	d1, [sp]
 8008e7c:	da07      	bge.n	8008e8e <__kernel_cos+0x26>
 8008e7e:	ee10 0a10 	vmov	r0, s0
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 fe68 	bl	8000b58 <__aeabi_d2iz>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	f000 8088 	beq.w	8008f9e <__kernel_cos+0x136>
 8008e8e:	4632      	mov	r2, r6
 8008e90:	463b      	mov	r3, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	4639      	mov	r1, r7
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4b51      	ldr	r3, [pc, #324]	; (8008fe0 <__kernel_cos+0x178>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	a340      	add	r3, pc, #256	; (adr r3, 8008fa8 <__kernel_cos+0x140>)
 8008ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eac:	4682      	mov	sl, r0
 8008eae:	468b      	mov	fp, r1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f7f7 fba0 	bl	80005f8 <__aeabi_dmul>
 8008eb8:	a33d      	add	r3, pc, #244	; (adr r3, 8008fb0 <__kernel_cos+0x148>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 f9e5 	bl	800028c <__adddf3>
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	a33b      	add	r3, pc, #236	; (adr r3, 8008fb8 <__kernel_cos+0x150>)
 8008ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed0:	f7f7 f9da 	bl	8000288 <__aeabi_dsub>
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	462b      	mov	r3, r5
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	a338      	add	r3, pc, #224	; (adr r3, 8008fc0 <__kernel_cos+0x158>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4622      	mov	r2, r4
 8008ee8:	462b      	mov	r3, r5
 8008eea:	f7f7 fb85 	bl	80005f8 <__aeabi_dmul>
 8008eee:	a336      	add	r3, pc, #216	; (adr r3, 8008fc8 <__kernel_cos+0x160>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 f9c8 	bl	8000288 <__aeabi_dsub>
 8008ef8:	4622      	mov	r2, r4
 8008efa:	462b      	mov	r3, r5
 8008efc:	f7f7 fb7c 	bl	80005f8 <__aeabi_dmul>
 8008f00:	a333      	add	r3, pc, #204	; (adr r3, 8008fd0 <__kernel_cos+0x168>)
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f7f7 f9c1 	bl	800028c <__adddf3>
 8008f0a:	4622      	mov	r2, r4
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	f7f7 fb73 	bl	80005f8 <__aeabi_dmul>
 8008f12:	4622      	mov	r2, r4
 8008f14:	462b      	mov	r3, r5
 8008f16:	f7f7 fb6f 	bl	80005f8 <__aeabi_dmul>
 8008f1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f1e:	4604      	mov	r4, r0
 8008f20:	460d      	mov	r5, r1
 8008f22:	4630      	mov	r0, r6
 8008f24:	4639      	mov	r1, r7
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	4629      	mov	r1, r5
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7f7 f9a9 	bl	8000288 <__aeabi_dsub>
 8008f36:	4b2b      	ldr	r3, [pc, #172]	; (8008fe4 <__kernel_cos+0x17c>)
 8008f38:	4598      	cmp	r8, r3
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	dc10      	bgt.n	8008f62 <__kernel_cos+0xfa>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4650      	mov	r0, sl
 8008f46:	4659      	mov	r1, fp
 8008f48:	f7f7 f99e 	bl	8000288 <__aeabi_dsub>
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4926      	ldr	r1, [pc, #152]	; (8008fe8 <__kernel_cos+0x180>)
 8008f50:	4602      	mov	r2, r0
 8008f52:	2000      	movs	r0, #0
 8008f54:	f7f7 f998 	bl	8000288 <__aeabi_dsub>
 8008f58:	ec41 0b10 	vmov	d0, r0, r1
 8008f5c:	b003      	add	sp, #12
 8008f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f62:	4b22      	ldr	r3, [pc, #136]	; (8008fec <__kernel_cos+0x184>)
 8008f64:	4920      	ldr	r1, [pc, #128]	; (8008fe8 <__kernel_cos+0x180>)
 8008f66:	4598      	cmp	r8, r3
 8008f68:	bfcc      	ite	gt
 8008f6a:	4d21      	ldrgt	r5, [pc, #132]	; (8008ff0 <__kernel_cos+0x188>)
 8008f6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008f70:	2400      	movs	r4, #0
 8008f72:	4622      	mov	r2, r4
 8008f74:	462b      	mov	r3, r5
 8008f76:	2000      	movs	r0, #0
 8008f78:	f7f7 f986 	bl	8000288 <__aeabi_dsub>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	4680      	mov	r8, r0
 8008f80:	4689      	mov	r9, r1
 8008f82:	462b      	mov	r3, r5
 8008f84:	4650      	mov	r0, sl
 8008f86:	4659      	mov	r1, fp
 8008f88:	f7f7 f97e 	bl	8000288 <__aeabi_dsub>
 8008f8c:	4632      	mov	r2, r6
 8008f8e:	463b      	mov	r3, r7
 8008f90:	f7f7 f97a 	bl	8000288 <__aeabi_dsub>
 8008f94:	4602      	mov	r2, r0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4640      	mov	r0, r8
 8008f9a:	4649      	mov	r1, r9
 8008f9c:	e7da      	b.n	8008f54 <__kernel_cos+0xec>
 8008f9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8008fd8 <__kernel_cos+0x170>
 8008fa2:	e7db      	b.n	8008f5c <__kernel_cos+0xf4>
 8008fa4:	f3af 8000 	nop.w
 8008fa8:	be8838d4 	.word	0xbe8838d4
 8008fac:	bda8fae9 	.word	0xbda8fae9
 8008fb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008fb4:	3e21ee9e 	.word	0x3e21ee9e
 8008fb8:	809c52ad 	.word	0x809c52ad
 8008fbc:	3e927e4f 	.word	0x3e927e4f
 8008fc0:	19cb1590 	.word	0x19cb1590
 8008fc4:	3efa01a0 	.word	0x3efa01a0
 8008fc8:	16c15177 	.word	0x16c15177
 8008fcc:	3f56c16c 	.word	0x3f56c16c
 8008fd0:	5555554c 	.word	0x5555554c
 8008fd4:	3fa55555 	.word	0x3fa55555
 8008fd8:	00000000 	.word	0x00000000
 8008fdc:	3ff00000 	.word	0x3ff00000
 8008fe0:	3fe00000 	.word	0x3fe00000
 8008fe4:	3fd33332 	.word	0x3fd33332
 8008fe8:	3ff00000 	.word	0x3ff00000
 8008fec:	3fe90000 	.word	0x3fe90000
 8008ff0:	3fd20000 	.word	0x3fd20000
 8008ff4:	00000000 	.word	0x00000000

08008ff8 <__kernel_sin>:
 8008ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ffc:	ed2d 8b04 	vpush	{d8-d9}
 8009000:	eeb0 8a41 	vmov.f32	s16, s2
 8009004:	eef0 8a61 	vmov.f32	s17, s3
 8009008:	ec55 4b10 	vmov	r4, r5, d0
 800900c:	b083      	sub	sp, #12
 800900e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009012:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009016:	9001      	str	r0, [sp, #4]
 8009018:	da06      	bge.n	8009028 <__kernel_sin+0x30>
 800901a:	ee10 0a10 	vmov	r0, s0
 800901e:	4629      	mov	r1, r5
 8009020:	f7f7 fd9a 	bl	8000b58 <__aeabi_d2iz>
 8009024:	2800      	cmp	r0, #0
 8009026:	d051      	beq.n	80090cc <__kernel_sin+0xd4>
 8009028:	4622      	mov	r2, r4
 800902a:	462b      	mov	r3, r5
 800902c:	4620      	mov	r0, r4
 800902e:	4629      	mov	r1, r5
 8009030:	f7f7 fae2 	bl	80005f8 <__aeabi_dmul>
 8009034:	4682      	mov	sl, r0
 8009036:	468b      	mov	fp, r1
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	4620      	mov	r0, r4
 800903e:	4629      	mov	r1, r5
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	a341      	add	r3, pc, #260	; (adr r3, 800914c <__kernel_sin+0x154>)
 8009046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	4650      	mov	r0, sl
 8009050:	4659      	mov	r1, fp
 8009052:	f7f7 fad1 	bl	80005f8 <__aeabi_dmul>
 8009056:	a33f      	add	r3, pc, #252	; (adr r3, 8009154 <__kernel_sin+0x15c>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 f914 	bl	8000288 <__aeabi_dsub>
 8009060:	4652      	mov	r2, sl
 8009062:	465b      	mov	r3, fp
 8009064:	f7f7 fac8 	bl	80005f8 <__aeabi_dmul>
 8009068:	a33c      	add	r3, pc, #240	; (adr r3, 800915c <__kernel_sin+0x164>)
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f7f7 f90d 	bl	800028c <__adddf3>
 8009072:	4652      	mov	r2, sl
 8009074:	465b      	mov	r3, fp
 8009076:	f7f7 fabf 	bl	80005f8 <__aeabi_dmul>
 800907a:	a33a      	add	r3, pc, #232	; (adr r3, 8009164 <__kernel_sin+0x16c>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 f902 	bl	8000288 <__aeabi_dsub>
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	a337      	add	r3, pc, #220	; (adr r3, 800916c <__kernel_sin+0x174>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	f7f7 f8fb 	bl	800028c <__adddf3>
 8009096:	9b01      	ldr	r3, [sp, #4]
 8009098:	4606      	mov	r6, r0
 800909a:	460f      	mov	r7, r1
 800909c:	b9eb      	cbnz	r3, 80090da <__kernel_sin+0xe2>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4650      	mov	r0, sl
 80090a4:	4659      	mov	r1, fp
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	a325      	add	r3, pc, #148	; (adr r3, 8009140 <__kernel_sin+0x148>)
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	f7f7 f8ea 	bl	8000288 <__aeabi_dsub>
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	f7f7 fa9e 	bl	80005f8 <__aeabi_dmul>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4620      	mov	r0, r4
 80090c2:	4629      	mov	r1, r5
 80090c4:	f7f7 f8e2 	bl	800028c <__adddf3>
 80090c8:	4604      	mov	r4, r0
 80090ca:	460d      	mov	r5, r1
 80090cc:	ec45 4b10 	vmov	d0, r4, r5
 80090d0:	b003      	add	sp, #12
 80090d2:	ecbd 8b04 	vpop	{d8-d9}
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090da:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <__kernel_sin+0x150>)
 80090dc:	ec51 0b18 	vmov	r0, r1, d8
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	4632      	mov	r2, r6
 80090e8:	ec41 0b19 	vmov	d9, r0, r1
 80090ec:	463b      	mov	r3, r7
 80090ee:	4640      	mov	r0, r8
 80090f0:	4649      	mov	r1, r9
 80090f2:	f7f7 fa81 	bl	80005f8 <__aeabi_dmul>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	ec51 0b19 	vmov	r0, r1, d9
 80090fe:	f7f7 f8c3 	bl	8000288 <__aeabi_dsub>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	f7f7 fa77 	bl	80005f8 <__aeabi_dmul>
 800910a:	ec53 2b18 	vmov	r2, r3, d8
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	a30b      	add	r3, pc, #44	; (adr r3, 8009140 <__kernel_sin+0x148>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	4606      	mov	r6, r0
 800911a:	460f      	mov	r7, r1
 800911c:	4640      	mov	r0, r8
 800911e:	4649      	mov	r1, r9
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4602      	mov	r2, r0
 8009126:	460b      	mov	r3, r1
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 f8ae 	bl	800028c <__adddf3>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f8a6 	bl	8000288 <__aeabi_dsub>
 800913c:	e7c4      	b.n	80090c8 <__kernel_sin+0xd0>
 800913e:	bf00      	nop
 8009140:	55555549 	.word	0x55555549
 8009144:	3fc55555 	.word	0x3fc55555
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	5acfd57c 	.word	0x5acfd57c
 8009150:	3de5d93a 	.word	0x3de5d93a
 8009154:	8a2b9ceb 	.word	0x8a2b9ceb
 8009158:	3e5ae5e6 	.word	0x3e5ae5e6
 800915c:	57b1fe7d 	.word	0x57b1fe7d
 8009160:	3ec71de3 	.word	0x3ec71de3
 8009164:	19c161d5 	.word	0x19c161d5
 8009168:	3f2a01a0 	.word	0x3f2a01a0
 800916c:	1110f8a6 	.word	0x1110f8a6
 8009170:	3f811111 	.word	0x3f811111
 8009174:	00000000 	.word	0x00000000

08009178 <__ieee754_rem_pio2>:
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	ed2d 8b02 	vpush	{d8}
 8009180:	ec55 4b10 	vmov	r4, r5, d0
 8009184:	4bca      	ldr	r3, [pc, #808]	; (80094b0 <__ieee754_rem_pio2+0x338>)
 8009186:	b08b      	sub	sp, #44	; 0x2c
 8009188:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800918c:	4598      	cmp	r8, r3
 800918e:	4682      	mov	sl, r0
 8009190:	9502      	str	r5, [sp, #8]
 8009192:	dc08      	bgt.n	80091a6 <__ieee754_rem_pio2+0x2e>
 8009194:	2200      	movs	r2, #0
 8009196:	2300      	movs	r3, #0
 8009198:	ed80 0b00 	vstr	d0, [r0]
 800919c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091a0:	f04f 0b00 	mov.w	fp, #0
 80091a4:	e028      	b.n	80091f8 <__ieee754_rem_pio2+0x80>
 80091a6:	4bc3      	ldr	r3, [pc, #780]	; (80094b4 <__ieee754_rem_pio2+0x33c>)
 80091a8:	4598      	cmp	r8, r3
 80091aa:	dc78      	bgt.n	800929e <__ieee754_rem_pio2+0x126>
 80091ac:	9b02      	ldr	r3, [sp, #8]
 80091ae:	4ec2      	ldr	r6, [pc, #776]	; (80094b8 <__ieee754_rem_pio2+0x340>)
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	ee10 0a10 	vmov	r0, s0
 80091b6:	a3b0      	add	r3, pc, #704	; (adr r3, 8009478 <__ieee754_rem_pio2+0x300>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	4629      	mov	r1, r5
 80091be:	dd39      	ble.n	8009234 <__ieee754_rem_pio2+0xbc>
 80091c0:	f7f7 f862 	bl	8000288 <__aeabi_dsub>
 80091c4:	45b0      	cmp	r8, r6
 80091c6:	4604      	mov	r4, r0
 80091c8:	460d      	mov	r5, r1
 80091ca:	d01b      	beq.n	8009204 <__ieee754_rem_pio2+0x8c>
 80091cc:	a3ac      	add	r3, pc, #688	; (adr r3, 8009480 <__ieee754_rem_pio2+0x308>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 f859 	bl	8000288 <__aeabi_dsub>
 80091d6:	4602      	mov	r2, r0
 80091d8:	460b      	mov	r3, r1
 80091da:	e9ca 2300 	strd	r2, r3, [sl]
 80091de:	4620      	mov	r0, r4
 80091e0:	4629      	mov	r1, r5
 80091e2:	f7f7 f851 	bl	8000288 <__aeabi_dsub>
 80091e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009480 <__ieee754_rem_pio2+0x308>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 f84c 	bl	8000288 <__aeabi_dsub>
 80091f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80091f4:	f04f 0b01 	mov.w	fp, #1
 80091f8:	4658      	mov	r0, fp
 80091fa:	b00b      	add	sp, #44	; 0x2c
 80091fc:	ecbd 8b02 	vpop	{d8}
 8009200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009204:	a3a0      	add	r3, pc, #640	; (adr r3, 8009488 <__ieee754_rem_pio2+0x310>)
 8009206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920a:	f7f7 f83d 	bl	8000288 <__aeabi_dsub>
 800920e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009490 <__ieee754_rem_pio2+0x318>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	4604      	mov	r4, r0
 8009216:	460d      	mov	r5, r1
 8009218:	f7f7 f836 	bl	8000288 <__aeabi_dsub>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	e9ca 2300 	strd	r2, r3, [sl]
 8009224:	4620      	mov	r0, r4
 8009226:	4629      	mov	r1, r5
 8009228:	f7f7 f82e 	bl	8000288 <__aeabi_dsub>
 800922c:	a398      	add	r3, pc, #608	; (adr r3, 8009490 <__ieee754_rem_pio2+0x318>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	e7db      	b.n	80091ec <__ieee754_rem_pio2+0x74>
 8009234:	f7f7 f82a 	bl	800028c <__adddf3>
 8009238:	45b0      	cmp	r8, r6
 800923a:	4604      	mov	r4, r0
 800923c:	460d      	mov	r5, r1
 800923e:	d016      	beq.n	800926e <__ieee754_rem_pio2+0xf6>
 8009240:	a38f      	add	r3, pc, #572	; (adr r3, 8009480 <__ieee754_rem_pio2+0x308>)
 8009242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009246:	f7f7 f821 	bl	800028c <__adddf3>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	e9ca 2300 	strd	r2, r3, [sl]
 8009252:	4620      	mov	r0, r4
 8009254:	4629      	mov	r1, r5
 8009256:	f7f7 f817 	bl	8000288 <__aeabi_dsub>
 800925a:	a389      	add	r3, pc, #548	; (adr r3, 8009480 <__ieee754_rem_pio2+0x308>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	f04f 3bff 	mov.w	fp, #4294967295
 8009268:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800926c:	e7c4      	b.n	80091f8 <__ieee754_rem_pio2+0x80>
 800926e:	a386      	add	r3, pc, #536	; (adr r3, 8009488 <__ieee754_rem_pio2+0x310>)
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	f7f7 f80a 	bl	800028c <__adddf3>
 8009278:	a385      	add	r3, pc, #532	; (adr r3, 8009490 <__ieee754_rem_pio2+0x318>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	4604      	mov	r4, r0
 8009280:	460d      	mov	r5, r1
 8009282:	f7f7 f803 	bl	800028c <__adddf3>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	e9ca 2300 	strd	r2, r3, [sl]
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f6 fff9 	bl	8000288 <__aeabi_dsub>
 8009296:	a37e      	add	r3, pc, #504	; (adr r3, 8009490 <__ieee754_rem_pio2+0x318>)
 8009298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800929c:	e7e0      	b.n	8009260 <__ieee754_rem_pio2+0xe8>
 800929e:	4b87      	ldr	r3, [pc, #540]	; (80094bc <__ieee754_rem_pio2+0x344>)
 80092a0:	4598      	cmp	r8, r3
 80092a2:	f300 80d8 	bgt.w	8009456 <__ieee754_rem_pio2+0x2de>
 80092a6:	f000 f96d 	bl	8009584 <fabs>
 80092aa:	ec55 4b10 	vmov	r4, r5, d0
 80092ae:	ee10 0a10 	vmov	r0, s0
 80092b2:	a379      	add	r3, pc, #484	; (adr r3, 8009498 <__ieee754_rem_pio2+0x320>)
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	4629      	mov	r1, r5
 80092ba:	f7f7 f99d 	bl	80005f8 <__aeabi_dmul>
 80092be:	4b80      	ldr	r3, [pc, #512]	; (80094c0 <__ieee754_rem_pio2+0x348>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	f7f6 ffe3 	bl	800028c <__adddf3>
 80092c6:	f7f7 fc47 	bl	8000b58 <__aeabi_d2iz>
 80092ca:	4683      	mov	fp, r0
 80092cc:	f7f7 f92a 	bl	8000524 <__aeabi_i2d>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	ec43 2b18 	vmov	d8, r2, r3
 80092d8:	a367      	add	r3, pc, #412	; (adr r3, 8009478 <__ieee754_rem_pio2+0x300>)
 80092da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092de:	f7f7 f98b 	bl	80005f8 <__aeabi_dmul>
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	4620      	mov	r0, r4
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7f6 ffcd 	bl	8000288 <__aeabi_dsub>
 80092ee:	a364      	add	r3, pc, #400	; (adr r3, 8009480 <__ieee754_rem_pio2+0x308>)
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	4606      	mov	r6, r0
 80092f6:	460f      	mov	r7, r1
 80092f8:	ec51 0b18 	vmov	r0, r1, d8
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	f1bb 0f1f 	cmp.w	fp, #31
 8009304:	4604      	mov	r4, r0
 8009306:	460d      	mov	r5, r1
 8009308:	dc0d      	bgt.n	8009326 <__ieee754_rem_pio2+0x1ae>
 800930a:	4b6e      	ldr	r3, [pc, #440]	; (80094c4 <__ieee754_rem_pio2+0x34c>)
 800930c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	4543      	cmp	r3, r8
 8009316:	d006      	beq.n	8009326 <__ieee754_rem_pio2+0x1ae>
 8009318:	4622      	mov	r2, r4
 800931a:	462b      	mov	r3, r5
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f6 ffb2 	bl	8000288 <__aeabi_dsub>
 8009324:	e00e      	b.n	8009344 <__ieee754_rem_pio2+0x1cc>
 8009326:	462b      	mov	r3, r5
 8009328:	4622      	mov	r2, r4
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f6 ffab 	bl	8000288 <__aeabi_dsub>
 8009332:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800933c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009340:	2b10      	cmp	r3, #16
 8009342:	dc02      	bgt.n	800934a <__ieee754_rem_pio2+0x1d2>
 8009344:	e9ca 0100 	strd	r0, r1, [sl]
 8009348:	e039      	b.n	80093be <__ieee754_rem_pio2+0x246>
 800934a:	a34f      	add	r3, pc, #316	; (adr r3, 8009488 <__ieee754_rem_pio2+0x310>)
 800934c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009350:	ec51 0b18 	vmov	r0, r1, d8
 8009354:	f7f7 f950 	bl	80005f8 <__aeabi_dmul>
 8009358:	4604      	mov	r4, r0
 800935a:	460d      	mov	r5, r1
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f6 ff90 	bl	8000288 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4680      	mov	r8, r0
 800936e:	4689      	mov	r9, r1
 8009370:	4630      	mov	r0, r6
 8009372:	4639      	mov	r1, r7
 8009374:	f7f6 ff88 	bl	8000288 <__aeabi_dsub>
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	f7f6 ff84 	bl	8000288 <__aeabi_dsub>
 8009380:	a343      	add	r3, pc, #268	; (adr r3, 8009490 <__ieee754_rem_pio2+0x318>)
 8009382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009386:	4604      	mov	r4, r0
 8009388:	460d      	mov	r5, r1
 800938a:	ec51 0b18 	vmov	r0, r1, d8
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	4622      	mov	r2, r4
 8009394:	462b      	mov	r3, r5
 8009396:	f7f6 ff77 	bl	8000288 <__aeabi_dsub>
 800939a:	4602      	mov	r2, r0
 800939c:	460b      	mov	r3, r1
 800939e:	4604      	mov	r4, r0
 80093a0:	460d      	mov	r5, r1
 80093a2:	4640      	mov	r0, r8
 80093a4:	4649      	mov	r1, r9
 80093a6:	f7f6 ff6f 	bl	8000288 <__aeabi_dsub>
 80093aa:	9a03      	ldr	r2, [sp, #12]
 80093ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b31      	cmp	r3, #49	; 0x31
 80093b4:	dc24      	bgt.n	8009400 <__ieee754_rem_pio2+0x288>
 80093b6:	e9ca 0100 	strd	r0, r1, [sl]
 80093ba:	4646      	mov	r6, r8
 80093bc:	464f      	mov	r7, r9
 80093be:	e9da 8900 	ldrd	r8, r9, [sl]
 80093c2:	4630      	mov	r0, r6
 80093c4:	4642      	mov	r2, r8
 80093c6:	464b      	mov	r3, r9
 80093c8:	4639      	mov	r1, r7
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	462b      	mov	r3, r5
 80093d0:	4622      	mov	r2, r4
 80093d2:	f7f6 ff59 	bl	8000288 <__aeabi_dsub>
 80093d6:	9b02      	ldr	r3, [sp, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80093de:	f6bf af0b 	bge.w	80091f8 <__ieee754_rem_pio2+0x80>
 80093e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80093e6:	f8ca 3004 	str.w	r3, [sl, #4]
 80093ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ee:	f8ca 8000 	str.w	r8, [sl]
 80093f2:	f8ca 0008 	str.w	r0, [sl, #8]
 80093f6:	f8ca 300c 	str.w	r3, [sl, #12]
 80093fa:	f1cb 0b00 	rsb	fp, fp, #0
 80093fe:	e6fb      	b.n	80091f8 <__ieee754_rem_pio2+0x80>
 8009400:	a327      	add	r3, pc, #156	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x328>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	ec51 0b18 	vmov	r0, r1, d8
 800940a:	f7f7 f8f5 	bl	80005f8 <__aeabi_dmul>
 800940e:	4604      	mov	r4, r0
 8009410:	460d      	mov	r5, r1
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f6 ff35 	bl	8000288 <__aeabi_dsub>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4606      	mov	r6, r0
 8009424:	460f      	mov	r7, r1
 8009426:	4640      	mov	r0, r8
 8009428:	4649      	mov	r1, r9
 800942a:	f7f6 ff2d 	bl	8000288 <__aeabi_dsub>
 800942e:	4622      	mov	r2, r4
 8009430:	462b      	mov	r3, r5
 8009432:	f7f6 ff29 	bl	8000288 <__aeabi_dsub>
 8009436:	a31c      	add	r3, pc, #112	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x330>)
 8009438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	ec51 0b18 	vmov	r0, r1, d8
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	4622      	mov	r2, r4
 800944a:	462b      	mov	r3, r5
 800944c:	f7f6 ff1c 	bl	8000288 <__aeabi_dsub>
 8009450:	4604      	mov	r4, r0
 8009452:	460d      	mov	r5, r1
 8009454:	e760      	b.n	8009318 <__ieee754_rem_pio2+0x1a0>
 8009456:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <__ieee754_rem_pio2+0x350>)
 8009458:	4598      	cmp	r8, r3
 800945a:	dd37      	ble.n	80094cc <__ieee754_rem_pio2+0x354>
 800945c:	ee10 2a10 	vmov	r2, s0
 8009460:	462b      	mov	r3, r5
 8009462:	4620      	mov	r0, r4
 8009464:	4629      	mov	r1, r5
 8009466:	f7f6 ff0f 	bl	8000288 <__aeabi_dsub>
 800946a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800946e:	e9ca 0100 	strd	r0, r1, [sl]
 8009472:	e695      	b.n	80091a0 <__ieee754_rem_pio2+0x28>
 8009474:	f3af 8000 	nop.w
 8009478:	54400000 	.word	0x54400000
 800947c:	3ff921fb 	.word	0x3ff921fb
 8009480:	1a626331 	.word	0x1a626331
 8009484:	3dd0b461 	.word	0x3dd0b461
 8009488:	1a600000 	.word	0x1a600000
 800948c:	3dd0b461 	.word	0x3dd0b461
 8009490:	2e037073 	.word	0x2e037073
 8009494:	3ba3198a 	.word	0x3ba3198a
 8009498:	6dc9c883 	.word	0x6dc9c883
 800949c:	3fe45f30 	.word	0x3fe45f30
 80094a0:	2e000000 	.word	0x2e000000
 80094a4:	3ba3198a 	.word	0x3ba3198a
 80094a8:	252049c1 	.word	0x252049c1
 80094ac:	397b839a 	.word	0x397b839a
 80094b0:	3fe921fb 	.word	0x3fe921fb
 80094b4:	4002d97b 	.word	0x4002d97b
 80094b8:	3ff921fb 	.word	0x3ff921fb
 80094bc:	413921fb 	.word	0x413921fb
 80094c0:	3fe00000 	.word	0x3fe00000
 80094c4:	0800fa18 	.word	0x0800fa18
 80094c8:	7fefffff 	.word	0x7fefffff
 80094cc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80094d0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80094d4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80094d8:	4620      	mov	r0, r4
 80094da:	460d      	mov	r5, r1
 80094dc:	f7f7 fb3c 	bl	8000b58 <__aeabi_d2iz>
 80094e0:	f7f7 f820 	bl	8000524 <__aeabi_i2d>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4620      	mov	r0, r4
 80094ea:	4629      	mov	r1, r5
 80094ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094f0:	f7f6 feca 	bl	8000288 <__aeabi_dsub>
 80094f4:	4b21      	ldr	r3, [pc, #132]	; (800957c <__ieee754_rem_pio2+0x404>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	f7f7 f87e 	bl	80005f8 <__aeabi_dmul>
 80094fc:	460d      	mov	r5, r1
 80094fe:	4604      	mov	r4, r0
 8009500:	f7f7 fb2a 	bl	8000b58 <__aeabi_d2iz>
 8009504:	f7f7 f80e 	bl	8000524 <__aeabi_i2d>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009514:	f7f6 feb8 	bl	8000288 <__aeabi_dsub>
 8009518:	4b18      	ldr	r3, [pc, #96]	; (800957c <__ieee754_rem_pio2+0x404>)
 800951a:	2200      	movs	r2, #0
 800951c:	f7f7 f86c 	bl	80005f8 <__aeabi_dmul>
 8009520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009524:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8009528:	2703      	movs	r7, #3
 800952a:	2400      	movs	r4, #0
 800952c:	2500      	movs	r5, #0
 800952e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8009532:	4622      	mov	r2, r4
 8009534:	462b      	mov	r3, r5
 8009536:	46b9      	mov	r9, r7
 8009538:	3f01      	subs	r7, #1
 800953a:	f7f7 fac5 	bl	8000ac8 <__aeabi_dcmpeq>
 800953e:	2800      	cmp	r0, #0
 8009540:	d1f5      	bne.n	800952e <__ieee754_rem_pio2+0x3b6>
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <__ieee754_rem_pio2+0x408>)
 8009544:	9301      	str	r3, [sp, #4]
 8009546:	2302      	movs	r3, #2
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4632      	mov	r2, r6
 800954c:	464b      	mov	r3, r9
 800954e:	4651      	mov	r1, sl
 8009550:	a804      	add	r0, sp, #16
 8009552:	f000 f821 	bl	8009598 <__kernel_rem_pio2>
 8009556:	9b02      	ldr	r3, [sp, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	4683      	mov	fp, r0
 800955c:	f6bf ae4c 	bge.w	80091f8 <__ieee754_rem_pio2+0x80>
 8009560:	e9da 2100 	ldrd	r2, r1, [sl]
 8009564:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009568:	e9ca 2300 	strd	r2, r3, [sl]
 800956c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009574:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8009578:	e73f      	b.n	80093fa <__ieee754_rem_pio2+0x282>
 800957a:	bf00      	nop
 800957c:	41700000 	.word	0x41700000
 8009580:	0800fa98 	.word	0x0800fa98

08009584 <fabs>:
 8009584:	ec51 0b10 	vmov	r0, r1, d0
 8009588:	ee10 2a10 	vmov	r2, s0
 800958c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009590:	ec43 2b10 	vmov	d0, r2, r3
 8009594:	4770      	bx	lr
	...

08009598 <__kernel_rem_pio2>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	ed2d 8b02 	vpush	{d8}
 80095a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80095a4:	f112 0f14 	cmn.w	r2, #20
 80095a8:	9306      	str	r3, [sp, #24]
 80095aa:	9104      	str	r1, [sp, #16]
 80095ac:	4bc2      	ldr	r3, [pc, #776]	; (80098b8 <__kernel_rem_pio2+0x320>)
 80095ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80095b0:	9009      	str	r0, [sp, #36]	; 0x24
 80095b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	9b06      	ldr	r3, [sp, #24]
 80095ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80095be:	bfa8      	it	ge
 80095c0:	1ed4      	subge	r4, r2, #3
 80095c2:	9305      	str	r3, [sp, #20]
 80095c4:	bfb2      	itee	lt
 80095c6:	2400      	movlt	r4, #0
 80095c8:	2318      	movge	r3, #24
 80095ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80095ce:	f06f 0317 	mvn.w	r3, #23
 80095d2:	fb04 3303 	mla	r3, r4, r3, r3
 80095d6:	eb03 0a02 	add.w	sl, r3, r2
 80095da:	9b00      	ldr	r3, [sp, #0]
 80095dc:	9a05      	ldr	r2, [sp, #20]
 80095de:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80098a8 <__kernel_rem_pio2+0x310>
 80095e2:	eb03 0802 	add.w	r8, r3, r2
 80095e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80095e8:	1aa7      	subs	r7, r4, r2
 80095ea:	ae20      	add	r6, sp, #128	; 0x80
 80095ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80095f0:	2500      	movs	r5, #0
 80095f2:	4545      	cmp	r5, r8
 80095f4:	dd13      	ble.n	800961e <__kernel_rem_pio2+0x86>
 80095f6:	9b06      	ldr	r3, [sp, #24]
 80095f8:	aa20      	add	r2, sp, #128	; 0x80
 80095fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80095fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009602:	f04f 0800 	mov.w	r8, #0
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	4598      	cmp	r8, r3
 800960a:	dc31      	bgt.n	8009670 <__kernel_rem_pio2+0xd8>
 800960c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80098a8 <__kernel_rem_pio2+0x310>
 8009610:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009614:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009618:	462f      	mov	r7, r5
 800961a:	2600      	movs	r6, #0
 800961c:	e01b      	b.n	8009656 <__kernel_rem_pio2+0xbe>
 800961e:	42ef      	cmn	r7, r5
 8009620:	d407      	bmi.n	8009632 <__kernel_rem_pio2+0x9a>
 8009622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009626:	f7f6 ff7d 	bl	8000524 <__aeabi_i2d>
 800962a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800962e:	3501      	adds	r5, #1
 8009630:	e7df      	b.n	80095f2 <__kernel_rem_pio2+0x5a>
 8009632:	ec51 0b18 	vmov	r0, r1, d8
 8009636:	e7f8      	b.n	800962a <__kernel_rem_pio2+0x92>
 8009638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800963c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009640:	f7f6 ffda 	bl	80005f8 <__aeabi_dmul>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964c:	f7f6 fe1e 	bl	800028c <__adddf3>
 8009650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009654:	3601      	adds	r6, #1
 8009656:	9b05      	ldr	r3, [sp, #20]
 8009658:	429e      	cmp	r6, r3
 800965a:	f1a7 0708 	sub.w	r7, r7, #8
 800965e:	ddeb      	ble.n	8009638 <__kernel_rem_pio2+0xa0>
 8009660:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009664:	f108 0801 	add.w	r8, r8, #1
 8009668:	ecab 7b02 	vstmia	fp!, {d7}
 800966c:	3508      	adds	r5, #8
 800966e:	e7ca      	b.n	8009606 <__kernel_rem_pio2+0x6e>
 8009670:	9b00      	ldr	r3, [sp, #0]
 8009672:	aa0c      	add	r2, sp, #48	; 0x30
 8009674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009678:	930b      	str	r3, [sp, #44]	; 0x2c
 800967a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800967c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009680:	9c00      	ldr	r4, [sp, #0]
 8009682:	930a      	str	r3, [sp, #40]	; 0x28
 8009684:	00e3      	lsls	r3, r4, #3
 8009686:	9308      	str	r3, [sp, #32]
 8009688:	ab98      	add	r3, sp, #608	; 0x260
 800968a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800968e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009692:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8009696:	ab70      	add	r3, sp, #448	; 0x1c0
 8009698:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800969c:	46c3      	mov	fp, r8
 800969e:	46a1      	mov	r9, r4
 80096a0:	f1b9 0f00 	cmp.w	r9, #0
 80096a4:	f1a5 0508 	sub.w	r5, r5, #8
 80096a8:	dc77      	bgt.n	800979a <__kernel_rem_pio2+0x202>
 80096aa:	ec47 6b10 	vmov	d0, r6, r7
 80096ae:	4650      	mov	r0, sl
 80096b0:	f000 fac2 	bl	8009c38 <scalbn>
 80096b4:	ec57 6b10 	vmov	r6, r7, d0
 80096b8:	2200      	movs	r2, #0
 80096ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80096be:	ee10 0a10 	vmov	r0, s0
 80096c2:	4639      	mov	r1, r7
 80096c4:	f7f6 ff98 	bl	80005f8 <__aeabi_dmul>
 80096c8:	ec41 0b10 	vmov	d0, r0, r1
 80096cc:	f000 fb34 	bl	8009d38 <floor>
 80096d0:	4b7a      	ldr	r3, [pc, #488]	; (80098bc <__kernel_rem_pio2+0x324>)
 80096d2:	ec51 0b10 	vmov	r0, r1, d0
 80096d6:	2200      	movs	r2, #0
 80096d8:	f7f6 ff8e 	bl	80005f8 <__aeabi_dmul>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fdd0 	bl	8000288 <__aeabi_dsub>
 80096e8:	460f      	mov	r7, r1
 80096ea:	4606      	mov	r6, r0
 80096ec:	f7f7 fa34 	bl	8000b58 <__aeabi_d2iz>
 80096f0:	9002      	str	r0, [sp, #8]
 80096f2:	f7f6 ff17 	bl	8000524 <__aeabi_i2d>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f6 fdc3 	bl	8000288 <__aeabi_dsub>
 8009702:	f1ba 0f00 	cmp.w	sl, #0
 8009706:	4606      	mov	r6, r0
 8009708:	460f      	mov	r7, r1
 800970a:	dd6d      	ble.n	80097e8 <__kernel_rem_pio2+0x250>
 800970c:	1e61      	subs	r1, r4, #1
 800970e:	ab0c      	add	r3, sp, #48	; 0x30
 8009710:	9d02      	ldr	r5, [sp, #8]
 8009712:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009716:	f1ca 0018 	rsb	r0, sl, #24
 800971a:	fa43 f200 	asr.w	r2, r3, r0
 800971e:	4415      	add	r5, r2
 8009720:	4082      	lsls	r2, r0
 8009722:	1a9b      	subs	r3, r3, r2
 8009724:	aa0c      	add	r2, sp, #48	; 0x30
 8009726:	9502      	str	r5, [sp, #8]
 8009728:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800972c:	f1ca 0217 	rsb	r2, sl, #23
 8009730:	fa43 fb02 	asr.w	fp, r3, r2
 8009734:	f1bb 0f00 	cmp.w	fp, #0
 8009738:	dd65      	ble.n	8009806 <__kernel_rem_pio2+0x26e>
 800973a:	9b02      	ldr	r3, [sp, #8]
 800973c:	2200      	movs	r2, #0
 800973e:	3301      	adds	r3, #1
 8009740:	9302      	str	r3, [sp, #8]
 8009742:	4615      	mov	r5, r2
 8009744:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009748:	4294      	cmp	r4, r2
 800974a:	f300 809f 	bgt.w	800988c <__kernel_rem_pio2+0x2f4>
 800974e:	f1ba 0f00 	cmp.w	sl, #0
 8009752:	dd07      	ble.n	8009764 <__kernel_rem_pio2+0x1cc>
 8009754:	f1ba 0f01 	cmp.w	sl, #1
 8009758:	f000 80c1 	beq.w	80098de <__kernel_rem_pio2+0x346>
 800975c:	f1ba 0f02 	cmp.w	sl, #2
 8009760:	f000 80c7 	beq.w	80098f2 <__kernel_rem_pio2+0x35a>
 8009764:	f1bb 0f02 	cmp.w	fp, #2
 8009768:	d14d      	bne.n	8009806 <__kernel_rem_pio2+0x26e>
 800976a:	4632      	mov	r2, r6
 800976c:	463b      	mov	r3, r7
 800976e:	4954      	ldr	r1, [pc, #336]	; (80098c0 <__kernel_rem_pio2+0x328>)
 8009770:	2000      	movs	r0, #0
 8009772:	f7f6 fd89 	bl	8000288 <__aeabi_dsub>
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	2d00      	cmp	r5, #0
 800977c:	d043      	beq.n	8009806 <__kernel_rem_pio2+0x26e>
 800977e:	4650      	mov	r0, sl
 8009780:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80098b0 <__kernel_rem_pio2+0x318>
 8009784:	f000 fa58 	bl	8009c38 <scalbn>
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	ec53 2b10 	vmov	r2, r3, d0
 8009790:	f7f6 fd7a 	bl	8000288 <__aeabi_dsub>
 8009794:	4606      	mov	r6, r0
 8009796:	460f      	mov	r7, r1
 8009798:	e035      	b.n	8009806 <__kernel_rem_pio2+0x26e>
 800979a:	4b4a      	ldr	r3, [pc, #296]	; (80098c4 <__kernel_rem_pio2+0x32c>)
 800979c:	2200      	movs	r2, #0
 800979e:	4630      	mov	r0, r6
 80097a0:	4639      	mov	r1, r7
 80097a2:	f7f6 ff29 	bl	80005f8 <__aeabi_dmul>
 80097a6:	f7f7 f9d7 	bl	8000b58 <__aeabi_d2iz>
 80097aa:	f7f6 febb 	bl	8000524 <__aeabi_i2d>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	ec43 2b18 	vmov	d8, r2, r3
 80097b6:	4b44      	ldr	r3, [pc, #272]	; (80098c8 <__kernel_rem_pio2+0x330>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	f7f6 ff1d 	bl	80005f8 <__aeabi_dmul>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4630      	mov	r0, r6
 80097c4:	4639      	mov	r1, r7
 80097c6:	f7f6 fd5f 	bl	8000288 <__aeabi_dsub>
 80097ca:	f7f7 f9c5 	bl	8000b58 <__aeabi_d2iz>
 80097ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097d2:	f84b 0b04 	str.w	r0, [fp], #4
 80097d6:	ec51 0b18 	vmov	r0, r1, d8
 80097da:	f7f6 fd57 	bl	800028c <__adddf3>
 80097de:	f109 39ff 	add.w	r9, r9, #4294967295
 80097e2:	4606      	mov	r6, r0
 80097e4:	460f      	mov	r7, r1
 80097e6:	e75b      	b.n	80096a0 <__kernel_rem_pio2+0x108>
 80097e8:	d106      	bne.n	80097f8 <__kernel_rem_pio2+0x260>
 80097ea:	1e63      	subs	r3, r4, #1
 80097ec:	aa0c      	add	r2, sp, #48	; 0x30
 80097ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80097f6:	e79d      	b.n	8009734 <__kernel_rem_pio2+0x19c>
 80097f8:	4b34      	ldr	r3, [pc, #208]	; (80098cc <__kernel_rem_pio2+0x334>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	f7f7 f982 	bl	8000b04 <__aeabi_dcmpge>
 8009800:	2800      	cmp	r0, #0
 8009802:	d140      	bne.n	8009886 <__kernel_rem_pio2+0x2ee>
 8009804:	4683      	mov	fp, r0
 8009806:	2200      	movs	r2, #0
 8009808:	2300      	movs	r3, #0
 800980a:	4630      	mov	r0, r6
 800980c:	4639      	mov	r1, r7
 800980e:	f7f7 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009812:	2800      	cmp	r0, #0
 8009814:	f000 80c1 	beq.w	800999a <__kernel_rem_pio2+0x402>
 8009818:	1e65      	subs	r5, r4, #1
 800981a:	462b      	mov	r3, r5
 800981c:	2200      	movs	r2, #0
 800981e:	9900      	ldr	r1, [sp, #0]
 8009820:	428b      	cmp	r3, r1
 8009822:	da6d      	bge.n	8009900 <__kernel_rem_pio2+0x368>
 8009824:	2a00      	cmp	r2, #0
 8009826:	f000 808a 	beq.w	800993e <__kernel_rem_pio2+0x3a6>
 800982a:	ab0c      	add	r3, sp, #48	; 0x30
 800982c:	f1aa 0a18 	sub.w	sl, sl, #24
 8009830:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009834:	2b00      	cmp	r3, #0
 8009836:	f000 80ae 	beq.w	8009996 <__kernel_rem_pio2+0x3fe>
 800983a:	4650      	mov	r0, sl
 800983c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80098b0 <__kernel_rem_pio2+0x318>
 8009840:	f000 f9fa 	bl	8009c38 <scalbn>
 8009844:	1c6b      	adds	r3, r5, #1
 8009846:	00da      	lsls	r2, r3, #3
 8009848:	9205      	str	r2, [sp, #20]
 800984a:	ec57 6b10 	vmov	r6, r7, d0
 800984e:	aa70      	add	r2, sp, #448	; 0x1c0
 8009850:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80098c4 <__kernel_rem_pio2+0x32c>
 8009854:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8009858:	462c      	mov	r4, r5
 800985a:	f04f 0800 	mov.w	r8, #0
 800985e:	2c00      	cmp	r4, #0
 8009860:	f280 80d4 	bge.w	8009a0c <__kernel_rem_pio2+0x474>
 8009864:	462c      	mov	r4, r5
 8009866:	2c00      	cmp	r4, #0
 8009868:	f2c0 8102 	blt.w	8009a70 <__kernel_rem_pio2+0x4d8>
 800986c:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <__kernel_rem_pio2+0x338>)
 800986e:	461e      	mov	r6, r3
 8009870:	ab70      	add	r3, sp, #448	; 0x1c0
 8009872:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8009876:	1b2b      	subs	r3, r5, r4
 8009878:	f04f 0900 	mov.w	r9, #0
 800987c:	f04f 0a00 	mov.w	sl, #0
 8009880:	2700      	movs	r7, #0
 8009882:	9306      	str	r3, [sp, #24]
 8009884:	e0e6      	b.n	8009a54 <__kernel_rem_pio2+0x4bc>
 8009886:	f04f 0b02 	mov.w	fp, #2
 800988a:	e756      	b.n	800973a <__kernel_rem_pio2+0x1a2>
 800988c:	f8d8 3000 	ldr.w	r3, [r8]
 8009890:	bb05      	cbnz	r5, 80098d4 <__kernel_rem_pio2+0x33c>
 8009892:	b123      	cbz	r3, 800989e <__kernel_rem_pio2+0x306>
 8009894:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009898:	f8c8 3000 	str.w	r3, [r8]
 800989c:	2301      	movs	r3, #1
 800989e:	3201      	adds	r2, #1
 80098a0:	f108 0804 	add.w	r8, r8, #4
 80098a4:	461d      	mov	r5, r3
 80098a6:	e74f      	b.n	8009748 <__kernel_rem_pio2+0x1b0>
	...
 80098b4:	3ff00000 	.word	0x3ff00000
 80098b8:	0800fbe0 	.word	0x0800fbe0
 80098bc:	40200000 	.word	0x40200000
 80098c0:	3ff00000 	.word	0x3ff00000
 80098c4:	3e700000 	.word	0x3e700000
 80098c8:	41700000 	.word	0x41700000
 80098cc:	3fe00000 	.word	0x3fe00000
 80098d0:	0800fba0 	.word	0x0800fba0
 80098d4:	1acb      	subs	r3, r1, r3
 80098d6:	f8c8 3000 	str.w	r3, [r8]
 80098da:	462b      	mov	r3, r5
 80098dc:	e7df      	b.n	800989e <__kernel_rem_pio2+0x306>
 80098de:	1e62      	subs	r2, r4, #1
 80098e0:	ab0c      	add	r3, sp, #48	; 0x30
 80098e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80098ea:	a90c      	add	r1, sp, #48	; 0x30
 80098ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80098f0:	e738      	b.n	8009764 <__kernel_rem_pio2+0x1cc>
 80098f2:	1e62      	subs	r2, r4, #1
 80098f4:	ab0c      	add	r3, sp, #48	; 0x30
 80098f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80098fe:	e7f4      	b.n	80098ea <__kernel_rem_pio2+0x352>
 8009900:	a90c      	add	r1, sp, #48	; 0x30
 8009902:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009906:	3b01      	subs	r3, #1
 8009908:	430a      	orrs	r2, r1
 800990a:	e788      	b.n	800981e <__kernel_rem_pio2+0x286>
 800990c:	3301      	adds	r3, #1
 800990e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009912:	2900      	cmp	r1, #0
 8009914:	d0fa      	beq.n	800990c <__kernel_rem_pio2+0x374>
 8009916:	9a08      	ldr	r2, [sp, #32]
 8009918:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800991c:	446a      	add	r2, sp
 800991e:	3a98      	subs	r2, #152	; 0x98
 8009920:	9208      	str	r2, [sp, #32]
 8009922:	9a06      	ldr	r2, [sp, #24]
 8009924:	a920      	add	r1, sp, #128	; 0x80
 8009926:	18a2      	adds	r2, r4, r2
 8009928:	18e3      	adds	r3, r4, r3
 800992a:	f104 0801 	add.w	r8, r4, #1
 800992e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009932:	9302      	str	r3, [sp, #8]
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	4543      	cmp	r3, r8
 8009938:	da04      	bge.n	8009944 <__kernel_rem_pio2+0x3ac>
 800993a:	461c      	mov	r4, r3
 800993c:	e6a2      	b.n	8009684 <__kernel_rem_pio2+0xec>
 800993e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009940:	2301      	movs	r3, #1
 8009942:	e7e4      	b.n	800990e <__kernel_rem_pio2+0x376>
 8009944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009946:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800994a:	f7f6 fdeb 	bl	8000524 <__aeabi_i2d>
 800994e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8009952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009954:	46ab      	mov	fp, r5
 8009956:	461c      	mov	r4, r3
 8009958:	f04f 0900 	mov.w	r9, #0
 800995c:	2600      	movs	r6, #0
 800995e:	2700      	movs	r7, #0
 8009960:	9b05      	ldr	r3, [sp, #20]
 8009962:	4599      	cmp	r9, r3
 8009964:	dd06      	ble.n	8009974 <__kernel_rem_pio2+0x3dc>
 8009966:	9b08      	ldr	r3, [sp, #32]
 8009968:	e8e3 6702 	strd	r6, r7, [r3], #8
 800996c:	f108 0801 	add.w	r8, r8, #1
 8009970:	9308      	str	r3, [sp, #32]
 8009972:	e7df      	b.n	8009934 <__kernel_rem_pio2+0x39c>
 8009974:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009978:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800997c:	f7f6 fe3c 	bl	80005f8 <__aeabi_dmul>
 8009980:	4602      	mov	r2, r0
 8009982:	460b      	mov	r3, r1
 8009984:	4630      	mov	r0, r6
 8009986:	4639      	mov	r1, r7
 8009988:	f7f6 fc80 	bl	800028c <__adddf3>
 800998c:	f109 0901 	add.w	r9, r9, #1
 8009990:	4606      	mov	r6, r0
 8009992:	460f      	mov	r7, r1
 8009994:	e7e4      	b.n	8009960 <__kernel_rem_pio2+0x3c8>
 8009996:	3d01      	subs	r5, #1
 8009998:	e747      	b.n	800982a <__kernel_rem_pio2+0x292>
 800999a:	ec47 6b10 	vmov	d0, r6, r7
 800999e:	f1ca 0000 	rsb	r0, sl, #0
 80099a2:	f000 f949 	bl	8009c38 <scalbn>
 80099a6:	ec57 6b10 	vmov	r6, r7, d0
 80099aa:	4ba0      	ldr	r3, [pc, #640]	; (8009c2c <__kernel_rem_pio2+0x694>)
 80099ac:	ee10 0a10 	vmov	r0, s0
 80099b0:	2200      	movs	r2, #0
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f7 f8a6 	bl	8000b04 <__aeabi_dcmpge>
 80099b8:	b1f8      	cbz	r0, 80099fa <__kernel_rem_pio2+0x462>
 80099ba:	4b9d      	ldr	r3, [pc, #628]	; (8009c30 <__kernel_rem_pio2+0x698>)
 80099bc:	2200      	movs	r2, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f6 fe19 	bl	80005f8 <__aeabi_dmul>
 80099c6:	f7f7 f8c7 	bl	8000b58 <__aeabi_d2iz>
 80099ca:	4680      	mov	r8, r0
 80099cc:	f7f6 fdaa 	bl	8000524 <__aeabi_i2d>
 80099d0:	4b96      	ldr	r3, [pc, #600]	; (8009c2c <__kernel_rem_pio2+0x694>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	460b      	mov	r3, r1
 80099da:	4602      	mov	r2, r0
 80099dc:	4639      	mov	r1, r7
 80099de:	4630      	mov	r0, r6
 80099e0:	f7f6 fc52 	bl	8000288 <__aeabi_dsub>
 80099e4:	f7f7 f8b8 	bl	8000b58 <__aeabi_d2iz>
 80099e8:	1c65      	adds	r5, r4, #1
 80099ea:	ab0c      	add	r3, sp, #48	; 0x30
 80099ec:	f10a 0a18 	add.w	sl, sl, #24
 80099f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80099f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80099f8:	e71f      	b.n	800983a <__kernel_rem_pio2+0x2a2>
 80099fa:	4630      	mov	r0, r6
 80099fc:	4639      	mov	r1, r7
 80099fe:	f7f7 f8ab 	bl	8000b58 <__aeabi_d2iz>
 8009a02:	ab0c      	add	r3, sp, #48	; 0x30
 8009a04:	4625      	mov	r5, r4
 8009a06:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a0a:	e716      	b.n	800983a <__kernel_rem_pio2+0x2a2>
 8009a0c:	ab0c      	add	r3, sp, #48	; 0x30
 8009a0e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009a12:	f7f6 fd87 	bl	8000524 <__aeabi_i2d>
 8009a16:	4632      	mov	r2, r6
 8009a18:	463b      	mov	r3, r7
 8009a1a:	f7f6 fded 	bl	80005f8 <__aeabi_dmul>
 8009a1e:	4642      	mov	r2, r8
 8009a20:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009a24:	464b      	mov	r3, r9
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f6 fde5 	bl	80005f8 <__aeabi_dmul>
 8009a2e:	3c01      	subs	r4, #1
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	e713      	b.n	800985e <__kernel_rem_pio2+0x2c6>
 8009a36:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8009a3a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8009a3e:	f7f6 fddb 	bl	80005f8 <__aeabi_dmul>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4648      	mov	r0, r9
 8009a48:	4651      	mov	r1, sl
 8009a4a:	f7f6 fc1f 	bl	800028c <__adddf3>
 8009a4e:	3701      	adds	r7, #1
 8009a50:	4681      	mov	r9, r0
 8009a52:	468a      	mov	sl, r1
 8009a54:	9b00      	ldr	r3, [sp, #0]
 8009a56:	429f      	cmp	r7, r3
 8009a58:	dc02      	bgt.n	8009a60 <__kernel_rem_pio2+0x4c8>
 8009a5a:	9b06      	ldr	r3, [sp, #24]
 8009a5c:	429f      	cmp	r7, r3
 8009a5e:	ddea      	ble.n	8009a36 <__kernel_rem_pio2+0x49e>
 8009a60:	9a06      	ldr	r2, [sp, #24]
 8009a62:	ab48      	add	r3, sp, #288	; 0x120
 8009a64:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8009a68:	e9c6 9a00 	strd	r9, sl, [r6]
 8009a6c:	3c01      	subs	r4, #1
 8009a6e:	e6fa      	b.n	8009866 <__kernel_rem_pio2+0x2ce>
 8009a70:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009a72:	2b02      	cmp	r3, #2
 8009a74:	dc0b      	bgt.n	8009a8e <__kernel_rem_pio2+0x4f6>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	dc39      	bgt.n	8009aee <__kernel_rem_pio2+0x556>
 8009a7a:	d05d      	beq.n	8009b38 <__kernel_rem_pio2+0x5a0>
 8009a7c:	9b02      	ldr	r3, [sp, #8]
 8009a7e:	f003 0007 	and.w	r0, r3, #7
 8009a82:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8009a86:	ecbd 8b02 	vpop	{d8}
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d1f3      	bne.n	8009a7c <__kernel_rem_pio2+0x4e4>
 8009a94:	9b05      	ldr	r3, [sp, #20]
 8009a96:	9500      	str	r5, [sp, #0]
 8009a98:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009a9c:	eb0d 0403 	add.w	r4, sp, r3
 8009aa0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8009aa4:	46a2      	mov	sl, r4
 8009aa6:	9b00      	ldr	r3, [sp, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f1aa 0a08 	sub.w	sl, sl, #8
 8009aae:	dc69      	bgt.n	8009b84 <__kernel_rem_pio2+0x5ec>
 8009ab0:	46aa      	mov	sl, r5
 8009ab2:	f1ba 0f01 	cmp.w	sl, #1
 8009ab6:	f1a4 0408 	sub.w	r4, r4, #8
 8009aba:	f300 8083 	bgt.w	8009bc4 <__kernel_rem_pio2+0x62c>
 8009abe:	9c05      	ldr	r4, [sp, #20]
 8009ac0:	ab48      	add	r3, sp, #288	; 0x120
 8009ac2:	441c      	add	r4, r3
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	2d01      	cmp	r5, #1
 8009aca:	f300 809a 	bgt.w	8009c02 <__kernel_rem_pio2+0x66a>
 8009ace:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8009ad2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009ad6:	f1bb 0f00 	cmp.w	fp, #0
 8009ada:	f040 8098 	bne.w	8009c0e <__kernel_rem_pio2+0x676>
 8009ade:	9b04      	ldr	r3, [sp, #16]
 8009ae0:	e9c3 7800 	strd	r7, r8, [r3]
 8009ae4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009ae8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009aec:	e7c6      	b.n	8009a7c <__kernel_rem_pio2+0x4e4>
 8009aee:	9e05      	ldr	r6, [sp, #20]
 8009af0:	ab48      	add	r3, sp, #288	; 0x120
 8009af2:	441e      	add	r6, r3
 8009af4:	462c      	mov	r4, r5
 8009af6:	2000      	movs	r0, #0
 8009af8:	2100      	movs	r1, #0
 8009afa:	2c00      	cmp	r4, #0
 8009afc:	da33      	bge.n	8009b66 <__kernel_rem_pio2+0x5ce>
 8009afe:	f1bb 0f00 	cmp.w	fp, #0
 8009b02:	d036      	beq.n	8009b72 <__kernel_rem_pio2+0x5da>
 8009b04:	4602      	mov	r2, r0
 8009b06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b0a:	9c04      	ldr	r4, [sp, #16]
 8009b0c:	e9c4 2300 	strd	r2, r3, [r4]
 8009b10:	4602      	mov	r2, r0
 8009b12:	460b      	mov	r3, r1
 8009b14:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8009b18:	f7f6 fbb6 	bl	8000288 <__aeabi_dsub>
 8009b1c:	ae4a      	add	r6, sp, #296	; 0x128
 8009b1e:	2401      	movs	r4, #1
 8009b20:	42a5      	cmp	r5, r4
 8009b22:	da29      	bge.n	8009b78 <__kernel_rem_pio2+0x5e0>
 8009b24:	f1bb 0f00 	cmp.w	fp, #0
 8009b28:	d002      	beq.n	8009b30 <__kernel_rem_pio2+0x598>
 8009b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b2e:	4619      	mov	r1, r3
 8009b30:	9b04      	ldr	r3, [sp, #16]
 8009b32:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009b36:	e7a1      	b.n	8009a7c <__kernel_rem_pio2+0x4e4>
 8009b38:	9c05      	ldr	r4, [sp, #20]
 8009b3a:	ab48      	add	r3, sp, #288	; 0x120
 8009b3c:	441c      	add	r4, r3
 8009b3e:	2000      	movs	r0, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	da09      	bge.n	8009b5a <__kernel_rem_pio2+0x5c2>
 8009b46:	f1bb 0f00 	cmp.w	fp, #0
 8009b4a:	d002      	beq.n	8009b52 <__kernel_rem_pio2+0x5ba>
 8009b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b50:	4619      	mov	r1, r3
 8009b52:	9b04      	ldr	r3, [sp, #16]
 8009b54:	e9c3 0100 	strd	r0, r1, [r3]
 8009b58:	e790      	b.n	8009a7c <__kernel_rem_pio2+0x4e4>
 8009b5a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009b5e:	f7f6 fb95 	bl	800028c <__adddf3>
 8009b62:	3d01      	subs	r5, #1
 8009b64:	e7ed      	b.n	8009b42 <__kernel_rem_pio2+0x5aa>
 8009b66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009b6a:	f7f6 fb8f 	bl	800028c <__adddf3>
 8009b6e:	3c01      	subs	r4, #1
 8009b70:	e7c3      	b.n	8009afa <__kernel_rem_pio2+0x562>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	e7c8      	b.n	8009b0a <__kernel_rem_pio2+0x572>
 8009b78:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009b7c:	f7f6 fb86 	bl	800028c <__adddf3>
 8009b80:	3401      	adds	r4, #1
 8009b82:	e7cd      	b.n	8009b20 <__kernel_rem_pio2+0x588>
 8009b84:	e9da 8900 	ldrd	r8, r9, [sl]
 8009b88:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009b8c:	9b00      	ldr	r3, [sp, #0]
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	4632      	mov	r2, r6
 8009b94:	463b      	mov	r3, r7
 8009b96:	4640      	mov	r0, r8
 8009b98:	4649      	mov	r1, r9
 8009b9a:	f7f6 fb77 	bl	800028c <__adddf3>
 8009b9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	4640      	mov	r0, r8
 8009ba8:	4649      	mov	r1, r9
 8009baa:	f7f6 fb6d 	bl	8000288 <__aeabi_dsub>
 8009bae:	4632      	mov	r2, r6
 8009bb0:	463b      	mov	r3, r7
 8009bb2:	f7f6 fb6b 	bl	800028c <__adddf3>
 8009bb6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009bba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009bbe:	ed8a 7b00 	vstr	d7, [sl]
 8009bc2:	e770      	b.n	8009aa6 <__kernel_rem_pio2+0x50e>
 8009bc4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009bc8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4632      	mov	r2, r6
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	f7f6 fb5a 	bl	800028c <__adddf3>
 8009bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8009bdc:	4602      	mov	r2, r0
 8009bde:	460b      	mov	r3, r1
 8009be0:	4640      	mov	r0, r8
 8009be2:	4649      	mov	r1, r9
 8009be4:	f7f6 fb50 	bl	8000288 <__aeabi_dsub>
 8009be8:	4632      	mov	r2, r6
 8009bea:	463b      	mov	r3, r7
 8009bec:	f7f6 fb4e 	bl	800028c <__adddf3>
 8009bf0:	ed9d 7b00 	vldr	d7, [sp]
 8009bf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009bf8:	ed84 7b00 	vstr	d7, [r4]
 8009bfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c00:	e757      	b.n	8009ab2 <__kernel_rem_pio2+0x51a>
 8009c02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c06:	f7f6 fb41 	bl	800028c <__adddf3>
 8009c0a:	3d01      	subs	r5, #1
 8009c0c:	e75c      	b.n	8009ac8 <__kernel_rem_pio2+0x530>
 8009c0e:	9b04      	ldr	r3, [sp, #16]
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	601f      	str	r7, [r3, #0]
 8009c14:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009c18:	605c      	str	r4, [r3, #4]
 8009c1a:	609d      	str	r5, [r3, #8]
 8009c1c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c20:	60d3      	str	r3, [r2, #12]
 8009c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c26:	6110      	str	r0, [r2, #16]
 8009c28:	6153      	str	r3, [r2, #20]
 8009c2a:	e727      	b.n	8009a7c <__kernel_rem_pio2+0x4e4>
 8009c2c:	41700000 	.word	0x41700000
 8009c30:	3e700000 	.word	0x3e700000
 8009c34:	00000000 	.word	0x00000000

08009c38 <scalbn>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	ec55 4b10 	vmov	r4, r5, d0
 8009c3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009c42:	4606      	mov	r6, r0
 8009c44:	462b      	mov	r3, r5
 8009c46:	b999      	cbnz	r1, 8009c70 <scalbn+0x38>
 8009c48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c4c:	4323      	orrs	r3, r4
 8009c4e:	d03f      	beq.n	8009cd0 <scalbn+0x98>
 8009c50:	4b35      	ldr	r3, [pc, #212]	; (8009d28 <scalbn+0xf0>)
 8009c52:	4629      	mov	r1, r5
 8009c54:	ee10 0a10 	vmov	r0, s0
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f7f6 fccd 	bl	80005f8 <__aeabi_dmul>
 8009c5e:	4b33      	ldr	r3, [pc, #204]	; (8009d2c <scalbn+0xf4>)
 8009c60:	429e      	cmp	r6, r3
 8009c62:	4604      	mov	r4, r0
 8009c64:	460d      	mov	r5, r1
 8009c66:	da10      	bge.n	8009c8a <scalbn+0x52>
 8009c68:	a327      	add	r3, pc, #156	; (adr r3, 8009d08 <scalbn+0xd0>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	e01f      	b.n	8009cb0 <scalbn+0x78>
 8009c70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009c74:	4291      	cmp	r1, r2
 8009c76:	d10c      	bne.n	8009c92 <scalbn+0x5a>
 8009c78:	ee10 2a10 	vmov	r2, s0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	4629      	mov	r1, r5
 8009c80:	f7f6 fb04 	bl	800028c <__adddf3>
 8009c84:	4604      	mov	r4, r0
 8009c86:	460d      	mov	r5, r1
 8009c88:	e022      	b.n	8009cd0 <scalbn+0x98>
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009c90:	3936      	subs	r1, #54	; 0x36
 8009c92:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009c96:	4296      	cmp	r6, r2
 8009c98:	dd0d      	ble.n	8009cb6 <scalbn+0x7e>
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	a11c      	add	r1, pc, #112	; (adr r1, 8009d10 <scalbn+0xd8>)
 8009c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ca2:	da02      	bge.n	8009caa <scalbn+0x72>
 8009ca4:	a11c      	add	r1, pc, #112	; (adr r1, 8009d18 <scalbn+0xe0>)
 8009ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009caa:	a319      	add	r3, pc, #100	; (adr r3, 8009d10 <scalbn+0xd8>)
 8009cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb0:	f7f6 fca2 	bl	80005f8 <__aeabi_dmul>
 8009cb4:	e7e6      	b.n	8009c84 <scalbn+0x4c>
 8009cb6:	1872      	adds	r2, r6, r1
 8009cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009cbc:	428a      	cmp	r2, r1
 8009cbe:	dcec      	bgt.n	8009c9a <scalbn+0x62>
 8009cc0:	2a00      	cmp	r2, #0
 8009cc2:	dd08      	ble.n	8009cd6 <scalbn+0x9e>
 8009cc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ccc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009cd0:	ec45 4b10 	vmov	d0, r4, r5
 8009cd4:	bd70      	pop	{r4, r5, r6, pc}
 8009cd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009cda:	da08      	bge.n	8009cee <scalbn+0xb6>
 8009cdc:	2d00      	cmp	r5, #0
 8009cde:	a10a      	add	r1, pc, #40	; (adr r1, 8009d08 <scalbn+0xd0>)
 8009ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ce4:	dac0      	bge.n	8009c68 <scalbn+0x30>
 8009ce6:	a10e      	add	r1, pc, #56	; (adr r1, 8009d20 <scalbn+0xe8>)
 8009ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cec:	e7bc      	b.n	8009c68 <scalbn+0x30>
 8009cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009cf2:	3236      	adds	r2, #54	; 0x36
 8009cf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009cf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	4b0c      	ldr	r3, [pc, #48]	; (8009d30 <scalbn+0xf8>)
 8009d00:	2200      	movs	r2, #0
 8009d02:	e7d5      	b.n	8009cb0 <scalbn+0x78>
 8009d04:	f3af 8000 	nop.w
 8009d08:	c2f8f359 	.word	0xc2f8f359
 8009d0c:	01a56e1f 	.word	0x01a56e1f
 8009d10:	8800759c 	.word	0x8800759c
 8009d14:	7e37e43c 	.word	0x7e37e43c
 8009d18:	8800759c 	.word	0x8800759c
 8009d1c:	fe37e43c 	.word	0xfe37e43c
 8009d20:	c2f8f359 	.word	0xc2f8f359
 8009d24:	81a56e1f 	.word	0x81a56e1f
 8009d28:	43500000 	.word	0x43500000
 8009d2c:	ffff3cb0 	.word	0xffff3cb0
 8009d30:	3c900000 	.word	0x3c900000
 8009d34:	00000000 	.word	0x00000000

08009d38 <floor>:
 8009d38:	ec51 0b10 	vmov	r0, r1, d0
 8009d3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8009d48:	2e13      	cmp	r6, #19
 8009d4a:	ee10 5a10 	vmov	r5, s0
 8009d4e:	ee10 8a10 	vmov	r8, s0
 8009d52:	460c      	mov	r4, r1
 8009d54:	dc31      	bgt.n	8009dba <floor+0x82>
 8009d56:	2e00      	cmp	r6, #0
 8009d58:	da14      	bge.n	8009d84 <floor+0x4c>
 8009d5a:	a333      	add	r3, pc, #204	; (adr r3, 8009e28 <floor+0xf0>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 fa94 	bl	800028c <__adddf3>
 8009d64:	2200      	movs	r2, #0
 8009d66:	2300      	movs	r3, #0
 8009d68:	f7f6 fed6 	bl	8000b18 <__aeabi_dcmpgt>
 8009d6c:	b138      	cbz	r0, 8009d7e <floor+0x46>
 8009d6e:	2c00      	cmp	r4, #0
 8009d70:	da53      	bge.n	8009e1a <floor+0xe2>
 8009d72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8009d76:	4325      	orrs	r5, r4
 8009d78:	d052      	beq.n	8009e20 <floor+0xe8>
 8009d7a:	4c2d      	ldr	r4, [pc, #180]	; (8009e30 <floor+0xf8>)
 8009d7c:	2500      	movs	r5, #0
 8009d7e:	4621      	mov	r1, r4
 8009d80:	4628      	mov	r0, r5
 8009d82:	e024      	b.n	8009dce <floor+0x96>
 8009d84:	4f2b      	ldr	r7, [pc, #172]	; (8009e34 <floor+0xfc>)
 8009d86:	4137      	asrs	r7, r6
 8009d88:	ea01 0307 	and.w	r3, r1, r7
 8009d8c:	4303      	orrs	r3, r0
 8009d8e:	d01e      	beq.n	8009dce <floor+0x96>
 8009d90:	a325      	add	r3, pc, #148	; (adr r3, 8009e28 <floor+0xf0>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fa79 	bl	800028c <__adddf3>
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f7f6 febb 	bl	8000b18 <__aeabi_dcmpgt>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0eb      	beq.n	8009d7e <floor+0x46>
 8009da6:	2c00      	cmp	r4, #0
 8009da8:	bfbe      	ittt	lt
 8009daa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009dae:	4133      	asrlt	r3, r6
 8009db0:	18e4      	addlt	r4, r4, r3
 8009db2:	ea24 0407 	bic.w	r4, r4, r7
 8009db6:	2500      	movs	r5, #0
 8009db8:	e7e1      	b.n	8009d7e <floor+0x46>
 8009dba:	2e33      	cmp	r6, #51	; 0x33
 8009dbc:	dd0b      	ble.n	8009dd6 <floor+0x9e>
 8009dbe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009dc2:	d104      	bne.n	8009dce <floor+0x96>
 8009dc4:	ee10 2a10 	vmov	r2, s0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	f7f6 fa5f 	bl	800028c <__adddf3>
 8009dce:	ec41 0b10 	vmov	d0, r0, r1
 8009dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8009dda:	f04f 37ff 	mov.w	r7, #4294967295
 8009dde:	40df      	lsrs	r7, r3
 8009de0:	4238      	tst	r0, r7
 8009de2:	d0f4      	beq.n	8009dce <floor+0x96>
 8009de4:	a310      	add	r3, pc, #64	; (adr r3, 8009e28 <floor+0xf0>)
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	f7f6 fa4f 	bl	800028c <__adddf3>
 8009dee:	2200      	movs	r2, #0
 8009df0:	2300      	movs	r3, #0
 8009df2:	f7f6 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d0c1      	beq.n	8009d7e <floor+0x46>
 8009dfa:	2c00      	cmp	r4, #0
 8009dfc:	da0a      	bge.n	8009e14 <floor+0xdc>
 8009dfe:	2e14      	cmp	r6, #20
 8009e00:	d101      	bne.n	8009e06 <floor+0xce>
 8009e02:	3401      	adds	r4, #1
 8009e04:	e006      	b.n	8009e14 <floor+0xdc>
 8009e06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	40b3      	lsls	r3, r6
 8009e0e:	441d      	add	r5, r3
 8009e10:	45a8      	cmp	r8, r5
 8009e12:	d8f6      	bhi.n	8009e02 <floor+0xca>
 8009e14:	ea25 0507 	bic.w	r5, r5, r7
 8009e18:	e7b1      	b.n	8009d7e <floor+0x46>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	462c      	mov	r4, r5
 8009e1e:	e7ae      	b.n	8009d7e <floor+0x46>
 8009e20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009e24:	e7ab      	b.n	8009d7e <floor+0x46>
 8009e26:	bf00      	nop
 8009e28:	8800759c 	.word	0x8800759c
 8009e2c:	7e37e43c 	.word	0x7e37e43c
 8009e30:	bff00000 	.word	0xbff00000
 8009e34:	000fffff 	.word	0x000fffff

08009e38 <_init>:
 8009e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e3a:	bf00      	nop
 8009e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e3e:	bc08      	pop	{r3}
 8009e40:	469e      	mov	lr, r3
 8009e42:	4770      	bx	lr

08009e44 <_fini>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	bf00      	nop
 8009e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	469e      	mov	lr, r3
 8009e4e:	4770      	bx	lr
