
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003650  08008118  08008118  00018118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b768  0800b768  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b768  0800b768  0001b768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b770  0800b770  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b770  0800b770  0001b770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b774  0800b774  0001b774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800b778  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a34c  200001f0  0800b968  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00002204  2000a53c  0800b968  0002a53c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021122  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004941  00000000  00000000  00041385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000f005  00000000  00000000  00045cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001408  00000000  00000000  00054cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000137a  00000000  00000000  000560d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a2fc  00000000  00000000  00057452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000281ef  00000000  00000000  0008174e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb697  00000000  00000000  000a993d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004f5c  00000000  00000000  001a4fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001a9f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008100 	.word	0x08008100

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	08008100 	.word	0x08008100

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <background_init>:

static const uint8_t SPEED = 3;
static const uint8_t PIXEL_SIZE = 2;

void background_init()
{
 8000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f48:	ed2d 8b04 	vpush	{d8-d9}
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f4c:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
{
 8000f50:	b087      	sub	sp, #28
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f52:	f003 facf 	bl	80044f4 <malloc>
 8000f56:	4b51      	ldr	r3, [pc, #324]	; (800109c <background_init+0x158>)
    palette = malloc(256 * sizeof(color_t));
 8000f58:	4d51      	ldr	r5, [pc, #324]	; (80010a0 <background_init+0x15c>)
    uint8_t *ptr = plasma = malloc(DISPLAY_WIDTH * DISPLAY_HEIGHT * sizeof(uint8_t));
 8000f5a:	6018      	str	r0, [r3, #0]
 8000f5c:	4681      	mov	r9, r0
    palette = malloc(256 * sizeof(color_t));
 8000f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f62:	f003 fac7 	bl	80044f4 <malloc>
 8000f66:	2400      	movs	r4, #0
 8000f68:	6028      	str	r0, [r5, #0]

    /* Generate a continuous palette from light gray to white. */
    for (uint16_t i = 0; i < 256; i++) {
        const uint8_t brightness = i / 30;
 8000f6a:	271e      	movs	r7, #30
 8000f6c:	b2a2      	uxth	r2, r4
 8000f6e:	fbb2 f2f7 	udiv	r2, r2, r7
 8000f72:	b2d2      	uxtb	r2, r2
        palette[i] = hagl_color(brightness, brightness, brightness);
 8000f74:	4611      	mov	r1, r2
 8000f76:	4610      	mov	r0, r2
 8000f78:	682e      	ldr	r6, [r5, #0]
 8000f7a:	f003 faaa 	bl	80044d2 <hagl_color>
 8000f7e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
    for (uint16_t i = 0; i < 256; i++) {
 8000f82:	3401      	adds	r4, #1
 8000f84:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8000f88:	d1f0      	bne.n	8000f6c <background_init+0x28>

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
            /* Generate three different sinusoids. */
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f8a:	4f46      	ldr	r7, [pc, #280]	; (80010a4 <background_init+0x160>)
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 8000f8c:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80010a8 <background_init+0x164>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000f90:	f8df b118 	ldr.w	fp, [pc, #280]	; 80010ac <background_init+0x168>
 8000f94:	2400      	movs	r4, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f96:	2600      	movs	r6, #0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000f98:	f04f 0a00 	mov.w	sl, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000f9c:	ee07 4a90 	vmov	s15, r4
 8000fa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8000fa8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000fac:	f04f 0828 	mov.w	r8, #40	; 0x28
 8000fb0:	fb08 9804 	mla	r8, r8, r4, r9
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fb4:	2500      	movs	r5, #0
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000fb6:	ee17 0a90 	vmov	r0, s15
 8000fba:	f7ff fac5 	bl	8000548 <__aeabi_f2d>
 8000fbe:	ec41 0b10 	vmov	d0, r0, r1
 8000fc2:	f005 ff81 	bl	8006ec8 <sin>
 8000fc6:	4632      	mov	r2, r6
 8000fc8:	ec51 0b10 	vmov	r0, r1, d0
 8000fcc:	463b      	mov	r3, r7
 8000fce:	f7ff fb13 	bl	80005f8 <__aeabi_dmul>
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	4632      	mov	r2, r6
 8000fd6:	f7ff f959 	bl	800028c <__adddf3>
 8000fda:	f7ff fde5 	bl	8000ba8 <__aeabi_d2f>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fde:	fb04 f304 	mul.w	r3, r4, r4
            const float v2 = 128.0f + (128.0f * sin(y / 24.0f));
 8000fe2:	ee08 0a90 	vmov	s17, r0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8000fe6:	9303      	str	r3, [sp, #12]
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 8000fe8:	ee07 5a90 	vmov	s15, r5
 8000fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff0:	ee67 7a89 	vmul.f32	s15, s15, s18
 8000ff4:	ee17 0a90 	vmov	r0, s15
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	ec41 0b10 	vmov	d0, r0, r1
 8001000:	f005 ff62 	bl	8006ec8 <sin>
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001004:	9b03      	ldr	r3, [sp, #12]
 8001006:	fb05 3005 	mla	r0, r5, r5, r3
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800100a:	ed8d 0b00 	vstr	d0, [sp]
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800100e:	f7ff fa89 	bl	8000524 <__aeabi_i2d>
 8001012:	ec41 0b10 	vmov	d0, r0, r1
 8001016:	f005 ff2b 	bl	8006e70 <sqrt>
 800101a:	4652      	mov	r2, sl
 800101c:	465b      	mov	r3, fp
 800101e:	ec51 0b10 	vmov	r0, r1, d0
 8001022:	f7ff fc13 	bl	800084c <__aeabi_ddiv>
 8001026:	ec41 0b10 	vmov	d0, r0, r1
 800102a:	f005 ff4d 	bl	8006ec8 <sin>
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800102e:	4632      	mov	r2, r6
 8001030:	463b      	mov	r3, r7
 8001032:	e9dd 0100 	ldrd	r0, r1, [sp]
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 8001036:	ed8d 0b04 	vstr	d0, [sp, #16]
            const float v1 = 128.0f + (128.0f * sin(x / 32.0f));
 800103a:	f7ff fadd 	bl	80005f8 <__aeabi_dmul>
 800103e:	4632      	mov	r2, r6
 8001040:	463b      	mov	r3, r7
 8001042:	f7ff f923 	bl	800028c <__adddf3>
 8001046:	f7ff fdaf 	bl	8000ba8 <__aeabi_d2f>
            /* Calculate average of the three sinusoids */
            /* and use it as color index. */
            const uint8_t color = (v1 + v2 + v3) / 3;
 800104a:	ee07 0a90 	vmov	s15, r0
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800104e:	4632      	mov	r2, r6
 8001050:	463b      	mov	r3, r7
 8001052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
            const uint8_t color = (v1 + v2 + v3) / 3;
 8001056:	ee37 8aa8 	vadd.f32	s16, s15, s17
            const float v3 = 128.0f + (128.0f * sin(sqrt(x * x + y * y) / 24.0f));
 800105a:	f7ff facd 	bl	80005f8 <__aeabi_dmul>
 800105e:	463b      	mov	r3, r7
 8001060:	4632      	mov	r2, r6
 8001062:	f7ff f913 	bl	800028c <__adddf3>
 8001066:	f7ff fd9f 	bl	8000ba8 <__aeabi_d2f>
            const uint8_t color = (v1 + v2 + v3) / 3;
 800106a:	ee07 0a90 	vmov	s15, r0
 800106e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8001072:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001076:	eec8 7a07 	vdiv.f32	s15, s16, s14
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800107a:	3502      	adds	r5, #2
 800107c:	2da0      	cmp	r5, #160	; 0xa0
            const uint8_t color = (v1 + v2 + v3) / 3;
 800107e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001082:	ee17 3a90 	vmov	r3, s15
 8001086:	f808 3b01 	strb.w	r3, [r8], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 800108a:	d1ad      	bne.n	8000fe8 <background_init+0xa4>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 800108c:	3402      	adds	r4, #2
 800108e:	2c80      	cmp	r4, #128	; 0x80
 8001090:	d184      	bne.n	8000f9c <background_init+0x58>
            *(ptr++) = color;
        }
    }
}
 8001092:	b007      	add	sp, #28
 8001094:	ecbd 8b04 	vpop	{d8-d9}
 8001098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800109c:	20000210 	.word	0x20000210
 80010a0:	2000020c 	.word	0x2000020c
 80010a4:	40600000 	.word	0x40600000
 80010a8:	3d000000 	.word	0x3d000000
 80010ac:	40380000 	.word	0x40380000

080010b0 <background_render>:


void background_render()
{
    uint8_t *ptr = plasma;
 80010b0:	4b13      	ldr	r3, [pc, #76]	; (8001100 <background_render+0x50>)
{
 80010b2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    uint8_t *ptr = plasma;
 80010b6:	f8d3 8000 	ldr.w	r8, [r3]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
            /* Get a color for pixel from the plasma buffer. */
            const uint8_t index = *(ptr++);
            const color_t color = palette[index];
 80010ba:	f8df a048 	ldr.w	sl, [pc, #72]	; 8001104 <background_render+0x54>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010be:	2400      	movs	r4, #0
            /* Put a pixel to the display. */
            if (1 == PIXEL_SIZE) {
                hagl_put_pixel(x, y, color);
            } else {
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010c0:	1c66      	adds	r6, r4, #1
{
 80010c2:	46c1      	mov	r9, r8
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010c4:	2500      	movs	r5, #0
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010c6:	b236      	sxth	r6, r6
 80010c8:	b227      	sxth	r7, r4
            const color_t color = palette[index];
 80010ca:	f819 1b01 	ldrb.w	r1, [r9], #1
 80010ce:	f8da 3000 	ldr.w	r3, [sl]
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010d2:	1c6a      	adds	r2, r5, #1
 80010d4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	b228      	sxth	r0, r5
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010dc:	3502      	adds	r5, #2
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010de:	4633      	mov	r3, r6
 80010e0:	b212      	sxth	r2, r2
 80010e2:	4639      	mov	r1, r7
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010e4:	b2ad      	uxth	r5, r5
                hagl_fill_rectangle(x, y, x + PIXEL_SIZE - 1, y + PIXEL_SIZE - 1, color);
 80010e6:	f003 f909 	bl	80042fc <hagl_fill_rectangle>
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x += PIXEL_SIZE) {
 80010ea:	2da0      	cmp	r5, #160	; 0xa0
 80010ec:	d1ed      	bne.n	80010ca <background_render+0x1a>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010ee:	3402      	adds	r4, #2
 80010f0:	b2a4      	uxth	r4, r4
 80010f2:	2c80      	cmp	r4, #128	; 0x80
            const uint8_t index = *(ptr++);
 80010f4:	f108 0850 	add.w	r8, r8, #80	; 0x50
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y += PIXEL_SIZE) {
 80010f8:	d1e2      	bne.n	80010c0 <background_render+0x10>
            }
        }
    }
}
 80010fa:	b002      	add	sp, #8
 80010fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001100:	20000210 	.word	0x20000210
 8001104:	2000020c 	.word	0x2000020c

08001108 <background_animate>:

void background_animate()
{
    uint8_t *ptr = plasma;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <background_animate+0x20>)
 800110a:	681b      	ldr	r3, [r3, #0]

    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 800110c:	f503 50a0 	add.w	r0, r3, #5120	; 0x1400
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 8001110:	f103 0150 	add.w	r1, r3, #80	; 0x50
                /* Get a color from plasma and choose the next color. */
                /* Unsigned integers wrap automatically. */
                const uint8_t index = *ptr + SPEED;
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	3203      	adds	r2, #3
                /* Put the new color back to the plasma buffer. */
                *(ptr++) = index;
 8001118:	f803 2b01 	strb.w	r2, [r3], #1
        for (uint16_t x = 0; x < DISPLAY_WIDTH; x = x + PIXEL_SIZE) {
 800111c:	428b      	cmp	r3, r1
 800111e:	d1f9      	bne.n	8001114 <background_animate+0xc>
    for (uint16_t y = 0; y < DISPLAY_HEIGHT; y = y + PIXEL_SIZE) {
 8001120:	4298      	cmp	r0, r3
 8001122:	d1f5      	bne.n	8001110 <background_animate+0x8>
        }
    }
}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000210 	.word	0x20000210

0800112c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <MX_DMA_Init+0x2c>)
{
 800112e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001132:	f042 0201 	orr.w	r2, r2, #1
 8001136:	649a      	str	r2, [r3, #72]	; 0x48
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800113a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001142:	4611      	mov	r1, r2
 8001144:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001148:	f000 fc92 	bl	8001a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800114c:	200f      	movs	r0, #15

}
 800114e:	b003      	add	sp, #12
 8001150:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001154:	f000 bcbe 	b.w	8001ad4 <HAL_NVIC_EnableIRQ>
 8001158:	40021000 	.word	0x40021000

0800115c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800115c:	b500      	push	{lr}
 800115e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	2214      	movs	r2, #20
 8001162:	2100      	movs	r1, #0
 8001164:	a803      	add	r0, sp, #12
 8001166:	f004 f892 	bl	800528e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <MX_GPIO_Init+0x7c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <MX_GPIO_Init+0x80>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001170:	f042 0204 	orr.w	r2, r2, #4
 8001174:	64da      	str	r2, [r3, #76]	; 0x4c
 8001176:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001178:	f002 0204 	and.w	r2, r2, #4
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001182:	f042 0201 	orr.w	r2, r2, #1
 8001186:	64da      	str	r2, [r3, #76]	; 0x4c
 8001188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800118a:	f002 0201 	and.w	r2, r2, #1
 800118e:	9201      	str	r2, [sp, #4]
 8001190:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001194:	f042 0202 	orr.w	r2, r2, #2
 8001198:	64da      	str	r2, [r3, #76]	; 0x4c
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f640 0104 	movw	r1, #2052	; 0x804
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80011aa:	f000 fe85 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <MX_GPIO_Init+0x80>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011b6:	f000 fe7f 	bl	8001eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	f641 0204 	movw	r2, #6148	; 0x1804
 80011be:	2301      	movs	r3, #1
 80011c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_GPIO_Init+0x80>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	e9cd 3305 	strd	r3, r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f000 fd95 	bl	8001cfc <HAL_GPIO_Init>

}
 80011d2:	b009      	add	sp, #36	; 0x24
 80011d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011e0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e2:	4812      	ldr	r0, [pc, #72]	; (800122c <MX_I2C1_Init+0x4c>)
  hi2c1.Init.Timing = 0x10909CEC;
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <MX_I2C1_Init+0x50>)
 80011e6:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_I2C1_Init+0x54>)
 80011e8:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	2201      	movs	r2, #1
 80011f0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
 80011f4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fe:	f000 fe60 	bl	8001ec2 <HAL_I2C_Init>
 8001202:	b108      	cbz	r0, 8001208 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
 8001204:	f000 f996 	bl	8001534 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001208:	4808      	ldr	r0, [pc, #32]	; (800122c <MX_I2C1_Init+0x4c>)
 800120a:	2100      	movs	r1, #0
 800120c:	f000 feae 	bl	8001f6c <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	b108      	cbz	r0, 8001216 <MX_I2C1_Init+0x36>
  {
    Error_Handler();
 8001212:	f000 f98f 	bl	8001534 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_I2C1_Init+0x4c>)
 8001218:	2100      	movs	r1, #0
 800121a:	f000 fecd 	bl	8001fb8 <HAL_I2CEx_ConfigDigitalFilter>
 800121e:	b118      	cbz	r0, 8001228 <MX_I2C1_Init+0x48>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001220:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001224:	f000 b986 	b.w	8001534 <Error_Handler>
}
 8001228:	bd08      	pop	{r3, pc}
 800122a:	bf00      	nop
 800122c:	20000214 	.word	0x20000214
 8001230:	40005400 	.word	0x40005400
 8001234:	10909cec 	.word	0x10909cec

08001238 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001238:	b510      	push	{r4, lr}
 800123a:	b0aa      	sub	sp, #168	; 0xa8
 800123c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	2214      	movs	r2, #20
 8001240:	2100      	movs	r1, #0
 8001242:	a803      	add	r0, sp, #12
 8001244:	f004 f823 	bl	800528e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	2288      	movs	r2, #136	; 0x88
 800124a:	2100      	movs	r1, #0
 800124c:	a808      	add	r0, sp, #32
 800124e:	f004 f81e 	bl	800528e <memset>
  if(i2cHandle->Instance==I2C1)
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <HAL_I2C_MspInit+0x78>)
 8001256:	429a      	cmp	r2, r3
 8001258:	d128      	bne.n	80012ac <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125a:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800125e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001260:	f001 fbee 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	b108      	cbz	r0, 800126a <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 8001266:	f000 f965 	bl	8001534 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4c12      	ldr	r4, [pc, #72]	; (80012b4 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001276:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001280:	22c0      	movs	r2, #192	; 0xc0
 8001282:	2312      	movs	r3, #18
 8001284:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2100      	movs	r1, #0
 800128a:	2303      	movs	r3, #3
 800128c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001290:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001294:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f000 fd31 	bl	8001cfc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800129a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800129c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80012a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012ac:	b02a      	add	sp, #168	; 0xa8
 80012ae:	bd10      	pop	{r4, pc}
 80012b0:	40005400 	.word	0x40005400
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000400 	.word	0x48000400

080012bc <lcd_data>:
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

static void lcd_data(uint8_t data)
{
 80012bc:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80012be:	4c0f      	ldr	r4, [pc, #60]	; (80012fc <lcd_data+0x40>)
{
 80012c0:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80012c4:	2201      	movs	r2, #1
 80012c6:	4620      	mov	r0, r4
 80012c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012cc:	f000 fdf4 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80012d0:	4620      	mov	r0, r4
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d8:	f000 fdee 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	f10d 0107 	add.w	r1, sp, #7
 80012e4:	2201      	movs	r2, #1
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <lcd_data+0x44>)
 80012e8:	f001 fed9 	bl	800309e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80012ec:	2201      	movs	r2, #1
 80012ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f2:	4620      	mov	r0, r4
 80012f4:	f000 fde0 	bl	8001eb8 <HAL_GPIO_WritePin>
}
 80012f8:	b002      	add	sp, #8
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	48000400 	.word	0x48000400
 8001300:	2000a2b0 	.word	0x2000a2b0

08001304 <lcd_data16>:
  CMD(ST7735S_COLMOD), 0x05,
  CMD(ST7735S_MADCTL), 0xa0,
};

static void lcd_data16(uint16_t value)
{
 8001304:	b510      	push	{r4, lr}
 8001306:	4604      	mov	r4, r0
	lcd_data(value >> 8);
 8001308:	0a00      	lsrs	r0, r0, #8
 800130a:	f7ff ffd7 	bl	80012bc <lcd_data>
	lcd_data(value);
 800130e:	b2e0      	uxtb	r0, r4
}
 8001310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lcd_data(value);
 8001314:	f7ff bfd2 	b.w	80012bc <lcd_data>

08001318 <lcd_cmd>:
{
 8001318:	b513      	push	{r0, r1, r4, lr}
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800131a:	4c0f      	ldr	r4, [pc, #60]	; (8001358 <lcd_cmd+0x40>)
{
 800131c:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	4620      	mov	r0, r4
 8001324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001328:	f000 fdc6 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800132c:	4620      	mov	r0, r4
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001334:	f000 fdc0 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	f10d 0107 	add.w	r1, sp, #7
 8001340:	2201      	movs	r2, #1
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <lcd_cmd+0x44>)
 8001344:	f001 feab 	bl	800309e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	4620      	mov	r0, r4
 8001350:	f000 fdb2 	bl	8001eb8 <HAL_GPIO_WritePin>
}
 8001354:	b002      	add	sp, #8
 8001356:	bd10      	pop	{r4, pc}
 8001358:	48000400 	.word	0x48000400
 800135c:	2000a2b0 	.word	0x2000a2b0

08001360 <lcd_init>:
}

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_init(void)
{
 8001360:	b538      	push	{r3, r4, r5, lr}
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2104      	movs	r1, #4
 8001366:	4815      	ldr	r0, [pc, #84]	; (80013bc <lcd_init+0x5c>)
 8001368:	4d15      	ldr	r5, [pc, #84]	; (80013c0 <lcd_init+0x60>)
 800136a:	f000 fda5 	bl	8001eb8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	; 0x64
 8001370:	f000 fb58 	bl	8001a24 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <lcd_init+0x5c>)
 8001376:	2201      	movs	r2, #1
 8001378:	2104      	movs	r1, #4
 800137a:	f000 fd9d 	bl	8001eb8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800137e:	2064      	movs	r0, #100	; 0x64
 8001380:	f000 fb50 	bl	8001a24 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001384:	2400      	movs	r4, #0
    lcd_send(init_table[i]);
 8001386:	f835 3b02 	ldrh.w	r3, [r5], #2
		lcd_cmd(value);
 800138a:	b2d8      	uxtb	r0, r3
	if (value & 0x100) {
 800138c:	05db      	lsls	r3, r3, #23
 800138e:	d512      	bpl.n	80013b6 <lcd_init+0x56>
		lcd_cmd(value);
 8001390:	f7ff ffc2 	bl	8001318 <lcd_cmd>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001394:	3401      	adds	r4, #1
 8001396:	2c4c      	cmp	r4, #76	; 0x4c
 8001398:	d1f5      	bne.n	8001386 <lcd_init+0x26>
  }

  HAL_Delay(200);
 800139a:	20c8      	movs	r0, #200	; 0xc8
 800139c:	f000 fb42 	bl	8001a24 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 80013a0:	2011      	movs	r0, #17
 80013a2:	f7ff ffb9 	bl	8001318 <lcd_cmd>
  HAL_Delay(120);
 80013a6:	2078      	movs	r0, #120	; 0x78
 80013a8:	f000 fb3c 	bl	8001a24 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
}
 80013ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  lcd_cmd(ST7735S_DISPON);
 80013b0:	2029      	movs	r0, #41	; 0x29
 80013b2:	f7ff bfb1 	b.w	8001318 <lcd_cmd>
		lcd_data(value);
 80013b6:	f7ff ff81 	bl	80012bc <lcd_data>
 80013ba:	e7eb      	b.n	8001394 <lcd_init+0x34>
 80013bc:	48000400 	.word	0x48000400
 80013c0:	08008118 	.word	0x08008118

080013c4 <lcd_put_pixel>:


void lcd_put_pixel(int x, int y, uint16_t color)
{
	frame_buffer[x + y * LCD_WIDTH] = color;
 80013c4:	23a0      	movs	r3, #160	; 0xa0
 80013c6:	fb03 0101 	mla	r1, r3, r1, r0
 80013ca:	4b02      	ldr	r3, [pc, #8]	; (80013d4 <lcd_put_pixel+0x10>)
 80013cc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000268 	.word	0x20000268

080013d8 <lcd_copy>:

void lcd_copy(void)
{
 80013d8:	b508      	push	{r3, lr}
  lcd_cmd(ST7735S_CASET);
 80013da:	202a      	movs	r0, #42	; 0x2a
 80013dc:	f7ff ff9c 	bl	8001318 <lcd_cmd>
  lcd_data16(LCD_OFFSET_X + x);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff ff8f 	bl	8001304 <lcd_data16>
  lcd_data16(LCD_OFFSET_X + x + width - 1);
 80013e6:	20a0      	movs	r0, #160	; 0xa0
 80013e8:	f7ff ff8c 	bl	8001304 <lcd_data16>
  lcd_cmd(ST7735S_RASET);
 80013ec:	202b      	movs	r0, #43	; 0x2b
 80013ee:	f7ff ff93 	bl	8001318 <lcd_cmd>
  lcd_data16(LCD_OFFSET_Y + y);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ff86 	bl	8001304 <lcd_data16>
  lcd_data16(LCD_OFFSET_Y + y + height- 1);
 80013f8:	2081      	movs	r0, #129	; 0x81
 80013fa:	f7ff ff83 	bl	8001304 <lcd_data16>
	lcd_set_window(0, 0, LCD_WIDTH, LCD_HEIGHT);
	lcd_cmd(ST7735S_RAMWR);
 80013fe:	202c      	movs	r0, #44	; 0x2c
 8001400:	f7ff ff8a 	bl	8001318 <lcd_cmd>
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <lcd_copy+0x54>)
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140c:	f000 fd54 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001410:	4806      	ldr	r0, [pc, #24]	; (800142c <lcd_copy+0x54>)
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001418:	f000 fd4e 	bl	8001eb8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
}
 800141c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)frame_buffer, sizeof(frame_buffer));
 8001420:	4903      	ldr	r1, [pc, #12]	; (8001430 <lcd_copy+0x58>)
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <lcd_copy+0x5c>)
 8001424:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8001428:	f001 bf04 	b.w	8003234 <HAL_SPI_Transmit_DMA>
 800142c:	48000400 	.word	0x48000400
 8001430:	20000268 	.word	0x20000268
 8001434:	2000a2b0 	.word	0x2000a2b0

08001438 <lcd_is_busy>:
{
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
}

bool lcd_is_busy(void)
{
 8001438:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_BUSY)
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <lcd_is_busy+0x10>)
 800143c:	f001 ffca 	bl	80033d4 <HAL_SPI_GetState>
		return true;
	else
		return false;
}
 8001440:	1e83      	subs	r3, r0, #2
 8001442:	4258      	negs	r0, r3
 8001444:	4158      	adcs	r0, r3
 8001446:	bd08      	pop	{r3, pc}
 8001448:	2000a2b0 	.word	0x2000a2b0

0800144c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800144c:	b500      	push	{lr}
 800144e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001450:	2244      	movs	r2, #68	; 0x44
 8001452:	2100      	movs	r1, #0
 8001454:	a805      	add	r0, sp, #20
 8001456:	f003 ff1a 	bl	800528e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145a:	2214      	movs	r2, #20
 800145c:	2100      	movs	r1, #0
 800145e:	4668      	mov	r0, sp
 8001460:	f003 ff15 	bl	800528e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001464:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001468:	f000 fdd4 	bl	8002014 <HAL_PWREx_ControlVoltageScaling>
 800146c:	b108      	cbz	r0, 8001472 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	e7fe      	b.n	8001470 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001472:	2310      	movs	r3, #16
 8001474:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001476:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001478:	2201      	movs	r2, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800147a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147c:	2302      	movs	r3, #2
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800147e:	e9cd 200b 	strd	r2, r0, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001482:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001486:	2028      	movs	r0, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001488:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800148a:	2207      	movs	r2, #7
 800148c:	e9cd 0212 	strd	r0, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001490:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001492:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001496:	f000 fe83 	bl	80021a0 <HAL_RCC_OscConfig>
 800149a:	b108      	cbz	r0, 80014a0 <SystemClock_Config+0x54>
 800149c:	b672      	cpsid	i
  while (1)
 800149e:	e7fe      	b.n	800149e <SystemClock_Config+0x52>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a0:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014a4:	220f      	movs	r2, #15
 80014a6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a8:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014aa:	2104      	movs	r1, #4
 80014ac:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ae:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014b2:	f001 f8f5 	bl	80026a0 <HAL_RCC_ClockConfig>
 80014b6:	b108      	cbz	r0, 80014bc <SystemClock_Config+0x70>
 80014b8:	b672      	cpsid	i
  while (1)
 80014ba:	e7fe      	b.n	80014ba <SystemClock_Config+0x6e>
}
 80014bc:	b017      	add	sp, #92	; 0x5c
 80014be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080014c4 <main>:
{
 80014c4:	b507      	push	{r0, r1, r2, lr}
  HAL_Init();
 80014c6:	f000 fa8b 	bl	80019e0 <HAL_Init>
  SystemClock_Config();
 80014ca:	f7ff ffbf 	bl	800144c <SystemClock_Config>
  MX_GPIO_Init();
 80014ce:	f7ff fe45 	bl	800115c <MX_GPIO_Init>
  MX_DMA_Init();
 80014d2:	f7ff fe2b 	bl	800112c <MX_DMA_Init>
  MX_SPI2_Init();
 80014d6:	f000 f82f 	bl	8001538 <MX_SPI2_Init>
  MX_I2C1_Init();
 80014da:	f7ff fe81 	bl	80011e0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80014de:	f000 f9cb 	bl	8001878 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80014e2:	f000 f93d 	bl	8001760 <MX_TIM2_Init>
  lcd_init();
 80014e6:	f7ff ff3b 	bl	8001360 <lcd_init>
  background_init();
 80014ea:	f7ff fd2b 	bl	8000f44 <background_init>
	  hagl_put_text(L"Temperatura", 10, 5, WHITE, font6x9);
 80014ee:	4c0e      	ldr	r4, [pc, #56]	; (8001528 <main+0x64>)
 80014f0:	4d0e      	ldr	r5, [pc, #56]	; (800152c <main+0x68>)
	  background_animate();
 80014f2:	f7ff fe09 	bl	8001108 <background_animate>
	  hagl_put_text(L"Temperatura", 10, 5, WHITE, font6x9);
 80014f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fa:	2205      	movs	r2, #5
 80014fc:	210a      	movs	r1, #10
 80014fe:	9400      	str	r4, [sp, #0]
 8001500:	4628      	mov	r0, r5
 8001502:	f002 ffb8 	bl	8004476 <hagl_put_text>
	  hagl_put_text(L"wewnętrzna", 13, 15, WHITE, font6x9);
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <main+0x6c>)
 8001508:	9400      	str	r4, [sp, #0]
 800150a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800150e:	220f      	movs	r2, #15
 8001510:	210d      	movs	r1, #13
 8001512:	f002 ffb0 	bl	8004476 <hagl_put_text>
	  while (lcd_is_busy()) {}
 8001516:	f7ff ff8f 	bl	8001438 <lcd_is_busy>
 800151a:	2800      	cmp	r0, #0
 800151c:	d1fb      	bne.n	8001516 <main+0x52>
	  background_render();
 800151e:	f7ff fdc7 	bl	80010b0 <background_render>
	  lcd_copy();
 8001522:	f7ff ff59 	bl	80013d8 <lcd_copy>
  {
 8001526:	e7e4      	b.n	80014f2 <main+0x2e>
 8001528:	0800820c 	.word	0x0800820c
 800152c:	080081b0 	.word	0x080081b0
 8001530:	080081e0 	.word	0x080081e0

08001534 <Error_Handler>:
 8001534:	b672      	cpsid	i
  while (1)
 8001536:	e7fe      	b.n	8001536 <Error_Handler+0x2>

08001538 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_SPI2_Init+0x44>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <MX_SPI2_Init+0x48>)
{
 800153c:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800153e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001542:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001546:	2300      	movs	r3, #0
 8001548:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800154c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001554:	2210      	movs	r2, #16
 8001556:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 800155a:	2207      	movs	r2, #7
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001560:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001564:	e9c0 230b 	strd	r2, r3, [r0, #44]	; 0x2c
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800156a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800156c:	f001 fd2d 	bl	8002fca <HAL_SPI_Init>
 8001570:	b118      	cbz	r0, 800157a <MX_SPI2_Init+0x42>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001576:	f7ff bfdd 	b.w	8001534 <Error_Handler>
}
 800157a:	bd08      	pop	{r3, pc}
 800157c:	2000a2b0 	.word	0x2000a2b0
 8001580:	40003800 	.word	0x40003800

08001584 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4606      	mov	r6, r0
 8001588:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	2214      	movs	r2, #20
 800158c:	2100      	movs	r1, #0
 800158e:	a803      	add	r0, sp, #12
 8001590:	f003 fe7d 	bl	800528e <memset>
  if(spiHandle->Instance==SPI2)
 8001594:	6832      	ldr	r2, [r6, #0]
 8001596:	4b28      	ldr	r3, [pc, #160]	; (8001638 <HAL_SPI_MspInit+0xb4>)
 8001598:	429a      	cmp	r2, r3
 800159a:	d14a      	bne.n	8001632 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800159c:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2502      	movs	r5, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a4:	4825      	ldr	r0, [pc, #148]	; (800163c <HAL_SPI_MspInit+0xb8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
 80015ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015ae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015b8:	f042 0204 	orr.w	r2, r2, #4
 80015bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80015be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c0:	f002 0204 	and.w	r2, r2, #4
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ca:	f042 0202 	orr.w	r2, r2, #2
 80015ce:	64da      	str	r2, [r3, #76]	; 0x4c
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015d8:	2405      	movs	r4, #5
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e6:	e9cd 7406 	strd	r7, r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	f000 fb87 	bl	8001cfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	4812      	ldr	r0, [pc, #72]	; (8001640 <HAL_SPI_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015f8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	a903      	add	r1, sp, #12

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80015fe:	4c11      	ldr	r4, [pc, #68]	; (8001644 <HAL_SPI_MspInit+0xc0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f000 fb7a 	bl	8001cfc <HAL_GPIO_Init>
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8001608:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <HAL_SPI_MspInit+0xc4>)
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800160a:	6225      	str	r5, [r4, #32]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800160c:	2301      	movs	r3, #1
 800160e:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001612:	2310      	movs	r3, #16
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001614:	e9c4 3502 	strd	r3, r5, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001618:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800161a:	2380      	movs	r3, #128	; 0x80
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	e9c4 3504 	strd	r3, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001620:	e9c4 5506 	strd	r5, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001624:	f000 fa78 	bl	8001b18 <HAL_DMA_Init>
 8001628:	b108      	cbz	r0, 800162e <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800162a:	f7ff ff83 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 800162e:	6574      	str	r4, [r6, #84]	; 0x54
 8001630:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001632:	b009      	add	sp, #36	; 0x24
 8001634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001636:	bf00      	nop
 8001638:	40003800 	.word	0x40003800
 800163c:	48000800 	.word	0x48000800
 8001640:	48000400 	.word	0x48000400
 8001644:	2000a268 	.word	0x2000a268
 8001648:	40020058 	.word	0x40020058

0800164c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_MspInit+0x2c>)
 800164e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	661a      	str	r2, [r3, #96]	; 0x60
 8001656:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001658:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	f002 0201 	and.w	r2, r2, #1
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001668:	659a      	str	r2, [r3, #88]	; 0x58
 800166a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001674:	b002      	add	sp, #8
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000

0800167c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler>

0800167e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler>

08001680 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler>

08001682 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler>

08001684 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler>

08001686 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 b9b8 	b.w	8001a00 <HAL_IncTick>

08001690 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001690:	4801      	ldr	r0, [pc, #4]	; (8001698 <DMA1_Channel5_IRQHandler+0x8>)
 8001692:	f000 bae8 	b.w	8001c66 <HAL_DMA_IRQHandler>
 8001696:	bf00      	nop
 8001698:	2000a268 	.word	0x2000a268

0800169c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800169c:	2001      	movs	r0, #1
 800169e:	4770      	bx	lr

080016a0 <_kill>:

int _kill(int pid, int sig)
{
 80016a0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a2:	f003 fe57 	bl	8005354 <__errno>
 80016a6:	2316      	movs	r3, #22
 80016a8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80016aa:	f04f 30ff 	mov.w	r0, #4294967295
 80016ae:	bd08      	pop	{r3, pc}

080016b0 <_exit>:

void _exit (int status)
{
 80016b0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80016b2:	f003 fe4f 	bl	8005354 <__errno>
 80016b6:	2316      	movs	r3, #22
 80016b8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0xa>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b570      	push	{r4, r5, r6, lr}
 80016be:	460d      	mov	r5, r1
 80016c0:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	460e      	mov	r6, r1
 80016c4:	1b73      	subs	r3, r6, r5
 80016c6:	429c      	cmp	r4, r3
 80016c8:	dc01      	bgt.n	80016ce <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80016ca:	4620      	mov	r0, r4
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	e7f5      	b.n	80016c4 <_read+0x8>

080016d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d8:	b570      	push	{r4, r5, r6, lr}
 80016da:	460d      	mov	r5, r1
 80016dc:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	460e      	mov	r6, r1
 80016e0:	1b73      	subs	r3, r6, r5
 80016e2:	429c      	cmp	r4, r3
 80016e4:	dc01      	bgt.n	80016ea <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 80016e6:	4620      	mov	r0, r4
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 80016ea:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	e7f5      	b.n	80016e0 <_write+0x8>

080016f4 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	4770      	bx	lr

080016fa <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80016fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fe:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001700:	2000      	movs	r0, #0
 8001702:	4770      	bx	lr

08001704 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001704:	2001      	movs	r0, #1
 8001706:	4770      	bx	lr

08001708 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001708:	2000      	movs	r0, #0
 800170a:	4770      	bx	lr

0800170c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4a0b      	ldr	r2, [pc, #44]	; (800173c <_sbrk+0x30>)
 800170e:	6811      	ldr	r1, [r2, #0]
{
 8001710:	b510      	push	{r4, lr}
 8001712:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001714:	b909      	cbnz	r1, 800171a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001716:	490a      	ldr	r1, [pc, #40]	; (8001740 <_sbrk+0x34>)
 8001718:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	6810      	ldr	r0, [r2, #0]
 800171c:	4909      	ldr	r1, [pc, #36]	; (8001744 <_sbrk+0x38>)
 800171e:	4c0a      	ldr	r4, [pc, #40]	; (8001748 <_sbrk+0x3c>)
 8001720:	4403      	add	r3, r0
 8001722:	1b09      	subs	r1, r1, r4
 8001724:	428b      	cmp	r3, r1
 8001726:	d906      	bls.n	8001736 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001728:	f003 fe14 	bl	8005354 <__errno>
 800172c:	230c      	movs	r3, #12
 800172e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001730:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001734:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001736:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001738:	e7fc      	b.n	8001734 <_sbrk+0x28>
 800173a:	bf00      	nop
 800173c:	2000a314 	.word	0x2000a314
 8001740:	2000a540 	.word	0x2000a540
 8001744:	20018000 	.word	0x20018000
 8001748:	00002000 	.word	0x00002000

0800174c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800174c:	4a03      	ldr	r2, [pc, #12]	; (800175c <SystemInit+0x10>)
 800174e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001752:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001756:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001760:	b510      	push	{r4, lr}
 8001762:	b090      	sub	sp, #64	; 0x40

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001764:	2210      	movs	r2, #16
 8001766:	2100      	movs	r1, #0
 8001768:	a803      	add	r0, sp, #12
 800176a:	f003 fd90 	bl	800528e <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	2400      	movs	r4, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001770:	2214      	movs	r2, #20
 8001772:	2100      	movs	r1, #0
 8001774:	a80b      	add	r0, sp, #44	; 0x2c
 8001776:	f003 fd8a 	bl	800528e <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800177a:	2210      	movs	r2, #16
 800177c:	4621      	mov	r1, r4
 800177e:	a807      	add	r0, sp, #28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	e9cd 4400 	strd	r4, r4, [sp]
 8001784:	9402      	str	r4, [sp, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001786:	f003 fd82 	bl	800528e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178a:	4824      	ldr	r0, [pc, #144]	; (800181c <MX_TIM2_Init+0xbc>)
  htim2.Init.Prescaler = 79;
 800178c:	234f      	movs	r3, #79	; 0x4f
 800178e:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 8001792:	e9c0 c300 	strd	ip, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4294967295;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179a:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	6084      	str	r4, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017a2:	f001 fe81 	bl	80034a8 <HAL_TIM_Base_Init>
 80017a6:	b108      	cbz	r0, 80017ac <MX_TIM2_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f7ff fec4 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b0:	481a      	ldr	r0, [pc, #104]	; (800181c <MX_TIM2_Init+0xbc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b2:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b4:	a903      	add	r1, sp, #12
 80017b6:	f001 ffad 	bl	8003714 <HAL_TIM_ConfigClockSource>
 80017ba:	b108      	cbz	r0, 80017c0 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 80017bc:	f7ff feba 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017c0:	4816      	ldr	r0, [pc, #88]	; (800181c <MX_TIM2_Init+0xbc>)
 80017c2:	f001 fea1 	bl	8003508 <HAL_TIM_IC_Init>
 80017c6:	b108      	cbz	r0, 80017cc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80017c8:	f7ff feb4 	bl	8001534 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80017cc:	2104      	movs	r1, #4
 80017ce:	2340      	movs	r3, #64	; 0x40
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d0:	2400      	movs	r4, #0
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80017d2:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017d6:	4811      	ldr	r0, [pc, #68]	; (800181c <MX_TIM2_Init+0xbc>)
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017da:	a90b      	add	r1, sp, #44	; 0x2c
  sSlaveConfig.TriggerFilter = 0;
 80017dc:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80017de:	f002 f895 	bl	800390c <HAL_TIM_SlaveConfigSynchro>
 80017e2:	b108      	cbz	r0, 80017e8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80017e4:	f7ff fea6 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e8:	480c      	ldr	r0, [pc, #48]	; (800181c <MX_TIM2_Init+0xbc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	9400      	str	r4, [sp, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ec:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f0:	f002 f8b4 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 80017f4:	b108      	cbz	r0, 80017fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017f6:	f7ff fe9d 	bl	8001534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017fa:	2202      	movs	r2, #2
 80017fc:	2301      	movs	r3, #1
 80017fe:	e9cd 2307 	strd	r2, r3, [sp, #28]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 0;
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001802:	4806      	ldr	r0, [pc, #24]	; (800181c <MX_TIM2_Init+0xbc>)
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001804:	2200      	movs	r2, #0
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	a907      	add	r1, sp, #28
  sConfigIC.ICFilter = 0;
 8001808:	e9cd 2209 	strd	r2, r2, [sp, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800180c:	f001 fee2 	bl	80035d4 <HAL_TIM_IC_ConfigChannel>
 8001810:	b108      	cbz	r0, 8001816 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001812:	f7ff fe8f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001816:	b010      	add	sp, #64	; 0x40
 8001818:	bd10      	pop	{r4, pc}
 800181a:	bf00      	nop
 800181c:	2000a318 	.word	0x2000a318

08001820 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001820:	b510      	push	{r4, lr}
 8001822:	4604      	mov	r4, r0
 8001824:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001826:	2214      	movs	r2, #20
 8001828:	2100      	movs	r1, #0
 800182a:	a803      	add	r0, sp, #12
 800182c:	f003 fd2f 	bl	800528e <memset>
  if(tim_baseHandle->Instance==TIM2)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001836:	d11d      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x54>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001838:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 800183e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
 8001846:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001848:	f002 0201 	and.w	r2, r2, #1
 800184c:	9201      	str	r2, [sp, #4]
 800184e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	64da      	str	r2, [r3, #76]	; 0x4c
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2202      	movs	r2, #2
 8001864:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	e9cd 3203 	strd	r3, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f000 fa44 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001874:	b008      	add	sp, #32
 8001876:	bd10      	pop	{r4, pc}

08001878 <MX_USART3_UART_Init>:
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001878:	480e      	ldr	r0, [pc, #56]	; (80018b4 <MX_USART3_UART_Init+0x3c>)
  huart3.Init.BaudRate = 9600;
 800187a:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <MX_USART3_UART_Init+0x40>)
{
 800187c:	b508      	push	{r3, lr}
  huart3.Init.BaudRate = 9600;
 800187e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001882:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001888:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 800188a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800188e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001892:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001896:	6103      	str	r3, [r0, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001898:	2310      	movs	r3, #16
 800189a:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_HalfDuplex_Init(&huart3) != HAL_OK)
 80018a2:	f002 fafd 	bl	8003ea0 <HAL_HalfDuplex_Init>
 80018a6:	b118      	cbz	r0, 80018b0 <MX_USART3_UART_Init+0x38>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018ac:	f7ff be42 	b.w	8001534 <Error_Handler>
}
 80018b0:	bd08      	pop	{r3, pc}
 80018b2:	bf00      	nop
 80018b4:	2000a364 	.word	0x2000a364
 80018b8:	40004800 	.word	0x40004800

080018bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018bc:	b510      	push	{r4, lr}
 80018be:	b0aa      	sub	sp, #168	; 0xa8
 80018c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	2214      	movs	r2, #20
 80018c4:	2100      	movs	r1, #0
 80018c6:	a803      	add	r0, sp, #12
 80018c8:	f003 fce1 	bl	800528e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018cc:	2288      	movs	r2, #136	; 0x88
 80018ce:	2100      	movs	r1, #0
 80018d0:	a808      	add	r0, sp, #32
 80018d2:	f003 fcdc 	bl	800528e <memset>
  if(uartHandle->Instance==USART3)
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_UART_MspInit+0x78>)
 80018da:	429a      	cmp	r2, r3
 80018dc:	d128      	bne.n	8001930 <HAL_UART_MspInit+0x74>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018de:	2304      	movs	r3, #4
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e2:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e4:	f001 f8ac 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 80018e8:	b108      	cbz	r0, 80018ee <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80018ea:	f7ff fe23 	bl	8001534 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018f8:	659a      	str	r2, [r3, #88]	; 0x58
 80018fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018fc:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001906:	f042 0204 	orr.w	r2, r2, #4
 800190a:	64da      	str	r2, [r3, #76]	; 0x4c
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001916:	2210      	movs	r2, #16
 8001918:	2312      	movs	r3, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2101      	movs	r1, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001926:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800192a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800192c:	f000 f9e6 	bl	8001cfc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001930:	b02a      	add	sp, #168	; 0xa8
 8001932:	bd10      	pop	{r4, pc}
 8001934:	40004800 	.word	0x40004800
 8001938:	40021000 	.word	0x40021000
 800193c:	48000800 	.word	0x48000800

08001940 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff ff02 	bl	800174c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <LoopForever+0x6>)
  ldr r1, =_edata
 800194a:	490d      	ldr	r1, [pc, #52]	; (8001980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800194c:	4a0d      	ldr	r2, [pc, #52]	; (8001984 <LoopForever+0xe>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001960:	4c0a      	ldr	r4, [pc, #40]	; (800198c <LoopForever+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 fcf7 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001972:	f7ff fda7 	bl	80014c4 <main>

08001976 <LoopForever>:

LoopForever:
    b LoopForever
 8001976:	e7fe      	b.n	8001976 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001978:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001984:	0800b778 	.word	0x0800b778
  ldr r2, =_sbss
 8001988:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800198c:	2000a53c 	.word	0x2000a53c

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001994:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_InitTick+0x40>)
 8001998:	781a      	ldrb	r2, [r3, #0]
{
 800199a:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800199c:	b90a      	cbnz	r2, 80019a2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 800199e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80019a0:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_InitTick+0x44>)
 80019ac:	6810      	ldr	r0, [r2, #0]
 80019ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80019b2:	f000 f89d 	bl	8001af0 <HAL_SYSTICK_Config>
 80019b6:	4604      	mov	r4, r0
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1f0      	bne.n	800199e <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	2d0f      	cmp	r5, #15
 80019be:	d8ee      	bhi.n	800199e <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	4602      	mov	r2, r0
 80019c2:	4629      	mov	r1, r5
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f852 	bl	8001a70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_InitTick+0x48>)
 80019ce:	4620      	mov	r0, r4
 80019d0:	601d      	str	r5, [r3, #0]
  return status;
 80019d2:	e7e5      	b.n	80019a0 <HAL_InitTick+0xc>
 80019d4:	20000004 	.word	0x20000004
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_Init>:
{
 80019e0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e2:	2003      	movs	r0, #3
 80019e4:	f000 f832 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019e8:	200f      	movs	r0, #15
 80019ea:	f7ff ffd3 	bl	8001994 <HAL_InitTick>
 80019ee:	4604      	mov	r4, r0
 80019f0:	b918      	cbnz	r0, 80019fa <HAL_Init+0x1a>
    HAL_MspInit();
 80019f2:	f7ff fe2b 	bl	800164c <HAL_MspInit>
}
 80019f6:	4620      	mov	r0, r4
 80019f8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80019fa:	2401      	movs	r4, #1
 80019fc:	e7fb      	b.n	80019f6 <HAL_Init+0x16>
	...

08001a00 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_IncTick+0x10>)
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_IncTick+0x14>)
 8001a04:	6811      	ldr	r1, [r2, #0]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	440b      	add	r3, r1
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000a3ec 	.word	0x2000a3ec
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a18:	4b01      	ldr	r3, [pc, #4]	; (8001a20 <HAL_GetTick+0x8>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000a3ec 	.word	0x2000a3ec

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a28:	f7ff fff6 	bl	8001a18 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001a2e:	bf1c      	itt	ne
 8001a30:	4b05      	ldrne	r3, [pc, #20]	; (8001a48 <HAL_Delay+0x24>)
 8001a32:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001a36:	bf18      	it	ne
 8001a38:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a3a:	f7ff ffed 	bl	8001a18 <HAL_GetTick>
 8001a3e:	1b43      	subs	r3, r0, r5
 8001a40:	42a3      	cmp	r3, r4
 8001a42:	d3fa      	bcc.n	8001a3a <HAL_Delay+0x16>
  {
  }
}
 8001a44:	bd38      	pop	{r3, r4, r5, pc}
 8001a46:	bf00      	nop
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a4e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a54:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a56:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a68:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b16      	ldr	r3, [pc, #88]	; (8001acc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a72:	b530      	push	{r4, r5, lr}
 8001a74:	68dc      	ldr	r4, [r3, #12]
 8001a76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	bf28      	it	cs
 8001a84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8c:	bf8c      	ite	hi
 8001a8e:	3c03      	subhi	r4, #3
 8001a90:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a92:	fa05 f303 	lsl.w	r3, r5, r3
 8001a96:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9a:	40a5      	lsls	r5, r4
 8001a9c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001aa2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	bfac      	ite	ge
 8001aaa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	4a08      	ldrlt	r2, [pc, #32]	; (8001ad0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	bfb8      	it	lt
 8001ab6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	bfaa      	itet	ge
 8001abe:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ac8:	bd30      	pop	{r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00
 8001ad0:	e000ed14 	.word	0xe000ed14

08001ad4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	db07      	blt.n	8001ae8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_NVIC_EnableIRQ+0x18>)
 8001ada:	0941      	lsrs	r1, r0, #5
 8001adc:	2301      	movs	r3, #1
 8001ade:	f000 001f 	and.w	r0, r0, #31
 8001ae2:	4083      	lsls	r3, r0
 8001ae4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af0:	3801      	subs	r0, #1
 8001af2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001af6:	d20b      	bcs.n	8001b10 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afe:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	21f0      	movs	r1, #240	; 0xf0
 8001b02:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b06:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b08:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b10:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d057      	beq.n	8001bce <HAL_DMA_Init+0xb6>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b1e:	6805      	ldr	r5, [r0, #0]
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_DMA_Init+0xbc>)
 8001b22:	429d      	cmp	r5, r3
 8001b24:	f04f 0214 	mov.w	r2, #20
 8001b28:	d83f      	bhi.n	8001baa <HAL_DMA_Init+0x92>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_DMA_Init+0xc0>)
 8001b2c:	492b      	ldr	r1, [pc, #172]	; (8001bdc <HAL_DMA_Init+0xc4>)
 8001b2e:	442b      	add	r3, r5
 8001b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b36:	2202      	movs	r2, #2
 8001b38:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b3c:	e9d0 6202 	ldrd	r6, r2, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b40:	6907      	ldr	r7, [r0, #16]
  tmp = hdma->Instance->CCR;
 8001b42:	682c      	ldr	r4, [r5, #0]
  tmp |=  hdma->Init.Direction        |
 8001b44:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	433a      	orrs	r2, r7
 8001b48:	6947      	ldr	r7, [r0, #20]
 8001b4a:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b4c:	6987      	ldr	r7, [r0, #24]
 8001b4e:	433a      	orrs	r2, r7
 8001b50:	69c7      	ldr	r7, [r0, #28]
 8001b52:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b54:	6a07      	ldr	r7, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b56:	f424 44ff 	bic.w	r4, r4, #32640	; 0x7f80
 8001b5a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5e:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8001b60:	4322      	orrs	r2, r4
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b62:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
    hdma->DmaBaseAddress = DMA1;
 8001b66:	e9c0 1310 	strd	r1, r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = tmp;
 8001b6a:	602a      	str	r2, [r5, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001b6c:	d014      	beq.n	8001b98 <HAL_DMA_Init+0x80>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b6e:	6844      	ldr	r4, [r0, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b70:	f003 031c 	and.w	r3, r3, #28
 8001b74:	220f      	movs	r2, #15
 8001b76:	409a      	lsls	r2, r3
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b78:	409c      	lsls	r4, r3
    if (DMA1 == hdma->DmaBaseAddress)
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <HAL_DMA_Init+0xc4>)
 8001b7c:	4299      	cmp	r1, r3
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b7e:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8001b82:	d119      	bne.n	8001bb8 <HAL_DMA_Init+0xa0>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001b84:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8001b88:	4013      	ands	r3, r2
 8001b8a:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001b8e:	f8d1 30a8 	ldr.w	r3, [r1, #168]	; 0xa8
 8001b92:	4323      	orrs	r3, r4
 8001b94:	f8c1 30a8 	str.w	r3, [r1, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b98:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b9c:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8001ba2:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001ba6:	4618      	mov	r0, r3
}
 8001ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_DMA_Init+0xc8>)
 8001bac:	490d      	ldr	r1, [pc, #52]	; (8001be4 <HAL_DMA_Init+0xcc>)
 8001bae:	442b      	add	r3, r5
 8001bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
    hdma->DmaBaseAddress = DMA2;
 8001bb6:	e7be      	b.n	8001b36 <HAL_DMA_Init+0x1e>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001bb8:	f8d3 14a8 	ldr.w	r1, [r3, #1192]	; 0x4a8
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001bc2:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 8001bc6:	4322      	orrs	r2, r4
 8001bc8:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
 8001bcc:	e7e4      	b.n	8001b98 <HAL_DMA_Init+0x80>
    return HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
 8001bd0:	e7ea      	b.n	8001ba8 <HAL_DMA_Init+0x90>
 8001bd2:	bf00      	nop
 8001bd4:	40020407 	.word	0x40020407
 8001bd8:	bffdfff8 	.word	0xbffdfff8
 8001bdc:	40020000 	.word	0x40020000
 8001be0:	bffdfbf8 	.word	0xbffdfbf8
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001be8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bea:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8001bee:	2c01      	cmp	r4, #1
 8001bf0:	d037      	beq.n	8001c62 <HAL_DMA_Start_IT+0x7a>
 8001bf2:	2401      	movs	r4, #1
 8001bf4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001bf8:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
 8001bfc:	2c01      	cmp	r4, #1
 8001bfe:	b2e5      	uxtb	r5, r4
 8001c00:	f04f 0600 	mov.w	r6, #0
 8001c04:	f04f 0402 	mov.w	r4, #2
 8001c08:	d129      	bne.n	8001c5e <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c0a:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c0e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c10:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001c12:	6826      	ldr	r6, [r4, #0]
 8001c14:	f026 0601 	bic.w	r6, r6, #1
 8001c18:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1a:	e9d0 6710 	ldrd	r6, r7, [r0, #64]	; 0x40
 8001c1e:	f007 071c 	and.w	r7, r7, #28
 8001c22:	40bd      	lsls	r5, r7
 8001c24:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c26:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c28:	6883      	ldr	r3, [r0, #8]
 8001c2a:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8001c2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c2e:	bf0b      	itete	eq
 8001c30:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c32:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c34:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c36:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8001c38:	b14b      	cbz	r3, 8001c4e <HAL_DMA_Start_IT+0x66>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3a:	6823      	ldr	r3, [r4, #0]
 8001c3c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c40:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2000      	movs	r0, #0
}
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f023 0304 	bic.w	r3, r3, #4
 8001c54:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	f043 030a 	orr.w	r3, r3, #10
 8001c5c:	e7f0      	b.n	8001c40 <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8001c5e:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001c62:	2002      	movs	r0, #2
 8001c64:	e7f2      	b.n	8001c4c <HAL_DMA_Start_IT+0x64>

08001c66 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c66:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001c6a:	6803      	ldr	r3, [r0, #0]
{
 8001c6c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c6e:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c72:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001c74:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c76:	2404      	movs	r4, #4
 8001c78:	4094      	lsls	r4, r2
 8001c7a:	4234      	tst	r4, r6
 8001c7c:	d00e      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x36>
 8001c7e:	f015 0f04 	tst.w	r5, #4
 8001c82:	d00b      	beq.n	8001c9c <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c88:	bf5e      	ittt	pl
 8001c8a:	681a      	ldrpl	r2, [r3, #0]
 8001c8c:	f022 0204 	bicpl.w	r2, r2, #4
 8001c90:	601a      	strpl	r2, [r3, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8001c92:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c94:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001c96:	b373      	cbz	r3, 8001cf6 <HAL_DMA_IRQHandler+0x90>
}
 8001c98:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c9a:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c9c:	2402      	movs	r4, #2
 8001c9e:	4094      	lsls	r4, r2
 8001ca0:	4234      	tst	r4, r6
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0x64>
 8001ca4:	f015 0f02 	tst.w	r5, #2
 8001ca8:	d00f      	beq.n	8001cca <HAL_DMA_IRQHandler+0x64>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	0695      	lsls	r5, r2, #26
 8001cae:	d406      	bmi.n	8001cbe <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	f022 020a 	bic.w	r2, r2, #10
 8001cb6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001cbe:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cc0:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001cc2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8001cc6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001cc8:	e7e5      	b.n	8001c96 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cca:	2408      	movs	r4, #8
 8001ccc:	4094      	lsls	r4, r2
 8001cce:	4234      	tst	r4, r6
 8001cd0:	d011      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x90>
 8001cd2:	072c      	lsls	r4, r5, #28
 8001cd4:	d50f      	bpl.n	8001cf6 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd6:	681c      	ldr	r4, [r3, #0]
 8001cd8:	f024 040e 	bic.w	r4, r4, #14
 8001cdc:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cde:	2301      	movs	r3, #1
 8001ce0:	fa03 f202 	lsl.w	r2, r3, r2
 8001ce4:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ce6:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001cec:	2300      	movs	r3, #0
 8001cee:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001cf2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001cf4:	e7cf      	b.n	8001c96 <HAL_DMA_IRQHandler+0x30>
}
 8001cf6:	bc70      	pop	{r4, r5, r6}
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d00:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001eb4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d04:	4c69      	ldr	r4, [pc, #420]	; (8001eac <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 8001d06:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	680a      	ldr	r2, [r1, #0]
 8001d0a:	fa32 f503 	lsrs.w	r5, r2, r3
 8001d0e:	d102      	bne.n	8001d16 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001d10:	b003      	add	sp, #12
 8001d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d16:	f04f 0e01 	mov.w	lr, #1
 8001d1a:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8001d1e:	ea1e 0202 	ands.w	r2, lr, r2
 8001d22:	f000 8090 	beq.w	8001e46 <HAL_GPIO_Init+0x14a>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d26:	684d      	ldr	r5, [r1, #4]
 8001d28:	f005 0603 	and.w	r6, r5, #3
 8001d2c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d30:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d34:	1e77      	subs	r7, r6, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d36:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d3a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d3c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	f200 8083 	bhi.w	8001e4a <HAL_GPIO_Init+0x14e>
        temp = GPIOx->OSPEEDR;
 8001d44:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d46:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d4a:	68cf      	ldr	r7, [r1, #12]
 8001d4c:	fa07 f708 	lsl.w	r7, r7, r8
 8001d50:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001d54:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d56:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d58:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d5c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001d60:	409f      	lsls	r7, r3
 8001d62:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d66:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d68:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d6a:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d6e:	688f      	ldr	r7, [r1, #8]
 8001d70:	fa07 f708 	lsl.w	r7, r7, r8
 8001d74:	ea47 070e 	orr.w	r7, r7, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d78:	2e02      	cmp	r6, #2
        GPIOx->PUPDR = temp;
 8001d7a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7c:	d071      	beq.n	8001e62 <HAL_GPIO_Init+0x166>
      temp = GPIOx->MODER;
 8001d7e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d80:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d84:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d88:	433e      	orrs	r6, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d8a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001d8e:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d90:	d059      	beq.n	8001e46 <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001d96:	f046 0601 	orr.w	r6, r6, #1
 8001d9a:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001d9e:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001da2:	f023 0703 	bic.w	r7, r3, #3
 8001da6:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001daa:	f006 0601 	and.w	r6, r6, #1
 8001dae:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001db2:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001db4:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001dba:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dbc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001dc0:	f04f 0c0f 	mov.w	ip, #15
 8001dc4:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dcc:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dd0:	d05f      	beq.n	8001e92 <HAL_GPIO_Init+0x196>
 8001dd2:	4e37      	ldr	r6, [pc, #220]	; (8001eb0 <HAL_GPIO_Init+0x1b4>)
 8001dd4:	42b0      	cmp	r0, r6
 8001dd6:	d05e      	beq.n	8001e96 <HAL_GPIO_Init+0x19a>
 8001dd8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ddc:	42b0      	cmp	r0, r6
 8001dde:	d05c      	beq.n	8001e9a <HAL_GPIO_Init+0x19e>
 8001de0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001de4:	42b0      	cmp	r0, r6
 8001de6:	d05a      	beq.n	8001e9e <HAL_GPIO_Init+0x1a2>
 8001de8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001dec:	42b0      	cmp	r0, r6
 8001dee:	d058      	beq.n	8001ea2 <HAL_GPIO_Init+0x1a6>
 8001df0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001df4:	42b0      	cmp	r0, r6
 8001df6:	d056      	beq.n	8001ea6 <HAL_GPIO_Init+0x1aa>
 8001df8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001dfc:	42b0      	cmp	r0, r6
 8001dfe:	bf0c      	ite	eq
 8001e00:	2606      	moveq	r6, #6
 8001e02:	2607      	movne	r6, #7
 8001e04:	fa06 f60e 	lsl.w	r6, r6, lr
 8001e08:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e0c:	60be      	str	r6, [r7, #8]
        temp = EXTI->RTSR1;
 8001e0e:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(iocurrent);
 8001e10:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e12:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001e16:	bf0c      	ite	eq
 8001e18:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e1a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001e1c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR1;
 8001e1e:	68e6      	ldr	r6, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e20:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001e24:	bf0c      	ite	eq
 8001e26:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e28:	4316      	orrne	r6, r2
        EXTI->FTSR1 = temp;
 8001e2a:	60e6      	str	r6, [r4, #12]
        temp = EXTI->EMR1;
 8001e2c:	6866      	ldr	r6, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e2e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001e32:	bf0c      	ite	eq
 8001e34:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001e36:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001e38:	6066      	str	r6, [r4, #4]
        temp = EXTI->IMR1;
 8001e3a:	6826      	ldr	r6, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e3c:	03ed      	lsls	r5, r5, #15
        temp &= ~(iocurrent);
 8001e3e:	bf54      	ite	pl
 8001e40:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001e42:	4316      	orrmi	r6, r2
        EXTI->IMR1 = temp;
 8001e44:	6026      	str	r6, [r4, #0]
    position++;
 8001e46:	3301      	adds	r3, #1
 8001e48:	e75e      	b.n	8001d08 <HAL_GPIO_Init+0xc>
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e4a:	2e03      	cmp	r6, #3
 8001e4c:	d18c      	bne.n	8001d68 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->ASCR;
 8001e4e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e50:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e54:	f3c5 07c0 	ubfx	r7, r5, #3, #1
 8001e58:	409f      	lsls	r7, r3
 8001e5a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->ASCR = temp;
 8001e5e:	62c7      	str	r7, [r0, #44]	; 0x2c
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	e78d      	b.n	8001d7e <HAL_GPIO_Init+0x82>
        temp = GPIOx->AFR[position >> 3u];
 8001e62:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001e66:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e6a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001e6e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e72:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001e76:	f04f 0e0f 	mov.w	lr, #15
 8001e7a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001e7e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e82:	690f      	ldr	r7, [r1, #16]
 8001e84:	fa07 f70b 	lsl.w	r7, r7, fp
 8001e88:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001e8c:	f8ca 7020 	str.w	r7, [sl, #32]
 8001e90:	e775      	b.n	8001d7e <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e92:	2600      	movs	r6, #0
 8001e94:	e7b6      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001e96:	2601      	movs	r6, #1
 8001e98:	e7b4      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001e9a:	2602      	movs	r6, #2
 8001e9c:	e7b2      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001e9e:	2603      	movs	r6, #3
 8001ea0:	e7b0      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001ea2:	2604      	movs	r6, #4
 8001ea4:	e7ae      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001ea6:	2605      	movs	r6, #5
 8001ea8:	e7ac      	b.n	8001e04 <HAL_GPIO_Init+0x108>
 8001eaa:	bf00      	nop
 8001eac:	40010400 	.word	0x40010400
 8001eb0:	48000400 	.word	0x48000400
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	b10a      	cbz	r2, 8001ebe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eba:	6181      	str	r1, [r0, #24]
 8001ebc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ebe:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec2:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d04e      	beq.n	8001f68 <HAL_I2C_Init+0xa6>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eca:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed2:	b91b      	cbnz	r3, 8001edc <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ed8:	f7ff f9ae 	bl	8001238 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001edc:	2324      	movs	r3, #36	; 0x24
 8001ede:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee2:	6823      	ldr	r3, [r4, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eec:	6862      	ldr	r2, [r4, #4]
 8001eee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001efa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001efc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f00:	2901      	cmp	r1, #1
 8001f02:	d106      	bne.n	8001f12 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f08:	609a      	str	r2, [r3, #8]
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f10:	e007      	b.n	8001f22 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f16:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f18:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f1a:	d1f6      	bne.n	8001f0a <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f2e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f38:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001f3c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f3e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f44:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f46:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f042 0201 	orr.w	r2, r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001f58:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f5a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f60:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f62:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001f66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
 8001f6a:	e7fc      	b.n	8001f66 <HAL_I2C_Init+0xa4>

08001f6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f6c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f72:	2b20      	cmp	r3, #32
 8001f74:	b2dc      	uxtb	r4, r3
 8001f76:	d11d      	bne.n	8001fb4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d019      	beq.n	8001fb4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f80:	2324      	movs	r3, #36	; 0x24
 8001f82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f86:	6803      	ldr	r3, [r0, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4311      	orrs	r1, r2
 8001f9c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f042 0201 	orr.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001fac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001fb0:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001fb2:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	e7fc      	b.n	8001fb2 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08001fb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fb8:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	b2dc      	uxtb	r4, r3
 8001fc2:	d11c      	bne.n	8001ffe <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fc4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d018      	beq.n	8001ffe <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	2324      	movs	r3, #36	; 0x24
 8001fce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd2:	6803      	ldr	r3, [r0, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fdc:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fde:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fe2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fe6:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ff6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001ffa:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001ffc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001ffe:	2002      	movs	r0, #2
 8002000:	e7fc      	b.n	8001ffc <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

08002004 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002004:	4b02      	ldr	r3, [pc, #8]	; (8002010 <HAL_PWREx_GetVoltageRange+0xc>)
 8002006:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002008:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002016:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002018:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800201c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002020:	d11d      	bne.n	800205e <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002026:	d101      	bne.n	800202c <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002028:	2000      	movs	r0, #0
 800202a:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	6813      	ldr	r3, [r2, #0]
 800202e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002036:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_PWREx_ControlVoltageScaling+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2132      	movs	r1, #50	; 0x32
 800203e:	434b      	muls	r3, r1
 8002040:	490e      	ldr	r1, [pc, #56]	; (800207c <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002048:	6951      	ldr	r1, [r2, #20]
 800204a:	0549      	lsls	r1, r1, #21
 800204c:	d500      	bpl.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x3c>
 800204e:	b923      	cbnz	r3, 800205a <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002050:	6953      	ldr	r3, [r2, #20]
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	d5e8      	bpl.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 8002056:	2003      	movs	r0, #3
}
 8002058:	4770      	bx	lr
        wait_loop_index--;
 800205a:	3b01      	subs	r3, #1
 800205c:	e7f4      	b.n	8002048 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002062:	bf1f      	itttt	ne
 8002064:	6813      	ldrne	r3, [r2, #0]
 8002066:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 800206a:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 800206e:	6013      	strne	r3, [r2, #0]
 8002070:	e7da      	b.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x14>
 8002072:	bf00      	nop
 8002074:	40007000 	.word	0x40007000
 8002078:	20000000 	.word	0x20000000
 800207c:	000f4240 	.word	0x000f4240

08002080 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002080:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002082:	4d1e      	ldr	r5, [pc, #120]	; (80020fc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002084:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002086:	00da      	lsls	r2, r3, #3
{
 8002088:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800208a:	d518      	bpl.n	80020be <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800208c:	f7ff ffba 	bl	8002004 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002090:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002094:	d123      	bne.n	80020de <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002096:	2c80      	cmp	r4, #128	; 0x80
 8002098:	d929      	bls.n	80020ee <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800209a:	2ca0      	cmp	r4, #160	; 0xa0
 800209c:	bf8c      	ite	hi
 800209e:	2402      	movhi	r4, #2
 80020a0:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a2:	4917      	ldr	r1, [pc, #92]	; (8002100 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80020a4:	680a      	ldr	r2, [r1, #0]
 80020a6:	f022 0207 	bic.w	r2, r2, #7
 80020aa:	4322      	orrs	r2, r4
 80020ac:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ae:	6808      	ldr	r0, [r1, #0]
 80020b0:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80020b4:	1b00      	subs	r0, r0, r4
 80020b6:	bf18      	it	ne
 80020b8:	2001      	movne	r0, #1
 80020ba:	b003      	add	sp, #12
 80020bc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	65ab      	str	r3, [r5, #88]	; 0x58
 80020c6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80020d0:	f7ff ff98 	bl	8002004 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020da:	65ab      	str	r3, [r5, #88]	; 0x58
 80020dc:	e7d8      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80020de:	2c80      	cmp	r4, #128	; 0x80
 80020e0:	d807      	bhi.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80020e2:	d008      	beq.n	80020f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80020e4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80020e8:	425c      	negs	r4, r3
 80020ea:	415c      	adcs	r4, r3
 80020ec:	e7d9      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020ee:	2400      	movs	r4, #0
 80020f0:	e7d7      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f2:	2403      	movs	r4, #3
 80020f4:	e7d5      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80020f6:	2402      	movs	r4, #2
 80020f8:	e7d3      	b.n	80020a2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002104:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002106:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002108:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800210a:	f012 020c 	ands.w	r2, r2, #12
 800210e:	d005      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x18>
 8002110:	2a0c      	cmp	r2, #12
 8002112:	d115      	bne.n	8002140 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002114:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002118:	2901      	cmp	r1, #1
 800211a:	d118      	bne.n	800214e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800211c:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 800211e:	481d      	ldr	r0, [pc, #116]	; (8002194 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002120:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002122:	bf55      	itete	pl
 8002124:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002128:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800212a:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800212e:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002132:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002136:	b34a      	cbz	r2, 800218c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002138:	2a0c      	cmp	r2, #12
 800213a:	d009      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x4c>
 800213c:	2000      	movs	r0, #0
  return sysclockfreq;
 800213e:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002140:	2a04      	cmp	r2, #4
 8002142:	d022      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002144:	2a08      	cmp	r2, #8
 8002146:	4814      	ldr	r0, [pc, #80]	; (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 8002148:	bf18      	it	ne
 800214a:	2000      	movne	r0, #0
 800214c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800214e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002156:	2a02      	cmp	r2, #2
 8002158:	d015      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x82>
 800215a:	490f      	ldr	r1, [pc, #60]	; (8002198 <HAL_RCC_GetSysClockFreq+0x94>)
 800215c:	2a03      	cmp	r2, #3
 800215e:	bf08      	it	eq
 8002160:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002162:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800216a:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800216c:	68d8      	ldr	r0, [r3, #12]
 800216e:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002172:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002176:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002178:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800217a:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800217c:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002180:	fbb2 f0f0 	udiv	r0, r2, r0
 8002184:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_RCC_GetSysClockFreq+0x98>)
 8002188:	e7eb      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800218a:	4804      	ldr	r0, [pc, #16]	; (800219c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	0800b1dc 	.word	0x0800b1dc
 8002198:	007a1200 	.word	0x007a1200
 800219c:	00f42400 	.word	0x00f42400

080021a0 <HAL_RCC_OscConfig>:
{
 80021a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80021a4:	4605      	mov	r5, r0
 80021a6:	b918      	cbnz	r0, 80021b0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 80021a8:	2001      	movs	r0, #1
}
 80021aa:	b003      	add	sp, #12
 80021ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b0:	4c92      	ldr	r4, [pc, #584]	; (80023fc <HAL_RCC_OscConfig+0x25c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b2:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b4:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b6:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021b8:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ba:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021be:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021c2:	d53d      	bpl.n	8002240 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021c4:	b11e      	cbz	r6, 80021ce <HAL_RCC_OscConfig+0x2e>
 80021c6:	2e0c      	cmp	r6, #12
 80021c8:	d166      	bne.n	8002298 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021ca:	2f01      	cmp	r7, #1
 80021cc:	d164      	bne.n	8002298 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	0798      	lsls	r0, r3, #30
 80021d2:	d502      	bpl.n	80021da <HAL_RCC_OscConfig+0x3a>
 80021d4:	69ab      	ldr	r3, [r5, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0e6      	beq.n	80021a8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	6a28      	ldr	r0, [r5, #32]
 80021de:	0719      	lsls	r1, r3, #28
 80021e0:	bf56      	itet	pl
 80021e2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80021e6:	6823      	ldrmi	r3, [r4, #0]
 80021e8:	091b      	lsrpl	r3, r3, #4
 80021ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ee:	4298      	cmp	r0, r3
 80021f0:	d93b      	bls.n	800226a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021f2:	f7ff ff45 	bl	8002080 <RCC_SetFlashLatencyFromMSIRange>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d1d6      	bne.n	80021a8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6023      	str	r3, [r4, #0]
 8002202:	6823      	ldr	r3, [r4, #0]
 8002204:	6a2a      	ldr	r2, [r5, #32]
 8002206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220a:	4313      	orrs	r3, r2
 800220c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	69ea      	ldr	r2, [r5, #28]
 8002212:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002216:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800221a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800221c:	f7ff ff72 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 8002220:	68a3      	ldr	r3, [r4, #8]
 8002222:	4a77      	ldr	r2, [pc, #476]	; (8002400 <HAL_RCC_OscConfig+0x260>)
 8002224:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	40d8      	lsrs	r0, r3
 8002230:	4b74      	ldr	r3, [pc, #464]	; (8002404 <HAL_RCC_OscConfig+0x264>)
 8002232:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002234:	4b74      	ldr	r3, [pc, #464]	; (8002408 <HAL_RCC_OscConfig+0x268>)
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	f7ff fbac 	bl	8001994 <HAL_InitTick>
        if(status != HAL_OK)
 800223c:	2800      	cmp	r0, #0
 800223e:	d1b4      	bne.n	80021aa <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	07d8      	lsls	r0, r3, #31
 8002244:	d45f      	bmi.n	8002306 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	682b      	ldr	r3, [r5, #0]
 8002248:	0799      	lsls	r1, r3, #30
 800224a:	f100 809e 	bmi.w	800238a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224e:	682b      	ldr	r3, [r5, #0]
 8002250:	0718      	lsls	r0, r3, #28
 8002252:	f100 80db 	bmi.w	800240c <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	0759      	lsls	r1, r3, #29
 800225a:	f100 8101 	bmi.w	8002460 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002260:	2b00      	cmp	r3, #0
 8002262:	f040 816a 	bne.w	800253a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002266:	2000      	movs	r0, #0
 8002268:	e79f      	b.n	80021aa <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	f043 0308 	orr.w	r3, r3, #8
 8002270:	6023      	str	r3, [r4, #0]
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002278:	4303      	orrs	r3, r0
 800227a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800227c:	6863      	ldr	r3, [r4, #4]
 800227e:	69ea      	ldr	r2, [r5, #28]
 8002280:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002284:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002288:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	2e00      	cmp	r6, #0
 800228c:	d1c6      	bne.n	800221c <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800228e:	f7ff fef7 	bl	8002080 <RCC_SetFlashLatencyFromMSIRange>
 8002292:	2800      	cmp	r0, #0
 8002294:	d0c2      	beq.n	800221c <HAL_RCC_OscConfig+0x7c>
 8002296:	e787      	b.n	80021a8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002298:	69ab      	ldr	r3, [r5, #24]
 800229a:	b31b      	cbz	r3, 80022e4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 800229c:	6823      	ldr	r3, [r4, #0]
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022a4:	f7ff fbb8 	bl	8001a18 <HAL_GetTick>
 80022a8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	079a      	lsls	r2, r3, #30
 80022ae:	d511      	bpl.n	80022d4 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6023      	str	r3, [r4, #0]
 80022b8:	6823      	ldr	r3, [r4, #0]
 80022ba:	6a2a      	ldr	r2, [r5, #32]
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c0:	4313      	orrs	r3, r2
 80022c2:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c4:	6863      	ldr	r3, [r4, #4]
 80022c6:	69ea      	ldr	r2, [r5, #28]
 80022c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022d0:	6063      	str	r3, [r4, #4]
 80022d2:	e7b5      	b.n	8002240 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022d4:	f7ff fba0 	bl	8001a18 <HAL_GetTick>
 80022d8:	eba0 0008 	sub.w	r0, r0, r8
 80022dc:	2802      	cmp	r0, #2
 80022de:	d9e4      	bls.n	80022aa <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80022e0:	2003      	movs	r0, #3
 80022e2:	e762      	b.n	80021aa <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80022ec:	f7ff fb94 	bl	8001a18 <HAL_GetTick>
 80022f0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	079b      	lsls	r3, r3, #30
 80022f6:	d5a3      	bpl.n	8002240 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022f8:	f7ff fb8e 	bl	8001a18 <HAL_GetTick>
 80022fc:	eba0 0008 	sub.w	r0, r0, r8
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f6      	bls.n	80022f2 <HAL_RCC_OscConfig+0x152>
 8002304:	e7ec      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002306:	2e08      	cmp	r6, #8
 8002308:	d003      	beq.n	8002312 <HAL_RCC_OscConfig+0x172>
 800230a:	2e0c      	cmp	r6, #12
 800230c:	d108      	bne.n	8002320 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800230e:	2f03      	cmp	r7, #3
 8002310:	d106      	bne.n	8002320 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	039a      	lsls	r2, r3, #14
 8002316:	d596      	bpl.n	8002246 <HAL_RCC_OscConfig+0xa6>
 8002318:	686b      	ldr	r3, [r5, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d193      	bne.n	8002246 <HAL_RCC_OscConfig+0xa6>
 800231e:	e743      	b.n	80021a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	686b      	ldr	r3, [r5, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d110      	bne.n	800234a <HAL_RCC_OscConfig+0x1aa>
 8002328:	6823      	ldr	r3, [r4, #0]
 800232a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002330:	f7ff fb72 	bl	8001a18 <HAL_GetTick>
 8002334:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002336:	6823      	ldr	r3, [r4, #0]
 8002338:	039b      	lsls	r3, r3, #14
 800233a:	d484      	bmi.n	8002246 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233c:	f7ff fb6c 	bl	8001a18 <HAL_GetTick>
 8002340:	eba0 0008 	sub.w	r0, r0, r8
 8002344:	2864      	cmp	r0, #100	; 0x64
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x196>
 8002348:	e7ca      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800234e:	d104      	bne.n	800235a <HAL_RCC_OscConfig+0x1ba>
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	e7e6      	b.n	8002328 <HAL_RCC_OscConfig+0x188>
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002360:	6022      	str	r2, [r4, #0]
 8002362:	6822      	ldr	r2, [r4, #0]
 8002364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002368:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1e0      	bne.n	8002330 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 800236e:	f7ff fb53 	bl	8001a18 <HAL_GetTick>
 8002372:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	0398      	lsls	r0, r3, #14
 8002378:	f57f af65 	bpl.w	8002246 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fb4c 	bl	8001a18 <HAL_GetTick>
 8002380:	eba0 0008 	sub.w	r0, r0, r8
 8002384:	2864      	cmp	r0, #100	; 0x64
 8002386:	d9f5      	bls.n	8002374 <HAL_RCC_OscConfig+0x1d4>
 8002388:	e7aa      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800238a:	2e04      	cmp	r6, #4
 800238c:	d003      	beq.n	8002396 <HAL_RCC_OscConfig+0x1f6>
 800238e:	2e0c      	cmp	r6, #12
 8002390:	d110      	bne.n	80023b4 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002392:	2f02      	cmp	r7, #2
 8002394:	d10e      	bne.n	80023b4 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	0559      	lsls	r1, r3, #21
 800239a:	d503      	bpl.n	80023a4 <HAL_RCC_OscConfig+0x204>
 800239c:	68eb      	ldr	r3, [r5, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f43f af02 	beq.w	80021a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a4:	6863      	ldr	r3, [r4, #4]
 80023a6:	692a      	ldr	r2, [r5, #16]
 80023a8:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80023ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023b0:	6063      	str	r3, [r4, #4]
 80023b2:	e74c      	b.n	800224e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b4:	68eb      	ldr	r3, [r5, #12]
 80023b6:	b17b      	cbz	r3, 80023d8 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80023b8:	6823      	ldr	r3, [r4, #0]
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023c0:	f7ff fb2a 	bl	8001a18 <HAL_GetTick>
 80023c4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	055a      	lsls	r2, r3, #21
 80023ca:	d4eb      	bmi.n	80023a4 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023cc:	f7ff fb24 	bl	8001a18 <HAL_GetTick>
 80023d0:	1bc0      	subs	r0, r0, r7
 80023d2:	2802      	cmp	r0, #2
 80023d4:	d9f7      	bls.n	80023c6 <HAL_RCC_OscConfig+0x226>
 80023d6:	e783      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023de:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023e0:	f7ff fb1a 	bl	8001a18 <HAL_GetTick>
 80023e4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e6:	6823      	ldr	r3, [r4, #0]
 80023e8:	055b      	lsls	r3, r3, #21
 80023ea:	f57f af30 	bpl.w	800224e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fb13 	bl	8001a18 <HAL_GetTick>
 80023f2:	1bc0      	subs	r0, r0, r7
 80023f4:	2802      	cmp	r0, #2
 80023f6:	d9f6      	bls.n	80023e6 <HAL_RCC_OscConfig+0x246>
 80023f8:	e772      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	0800b1c1 	.word	0x0800b1c1
 8002404:	20000000 	.word	0x20000000
 8002408:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	696b      	ldr	r3, [r5, #20]
 800240e:	b19b      	cbz	r3, 8002438 <HAL_RCC_OscConfig+0x298>
      __HAL_RCC_LSI_ENABLE();
 8002410:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800241c:	f7ff fafc 	bl	8001a18 <HAL_GetTick>
 8002420:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002422:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002426:	079a      	lsls	r2, r3, #30
 8002428:	f53f af15 	bmi.w	8002256 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242c:	f7ff faf4 	bl	8001a18 <HAL_GetTick>
 8002430:	1bc0      	subs	r0, r0, r7
 8002432:	2802      	cmp	r0, #2
 8002434:	d9f5      	bls.n	8002422 <HAL_RCC_OscConfig+0x282>
 8002436:	e753      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8002438:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002444:	f7ff fae8 	bl	8001a18 <HAL_GetTick>
 8002448:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800244e:	079b      	lsls	r3, r3, #30
 8002450:	f57f af01 	bpl.w	8002256 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7ff fae0 	bl	8001a18 <HAL_GetTick>
 8002458:	1bc0      	subs	r0, r0, r7
 800245a:	2802      	cmp	r0, #2
 800245c:	d9f5      	bls.n	800244a <HAL_RCC_OscConfig+0x2aa>
 800245e:	e73f      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002460:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002462:	00df      	lsls	r7, r3, #3
 8002464:	d429      	bmi.n	80024ba <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	65a3      	str	r3, [r4, #88]	; 0x58
 800246e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002478:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4f85      	ldr	r7, [pc, #532]	; (8002694 <HAL_RCC_OscConfig+0x4f4>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	05d8      	lsls	r0, r3, #23
 8002482:	d51d      	bpl.n	80024c0 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	68ab      	ldr	r3, [r5, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x342>
 800248a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002496:	f7ff fabf 	bl	8001a18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800249e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024a4:	079a      	lsls	r2, r3, #30
 80024a6:	d542      	bpl.n	800252e <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 80024a8:	f1b8 0f00 	cmp.w	r8, #0
 80024ac:	f43f aed7 	beq.w	800225e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b6:	65a3      	str	r3, [r4, #88]	; 0x58
 80024b8:	e6d1      	b.n	800225e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	f04f 0800 	mov.w	r8, #0
 80024be:	e7dd      	b.n	800247c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80024c8:	f7ff faa6 	bl	8001a18 <HAL_GetTick>
 80024cc:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	05d9      	lsls	r1, r3, #23
 80024d2:	d4d7      	bmi.n	8002484 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d4:	f7ff faa0 	bl	8001a18 <HAL_GetTick>
 80024d8:	eba0 0009 	sub.w	r0, r0, r9
 80024dc:	2802      	cmp	r0, #2
 80024de:	d9f6      	bls.n	80024ce <HAL_RCC_OscConfig+0x32e>
 80024e0:	e6fe      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x354>
 80024e6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80024ea:	f043 0304 	orr.w	r3, r3, #4
 80024ee:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80024f2:	e7ca      	b.n	800248a <HAL_RCC_OscConfig+0x2ea>
 80024f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002500:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002504:	f022 0204 	bic.w	r2, r2, #4
 8002508:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1c2      	bne.n	8002496 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002510:	f7ff fa82 	bl	8001a18 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002518:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800251e:	079b      	lsls	r3, r3, #30
 8002520:	d5c2      	bpl.n	80024a8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7ff fa79 	bl	8001a18 <HAL_GetTick>
 8002526:	1bc0      	subs	r0, r0, r7
 8002528:	4548      	cmp	r0, r9
 800252a:	d9f6      	bls.n	800251a <HAL_RCC_OscConfig+0x37a>
 800252c:	e6d8      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7ff fa73 	bl	8001a18 <HAL_GetTick>
 8002532:	1bc0      	subs	r0, r0, r7
 8002534:	4548      	cmp	r0, r9
 8002536:	d9b3      	bls.n	80024a0 <HAL_RCC_OscConfig+0x300>
 8002538:	e6d2      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800253a:	2b02      	cmp	r3, #2
 800253c:	f040 808f 	bne.w	800265e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002540:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002542:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002544:	f003 0103 	and.w	r1, r3, #3
 8002548:	4291      	cmp	r1, r2
 800254a:	d124      	bne.n	8002596 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800254c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800254e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002552:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002554:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002558:	d11d      	bne.n	8002596 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800255a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800255c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002560:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002564:	d117      	bne.n	8002596 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002566:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8002568:	3a07      	subs	r2, #7
 800256a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 800256e:	bf18      	it	ne
 8002570:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002572:	4291      	cmp	r1, r2
 8002574:	d10f      	bne.n	8002596 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002576:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002578:	0852      	lsrs	r2, r2, #1
 800257a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800257e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002580:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002584:	d107      	bne.n	8002596 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002586:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002588:	0852      	lsrs	r2, r2, #1
 800258a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800258e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002590:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002594:	d04a      	beq.n	800262c <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002596:	2e0c      	cmp	r6, #12
 8002598:	f43f ae06 	beq.w	80021a8 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	015f      	lsls	r7, r3, #5
 80025a0:	f53f ae02 	bmi.w	80021a8 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	00de      	lsls	r6, r3, #3
 80025a8:	f53f adfe 	bmi.w	80021a8 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80025b4:	f7ff fa30 	bl	8001a18 <HAL_GetTick>
 80025b8:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ba:	6823      	ldr	r3, [r4, #0]
 80025bc:	0198      	lsls	r0, r3, #6
 80025be:	d42f      	bmi.n	8002620 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c0:	68e2      	ldr	r2, [r4, #12]
 80025c2:	4b35      	ldr	r3, [pc, #212]	; (8002698 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80025c8:	4313      	orrs	r3, r2
 80025ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80025d0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80025d2:	3a01      	subs	r2, #1
 80025d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80025d8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80025da:	0912      	lsrs	r2, r2, #4
 80025dc:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80025e0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80025e2:	0852      	lsrs	r2, r2, #1
 80025e4:	3a01      	subs	r2, #1
 80025e6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80025ea:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025ec:	0852      	lsrs	r2, r2, #1
 80025ee:	3a01      	subs	r2, #1
 80025f0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80025f4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025fc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025fe:	68e3      	ldr	r3, [r4, #12]
 8002600:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002604:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8002606:	f7ff fa07 	bl	8001a18 <HAL_GetTick>
 800260a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260c:	6823      	ldr	r3, [r4, #0]
 800260e:	0199      	lsls	r1, r3, #6
 8002610:	f53f ae29 	bmi.w	8002266 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002614:	f7ff fa00 	bl	8001a18 <HAL_GetTick>
 8002618:	1b40      	subs	r0, r0, r5
 800261a:	2802      	cmp	r0, #2
 800261c:	d9f6      	bls.n	800260c <HAL_RCC_OscConfig+0x46c>
 800261e:	e65f      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7ff f9fa 	bl	8001a18 <HAL_GetTick>
 8002624:	1b80      	subs	r0, r0, r6
 8002626:	2802      	cmp	r0, #2
 8002628:	d9c7      	bls.n	80025ba <HAL_RCC_OscConfig+0x41a>
 800262a:	e659      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	019a      	lsls	r2, r3, #6
 8002630:	f53f ae19 	bmi.w	8002266 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800263c:	68e3      	ldr	r3, [r4, #12]
 800263e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002642:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002644:	f7ff f9e8 	bl	8001a18 <HAL_GetTick>
 8002648:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264a:	6823      	ldr	r3, [r4, #0]
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	f53f ae0a 	bmi.w	8002266 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002652:	f7ff f9e1 	bl	8001a18 <HAL_GetTick>
 8002656:	1b40      	subs	r0, r0, r5
 8002658:	2802      	cmp	r0, #2
 800265a:	d9f6      	bls.n	800264a <HAL_RCC_OscConfig+0x4aa>
 800265c:	e640      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800265e:	2e0c      	cmp	r6, #12
 8002660:	f43f ada2 	beq.w	80021a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800266a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800266c:	f7ff f9d4 	bl	8001a18 <HAL_GetTick>
 8002670:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8002678:	d105      	bne.n	8002686 <HAL_RCC_OscConfig+0x4e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800267a:	68e1      	ldr	r1, [r4, #12]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_RCC_OscConfig+0x4fc>)
 800267e:	400a      	ands	r2, r1
 8002680:	60e2      	str	r2, [r4, #12]
  return HAL_OK;
 8002682:	4618      	mov	r0, r3
 8002684:	e591      	b.n	80021aa <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7ff f9c7 	bl	8001a18 <HAL_GetTick>
 800268a:	1b40      	subs	r0, r0, r5
 800268c:	2802      	cmp	r0, #2
 800268e:	d9f0      	bls.n	8002672 <HAL_RCC_OscConfig+0x4d2>
 8002690:	e626      	b.n	80022e0 <HAL_RCC_OscConfig+0x140>
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000
 8002698:	f99d808c 	.word	0xf99d808c
 800269c:	feeefffc 	.word	0xfeeefffc

080026a0 <HAL_RCC_ClockConfig>:
{
 80026a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80026a6:	4604      	mov	r4, r0
 80026a8:	b910      	cbnz	r0, 80026b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80026aa:	2001      	movs	r0, #1
}
 80026ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <HAL_RCC_ClockConfig+0x140>)
 80026b2:	6813      	ldr	r3, [r2, #0]
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d32c      	bcc.n	8002716 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026bc:	6821      	ldr	r1, [r4, #0]
 80026be:	0788      	lsls	r0, r1, #30
 80026c0:	d434      	bmi.n	800272c <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	07c9      	lsls	r1, r1, #31
 80026c4:	d43f      	bmi.n	8002746 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c6:	6821      	ldr	r1, [r4, #0]
 80026c8:	078a      	lsls	r2, r1, #30
 80026ca:	d468      	bmi.n	800279e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4a44      	ldr	r2, [pc, #272]	; (80027e0 <HAL_RCC_ClockConfig+0x140>)
 80026ce:	6813      	ldr	r3, [r2, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	42ab      	cmp	r3, r5
 80026d6:	d86f      	bhi.n	80027b8 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	f011 0f04 	tst.w	r1, #4
 80026dc:	4d41      	ldr	r5, [pc, #260]	; (80027e4 <HAL_RCC_ClockConfig+0x144>)
 80026de:	d177      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026e0:	070b      	lsls	r3, r1, #28
 80026e2:	d506      	bpl.n	80026f2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e4:	68ab      	ldr	r3, [r5, #8]
 80026e6:	6922      	ldr	r2, [r4, #16]
 80026e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80026ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80026f0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f2:	f7ff fd07 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 80026f6:	68ab      	ldr	r3, [r5, #8]
 80026f8:	4a3b      	ldr	r2, [pc, #236]	; (80027e8 <HAL_RCC_ClockConfig+0x148>)
 80026fa:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80026fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	40d8      	lsrs	r0, r3
 800270a:	4b38      	ldr	r3, [pc, #224]	; (80027ec <HAL_RCC_ClockConfig+0x14c>)
 800270c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800270e:	4b38      	ldr	r3, [pc, #224]	; (80027f0 <HAL_RCC_ClockConfig+0x150>)
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	f7ff b93f 	b.w	8001994 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	f023 0307 	bic.w	r3, r3, #7
 800271c:	430b      	orrs	r3, r1
 800271e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	6813      	ldr	r3, [r2, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	428b      	cmp	r3, r1
 8002728:	d1bf      	bne.n	80026aa <HAL_RCC_ClockConfig+0xa>
 800272a:	e7c7      	b.n	80026bc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <HAL_RCC_ClockConfig+0x144>)
 800272e:	68a0      	ldr	r0, [r4, #8]
 8002730:	6893      	ldr	r3, [r2, #8]
 8002732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002736:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002738:	bf81      	itttt	hi
 800273a:	6893      	ldrhi	r3, [r2, #8]
 800273c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002740:	4303      	orrhi	r3, r0
 8002742:	6093      	strhi	r3, [r2, #8]
 8002744:	e7bd      	b.n	80026c2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	6862      	ldr	r2, [r4, #4]
 8002748:	4e26      	ldr	r6, [pc, #152]	; (80027e4 <HAL_RCC_ClockConfig+0x144>)
 800274a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274e:	d11a      	bne.n	8002786 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	d0a9      	beq.n	80026aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002756:	68b3      	ldr	r3, [r6, #8]
 8002758:	f023 0303 	bic.w	r3, r3, #3
 800275c:	4313      	orrs	r3, r2
 800275e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002760:	f7ff f95a 	bl	8001a18 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002764:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002768:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276a:	68b3      	ldr	r3, [r6, #8]
 800276c:	6862      	ldr	r2, [r4, #4]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002776:	d0a6      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff f94e 	bl	8001a18 <HAL_GetTick>
 800277c:	1bc0      	subs	r0, r0, r7
 800277e:	4540      	cmp	r0, r8
 8002780:	d9f3      	bls.n	800276a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8002782:	2003      	movs	r0, #3
 8002784:	e792      	b.n	80026ac <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	2a02      	cmp	r2, #2
 8002788:	d102      	bne.n	8002790 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800278e:	e7e1      	b.n	8002754 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002790:	b912      	cbnz	r2, 8002798 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002792:	f013 0f02 	tst.w	r3, #2
 8002796:	e7dd      	b.n	8002754 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002798:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800279c:	e7da      	b.n	8002754 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800279e:	4a11      	ldr	r2, [pc, #68]	; (80027e4 <HAL_RCC_ClockConfig+0x144>)
 80027a0:	68a0      	ldr	r0, [r4, #8]
 80027a2:	6893      	ldr	r3, [r2, #8]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	4298      	cmp	r0, r3
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027aa:	bf3f      	itttt	cc
 80027ac:	6893      	ldrcc	r3, [r2, #8]
 80027ae:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 80027b2:	4303      	orrcc	r3, r0
 80027b4:	6093      	strcc	r3, [r2, #8]
 80027b6:	e789      	b.n	80026cc <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f023 0307 	bic.w	r3, r3, #7
 80027be:	432b      	orrs	r3, r5
 80027c0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	42ab      	cmp	r3, r5
 80027ca:	f47f af6e 	bne.w	80026aa <HAL_RCC_ClockConfig+0xa>
 80027ce:	e783      	b.n	80026d8 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	68ab      	ldr	r3, [r5, #8]
 80027d2:	68e2      	ldr	r2, [r4, #12]
 80027d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027d8:	4313      	orrs	r3, r2
 80027da:	60ab      	str	r3, [r5, #8]
 80027dc:	e780      	b.n	80026e0 <HAL_RCC_ClockConfig+0x40>
 80027de:	bf00      	nop
 80027e0:	40022000 	.word	0x40022000
 80027e4:	40021000 	.word	0x40021000
 80027e8:	0800b1c1 	.word	0x0800b1c1
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000008 	.word	0x20000008

080027f4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCC_GetPCLK1Freq+0x18>)
 80027f6:	4a06      	ldr	r2, [pc, #24]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002802:	6810      	ldr	r0, [r2, #0]
 8002804:	f003 031f 	and.w	r3, r3, #31
}
 8002808:	40d8      	lsrs	r0, r3
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000
 8002810:	0800b1d1 	.word	0x0800b1d1
 8002814:	20000000 	.word	0x20000000

08002818 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x18>)
 800281a:	4a06      	ldr	r2, [pc, #24]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002826:	6810      	ldr	r0, [r2, #0]
 8002828:	f003 031f 	and.w	r3, r3, #31
}
 800282c:	40d8      	lsrs	r0, r3
 800282e:	4770      	bx	lr
 8002830:	40021000 	.word	0x40021000
 8002834:	0800b1d1 	.word	0x0800b1d1
 8002838:	20000000 	.word	0x20000000

0800283c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800283e:	4c42      	ldr	r4, [pc, #264]	; (8002948 <RCCEx_PLLSAI1_Config+0x10c>)
 8002840:	68e2      	ldr	r2, [r4, #12]
 8002842:	0793      	lsls	r3, r2, #30
{
 8002844:	4605      	mov	r5, r0
 8002846:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002848:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284a:	d029      	beq.n	80028a0 <RCCEx_PLLSAI1_Config+0x64>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800284c:	68e2      	ldr	r2, [r4, #12]
 800284e:	f002 0203 	and.w	r2, r2, #3
 8002852:	4282      	cmp	r2, r0
 8002854:	d13c      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x94>
       ||
 8002856:	2a00      	cmp	r2, #0
 8002858:	d03a      	beq.n	80028d0 <RCCEx_PLLSAI1_Config+0x94>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800285a:	68e3      	ldr	r3, [r4, #12]
       ||
 800285c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800285e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002862:	3301      	adds	r3, #1
       ||
 8002864:	4293      	cmp	r3, r2
 8002866:	d133      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002868:	6823      	ldr	r3, [r4, #0]
 800286a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800286e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002870:	f7ff f8d2 	bl	8001a18 <HAL_GetTick>
 8002874:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	011a      	lsls	r2, r3, #4
 800287a:	d432      	bmi.n	80028e2 <RCCEx_PLLSAI1_Config+0xa6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287c:	68aa      	ldr	r2, [r5, #8]
 800287e:	0212      	lsls	r2, r2, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002880:	2e00      	cmp	r6, #0
 8002882:	d035      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0xb4>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002884:	2e01      	cmp	r6, #1
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002886:	6923      	ldr	r3, [r4, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002888:	d14d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xea>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288a:	6929      	ldr	r1, [r5, #16]
 800288c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002890:	0849      	lsrs	r1, r1, #1
 8002892:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002896:	3901      	subs	r1, #1
 8002898:	4313      	orrs	r3, r2
 800289a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800289e:	e031      	b.n	8002904 <RCCEx_PLLSAI1_Config+0xc8>
    switch(PllSai1->PLLSAI1Source)
 80028a0:	2802      	cmp	r0, #2
 80028a2:	d011      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x8c>
 80028a4:	2803      	cmp	r0, #3
 80028a6:	d015      	beq.n	80028d4 <RCCEx_PLLSAI1_Config+0x98>
 80028a8:	2801      	cmp	r0, #1
 80028aa:	d111      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	0797      	lsls	r7, r2, #30
 80028b0:	d51d      	bpl.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028b2:	68e2      	ldr	r2, [r4, #12]
 80028b4:	6869      	ldr	r1, [r5, #4]
 80028b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80028ba:	3901      	subs	r1, #1
 80028bc:	ea42 0300 	orr.w	r3, r2, r0
 80028c0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80028c4:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80028c6:	e7cf      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c8:	6822      	ldr	r2, [r4, #0]
 80028ca:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ce:	d1f0      	bne.n	80028b2 <RCCEx_PLLSAI1_Config+0x76>
      status = HAL_ERROR;
 80028d0:	2001      	movs	r0, #1
 80028d2:	e00c      	b.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	0391      	lsls	r1, r2, #14
 80028d8:	d4eb      	bmi.n	80028b2 <RCCEx_PLLSAI1_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028da:	6822      	ldr	r2, [r4, #0]
 80028dc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80028e0:	e7f5      	b.n	80028ce <RCCEx_PLLSAI1_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028e2:	f7ff f899 	bl	8001a18 <HAL_GetTick>
 80028e6:	1bc0      	subs	r0, r0, r7
 80028e8:	2802      	cmp	r0, #2
 80028ea:	d9c4      	bls.n	8002876 <RCCEx_PLLSAI1_Config+0x3a>
    switch(PllSai1->PLLSAI1Source)
 80028ec:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80028ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	68e9      	ldr	r1, [r5, #12]
 80028f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028fc:	0909      	lsrs	r1, r1, #4
 80028fe:	4313      	orrs	r3, r2
 8002900:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002904:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800290c:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800290e:	f7ff f883 	bl	8001a18 <HAL_GetTick>
 8002912:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	d510      	bpl.n	800293c <RCCEx_PLLSAI1_Config+0x100>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800291a:	6923      	ldr	r3, [r4, #16]
 800291c:	69aa      	ldr	r2, [r5, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	6123      	str	r3, [r4, #16]
 8002922:	2000      	movs	r0, #0
  return status;
 8002924:	e7e3      	b.n	80028ee <RCCEx_PLLSAI1_Config+0xb2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002926:	6969      	ldr	r1, [r5, #20]
 8002928:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800292c:	0849      	lsrs	r1, r1, #1
 800292e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002932:	3901      	subs	r1, #1
 8002934:	4313      	orrs	r3, r2
 8002936:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800293a:	e7e3      	b.n	8002904 <RCCEx_PLLSAI1_Config+0xc8>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800293c:	f7ff f86c 	bl	8001a18 <HAL_GetTick>
 8002940:	1b80      	subs	r0, r0, r6
 8002942:	2802      	cmp	r0, #2
 8002944:	d9e6      	bls.n	8002914 <RCCEx_PLLSAI1_Config+0xd8>
 8002946:	e7d1      	b.n	80028ec <RCCEx_PLLSAI1_Config+0xb0>
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800294e:	4c3b      	ldr	r4, [pc, #236]	; (8002a3c <RCCEx_PLLSAI2_Config+0xf0>)
 8002950:	68e2      	ldr	r2, [r4, #12]
 8002952:	0793      	lsls	r3, r2, #30
{
 8002954:	4605      	mov	r5, r0
 8002956:	460e      	mov	r6, r1
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002958:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	d026      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x5e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800295c:	68e2      	ldr	r2, [r4, #12]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	4282      	cmp	r2, r0
 8002964:	d139      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x8e>
       ||
 8002966:	2a00      	cmp	r2, #0
 8002968:	d037      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x8e>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800296a:	68e3      	ldr	r3, [r4, #12]
       ||
 800296c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800296e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002972:	3301      	adds	r3, #1
       ||
 8002974:	4293      	cmp	r3, r2
 8002976:	d130      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x8e>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800297e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002980:	f7ff f84a 	bl	8001a18 <HAL_GetTick>
 8002984:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	009a      	lsls	r2, r3, #2
 800298a:	d42f      	bmi.n	80029ec <RCCEx_PLLSAI2_Config+0xa0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298c:	68a9      	ldr	r1, [r5, #8]
 800298e:	0209      	lsls	r1, r1, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002990:	b39e      	cbz	r6, 80029fa <RCCEx_PLLSAI2_Config+0xae>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002992:	6963      	ldr	r3, [r4, #20]
 8002994:	692a      	ldr	r2, [r5, #16]
 8002996:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800299a:	0852      	lsrs	r2, r2, #1
 800299c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029a0:	3a01      	subs	r2, #1
 80029a2:	430b      	orrs	r3, r1
 80029a4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80029a8:	e031      	b.n	8002a0e <RCCEx_PLLSAI2_Config+0xc2>
    switch(PllSai2->PLLSAI2Source)
 80029aa:	2802      	cmp	r0, #2
 80029ac:	d011      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x86>
 80029ae:	2803      	cmp	r0, #3
 80029b0:	d015      	beq.n	80029de <RCCEx_PLLSAI2_Config+0x92>
 80029b2:	2801      	cmp	r0, #1
 80029b4:	d111      	bne.n	80029da <RCCEx_PLLSAI2_Config+0x8e>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b6:	6822      	ldr	r2, [r4, #0]
 80029b8:	0797      	lsls	r7, r2, #30
 80029ba:	d51d      	bpl.n	80029f8 <RCCEx_PLLSAI2_Config+0xac>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029bc:	68e2      	ldr	r2, [r4, #12]
 80029be:	6869      	ldr	r1, [r5, #4]
 80029c0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80029c4:	3901      	subs	r1, #1
 80029c6:	ea42 0300 	orr.w	r3, r2, r0
 80029ca:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80029ce:	60e3      	str	r3, [r4, #12]
  if(status == HAL_OK)
 80029d0:	e7d2      	b.n	8002978 <RCCEx_PLLSAI2_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029d2:	6822      	ldr	r2, [r4, #0]
 80029d4:	f412 6f80 	tst.w	r2, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029d8:	d1f0      	bne.n	80029bc <RCCEx_PLLSAI2_Config+0x70>
      status = HAL_ERROR;
 80029da:	2001      	movs	r0, #1
 80029dc:	e00c      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xac>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029de:	6822      	ldr	r2, [r4, #0]
 80029e0:	0391      	lsls	r1, r2, #14
 80029e2:	d4eb      	bmi.n	80029bc <RCCEx_PLLSAI2_Config+0x70>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e4:	6822      	ldr	r2, [r4, #0]
 80029e6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80029ea:	e7f5      	b.n	80029d8 <RCCEx_PLLSAI2_Config+0x8c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029ec:	f7ff f814 	bl	8001a18 <HAL_GetTick>
 80029f0:	1bc0      	subs	r0, r0, r7
 80029f2:	2802      	cmp	r0, #2
 80029f4:	d9c7      	bls.n	8002986 <RCCEx_PLLSAI2_Config+0x3a>
    switch(PllSai2->PLLSAI2Source)
 80029f6:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80029f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	68ea      	ldr	r2, [r5, #12]
 80029fe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	0912      	lsrs	r2, r2, #4
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a0e:	6163      	str	r3, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a16:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002a18:	f7fe fffe 	bl	8001a18 <HAL_GetTick>
 8002a1c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	d505      	bpl.n	8002a30 <RCCEx_PLLSAI2_Config+0xe4>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a24:	6963      	ldr	r3, [r4, #20]
 8002a26:	696a      	ldr	r2, [r5, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	6163      	str	r3, [r4, #20]
 8002a2c:	2000      	movs	r0, #0
  return status;
 8002a2e:	e7e3      	b.n	80029f8 <RCCEx_PLLSAI2_Config+0xac>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a30:	f7fe fff2 	bl	8001a18 <HAL_GetTick>
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	2802      	cmp	r0, #2
 8002a38:	d9f1      	bls.n	8002a1e <RCCEx_PLLSAI2_Config+0xd2>
 8002a3a:	e7dc      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
 8002a3c:	40021000 	.word	0x40021000

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002a40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a44:	6806      	ldr	r6, [r0, #0]
 8002a46:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002a4a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a4e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002a50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002a54:	d022      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a56:	d813      	bhi.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a58:	b331      	cbz	r1, 8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002a5a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002a5e:	d02a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a60:	2601      	movs	r6, #1
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a62:	6823      	ldr	r3, [r4, #0]
 8002a64:	04d8      	lsls	r0, r3, #19
 8002a66:	d509      	bpl.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002a68:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002a6a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002a6e:	d02c      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002a70:	d826      	bhi.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8002a72:	b381      	cbz	r1, 8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x96>
 8002a74:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002a78:	d072      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8002a7a:	2601      	movs	r6, #1
 8002a7c:	4635      	mov	r5, r6
 8002a7e:	e039      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002a80:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002a84:	d1ec      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a86:	4a3c      	ldr	r2, [pc, #240]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002a88:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002a8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002a8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002a92:	430b      	orrs	r3, r1
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002a98:	2600      	movs	r6, #0
 8002a9a:	e7e2      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a9c:	4a36      	ldr	r2, [pc, #216]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002a9e:	68d3      	ldr	r3, [r2, #12]
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8002aa6:	e7ee      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002aa8:	3004      	adds	r0, #4
 8002aaa:	f7ff fec7 	bl	800283c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002aae:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	d1d6      	bne.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002ab4:	e7e7      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x46>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	3020      	adds	r0, #32
 8002aba:	f7ff ff47 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002abe:	e7f6      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002ac0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002ac4:	d1d9      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8002ac6:	4635      	mov	r5, r6
 8002ac8:	e009      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aca:	4a2b      	ldr	r2, [pc, #172]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002acc:	68d3      	ldr	r3, [r2, #12]
 8002ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad2:	60d3      	str	r3, [r2, #12]
      break;
 8002ad4:	e7f7      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ad6:	1d20      	adds	r0, r4, #4
 8002ad8:	f7ff feb0 	bl	800283c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002adc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002ade:	2d00      	cmp	r5, #0
 8002ae0:	d144      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ae2:	4a25      	ldr	r2, [pc, #148]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002ae4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002ae6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002aea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002aee:	430b      	orrs	r3, r1
 8002af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	0399      	lsls	r1, r3, #14
 8002af8:	f140 815d 	bpl.w	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x376>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002afc:	4f1e      	ldr	r7, [pc, #120]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b00:	00da      	lsls	r2, r3, #3
 8002b02:	d435      	bmi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	9301      	str	r3, [sp, #4]
 8002b14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b16:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002b7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b1e:	f8d9 3000 	ldr.w	r3, [r9]
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002b2a:	f7fe ff75 	bl	8001a18 <HAL_GetTick>
 8002b2e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b30:	f8d9 3000 	ldr.w	r3, [r9]
 8002b34:	05db      	lsls	r3, r3, #23
 8002b36:	d523      	bpl.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x140>
    if(ret == HAL_OK)
 8002b38:	bb4d      	cbnz	r5, 8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002b42:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002b46:	f040 810e 	bne.w	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x326>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b4e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b5c:	4635      	mov	r5, r6
 8002b5e:	e016      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b60:	2100      	movs	r1, #0
 8002b62:	f104 0020 	add.w	r0, r4, #32
 8002b66:	f7ff fef1 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002b6a:	e7b7      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002b6c:	462e      	mov	r6, r5
 8002b6e:	e7c1      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002b70:	f04f 0800 	mov.w	r8, #0
 8002b74:	e7d1      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fe ff4a 	bl	8001a18 <HAL_GetTick>
 8002b84:	eba0 000a 	sub.w	r0, r0, sl
 8002b88:	2802      	cmp	r0, #2
 8002b8a:	d9d1      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8002b8c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002b8e:	f1b8 0f00 	cmp.w	r8, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	07da      	lsls	r2, r3, #31
 8002ba0:	d508      	bpl.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ba2:	499b      	ldr	r1, [pc, #620]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ba4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ba6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002baa:	f022 0203 	bic.w	r2, r2, #3
 8002bae:	4302      	orrs	r2, r0
 8002bb0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bb4:	079f      	lsls	r7, r3, #30
 8002bb6:	d508      	bpl.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x18a>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bb8:	4995      	ldr	r1, [pc, #596]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002bba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002bbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bc0:	f022 020c 	bic.w	r2, r2, #12
 8002bc4:	4302      	orrs	r2, r0
 8002bc6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bca:	075e      	lsls	r6, r3, #29
 8002bcc:	d508      	bpl.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bce:	4990      	ldr	r1, [pc, #576]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002bd0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002bd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bd6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002bda:	4302      	orrs	r2, r0
 8002bdc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002be0:	0718      	lsls	r0, r3, #28
 8002be2:	d508      	bpl.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002be4:	498a      	ldr	r1, [pc, #552]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002be6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002be8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002bec:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002bf0:	4302      	orrs	r2, r0
 8002bf2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf6:	06d9      	lsls	r1, r3, #27
 8002bf8:	d508      	bpl.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bfa:	4985      	ldr	r1, [pc, #532]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002bfc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002bfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002c06:	4302      	orrs	r2, r0
 8002c08:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c0c:	069a      	lsls	r2, r3, #26
 8002c0e:	d508      	bpl.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c10:	497f      	ldr	r1, [pc, #508]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c12:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002c14:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c1c:	4302      	orrs	r2, r0
 8002c1e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c22:	059f      	lsls	r7, r3, #22
 8002c24:	d508      	bpl.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c26:	497a      	ldr	r1, [pc, #488]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c28:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002c2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c2e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002c32:	4302      	orrs	r2, r0
 8002c34:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c38:	055e      	lsls	r6, r3, #21
 8002c3a:	d508      	bpl.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c3c:	4974      	ldr	r1, [pc, #464]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c3e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002c40:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c44:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002c48:	4302      	orrs	r2, r0
 8002c4a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4e:	0658      	lsls	r0, r3, #25
 8002c50:	d508      	bpl.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c52:	496f      	ldr	r1, [pc, #444]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c54:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002c56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002c5e:	4302      	orrs	r2, r0
 8002c60:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c64:	0619      	lsls	r1, r3, #24
 8002c66:	d508      	bpl.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	4969      	ldr	r1, [pc, #420]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c6c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c70:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002c74:	4302      	orrs	r2, r0
 8002c76:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c7a:	05da      	lsls	r2, r3, #23
 8002c7c:	d508      	bpl.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c7e:	4964      	ldr	r1, [pc, #400]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c82:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002c86:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002c8a:	4302      	orrs	r2, r0
 8002c8c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	d510      	bpl.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c94:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002c96:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002c98:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002c9c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002ca0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ca2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ca6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002caa:	f040 8086 	bne.w	8002dba <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cae:	68d3      	ldr	r3, [r2, #12]
 8002cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	031f      	lsls	r7, r3, #12
 8002cba:	d50f      	bpl.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbc:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002cbe:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002cc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cc4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002cc8:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cd2:	d17e      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x392>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd4:	68d3      	ldr	r3, [r2, #12]
 8002cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cda:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	035e      	lsls	r6, r3, #13
 8002ce0:	d50f      	bpl.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce2:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002ce4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002ce6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cea:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002cee:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cf0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cf8:	d176      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cfa:	68d3      	ldr	r3, [r2, #12]
 8002cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d00:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	0458      	lsls	r0, r3, #17
 8002d06:	d512      	bpl.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d08:	4941      	ldr	r1, [pc, #260]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002d0a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002d0c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d10:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002d14:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d16:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d1e:	d16e      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x3be>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d20:	2102      	movs	r1, #2
 8002d22:	1d20      	adds	r0, r4, #4
 8002d24:	f7ff fd8a 	bl	800283c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	bf18      	it	ne
 8002d2c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d2e:	6822      	ldr	r2, [r4, #0]
 8002d30:	0411      	lsls	r1, r2, #16
 8002d32:	d508      	bpl.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x306>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d34:	4936      	ldr	r1, [pc, #216]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002d36:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002d38:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002d3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d40:	4303      	orrs	r3, r0
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d46:	03d3      	lsls	r3, r2, #15
 8002d48:	d509      	bpl.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d4a:	4a31      	ldr	r2, [pc, #196]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8002d4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002d50:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002d5e:	4628      	mov	r0, r5
 8002d60:	b002      	add	sp, #8
 8002d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d66:	429a      	cmp	r2, r3
 8002d68:	f43f aeef 	beq.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d80:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d88:	07d0      	lsls	r0, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002d8e:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d92:	f57f aeda 	bpl.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002d96:	f7fe fe3f 	bl	8001a18 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002d9e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da4:	0799      	lsls	r1, r3, #30
 8002da6:	f53f aed0 	bmi.w	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fe35 	bl	8001a18 <HAL_GetTick>
 8002dae:	1b40      	subs	r0, r0, r5
 8002db0:	4548      	cmp	r0, r9
 8002db2:	d9f5      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002db4:	e6ea      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002db6:	4635      	mov	r5, r6
 8002db8:	e6f0      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dba:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002dbe:	f47f af7a 	bne.w	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	1d20      	adds	r0, r4, #4
 8002dc6:	f7ff fd39 	bl	800283c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	bf18      	it	ne
 8002dce:	4605      	movne	r5, r0
 8002dd0:	e771      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002dd2:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002dd6:	d181      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd8:	2101      	movs	r1, #1
 8002dda:	1d20      	adds	r0, r4, #4
 8002ddc:	f7ff fd2e 	bl	800283c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002de0:	2800      	cmp	r0, #0
 8002de2:	bf18      	it	ne
 8002de4:	4605      	movne	r5, r0
 8002de6:	e779      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002de8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002dec:	d189      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dee:	2101      	movs	r1, #1
 8002df0:	1d20      	adds	r0, r4, #4
 8002df2:	f7ff fd23 	bl	800283c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002df6:	2800      	cmp	r0, #0
 8002df8:	bf18      	it	ne
 8002dfa:	4605      	movne	r5, r0
 8002dfc:	e781      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dfe:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002e02:	d194      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e04:	2102      	movs	r1, #2
 8002e06:	f104 0020 	add.w	r0, r4, #32
 8002e0a:	f7ff fd9f 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002e0e:	e78b      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002e10:	40021000 	.word	0x40021000

08002e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e18:	461c      	mov	r4, r3
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e1a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e1c:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8002e1e:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002e22:	4605      	mov	r5, r0
 8002e24:	460e      	mov	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e26:	f7fe fdf7 	bl	8001a18 <HAL_GetTick>
 8002e2a:	443c      	add	r4, r7
 8002e2c:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002e2e:	f7fe fdf3 	bl	8001a18 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc4>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e34:	f8d5 9000 	ldr.w	r9, [r5]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2223      	movs	r2, #35	; 0x23
 8002e3c:	4353      	muls	r3, r2
 8002e3e:	0d1b      	lsrs	r3, r3, #20
  tmp_tickstart = HAL_GetTick();
 8002e40:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e42:	4363      	muls	r3, r4

  while ((hspi->Instance->SR & Fifo) != State)
 8002e44:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002e46:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e48:	6893      	ldr	r3, [r2, #8]
 8002e4a:	4033      	ands	r3, r6
 8002e4c:	d101      	bne.n	8002e52 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x3e>
    }
  }

  return HAL_OK;
 8002e4e:	4618      	mov	r0, r3
 8002e50:	e038      	b.n	8002ec4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002e52:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
      tmpreg8 = *ptmpreg8;
 8002e56:	bf01      	itttt	eq
 8002e58:	f899 300c 	ldrbeq.w	r3, [r9, #12]
 8002e5c:	b2db      	uxtbeq	r3, r3
 8002e5e:	f88d 3003 	strbeq.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8002e62:	f89d 3003 	ldrbeq.w	r3, [sp, #3]
    if (Timeout != HAL_MAX_DELAY)
 8002e66:	1c7b      	adds	r3, r7, #1
 8002e68:	d0ee      	beq.n	8002e48 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x34>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e6a:	f7fe fdd5 	bl	8001a18 <HAL_GetTick>
 8002e6e:	eba0 0008 	sub.w	r0, r0, r8
 8002e72:	42a0      	cmp	r0, r4
 8002e74:	d329      	bcc.n	8002eca <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb6>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e76:	682b      	ldr	r3, [r5, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e7e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e80:	686a      	ldr	r2, [r5, #4]
 8002e82:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e86:	d10a      	bne.n	8002e9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
 8002e88:	68aa      	ldr	r2, [r5, #8]
 8002e8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002e8e:	d002      	beq.n	8002e96 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x82>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002e94:	d103      	bne.n	8002e9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
          __HAL_SPI_DISABLE(hspi);
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e9c:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e9e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002ea0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002ea4:	d107      	bne.n	8002eb6 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa2>
          SPI_RESET_CRC(hspi);
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002eb4:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002ec2:	2003      	movs	r0, #3
}
 8002ec4:	b003      	add	sp, #12
 8002ec6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (count == 0U)
 8002eca:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ecc:	2b00      	cmp	r3, #0
      count--;
 8002ece:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ed0:	bf08      	it	eq
 8002ed2:	2400      	moveq	r4, #0
      count--;
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	e7b5      	b.n	8002e44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8002ed8:	20000000 	.word	0x20000000

08002edc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ede:	460e      	mov	r6, r1
 8002ee0:	4614      	mov	r4, r2
 8002ee2:	4605      	mov	r5, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ee4:	f7fe fd98 	bl	8001a18 <HAL_GetTick>
 8002ee8:	4434      	add	r4, r6
 8002eea:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002eec:	f7fe fd94 	bl	8001a18 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8002ef8:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002efa:	4363      	muls	r3, r4
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002efc:	682a      	ldr	r2, [r5, #0]
      count--;
 8002efe:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f00:	6893      	ldr	r3, [r2, #8]
 8002f02:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f06:	d101      	bne.n	8002f0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
  return HAL_OK;
 8002f08:	4618      	mov	r0, r3
 8002f0a:	e02d      	b.n	8002f68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 8002f0c:	1c73      	adds	r3, r6, #1
 8002f0e:	d0f7      	beq.n	8002f00 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f10:	f7fe fd82 	bl	8001a18 <HAL_GetTick>
 8002f14:	1bc0      	subs	r0, r0, r7
 8002f16:	42a0      	cmp	r0, r4
 8002f18:	d328      	bcc.n	8002f6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f1a:	682b      	ldr	r3, [r5, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f22:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f24:	686a      	ldr	r2, [r5, #4]
 8002f26:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f2a:	d10a      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
 8002f2c:	68aa      	ldr	r2, [r5, #8]
 8002f2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f32:	d002      	beq.n	8002f3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f38:	d103      	bne.n	8002f42 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x66>
          __HAL_SPI_DISABLE(hspi);
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f40:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f42:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002f44:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f48:	d107      	bne.n	8002f5a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7e>
          SPI_RESET_CRC(hspi);
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f58:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8002f60:	2300      	movs	r3, #0
 8002f62:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002f66:	2003      	movs	r0, #3
}
 8002f68:	b003      	add	sp, #12
 8002f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (count == 0U)
 8002f6c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002f6e:	2b00      	cmp	r3, #0
      count--;
 8002f70:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002f72:	bf08      	it	eq
 8002f74:	2400      	moveq	r4, #0
      count--;
 8002f76:	3b01      	subs	r3, #1
 8002f78:	e7c0      	b.n	8002efc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x20>
 8002f7a:	bf00      	nop
 8002f7c:	20000000 	.word	0x20000000

08002f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f82:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f84:	9201      	str	r2, [sp, #4]
{
 8002f86:	460d      	mov	r5, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f88:	460a      	mov	r2, r1
 8002f8a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002f8e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f90:	f7ff ff40 	bl	8002e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	b128      	cbz	r0, 8002fa4 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f9a:	f043 0320 	orr.w	r3, r3, #32
 8002f9e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fa0:	2003      	movs	r0, #3
 8002fa2:	e010      	b.n	8002fc6 <SPI_EndRxTxTransaction+0x46>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	4620      	mov	r0, r4
 8002faa:	9301      	str	r3, [sp, #4]
 8002fac:	f7ff ff96 	bl	8002edc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d1f0      	bne.n	8002f98 <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fb6:	462a      	mov	r2, r5
 8002fb8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f7ff ff29 	bl	8002e14 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d1e8      	bne.n	8002f98 <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8002fc6:	b003      	add	sp, #12
 8002fc8:	bd30      	pop	{r4, r5, pc}

08002fca <HAL_SPI_Init>:
{
 8002fca:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002fcc:	4604      	mov	r4, r0
 8002fce:	2800      	cmp	r0, #0
 8002fd0:	d05f      	beq.n	8003092 <HAL_SPI_Init+0xc8>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fd2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d158      	bne.n	800308a <HAL_SPI_Init+0xc0>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fd8:	6842      	ldr	r2, [r0, #4]
 8002fda:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002fde:	d000      	beq.n	8002fe2 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe0:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe6:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002fea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fee:	b923      	cbnz	r3, 8002ffa <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8002ff0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7fe fac5 	bl	8001584 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002ffa:	6825      	ldr	r5, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ffc:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ffe:	2302      	movs	r3, #2
 8003000:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003004:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003006:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800300a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300e:	602b      	str	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	d83f      	bhi.n	8003096 <HAL_SPI_Init+0xcc>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003016:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800301a:	d000      	beq.n	800301e <HAL_SPI_Init+0x54>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301c:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800301e:	6863      	ldr	r3, [r4, #4]
 8003020:	68a6      	ldr	r6, [r4, #8]
 8003022:	69a2      	ldr	r2, [r4, #24]
 8003024:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 8003028:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800302c:	4333      	orrs	r3, r6
 800302e:	6926      	ldr	r6, [r4, #16]
 8003030:	f006 0602 	and.w	r6, r6, #2
 8003034:	4333      	orrs	r3, r6
 8003036:	6966      	ldr	r6, [r4, #20]
 8003038:	f006 0601 	and.w	r6, r6, #1
 800303c:	4333      	orrs	r3, r6
 800303e:	f402 7600 	and.w	r6, r2, #512	; 0x200
 8003042:	4333      	orrs	r3, r6
 8003044:	69e6      	ldr	r6, [r4, #28]
 8003046:	f006 0638 	and.w	r6, r6, #56	; 0x38
 800304a:	4333      	orrs	r3, r6
 800304c:	6a26      	ldr	r6, [r4, #32]
 800304e:	f006 0680 	and.w	r6, r6, #128	; 0x80
 8003052:	4333      	orrs	r3, r6
 8003054:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003056:	f406 5600 	and.w	r6, r6, #8192	; 0x2000
 800305a:	4333      	orrs	r3, r6
 800305c:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800305e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003062:	f006 0608 	and.w	r6, r6, #8
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	4333      	orrs	r3, r6
 800306c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003070:	0c12      	lsrs	r2, r2, #16
 8003072:	430b      	orrs	r3, r1
 8003074:	f002 0204 	and.w	r2, r2, #4
 8003078:	4313      	orrs	r3, r2
 800307a:	4303      	orrs	r3, r0
 800307c:	606b      	str	r3, [r5, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800307e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003080:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003084:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 8003088:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800308a:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800308c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003090:	e7a7      	b.n	8002fe2 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
 8003094:	e7f8      	b.n	8003088 <HAL_SPI_Init+0xbe>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003096:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003098:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 800309c:	e7bd      	b.n	800301a <HAL_SPI_Init+0x50>

0800309e <HAL_SPI_Transmit>:
{
 800309e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80030a2:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80030a4:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 80030a8:	2b01      	cmp	r3, #1
{
 80030aa:	4604      	mov	r4, r0
 80030ac:	460d      	mov	r5, r1
 80030ae:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80030b0:	f000 80bc 	beq.w	800322c <HAL_SPI_Transmit+0x18e>
 80030b4:	2301      	movs	r3, #1
 80030b6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80030ba:	f7fe fcad 	bl	8001a18 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80030be:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80030c2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80030c4:	4682      	mov	sl, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80030c6:	fa5f f983 	uxtb.w	r9, r3
 80030ca:	f040 80ac 	bne.w	8003226 <HAL_SPI_Transmit+0x188>
  if ((pData == NULL) || (Size == 0U))
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d069      	beq.n	80031a6 <HAL_SPI_Transmit+0x108>
 80030d2:	f1b8 0f00 	cmp.w	r8, #0
 80030d6:	d066      	beq.n	80031a6 <HAL_SPI_Transmit+0x108>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030d8:	2303      	movs	r3, #3
 80030da:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030de:	2300      	movs	r3, #0
 80030e0:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 80030e2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->TxXferCount = Size;
 80030e6:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030ea:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80030ec:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80030f0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030f4:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80030f6:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030f8:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80030fe:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003102:	d107      	bne.n	8003114 <HAL_SPI_Transmit+0x76>
    __HAL_SPI_DISABLE(hspi);
 8003104:	6833      	ldr	r3, [r6, #0]
 8003106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310a:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800310c:	6833      	ldr	r3, [r6, #0]
 800310e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003112:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003114:	6833      	ldr	r3, [r6, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	6862      	ldr	r2, [r4, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003118:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800311a:	bf5e      	ittt	pl
 800311c:	6833      	ldrpl	r3, [r6, #0]
 800311e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003122:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003124:	68e3      	ldr	r3, [r4, #12]
 8003126:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800312a:	d943      	bls.n	80031b4 <HAL_SPI_Transmit+0x116>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800312c:	b112      	cbz	r2, 8003134 <HAL_SPI_Transmit+0x96>
 800312e:	f1b8 0f01 	cmp.w	r8, #1
 8003132:	d107      	bne.n	8003144 <HAL_SPI_Transmit+0xa6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003134:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003138:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800313a:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800313c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800313e:	3b01      	subs	r3, #1
 8003140:	b29b      	uxth	r3, r3
 8003142:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003144:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	b9b3      	cbnz	r3, 8003178 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800314a:	4652      	mov	r2, sl
 800314c:	4639      	mov	r1, r7
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff ff16 	bl	8002f80 <SPI_EndRxTxTransaction>
 8003154:	2800      	cmp	r0, #0
 8003156:	d163      	bne.n	8003220 <HAL_SPI_Transmit+0x182>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	b933      	cbnz	r3, 800316a <HAL_SPI_Transmit+0xcc>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	9201      	str	r2, [sp, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800316a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800316c:	b9db      	cbnz	r3, 80031a6 <HAL_SPI_Transmit+0x108>
    hspi->State = HAL_SPI_STATE_READY;
 800316e:	2201      	movs	r2, #1
 8003170:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003174:	4699      	mov	r9, r3
 8003176:	e016      	b.n	80031a6 <HAL_SPI_Transmit+0x108>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003178:	6822      	ldr	r2, [r4, #0]
 800317a:	6893      	ldr	r3, [r2, #8]
 800317c:	079d      	lsls	r5, r3, #30
 800317e:	d505      	bpl.n	800318c <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003180:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003182:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003186:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003188:	63a3      	str	r3, [r4, #56]	; 0x38
 800318a:	e7d7      	b.n	800313c <HAL_SPI_Transmit+0x9e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800318c:	f7fe fc44 	bl	8001a18 <HAL_GetTick>
 8003190:	eba0 000a 	sub.w	r0, r0, sl
 8003194:	42b8      	cmp	r0, r7
 8003196:	d3d5      	bcc.n	8003144 <HAL_SPI_Transmit+0xa6>
 8003198:	1c78      	adds	r0, r7, #1
 800319a:	d0d3      	beq.n	8003144 <HAL_SPI_Transmit+0xa6>
          hspi->State = HAL_SPI_STATE_READY;
 800319c:	2301      	movs	r3, #1
 800319e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          errorcode = HAL_TIMEOUT;
 80031a2:	f04f 0903 	mov.w	r9, #3
  __HAL_UNLOCK(hspi);
 80031a6:	2300      	movs	r3, #0
 80031a8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80031ac:	4648      	mov	r0, r9
 80031ae:	b002      	add	sp, #8
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	b112      	cbz	r2, 80031bc <HAL_SPI_Transmit+0x11e>
 80031b6:	f1b8 0f01 	cmp.w	r8, #1
 80031ba:	d113      	bne.n	80031e4 <HAL_SPI_Transmit+0x146>
      if (hspi->TxXferCount > 1U)
 80031bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d906      	bls.n	80031d2 <HAL_SPI_Transmit+0x134>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031c4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80031c8:	60f3      	str	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ca:	63a5      	str	r5, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80031cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031ce:	3b02      	subs	r3, #2
 80031d0:	e006      	b.n	80031e0 <HAL_SPI_Transmit+0x142>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031d2:	782b      	ldrb	r3, [r5, #0]
 80031d4:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr ++;
 80031d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031d8:	3301      	adds	r3, #1
 80031da:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80031dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80031e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ae      	beq.n	800314a <HAL_SPI_Transmit+0xac>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	6893      	ldr	r3, [r2, #8]
 80031f0:	0799      	lsls	r1, r3, #30
 80031f2:	d50c      	bpl.n	800320e <HAL_SPI_Transmit+0x170>
        if (hspi->TxXferCount > 1U)
 80031f4:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if (hspi->TxXferCount > 1U)
 80031f8:	b289      	uxth	r1, r1
 80031fa:	2901      	cmp	r1, #1
 80031fc:	d904      	bls.n	8003208 <HAL_SPI_Transmit+0x16a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fe:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003202:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003204:	63a3      	str	r3, [r4, #56]	; 0x38
 8003206:	e7e1      	b.n	80031cc <HAL_SPI_Transmit+0x12e>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 800320c:	e7e3      	b.n	80031d6 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800320e:	f7fe fc03 	bl	8001a18 <HAL_GetTick>
 8003212:	eba0 000a 	sub.w	r0, r0, sl
 8003216:	42b8      	cmp	r0, r7
 8003218:	d3e4      	bcc.n	80031e4 <HAL_SPI_Transmit+0x146>
 800321a:	1c7b      	adds	r3, r7, #1
 800321c:	d0e2      	beq.n	80031e4 <HAL_SPI_Transmit+0x146>
 800321e:	e7bd      	b.n	800319c <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003220:	2320      	movs	r3, #32
 8003222:	6623      	str	r3, [r4, #96]	; 0x60
 8003224:	e798      	b.n	8003158 <HAL_SPI_Transmit+0xba>
    errorcode = HAL_BUSY;
 8003226:	f04f 0902 	mov.w	r9, #2
 800322a:	e7bc      	b.n	80031a6 <HAL_SPI_Transmit+0x108>
  __HAL_LOCK(hspi);
 800322c:	f04f 0902 	mov.w	r9, #2
 8003230:	e7bc      	b.n	80031ac <HAL_SPI_Transmit+0x10e>
	...

08003234 <HAL_SPI_Transmit_DMA>:
{
 8003234:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003236:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 800323a:	2b01      	cmp	r3, #1
{
 800323c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800323e:	d073      	beq.n	8003328 <HAL_SPI_Transmit_DMA+0xf4>
 8003240:	2301      	movs	r3, #1
 8003242:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8003246:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800324a:	2b01      	cmp	r3, #1
 800324c:	b2dd      	uxtb	r5, r3
 800324e:	d169      	bne.n	8003324 <HAL_SPI_Transmit_DMA+0xf0>
  if ((pData == NULL) || (Size == 0U))
 8003250:	2900      	cmp	r1, #0
 8003252:	d048      	beq.n	80032e6 <HAL_SPI_Transmit_DMA+0xb2>
 8003254:	2a00      	cmp	r2, #0
 8003256:	d046      	beq.n	80032e6 <HAL_SPI_Transmit_DMA+0xb2>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003258:	2303      	movs	r3, #3
 800325a:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	2300      	movs	r3, #0
 8003260:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->RxISR       = NULL;
 8003262:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi->TxXferCount = Size;
 8003266:	87c2      	strh	r2, [r0, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003268:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800326a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800326e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003272:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8003274:	8782      	strh	r2, [r0, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800327a:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800327c:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800327e:	d107      	bne.n	8003290 <HAL_SPI_Transmit_DMA+0x5c>
    __HAL_SPI_DISABLE(hspi);
 8003280:	6813      	ldr	r3, [r2, #0]
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328e:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003290:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003292:	4b26      	ldr	r3, [pc, #152]	; (800332c <HAL_SPI_Transmit_DMA+0xf8>)
 8003294:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003296:	4b26      	ldr	r3, [pc, #152]	; (8003330 <HAL_SPI_Transmit_DMA+0xfc>)
 8003298:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_SPI_Transmit_DMA+0x100>)
 800329c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	6383      	str	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032a2:	6853      	ldr	r3, [r2, #4]
 80032a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a8:	6053      	str	r3, [r2, #4]
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80032aa:	68e3      	ldr	r3, [r4, #12]
 80032ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b0:	d80f      	bhi.n	80032d2 <HAL_SPI_Transmit_DMA+0x9e>
 80032b2:	6983      	ldr	r3, [r0, #24]
 80032b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b8:	d10b      	bne.n	80032d2 <HAL_SPI_Transmit_DMA+0x9e>
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80032ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032bc:	f013 0f01 	tst.w	r3, #1
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032c0:	6853      	ldr	r3, [r2, #4]
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80032c2:	d115      	bne.n	80032f0 <HAL_SPI_Transmit_DMA+0xbc>
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032c8:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80032ca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032cc:	f3c3 034e 	ubfx	r3, r3, #1, #15
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
                                 hspi->TxXferCount))
 80032d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80032d4:	320c      	adds	r2, #12
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	f7fe fc86 	bl	8001be8 <HAL_DMA_Start_IT>
 80032dc:	b180      	cbz	r0, 8003300 <HAL_SPI_Transmit_DMA+0xcc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80032de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032e0:	f043 0310 	orr.w	r3, r3, #16
 80032e4:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80032e6:	2300      	movs	r3, #0
 80032e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 80032ec:	4628      	mov	r0, r5
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6053      	str	r3, [r2, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80032f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032f8:	f3c3 034e 	ubfx	r3, r3, #1, #15
 80032fc:	3301      	adds	r3, #1
 80032fe:	e7e7      	b.n	80032d0 <HAL_SPI_Transmit_DMA+0x9c>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003300:	6823      	ldr	r3, [r4, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003306:	bf5e      	ittt	pl
 8003308:	681a      	ldrpl	r2, [r3, #0]
 800330a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800330e:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	f042 0202 	orr.w	r2, r2, #2
 800331e:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003320:	2500      	movs	r5, #0
 8003322:	e7e0      	b.n	80032e6 <HAL_SPI_Transmit_DMA+0xb2>
    errorcode = HAL_BUSY;
 8003324:	2502      	movs	r5, #2
 8003326:	e7de      	b.n	80032e6 <HAL_SPI_Transmit_DMA+0xb2>
  __HAL_LOCK(hspi);
 8003328:	2502      	movs	r5, #2
 800332a:	e7df      	b.n	80032ec <HAL_SPI_Transmit_DMA+0xb8>
 800332c:	0800333d 	.word	0x0800333d
 8003330:	0800336b 	.word	0x0800336b
 8003334:	08003349 	.word	0x08003349

08003338 <HAL_SPI_TxCpltCallback>:
 8003338:	4770      	bx	lr

0800333a <HAL_SPI_TxHalfCpltCallback>:
 800333a:	4770      	bx	lr

0800333c <SPI_DMAHalfTransmitCplt>:
{
 800333c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 800333e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8003340:	f7ff fffb 	bl	800333a <HAL_SPI_TxHalfCpltCallback>
}
 8003344:	bd08      	pop	{r3, pc}

08003346 <HAL_SPI_ErrorCallback>:
 8003346:	4770      	bx	lr

08003348 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003348:	6a80      	ldr	r0, [r0, #40]	; 0x28
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800334a:	6802      	ldr	r2, [r0, #0]
{
 800334c:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800334e:	6853      	ldr	r3, [r2, #4]
 8003350:	f023 0303 	bic.w	r3, r3, #3
 8003354:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003356:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003358:	f043 0310 	orr.w	r3, r3, #16
 800335c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800335e:	2301      	movs	r3, #1
 8003360:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8003364:	f7ff ffef 	bl	8003346 <HAL_SPI_ErrorCallback>
}
 8003368:	bd08      	pop	{r3, pc}

0800336a <SPI_DMATransmitCplt>:
{
 800336a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800336c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800336e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 8003370:	f7fe fb52 	bl	8001a18 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003374:	682b      	ldr	r3, [r5, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	069b      	lsls	r3, r3, #26
  tickstart = HAL_GetTick();
 800337a:	4602      	mov	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800337c:	d426      	bmi.n	80033cc <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	f021 0120 	bic.w	r1, r1, #32
 8003386:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003388:	6859      	ldr	r1, [r3, #4]
 800338a:	f021 0102 	bic.w	r1, r1, #2
 800338e:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003390:	4620      	mov	r0, r4
 8003392:	2164      	movs	r1, #100	; 0x64
 8003394:	f7ff fdf4 	bl	8002f80 <SPI_EndRxTxTransaction>
 8003398:	b118      	cbz	r0, 80033a2 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800339c:	f043 0320 	orr.w	r3, r3, #32
 80033a0:	6623      	str	r3, [r4, #96]	; 0x60
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033a2:	68a3      	ldr	r3, [r4, #8]
 80033a4:	b933      	cbnz	r3, 80033b4 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	9201      	str	r2, [sp, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033be:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033c0:	b123      	cbz	r3, 80033cc <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80033c2:	4620      	mov	r0, r4
 80033c4:	f7ff ffbf 	bl	8003346 <HAL_SPI_ErrorCallback>
}
 80033c8:	b003      	add	sp, #12
 80033ca:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80033cc:	4620      	mov	r0, r4
 80033ce:	f7ff ffb3 	bl	8003338 <HAL_SPI_TxCpltCallback>
 80033d2:	e7f9      	b.n	80033c8 <SPI_DMATransmitCplt+0x5e>

080033d4 <HAL_SPI_GetState>:
  return hspi->State;
 80033d4:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80033d8:	4770      	bx	lr

080033da <HAL_TIM_IC_MspInit>:
 80033da:	4770      	bx	lr

080033dc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033dc:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80033de:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	4290      	cmp	r0, r2
 80033e2:	d012      	beq.n	800340a <TIM_Base_SetConfig+0x2e>
 80033e4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80033e8:	d00f      	beq.n	800340a <TIM_Base_SetConfig+0x2e>
 80033ea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80033ee:	4290      	cmp	r0, r2
 80033f0:	d00b      	beq.n	800340a <TIM_Base_SetConfig+0x2e>
 80033f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033f6:	4290      	cmp	r0, r2
 80033f8:	d007      	beq.n	800340a <TIM_Base_SetConfig+0x2e>
 80033fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80033fe:	4290      	cmp	r0, r2
 8003400:	d003      	beq.n	800340a <TIM_Base_SetConfig+0x2e>
 8003402:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003406:	4290      	cmp	r0, r2
 8003408:	d119      	bne.n	800343e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800340a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800340c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003410:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003412:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <TIM_Base_SetConfig+0xc4>)
 8003414:	4290      	cmp	r0, r2
 8003416:	d01d      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 8003418:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800341c:	d01a      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 800341e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003422:	4290      	cmp	r0, r2
 8003424:	d016      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 8003426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800342a:	4290      	cmp	r0, r2
 800342c:	d012      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 800342e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003432:	4290      	cmp	r0, r2
 8003434:	d00e      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 8003436:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800343a:	4290      	cmp	r0, r2
 800343c:	d00a      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 800343e:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <TIM_Base_SetConfig+0xc8>)
 8003440:	4290      	cmp	r0, r2
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 8003444:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003448:	4290      	cmp	r0, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0x78>
 800344c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003450:	4290      	cmp	r0, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003454:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800345c:	694a      	ldr	r2, [r1, #20]
 800345e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003462:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003464:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003466:	688b      	ldr	r3, [r1, #8]
 8003468:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800346a:	680b      	ldr	r3, [r1, #0]
 800346c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <TIM_Base_SetConfig+0xc4>)
 8003470:	4298      	cmp	r0, r3
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0xb8>
 8003474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003478:	4298      	cmp	r0, r3
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0xb8>
 800347c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003480:	4298      	cmp	r0, r3
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0xb8>
 8003484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003488:	4298      	cmp	r0, r3
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0xb8>
 800348c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003490:	4298      	cmp	r0, r3
 8003492:	d101      	bne.n	8003498 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	690b      	ldr	r3, [r1, #16]
 8003496:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003498:	2301      	movs	r3, #1
 800349a:	6143      	str	r3, [r0, #20]
}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40014000 	.word	0x40014000

080034a8 <HAL_TIM_Base_Init>:
{
 80034a8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80034aa:	4604      	mov	r4, r0
 80034ac:	b350      	cbz	r0, 8003504 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034b6:	b91b      	cbnz	r3, 80034c0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80034b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80034bc:	f7fe f9b0 	bl	8001820 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c8:	1d21      	adds	r1, r4, #4
 80034ca:	f7ff ff87 	bl	80033dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 80034d4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80034da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80034de:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80034e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80034e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ee:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034f6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80034fa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80034fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003502:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003504:	2001      	movs	r0, #1
 8003506:	e7fc      	b.n	8003502 <HAL_TIM_Base_Init+0x5a>

08003508 <HAL_TIM_IC_Init>:
{
 8003508:	b510      	push	{r4, lr}
  if (htim == NULL)
 800350a:	4604      	mov	r4, r0
 800350c:	b350      	cbz	r0, 8003564 <HAL_TIM_IC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003512:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003516:	b91b      	cbnz	r3, 8003520 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003518:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800351c:	f7ff ff5d 	bl	80033da <HAL_TIM_IC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003522:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003528:	1d21      	adds	r1, r4, #4
 800352a:	f7ff ff57 	bl	80033dc <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800352e:	2301      	movs	r3, #1
 8003530:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8003534:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003536:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800353a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800353e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003542:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003546:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800354a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003556:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800355a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800355e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003562:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
 8003566:	e7fc      	b.n	8003562 <HAL_TIM_IC_Init+0x5a>

08003568 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003568:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800356a:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800356e:	4e18      	ldr	r6, [pc, #96]	; (80035d0 <TIM_TI1_SetConfig+0x68>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003570:	f024 0401 	bic.w	r4, r4, #1
 8003574:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003576:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8003578:	6984      	ldr	r4, [r0, #24]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800357a:	d025      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 800357c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003580:	d022      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 8003582:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8003586:	42b0      	cmp	r0, r6
 8003588:	d01e      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 800358a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800358e:	42b0      	cmp	r0, r6
 8003590:	d01a      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 8003592:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8003596:	42b0      	cmp	r0, r6
 8003598:	d016      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 800359a:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800359e:	42b0      	cmp	r0, r6
 80035a0:	d012      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
 80035a2:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 80035a6:	42b0      	cmp	r0, r6
 80035a8:	d00e      	beq.n	80035c8 <TIM_TI1_SetConfig+0x60>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80035aa:	f044 0201 	orr.w	r2, r4, #1
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035ae:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	4313      	orrs	r3, r2

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035b8:	f001 010a 	and.w	r1, r1, #10
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035bc:	f025 020a 	bic.w	r2, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80035c0:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c2:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80035c4:	6201      	str	r1, [r0, #32]
}
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80035c8:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80035cc:	4322      	orrs	r2, r4
 80035ce:	e7ee      	b.n	80035ae <TIM_TI1_SetConfig+0x46>
 80035d0:	40012c00 	.word	0x40012c00

080035d4 <HAL_TIM_IC_ConfigChannel>:
{
 80035d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80035d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80035da:	2b01      	cmp	r3, #1
{
 80035dc:	4605      	mov	r5, r0
 80035de:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 80035e0:	f000 808b 	beq.w	80036fa <HAL_TIM_IC_ConfigChannel+0x126>
 80035e4:	2301      	movs	r3, #1
 80035e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 80035ea:	b992      	cbnz	r2, 8003612 <HAL_TIM_IC_ConfigChannel+0x3e>
    TIM_TI1_SetConfig(htim->Instance,
 80035ec:	6800      	ldr	r0, [r0, #0]
 80035ee:	68cb      	ldr	r3, [r1, #12]
 80035f0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80035f4:	f7ff ffb8 	bl	8003568 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035f8:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035fa:	68a2      	ldr	r2, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80035fc:	f023 030c 	bic.w	r3, r3, #12
 8003600:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003602:	6983      	ldr	r3, [r0, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	6183      	str	r3, [r0, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003608:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800360a:	2300      	movs	r3, #0
 800360c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8003610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8003612:	2a04      	cmp	r2, #4
 8003614:	d124      	bne.n	8003660 <HAL_TIM_IC_ConfigChannel+0x8c>
    TIM_TI2_SetConfig(htim->Instance,
 8003616:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003618:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800361a:	6a18      	ldr	r0, [r3, #32]
 800361c:	f020 0010 	bic.w	r0, r0, #16
                      sConfig->ICSelection,
 8003620:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 8003624:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003626:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003628:	6998      	ldr	r0, [r3, #24]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800362a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800362e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003632:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003634:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003638:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800363a:	0112      	lsls	r2, r2, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800363c:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800363e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003642:	f026 00a0 	bic.w	r0, r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003646:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003648:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800364a:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800364c:	699a      	ldr	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800364e:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003654:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800365c:	619a      	str	r2, [r3, #24]
 800365e:	e7d3      	b.n	8003608 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_3)
 8003660:	2a08      	cmp	r2, #8
 8003662:	d122      	bne.n	80036aa <HAL_TIM_IC_ConfigChannel+0xd6>
    TIM_TI3_SetConfig(htim->Instance,
 8003664:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003666:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003668:	6a1f      	ldr	r7, [r3, #32]
 800366a:	f427 7780 	bic.w	r7, r7, #256	; 0x100
                      sConfig->ICSelection,
 800366e:	e9d1 2000 	ldrd	r2, r0, [r1]
                      sConfig->ICFilter);
 8003672:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003674:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003676:	69df      	ldr	r7, [r3, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003678:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= TIM_ICSelection;
 800367c:	4338      	orrs	r0, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800367e:	0109      	lsls	r1, r1, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003680:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003684:	b2c9      	uxtb	r1, r1

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003686:	0212      	lsls	r2, r2, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003688:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800368a:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800368e:	f426 6020 	bic.w	r0, r6, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003692:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003694:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8003696:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003698:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800369a:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800369c:	f022 020c 	bic.w	r2, r2, #12
 80036a0:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	430a      	orrs	r2, r1
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036a6:	61da      	str	r2, [r3, #28]
 80036a8:	e7ae      	b.n	8003608 <HAL_TIM_IC_ConfigChannel+0x34>
  else if (Channel == TIM_CHANNEL_4)
 80036aa:	2a0c      	cmp	r2, #12
 80036ac:	d123      	bne.n	80036f6 <HAL_TIM_IC_ConfigChannel+0x122>
    TIM_TI4_SetConfig(htim->Instance,
 80036ae:	6803      	ldr	r3, [r0, #0]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80036b0:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036b2:	6a18      	ldr	r0, [r3, #32]
 80036b4:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
                      sConfig->ICSelection,
 80036b8:	e9d1 2700 	ldrd	r2, r7, [r1]
                      sConfig->ICFilter);
 80036bc:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80036be:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80036c0:	69d8      	ldr	r0, [r3, #28]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036c2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036c6:	ea40 2007 	orr.w	r0, r0, r7, lsl #8

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036ca:	0309      	lsls	r1, r1, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036cc:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036d0:	b289      	uxth	r1, r1

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036d2:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036d4:	4301      	orrs	r1, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036d6:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036da:	f426 4020 	bic.w	r0, r6, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036de:	4302      	orrs	r2, r0

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036e0:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036e2:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036e4:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036e6:	68a1      	ldr	r1, [r4, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036ec:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036ee:	69da      	ldr	r2, [r3, #28]
 80036f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036f4:	e7d7      	b.n	80036a6 <HAL_TIM_IC_ConfigChannel+0xd2>
    status = HAL_ERROR;
 80036f6:	4618      	mov	r0, r3
 80036f8:	e787      	b.n	800360a <HAL_TIM_IC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 80036fa:	2002      	movs	r0, #2
 80036fc:	e788      	b.n	8003610 <HAL_TIM_IC_ConfigChannel+0x3c>

080036fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036fe:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003700:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003702:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003704:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003708:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800370c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370e:	6083      	str	r3, [r0, #8]
}
 8003710:	bd10      	pop	{r4, pc}
	...

08003714 <HAL_TIM_ConfigClockSource>:
{
 8003714:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003716:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
{
 800371c:	4604      	mov	r4, r0
 800371e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003722:	f000 808c 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x12a>
 8003726:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800372c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003730:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <HAL_TIM_ConfigClockSource+0x130>)
  tmpsmcr = htim->Instance->SMCR;
 8003734:	6885      	ldr	r5, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003736:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8003738:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	2b60      	cmp	r3, #96	; 0x60
 800373e:	d04f      	beq.n	80037e0 <HAL_TIM_ConfigClockSource+0xcc>
 8003740:	d832      	bhi.n	80037a8 <HAL_TIM_ConfigClockSource+0x94>
 8003742:	2b40      	cmp	r3, #64	; 0x40
 8003744:	d064      	beq.n	8003810 <HAL_TIM_ConfigClockSource+0xfc>
 8003746:	d816      	bhi.n	8003776 <HAL_TIM_ConfigClockSource+0x62>
 8003748:	2b20      	cmp	r3, #32
 800374a:	d00d      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x54>
 800374c:	d80a      	bhi.n	8003764 <HAL_TIM_ConfigClockSource+0x50>
 800374e:	f033 0110 	bics.w	r1, r3, #16
 8003752:	d009      	beq.n	8003768 <HAL_TIM_ConfigClockSource+0x54>
  htim->State = HAL_TIM_STATE_READY;
 8003754:	2301      	movs	r3, #1
 8003756:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800375a:	2300      	movs	r3, #0
 800375c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003760:	4610      	mov	r0, r2
 8003762:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8003764:	2b30      	cmp	r3, #48	; 0x30
 8003766:	d1f5      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x40>
  tmpsmcr = TIMx->SMCR;
 8003768:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800376a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800376e:	4313      	orrs	r3, r2
 8003770:	f043 0307 	orr.w	r3, r3, #7
 8003774:	e028      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 8003776:	2b50      	cmp	r3, #80	; 0x50
 8003778:	d1ec      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x40>
                               sClockSourceConfig->ClockPolarity,
 800377a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800377c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800377e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003780:	6a03      	ldr	r3, [r0, #32]
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003788:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800378a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800378e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003792:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003796:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003798:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800379a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800379c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80037a6:	e00f      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0xb4>
  switch (sClockSourceConfig->ClockSource)
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d00d      	beq.n	80037ca <HAL_TIM_ConfigClockSource+0xb6>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	d00c      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0xba>
 80037b4:	2b70      	cmp	r3, #112	; 0x70
 80037b6:	d1cd      	bne.n	8003754 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	68cb      	ldr	r3, [r1, #12]
 80037ba:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80037be:	f7ff ff9e 	bl	80036fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037c2:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  TIMx->SMCR = tmpsmcr;
 80037c8:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2200      	movs	r2, #0
 80037cc:	e7c2      	b.n	8003754 <HAL_TIM_ConfigClockSource+0x40>
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	68cb      	ldr	r3, [r1, #12]
 80037d0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80037d4:	f7ff ff93 	bl	80036fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037d8:	6883      	ldr	r3, [r0, #8]
 80037da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037de:	e7f3      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0xb4>
  tmpccer = TIMx->CCER;
 80037e0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e2:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80037e4:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037e8:	f022 0210 	bic.w	r2, r2, #16
 80037ec:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ee:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037fc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003800:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003802:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003804:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800380e:	e7db      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0xb4>
                               sClockSourceConfig->ClockPolarity,
 8003810:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003812:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003814:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003816:	6a03      	ldr	r3, [r0, #32]
 8003818:	f023 0301 	bic.w	r3, r3, #1
 800381c:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003820:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003824:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003828:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800382c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800382e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003830:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003832:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003838:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800383c:	e7c4      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0xb4>
  __HAL_LOCK(htim);
 800383e:	461a      	mov	r2, r3
 8003840:	e78e      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x4c>
 8003842:	bf00      	nop
 8003844:	fffe0088 	.word	0xfffe0088

08003848 <TIM_SlaveTimer_SetConfig.constprop.0>:
  tmpsmcr = htim->Instance->SMCR;
 8003848:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800384a:	684b      	ldr	r3, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 800384c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800384e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003852:	431a      	orrs	r2, r3
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 8003854:	b510      	push	{r4, lr}
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003856:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800385a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 800385c:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003860:	4322      	orrs	r2, r4
  switch (sSlaveConfig->InputTrigger)
 8003862:	2b50      	cmp	r3, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8003864:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8003866:	d02c      	beq.n	80038c2 <TIM_SlaveTimer_SetConfig.constprop.0+0x7a>
 8003868:	d810      	bhi.n	800388c <TIM_SlaveTimer_SetConfig.constprop.0+0x44>
 800386a:	2b40      	cmp	r3, #64	; 0x40
 800386c:	d019      	beq.n	80038a2 <TIM_SlaveTimer_SetConfig.constprop.0+0x5a>
 800386e:	d84b      	bhi.n	8003908 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
 8003870:	2b20      	cmp	r3, #32
 8003872:	d014      	beq.n	800389e <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
 8003874:	d805      	bhi.n	8003882 <TIM_SlaveTimer_SetConfig.constprop.0+0x3a>
 8003876:	f033 0310 	bics.w	r3, r3, #16
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	bf14      	ite	ne
 800387c:	2001      	movne	r0, #1
 800387e:	2000      	moveq	r0, #0
}
 8003880:	bd10      	pop	{r4, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	f1b3 0030 	subs.w	r0, r3, #48	; 0x30
 8003886:	bf18      	it	ne
 8003888:	2001      	movne	r0, #1
 800388a:	e7f9      	b.n	8003880 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
  switch (sSlaveConfig->InputTrigger)
 800388c:	2b60      	cmp	r3, #96	; 0x60
 800388e:	d028      	beq.n	80038e2 <TIM_SlaveTimer_SetConfig.constprop.0+0x9a>
 8003890:	2b70      	cmp	r3, #112	; 0x70
 8003892:	d139      	bne.n	8003908 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
      TIM_ETR_SetConfig(htim->Instance,
 8003894:	690b      	ldr	r3, [r1, #16]
 8003896:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 800389a:	f7ff ff30 	bl	80036fe <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2000      	movs	r0, #0
      break;
 80038a0:	e7ee      	b.n	8003880 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038a2:	2c05      	cmp	r4, #5
 80038a4:	d030      	beq.n	8003908 <TIM_SlaveTimer_SetConfig.constprop.0+0xc0>
      tmpccer = htim->Instance->CCER;
 80038a6:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038a8:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038aa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038b2:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038b8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80038bc:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 80038be:	6202      	str	r2, [r0, #32]
 80038c0:	e7ed      	b.n	800389e <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
                               sSlaveConfig->TriggerPolarity,
 80038c2:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80038c4:	690c      	ldr	r4, [r1, #16]
  tmpccer = TIMx->CCER;
 80038c6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038c8:	6a03      	ldr	r3, [r0, #32]
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038d2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038da:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  tmpccer |= TIM_ICPolarity;
 80038de:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80038e0:	e7ec      	b.n	80038bc <TIM_SlaveTimer_SetConfig.constprop.0+0x74>
  tmpccer = TIMx->CCER;
 80038e2:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e4:	6a02      	ldr	r2, [r0, #32]
                               sSlaveConfig->TriggerPolarity,
 80038e6:	688c      	ldr	r4, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 80038e8:	6909      	ldr	r1, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ea:	f022 0210 	bic.w	r2, r2, #16
 80038ee:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038f6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038fa:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80038fe:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003902:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003904:	6203      	str	r3, [r0, #32]
 8003906:	e7ca      	b.n	800389e <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
        return HAL_ERROR;
 8003908:	2001      	movs	r0, #1
 800390a:	e7b9      	b.n	8003880 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>

0800390c <HAL_TIM_SlaveConfigSynchro>:
{
 800390c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800390e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003912:	2b01      	cmp	r3, #1
{
 8003914:	4604      	mov	r4, r0
 8003916:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800391a:	d01c      	beq.n	8003956 <HAL_TIM_SlaveConfigSynchro+0x4a>
 800391c:	2501      	movs	r5, #1
 800391e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003922:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003926:	f7ff ff8f 	bl	8003848 <TIM_SlaveTimer_SetConfig.constprop.0>
 800392a:	b130      	cbz	r0, 800393a <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 800392c:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 800392e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8003936:	4628      	mov	r0, r5
}
 8003938:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003942:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800394a:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800394c:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003950:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8003954:	e7f0      	b.n	8003938 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 8003956:	4618      	mov	r0, r3
 8003958:	e7ee      	b.n	8003938 <HAL_TIM_SlaveConfigSynchro+0x2c>
	...

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003962:	2b01      	cmp	r3, #1
 8003964:	f04f 0302 	mov.w	r3, #2
 8003968:	d036      	beq.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800396e:	4d1b      	ldr	r5, [pc, #108]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0x80>)
  tmpcr2 = htim->Instance->CR2;
 8003970:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003972:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8003974:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003976:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003978:	d002      	beq.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x24>
 800397a:	4e19      	ldr	r6, [pc, #100]	; (80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800397c:	42b3      	cmp	r3, r6
 800397e:	d103      	bne.n	8003988 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003980:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003982:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003986:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003988:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800398a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398e:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003990:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8003992:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	d015      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d012      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80039a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80039aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80039b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80039ba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80039be:	4293      	cmp	r3, r2
 80039c0:	d104      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039c2:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039c4:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039c8:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d2:	2300      	movs	r3, #0
 80039d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80039d8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	40012c00 	.word	0x40012c00
 80039e0:	40013400 	.word	0x40013400
 80039e4:	40000400 	.word	0x40000400

080039e8 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039e8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	e852 3f00 	ldrex	r3, [r2]
 80039ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80039f6:	6802      	ldr	r2, [r0, #0]
 80039f8:	2900      	cmp	r1, #0
 80039fa:	d1f5      	bne.n	80039e8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	f102 0308 	add.w	r3, r2, #8
 8003a00:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	f102 0c08 	add.w	ip, r2, #8
 8003a0c:	e84c 3100 	strex	r1, r3, [ip]
 8003a10:	2900      	cmp	r1, #0
 8003a12:	d1f3      	bne.n	80039fc <UART_EndRxTransfer+0x14>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a14:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <UART_EndRxTransfer+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a22:	e842 3100 	strex	r1, r3, [r2]
 8003a26:	2900      	cmp	r1, #0
 8003a28:	d1f7      	bne.n	8003a1a <UART_EndRxTransfer+0x32>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	2300      	movs	r3, #0
 8003a32:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a34:	6683      	str	r3, [r0, #104]	; 0x68
}
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
{
 8003a38:	b570      	push	{r4, r5, r6, lr}
 8003a3a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a3c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a3e:	6921      	ldr	r1, [r4, #16]
 8003a40:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a42:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a44:	69c0      	ldr	r0, [r0, #28]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	6961      	ldr	r1, [r4, #20]
 8003a4a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a4c:	498f      	ldr	r1, [pc, #572]	; (8003c8c <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a4e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a50:	4029      	ands	r1, r5
 8003a52:	430a      	orrs	r2, r1
 8003a54:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	68e1      	ldr	r1, [r4, #12]
 8003a5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a62:	4a8b      	ldr	r2, [pc, #556]	; (8003c90 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a64:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a66:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8003a68:	bf1c      	itt	ne
 8003a6a:	6a22      	ldrne	r2, [r4, #32]
 8003a6c:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8003a74:	430a      	orrs	r2, r1
 8003a76:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a78:	4a86      	ldr	r2, [pc, #536]	; (8003c94 <UART_SetConfig+0x25c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d117      	bne.n	8003aae <UART_SetConfig+0x76>
 8003a7e:	4b86      	ldr	r3, [pc, #536]	; (8003c98 <UART_SetConfig+0x260>)
 8003a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	f200 80cf 	bhi.w	8003c2e <UART_SetConfig+0x1f6>
 8003a90:	4a82      	ldr	r2, [pc, #520]	; (8003c9c <UART_SetConfig+0x264>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a94:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003a98:	f040 8099 	bne.w	8003bce <UART_SetConfig+0x196>
    switch (clocksource)
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d822      	bhi.n	8003ae6 <UART_SetConfig+0xae>
 8003aa0:	e8df f003 	tbb	[pc, r3]
 8003aa4:	2193c8d9 	.word	0x2193c8d9
 8003aa8:	212121ce 	.word	0x212121ce
 8003aac:	dd          	.byte	0xdd
 8003aad:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aae:	4a7c      	ldr	r2, [pc, #496]	; (8003ca0 <UART_SetConfig+0x268>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d106      	bne.n	8003ac2 <UART_SetConfig+0x8a>
 8003ab4:	4b78      	ldr	r3, [pc, #480]	; (8003c98 <UART_SetConfig+0x260>)
 8003ab6:	4a7b      	ldr	r2, [pc, #492]	; (8003ca4 <UART_SetConfig+0x26c>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	e7e7      	b.n	8003a92 <UART_SetConfig+0x5a>
 8003ac2:	4a79      	ldr	r2, [pc, #484]	; (8003ca8 <UART_SetConfig+0x270>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d119      	bne.n	8003afc <UART_SetConfig+0xc4>
 8003ac8:	4b73      	ldr	r3, [pc, #460]	; (8003c98 <UART_SetConfig+0x260>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	f000 80b7 	beq.w	8003c46 <UART_SetConfig+0x20e>
 8003ad8:	d807      	bhi.n	8003aea <UART_SetConfig+0xb2>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f000 80b8 	beq.w	8003c50 <UART_SetConfig+0x218>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	f000 80aa 	beq.w	8003c3a <UART_SetConfig+0x202>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	e04e      	b.n	8003b88 <UART_SetConfig+0x150>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aea:	2b30      	cmp	r3, #48	; 0x30
 8003aec:	d1fb      	bne.n	8003ae6 <UART_SetConfig+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003af2:	f000 80b4 	beq.w	8003c5e <UART_SetConfig+0x226>
 8003af6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003afa:	e083      	b.n	8003c04 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afc:	4a6b      	ldr	r2, [pc, #428]	; (8003cac <UART_SetConfig+0x274>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d10f      	bne.n	8003b22 <UART_SetConfig+0xea>
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <UART_SetConfig+0x260>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b0c:	2b80      	cmp	r3, #128	; 0x80
 8003b0e:	f000 809a 	beq.w	8003c46 <UART_SetConfig+0x20e>
 8003b12:	d804      	bhi.n	8003b1e <UART_SetConfig+0xe6>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 809b 	beq.w	8003c50 <UART_SetConfig+0x218>
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	e7e1      	b.n	8003ae2 <UART_SetConfig+0xaa>
 8003b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b20:	e7e4      	b.n	8003aec <UART_SetConfig+0xb4>
 8003b22:	4a63      	ldr	r2, [pc, #396]	; (8003cb0 <UART_SetConfig+0x278>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d112      	bne.n	8003b4e <UART_SetConfig+0x116>
 8003b28:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <UART_SetConfig+0x260>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b36:	f000 8086 	beq.w	8003c46 <UART_SetConfig+0x20e>
 8003b3a:	d805      	bhi.n	8003b48 <UART_SetConfig+0x110>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8087 	beq.w	8003c50 <UART_SetConfig+0x218>
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b46:	e7cc      	b.n	8003ae2 <UART_SetConfig+0xaa>
 8003b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b4c:	e7ce      	b.n	8003aec <UART_SetConfig+0xb4>
 8003b4e:	4a50      	ldr	r2, [pc, #320]	; (8003c90 <UART_SetConfig+0x258>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d1c8      	bne.n	8003ae6 <UART_SetConfig+0xae>
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <UART_SetConfig+0x260>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b62:	d015      	beq.n	8003b90 <UART_SetConfig+0x158>
 8003b64:	d806      	bhi.n	8003b74 <UART_SetConfig+0x13c>
 8003b66:	b15b      	cbz	r3, 8003b80 <UART_SetConfig+0x148>
 8003b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6c:	d1bb      	bne.n	8003ae6 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7fe fac9 	bl	8002104 <HAL_RCC_GetSysClockFreq>
        break;
 8003b72:	e007      	b.n	8003b84 <UART_SetConfig+0x14c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b78:	d1b5      	bne.n	8003ae6 <UART_SetConfig+0xae>
        pclk = (uint32_t) LSE_VALUE;
 8003b7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003b7e:	e008      	b.n	8003b92 <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b80:	f7fe fe38 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003b84:	b928      	cbnz	r0, 8003b92 <UART_SetConfig+0x15a>
 8003b86:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003b88:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003b8a:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4848      	ldr	r0, [pc, #288]	; (8003cb4 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003b98:	4283      	cmp	r3, r0
 8003b9a:	d8a4      	bhi.n	8003ae6 <UART_SetConfig+0xae>
 8003b9c:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003ba0:	d8a1      	bhi.n	8003ae6 <UART_SetConfig+0xae>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba2:	0851      	lsrs	r1, r2, #1
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	468c      	mov	ip, r1
 8003ba8:	f44f 7680 	mov.w	r6, #256	; 0x100
 8003bac:	4629      	mov	r1, r5
 8003bae:	fbe0 c106 	umlal	ip, r1, r0, r6
 8003bb2:	462b      	mov	r3, r5
 8003bb4:	4660      	mov	r0, ip
 8003bb6:	f7fd f847 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <UART_SetConfig+0x280>)
 8003bbc:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d890      	bhi.n	8003ae6 <UART_SetConfig+0xae>
          huart->Instance->BRR = usartdiv;
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	60d8      	str	r0, [r3, #12]
 8003bc8:	e7dd      	b.n	8003b86 <UART_SetConfig+0x14e>
        pclk = (uint32_t) HSI_VALUE;
 8003bca:	483a      	ldr	r0, [pc, #232]	; (8003cb4 <UART_SetConfig+0x27c>)
 8003bcc:	e047      	b.n	8003c5e <UART_SetConfig+0x226>
    switch (clocksource)
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d889      	bhi.n	8003ae6 <UART_SetConfig+0xae>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x1a0>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c23 	.word	0x08003c23
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003ae7 	.word	0x08003ae7
 8003be8:	08003c29 	.word	0x08003c29
 8003bec:	08003ae7 	.word	0x08003ae7
 8003bf0:	08003ae7 	.word	0x08003ae7
 8003bf4:	08003ae7 	.word	0x08003ae7
 8003bf8:	08003af7 	.word	0x08003af7
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe fdfa 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d0c0      	beq.n	8003b86 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003c0a:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003c12:	f1a3 0110 	sub.w	r1, r3, #16
 8003c16:	4291      	cmp	r1, r2
 8003c18:	f63f af65 	bhi.w	8003ae6 <UART_SetConfig+0xae>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c1c:	6822      	ldr	r2, [r4, #0]
 8003c1e:	60d3      	str	r3, [r2, #12]
 8003c20:	e7b1      	b.n	8003b86 <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c22:	f7fe fdf9 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
        break;
 8003c26:	e7eb      	b.n	8003c00 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c28:	f7fe fa6c 	bl	8002104 <HAL_RCC_GetSysClockFreq>
        break;
 8003c2c:	e7e8      	b.n	8003c00 <UART_SetConfig+0x1c8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c32:	d1f6      	bne.n	8003c22 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7fe fdf0 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
        break;
 8003c38:	e00f      	b.n	8003c5a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c3e:	d1f3      	bne.n	8003c28 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetSysClockFreq();
 8003c40:	f7fe fa60 	bl	8002104 <HAL_RCC_GetSysClockFreq>
        break;
 8003c44:	e009      	b.n	8003c5a <UART_SetConfig+0x222>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c4a:	d0be      	beq.n	8003bca <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4819      	ldr	r0, [pc, #100]	; (8003cb4 <UART_SetConfig+0x27c>)
 8003c4e:	e7d9      	b.n	8003c04 <UART_SetConfig+0x1cc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003c54:	d1d2      	bne.n	8003bfc <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c56:	f7fe fdcd 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003c5a:	2800      	cmp	r0, #0
 8003c5c:	d093      	beq.n	8003b86 <UART_SetConfig+0x14e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c5e:	6862      	ldr	r2, [r4, #4]
 8003c60:	0853      	lsrs	r3, r2, #1
 8003c62:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8003c66:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c6a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003c6e:	f1a3 0110 	sub.w	r1, r3, #16
 8003c72:	4291      	cmp	r1, r2
 8003c74:	f63f af37 	bhi.w	8003ae6 <UART_SetConfig+0xae>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c78:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8003c7c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c7e:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c80:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8003c84:	4313      	orrs	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
 8003c88:	e77d      	b.n	8003b86 <UART_SetConfig+0x14e>
 8003c8a:	bf00      	nop
 8003c8c:	efff69f3 	.word	0xefff69f3
 8003c90:	40008000 	.word	0x40008000
 8003c94:	40013800 	.word	0x40013800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	0800b20c 	.word	0x0800b20c
 8003ca0:	40004400 	.word	0x40004400
 8003ca4:	0800b20f 	.word	0x0800b20f
 8003ca8:	40004800 	.word	0x40004800
 8003cac:	40004c00 	.word	0x40004c00
 8003cb0:	40005000 	.word	0x40005000
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	000ffcff 	.word	0x000ffcff

08003cbc <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003cbe:	071a      	lsls	r2, r3, #28
{
 8003cc0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc2:	d506      	bpl.n	8003cd2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cc4:	6801      	ldr	r1, [r0, #0]
 8003cc6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003cc8:	684a      	ldr	r2, [r1, #4]
 8003cca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cce:	4322      	orrs	r2, r4
 8003cd0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd2:	07dc      	lsls	r4, r3, #31
 8003cd4:	d506      	bpl.n	8003ce4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd6:	6801      	ldr	r1, [r0, #0]
 8003cd8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003cda:	684a      	ldr	r2, [r1, #4]
 8003cdc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003ce0:	4322      	orrs	r2, r4
 8003ce2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce4:	0799      	lsls	r1, r3, #30
 8003ce6:	d506      	bpl.n	8003cf6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ce8:	6801      	ldr	r1, [r0, #0]
 8003cea:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003cec:	684a      	ldr	r2, [r1, #4]
 8003cee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003cf2:	4322      	orrs	r2, r4
 8003cf4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf6:	075a      	lsls	r2, r3, #29
 8003cf8:	d506      	bpl.n	8003d08 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfa:	6801      	ldr	r1, [r0, #0]
 8003cfc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003cfe:	684a      	ldr	r2, [r1, #4]
 8003d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d04:	4322      	orrs	r2, r4
 8003d06:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d08:	06dc      	lsls	r4, r3, #27
 8003d0a:	d506      	bpl.n	8003d1a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d0c:	6801      	ldr	r1, [r0, #0]
 8003d0e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d10:	688a      	ldr	r2, [r1, #8]
 8003d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d16:	4322      	orrs	r2, r4
 8003d18:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1a:	0699      	lsls	r1, r3, #26
 8003d1c:	d506      	bpl.n	8003d2c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d1e:	6801      	ldr	r1, [r0, #0]
 8003d20:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d22:	688a      	ldr	r2, [r1, #8]
 8003d24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d28:	4322      	orrs	r2, r4
 8003d2a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	065a      	lsls	r2, r3, #25
 8003d2e:	d50f      	bpl.n	8003d50 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d30:	6801      	ldr	r1, [r0, #0]
 8003d32:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003d34:	684a      	ldr	r2, [r1, #4]
 8003d36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003d3a:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d3c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d40:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d42:	d105      	bne.n	8003d50 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d44:	684a      	ldr	r2, [r1, #4]
 8003d46:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003d48:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003d4c:	4322      	orrs	r2, r4
 8003d4e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	d506      	bpl.n	8003d62 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d54:	6802      	ldr	r2, [r0, #0]
 8003d56:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003d58:	6853      	ldr	r3, [r2, #4]
 8003d5a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003d5e:	430b      	orrs	r3, r1
 8003d60:	6053      	str	r3, [r2, #4]
}
 8003d62:	bd10      	pop	{r4, pc}

08003d64 <UART_WaitOnFlagUntilTimeout>:
{
 8003d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d6c:	4604      	mov	r4, r0
 8003d6e:	460f      	mov	r7, r1
 8003d70:	4616      	mov	r6, r2
 8003d72:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d74:	6822      	ldr	r2, [r4, #0]
 8003d76:	69d3      	ldr	r3, [r2, #28]
 8003d78:	ea37 0303 	bics.w	r3, r7, r3
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	42b3      	cmp	r3, r6
 8003d84:	d001      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8003d86:	2000      	movs	r0, #0
 8003d88:	e01e      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	f1b9 3fff 	cmp.w	r9, #4294967295
 8003d8e:	d0f2      	beq.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7fd fe42 	bl	8001a18 <HAL_GetTick>
 8003d94:	eba0 0008 	sub.w	r0, r0, r8
 8003d98:	4548      	cmp	r0, r9
 8003d9a:	d825      	bhi.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x84>
 8003d9c:	f1b9 0f00 	cmp.w	r9, #0
 8003da0:	d022      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x84>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003da2:	6820      	ldr	r0, [r4, #0]
 8003da4:	6803      	ldr	r3, [r0, #0]
 8003da6:	075a      	lsls	r2, r3, #29
 8003da8:	d5e4      	bpl.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003daa:	69c5      	ldr	r5, [r0, #28]
 8003dac:	f015 0508 	ands.w	r5, r5, #8
 8003db0:	d00c      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x68>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db2:	2508      	movs	r5, #8
 8003db4:	6205      	str	r5, [r0, #32]
          UART_EndRxTransfer(huart);
 8003db6:	4620      	mov	r0, r4
 8003db8:	f7ff fe16 	bl	80039e8 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8003dbc:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dbe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003dc2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          return HAL_ERROR;
 8003dc6:	2001      	movs	r0, #1
}
 8003dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dcc:	69c3      	ldr	r3, [r0, #28]
 8003dce:	051b      	lsls	r3, r3, #20
 8003dd0:	d5d0      	bpl.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dd6:	6203      	str	r3, [r0, #32]
          UART_EndRxTransfer(huart);
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff fe05 	bl	80039e8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	2320      	movs	r3, #32
 8003de0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8003de4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
        return HAL_TIMEOUT;
 8003de8:	2003      	movs	r0, #3
 8003dea:	e7ed      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0x64>

08003dec <UART_CheckIdleState>:
{
 8003dec:	b530      	push	{r4, r5, lr}
 8003dee:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df0:	2500      	movs	r5, #0
{
 8003df2:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8003df8:	f7fd fe0e 	bl	8001a18 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfc:	6822      	ldr	r2, [r4, #0]
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8003e02:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e04:	d51c      	bpl.n	8003e40 <UART_CheckIdleState+0x54>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e06:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003e0a:	9200      	str	r2, [sp, #0]
 8003e0c:	9003      	str	r0, [sp, #12]
 8003e0e:	462a      	mov	r2, r5
 8003e10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e14:	4620      	mov	r0, r4
 8003e16:	f7ff ffa5 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 8003e1a:	9b03      	ldr	r3, [sp, #12]
 8003e1c:	b180      	cbz	r0, 8003e40 <UART_CheckIdleState+0x54>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	e852 3f00 	ldrex	r3, [r2]
 8003e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	e842 3100 	strex	r1, r3, [r2]
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d1f6      	bne.n	8003e1e <UART_CheckIdleState+0x32>
      huart->gState = HAL_UART_STATE_READY;
 8003e30:	2320      	movs	r3, #32
 8003e32:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003e34:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8003e36:	2300      	movs	r3, #0
 8003e38:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
 8003e3c:	b005      	add	sp, #20
 8003e3e:	bd30      	pop	{r4, r5, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	0752      	lsls	r2, r2, #29
 8003e46:	d523      	bpl.n	8003e90 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e48:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8003e4c:	9200      	str	r2, [sp, #0]
 8003e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e52:	2200      	movs	r2, #0
 8003e54:	4620      	mov	r0, r4
 8003e56:	f7ff ff85 	bl	8003d64 <UART_WaitOnFlagUntilTimeout>
 8003e5a:	b1c8      	cbz	r0, 8003e90 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e5c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	e852 3f00 	ldrex	r3, [r2]
 8003e62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e66:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003e6a:	6822      	ldr	r2, [r4, #0]
 8003e6c:	2900      	cmp	r1, #0
 8003e6e:	d1f5      	bne.n	8003e5c <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	f102 0308 	add.w	r3, r2, #8
 8003e74:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	f102 0008 	add.w	r0, r2, #8
 8003e80:	e840 3100 	strex	r1, r3, [r0]
 8003e84:	2900      	cmp	r1, #0
 8003e86:	d1f3      	bne.n	8003e70 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 8003e88:	2320      	movs	r3, #32
 8003e8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8003e8e:	e7d1      	b.n	8003e34 <UART_CheckIdleState+0x48>
  huart->gState = HAL_UART_STATE_READY;
 8003e90:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003e94:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e96:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e9c:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 8003e9e:	e7ca      	b.n	8003e36 <UART_CheckIdleState+0x4a>

08003ea0 <HAL_HalfDuplex_Init>:
{
 8003ea0:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	b360      	cbz	r0, 8003f00 <HAL_HalfDuplex_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ea6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8003ea8:	b91b      	cbnz	r3, 8003eb2 <HAL_HalfDuplex_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003eaa:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 8003eae:	f7fd fd05 	bl	80018bc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003eb2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	2324      	movs	r3, #36	; 0x24
 8003eb6:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ec2:	b113      	cbz	r3, 8003eca <HAL_HalfDuplex_Init+0x2a>
    UART_AdvFeatureConfig(huart);
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f7ff fef9 	bl	8003cbc <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff fdb4 	bl	8003a38 <UART_SetConfig>
 8003ed0:	2801      	cmp	r0, #1
 8003ed2:	d015      	beq.n	8003f00 <HAL_HalfDuplex_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003ee4:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	f042 0208 	orr.w	r2, r2, #8
 8003eec:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003ef4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003ef6:	601a      	str	r2, [r3, #0]
}
 8003ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003efc:	f7ff bf76 	b.w	8003dec <UART_CheckIdleState>
}
 8003f00:	2001      	movs	r0, #1
 8003f02:	bd10      	pop	{r4, pc}

08003f04 <bitmap_init>:
};

/* Initialise bitmap with given buffer. */
void bitmap_init(bitmap_t *bitmap, uint8_t *buffer)
{
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8003f04:	7983      	ldrb	r3, [r0, #6]
 8003f06:	8802      	ldrh	r2, [r0, #0]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	fb13 f302 	smulbb	r3, r3, r2
    bitmap->size = bitmap->pitch * bitmap->height;
 8003f0e:	8842      	ldrh	r2, [r0, #2]
    bitmap->pitch = bitmap->width * (bitmap->depth / 8);
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	8083      	strh	r3, [r0, #4]
    bitmap->size = bitmap->pitch * bitmap->height;
 8003f14:	4353      	muls	r3, r2
    bitmap->buffer = buffer;
 8003f16:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 8003f1a:	4770      	bx	lr

08003f1c <clip_line>:

    return code;
}

bool clip_line(int16_t *x0, int16_t *y0, int16_t *x1, int16_t *y1, window_t window)
{
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	b087      	sub	sp, #28
    if (x0 < window.x0) {
 8003f22:	f9b0 5000 	ldrsh.w	r5, [r0]
 8003f26:	f8bd c040 	ldrh.w	ip, [sp, #64]	; 0x40
 8003f2a:	f8bd e042 	ldrh.w	lr, [sp, #66]	; 0x42
 8003f2e:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 8003f32:	f8bd 7046 	ldrh.w	r7, [sp, #70]	; 0x46
    uint8_t code0 = code(*x0, *y0, window);
 8003f36:	f9b1 4000 	ldrsh.w	r4, [r1]
{
 8003f3a:	9300      	str	r3, [sp, #0]
    if (x0 < window.x0) {
 8003f3c:	4565      	cmp	r5, ip
 8003f3e:	db5d      	blt.n	8003ffc <clip_line+0xe0>
    } else if (x0 > window.x1) {
 8003f40:	4545      	cmp	r5, r8
 8003f42:	bfd4      	ite	le
 8003f44:	2500      	movle	r5, #0
 8003f46:	2501      	movgt	r5, #1
 8003f48:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8003f4a:	4574      	cmp	r4, lr
 8003f4c:	da58      	bge.n	8004000 <clip_line+0xe4>
        code |= BOTTOM;
 8003f4e:	f045 0504 	orr.w	r5, r5, #4
    if (x0 < window.x0) {
 8003f52:	f9b2 6000 	ldrsh.w	r6, [r2]
    uint8_t code1 = code(*x1, *y1, window);
 8003f56:	9b00      	ldr	r3, [sp, #0]
    if (x0 < window.x0) {
 8003f58:	4566      	cmp	r6, ip
    uint8_t code1 = code(*x1, *y1, window);
 8003f5a:	f9b3 4000 	ldrsh.w	r4, [r3]
    if (x0 < window.x0) {
 8003f5e:	db54      	blt.n	800400a <clip_line+0xee>
    } else if (x0 > window.x1) {
 8003f60:	4546      	cmp	r6, r8
 8003f62:	bfd4      	ite	le
 8003f64:	2600      	movle	r6, #0
 8003f66:	2601      	movgt	r6, #1
 8003f68:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 8003f6a:	4574      	cmp	r4, lr
 8003f6c:	da4f      	bge.n	800400e <clip_line+0xf2>
        code |= BOTTOM;
 8003f6e:	f046 0604 	orr.w	r6, r6, #4
            } else if (code3 & RIGHT) {
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
                x = window.x1;
            }  else if (code3 & LEFT) {
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
                x = window.x0;
 8003f72:	fa0f f48c 	sxth.w	r4, ip
 8003f76:	9402      	str	r4, [sp, #8]
                x = window.x1;
 8003f78:	fa0f f488 	sxth.w	r4, r8
 8003f7c:	9403      	str	r4, [sp, #12]
                y = window.y0;
 8003f7e:	fa0f f48e 	sxth.w	r4, lr
 8003f82:	9404      	str	r4, [sp, #16]
                y = window.y1;
 8003f84:	b23c      	sxth	r4, r7
 8003f86:	9405      	str	r4, [sp, #20]
        if (!(code0 | code1)) {
 8003f88:	ea55 0406 	orrs.w	r4, r5, r6
 8003f8c:	f000 80bb 	beq.w	8004106 <clip_line+0x1ea>
        } else if (code0 & code1) {
 8003f90:	4235      	tst	r5, r6
 8003f92:	f040 80bc 	bne.w	800410e <clip_line+0x1f2>
            uint8_t code3 = code0 ? code0 : code1;
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	bf14      	ite	ne
 8003f9a:	462c      	movne	r4, r5
 8003f9c:	4634      	moveq	r4, r6
 8003f9e:	4623      	mov	r3, r4
            if (code3 & TOP) {
 8003fa0:	0724      	lsls	r4, r4, #28
 8003fa2:	d539      	bpl.n	8004018 <clip_line+0xfc>
                x = *x0 + (*x1 - *x0) * (window.y1 - *y0) / (*y1 - *y0);
 8003fa4:	f9b0 9000 	ldrsh.w	r9, [r0]
 8003fa8:	f9b1 a000 	ldrsh.w	sl, [r1]
 8003fac:	f9b2 4000 	ldrsh.w	r4, [r2]
 8003fb0:	eba7 0b0a 	sub.w	fp, r7, sl
 8003fb4:	eba4 0409 	sub.w	r4, r4, r9
 8003fb8:	fb0b f404 	mul.w	r4, fp, r4
 8003fbc:	9401      	str	r4, [sp, #4]
 8003fbe:	9c00      	ldr	r4, [sp, #0]
 8003fc0:	f9b4 b000 	ldrsh.w	fp, [r4]
 8003fc4:	9c01      	ldr	r4, [sp, #4]
 8003fc6:	ebab 0b0a 	sub.w	fp, fp, sl
 8003fca:	fb94 f4fb 	sdiv	r4, r4, fp
 8003fce:	444c      	add	r4, r9
 8003fd0:	fa0f f984 	sxth.w	r9, r4
                y = window.y1;
 8003fd4:	9c05      	ldr	r4, [sp, #20]
            }

            /* Replace the outside point with the intersection point. */
            if (code3 == code0) {
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	d17b      	bne.n	80040d2 <clip_line+0x1b6>
                *x0 = x;
 8003fda:	f8a0 9000 	strh.w	r9, [r0]
                *y0 = y;
 8003fde:	800c      	strh	r4, [r1, #0]
    if (x0 < window.x0) {
 8003fe0:	f9b0 5000 	ldrsh.w	r5, [r0]
 8003fe4:	45ac      	cmp	ip, r5
 8003fe6:	dc6c      	bgt.n	80040c2 <clip_line+0x1a6>
    } else if (x0 > window.x1) {
 8003fe8:	4545      	cmp	r5, r8
 8003fea:	bfd4      	ite	le
 8003fec:	2500      	movle	r5, #0
 8003fee:	2501      	movgt	r5, #1
 8003ff0:	006d      	lsls	r5, r5, #1
    } if (y0 < window.y0) {
 8003ff2:	45a6      	cmp	lr, r4
 8003ff4:	dd67      	ble.n	80040c6 <clip_line+0x1aa>
        code |= BOTTOM;
 8003ff6:	f045 0504 	orr.w	r5, r5, #4
 8003ffa:	e7c5      	b.n	8003f88 <clip_line+0x6c>
        code |= LEFT;
 8003ffc:	2501      	movs	r5, #1
 8003ffe:	e7a4      	b.n	8003f4a <clip_line+0x2e>
    } else if (y0 > window.y1) {
 8004000:	42bc      	cmp	r4, r7
        code |= TOP;
 8004002:	bfc8      	it	gt
 8004004:	f045 0508 	orrgt.w	r5, r5, #8
 8004008:	e7a3      	b.n	8003f52 <clip_line+0x36>
        code |= LEFT;
 800400a:	2601      	movs	r6, #1
 800400c:	e7ad      	b.n	8003f6a <clip_line+0x4e>
    } else if (y0 > window.y1) {
 800400e:	42bc      	cmp	r4, r7
        code |= TOP;
 8004010:	bfc8      	it	gt
 8004012:	f046 0608 	orrgt.w	r6, r6, #8
 8004016:	e7ac      	b.n	8003f72 <clip_line+0x56>
            } else if (code3 & BOTTOM) {
 8004018:	461c      	mov	r4, r3
 800401a:	0764      	lsls	r4, r4, #29
 800401c:	d519      	bpl.n	8004052 <clip_line+0x136>
                x = *x0 + (*x1 - *x0) * (window.y0 - *y0) / (*y1 - *y0);
 800401e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8004022:	f9b1 a000 	ldrsh.w	sl, [r1]
 8004026:	f9b2 4000 	ldrsh.w	r4, [r2]
 800402a:	ebae 0b0a 	sub.w	fp, lr, sl
 800402e:	eba4 0409 	sub.w	r4, r4, r9
 8004032:	fb0b f404 	mul.w	r4, fp, r4
 8004036:	9401      	str	r4, [sp, #4]
 8004038:	9c00      	ldr	r4, [sp, #0]
 800403a:	f9b4 b000 	ldrsh.w	fp, [r4]
 800403e:	9c01      	ldr	r4, [sp, #4]
 8004040:	ebab 0b0a 	sub.w	fp, fp, sl
 8004044:	fb94 f4fb 	sdiv	r4, r4, fp
 8004048:	444c      	add	r4, r9
 800404a:	fa0f f984 	sxth.w	r9, r4
                y = window.y0;
 800404e:	9c04      	ldr	r4, [sp, #16]
 8004050:	e7c1      	b.n	8003fd6 <clip_line+0xba>
            } else if (code3 & RIGHT) {
 8004052:	461c      	mov	r4, r3
 8004054:	07a4      	lsls	r4, r4, #30
 8004056:	d517      	bpl.n	8004088 <clip_line+0x16c>
                y = *y0 + (*y1 - *y0) * (window.x1 - *x0) / (*x1 - *x0);
 8004058:	9c00      	ldr	r4, [sp, #0]
 800405a:	f9b1 9000 	ldrsh.w	r9, [r1]
 800405e:	f9b0 a000 	ldrsh.w	sl, [r0]
 8004062:	f9b4 4000 	ldrsh.w	r4, [r4]
 8004066:	eba8 0b0a 	sub.w	fp, r8, sl
 800406a:	eba4 0409 	sub.w	r4, r4, r9
 800406e:	fb0b f404 	mul.w	r4, fp, r4
 8004072:	f9b2 b000 	ldrsh.w	fp, [r2]
 8004076:	ebab 0b0a 	sub.w	fp, fp, sl
 800407a:	fb94 f4fb 	sdiv	r4, r4, fp
 800407e:	444c      	add	r4, r9
 8004080:	b224      	sxth	r4, r4
                x = window.x1;
 8004082:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004086:	e7a6      	b.n	8003fd6 <clip_line+0xba>
            }  else if (code3 & LEFT) {
 8004088:	f013 0401 	ands.w	r4, r3, #1
 800408c:	d017      	beq.n	80040be <clip_line+0x1a2>
                y = *y0 + (*y1 - *y0) * (window.x0 - *x0) / (*x1 - *x0);
 800408e:	9c00      	ldr	r4, [sp, #0]
 8004090:	f9b1 9000 	ldrsh.w	r9, [r1]
 8004094:	f9b0 a000 	ldrsh.w	sl, [r0]
 8004098:	f9b4 4000 	ldrsh.w	r4, [r4]
 800409c:	ebac 0b0a 	sub.w	fp, ip, sl
 80040a0:	eba4 0409 	sub.w	r4, r4, r9
 80040a4:	fb0b f404 	mul.w	r4, fp, r4
 80040a8:	f9b2 b000 	ldrsh.w	fp, [r2]
 80040ac:	ebab 0b0a 	sub.w	fp, fp, sl
 80040b0:	fb94 f4fb 	sdiv	r4, r4, fp
 80040b4:	444c      	add	r4, r9
 80040b6:	b224      	sxth	r4, r4
                x = window.x0;
 80040b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80040bc:	e78b      	b.n	8003fd6 <clip_line+0xba>
            int16_t x = 0;
 80040be:	46a1      	mov	r9, r4
 80040c0:	e789      	b.n	8003fd6 <clip_line+0xba>
        code |= LEFT;
 80040c2:	2501      	movs	r5, #1
 80040c4:	e795      	b.n	8003ff2 <clip_line+0xd6>
    } else if (y0 > window.y1) {
 80040c6:	42bc      	cmp	r4, r7
 80040c8:	f77f af5e 	ble.w	8003f88 <clip_line+0x6c>
        code |= TOP;
 80040cc:	f045 0508 	orr.w	r5, r5, #8
    return code;
 80040d0:	e75a      	b.n	8003f88 <clip_line+0x6c>
                code0 = code(*x0, *y0, window);
            } else {
                *x1 = x;
                *y1 = y;
 80040d2:	9b00      	ldr	r3, [sp, #0]
                *x1 = x;
 80040d4:	f8a2 9000 	strh.w	r9, [r2]
                *y1 = y;
 80040d8:	801c      	strh	r4, [r3, #0]
    if (x0 < window.x0) {
 80040da:	f9b2 6000 	ldrsh.w	r6, [r2]
 80040de:	45b4      	cmp	ip, r6
 80040e0:	dc09      	bgt.n	80040f6 <clip_line+0x1da>
    } else if (x0 > window.x1) {
 80040e2:	4546      	cmp	r6, r8
 80040e4:	bfd4      	ite	le
 80040e6:	2600      	movle	r6, #0
 80040e8:	2601      	movgt	r6, #1
 80040ea:	0076      	lsls	r6, r6, #1
    } if (y0 < window.y0) {
 80040ec:	45a6      	cmp	lr, r4
 80040ee:	dd04      	ble.n	80040fa <clip_line+0x1de>
        code |= BOTTOM;
 80040f0:	f046 0604 	orr.w	r6, r6, #4
 80040f4:	e748      	b.n	8003f88 <clip_line+0x6c>
        code |= LEFT;
 80040f6:	2601      	movs	r6, #1
 80040f8:	e7f8      	b.n	80040ec <clip_line+0x1d0>
    } else if (y0 > window.y1) {
 80040fa:	42bc      	cmp	r4, r7
 80040fc:	f77f af44 	ble.w	8003f88 <clip_line+0x6c>
        code |= TOP;
 8004100:	f046 0608 	orr.w	r6, r6, #8
    return code;
 8004104:	e740      	b.n	8003f88 <clip_line+0x6c>
            accept = true;
 8004106:	2001      	movs	r0, #1
            }
        }
    }

    return accept;
 8004108:	b007      	add	sp, #28
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bool accept = false;
 800410e:	2000      	movs	r0, #0
 8004110:	e7fa      	b.n	8004108 <clip_line+0x1ec>

08004112 <fontx_meta>:

#include "fontx.h"

uint8_t fontx_meta(fontx_meta_t *meta, const uint8_t *font) {

    memcpy(meta->name, &font[FONTX_NAME], 8);
 8004112:	f8d1 3006 	ldr.w	r3, [r1, #6]
 8004116:	6003      	str	r3, [r0, #0]
 8004118:	f8d1 300a 	ldr.w	r3, [r1, #10]
 800411c:	6043      	str	r3, [r0, #4]
    meta->width = font[FONTX_WIDTH];
 800411e:	7b8b      	ldrb	r3, [r1, #14]
 8004120:	7243      	strb	r3, [r0, #9]
    meta->height = font[FONTX_HEIGHT];
 8004122:	7bcb      	ldrb	r3, [r1, #15]
 8004124:	7283      	strb	r3, [r0, #10]
    meta->type = font[FONTX_TYPE];
 8004126:	7c0b      	ldrb	r3, [r1, #16]
 8004128:	72c3      	strb	r3, [r0, #11]

    return 0;
}
 800412a:	2000      	movs	r0, #0
 800412c:	4770      	bx	lr

0800412e <fontx_glyph>:


uint8_t fontx_glyph(fontx_glyph_t *glyph, wchar_t code, const uint8_t* font) {
 800412e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004132:	b085      	sub	sp, #20
 8004134:	4604      	mov	r4, r0
 8004136:	460f      	mov	r7, r1
    uint32_t nc, bc, sb, eb;
    uint8_t status;
    const uint8_t *block_table;
    fontx_meta_t meta;

    status = fontx_meta(&meta, font);
 8004138:	a801      	add	r0, sp, #4
 800413a:	4611      	mov	r1, r2
 800413c:	f7ff ffe9 	bl	8004112 <fontx_meta>
    if (0 != status) {
 8004140:	b9a8      	cbnz	r0, 800416e <fontx_glyph+0x40>
        return status;
    }

    glyph->width = meta.width;
 8004142:	f89d 100d 	ldrb.w	r1, [sp, #13]
    glyph->height = meta.height;
 8004146:	f89d 300e 	ldrb.w	r3, [sp, #14]
    glyph->width = meta.width;
 800414a:	7021      	strb	r1, [r4, #0]
    glyph->pitch = (meta.width + 7) / 8;
 800414c:	3107      	adds	r1, #7
 800414e:	08c9      	lsrs	r1, r1, #3
    glyph->height = meta.height;
 8004150:	7063      	strb	r3, [r4, #1]
    glyph->pitch = (meta.width + 7) / 8;
 8004152:	70e1      	strb	r1, [r4, #3]
    glyph->size = glyph->pitch * meta.height;
 8004154:	fb13 f301 	smulbb	r3, r3, r1

    if (FONTX_TYPE_SBCS == meta.type) {
 8004158:	f89d 100f 	ldrb.w	r1, [sp, #15]
    glyph->size = glyph->pitch * meta.height;
 800415c:	b2db      	uxtb	r3, r3
 800415e:	70a3      	strb	r3, [r4, #2]
    if (FONTX_TYPE_SBCS == meta.type) {
 8004160:	b941      	cbnz	r1, 8004174 <fontx_glyph+0x46>
        if (code < 0x100) {
 8004162:	2fff      	cmp	r7, #255	; 0xff
 8004164:	d80f      	bhi.n	8004186 <fontx_glyph+0x58>
            glyph->buffer = &font[FONTX_GLYPH_DATA_START + code * glyph->size];
 8004166:	fb07 2303 	mla	r3, r7, r3, r2
 800416a:	3311      	adds	r3, #17

             /* Check if in the code block_table. */
            if (code >= sb && code <= eb) {
                /* Number of codes from top of the block_table. */
                nc += code - sb;
                glyph->buffer = &font[
 800416c:	6063      	str	r3, [r4, #4]
            block_table += 4;
        }
    }

    return FONTX_ERR_GLYPH_NOT_FOUND;
 800416e:	b005      	add	sp, #20
 8004170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        bc = font[FONTX_BLOCK_TABLE_SIZE];
 8004174:	f892 c011 	ldrb.w	ip, [r2, #17]
 8004178:	f102 0116 	add.w	r1, r2, #22
 800417c:	46e0      	mov	r8, ip
        nc = 0;
 800417e:	4606      	mov	r6, r0
        while (bc--) {
 8004180:	f1b8 0f00 	cmp.w	r8, #0
 8004184:	d101      	bne.n	800418a <fontx_glyph+0x5c>
    return FONTX_ERR_GLYPH_NOT_FOUND;
 8004186:	2001      	movs	r0, #1
 8004188:	e7f1      	b.n	800416e <fontx_glyph+0x40>
            sb = block_table[0] + block_table[1] * 0x100;
 800418a:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 800418e:	f811 ec04 	ldrb.w	lr, [r1, #-4]
            eb = block_table[2] + block_table[3] * 0x100;
 8004192:	f811 9c01 	ldrb.w	r9, [r1, #-1]
            sb = block_table[0] + block_table[1] * 0x100;
 8004196:	eb0e 2e05 	add.w	lr, lr, r5, lsl #8
            eb = block_table[2] + block_table[3] * 0x100;
 800419a:	f811 5c02 	ldrb.w	r5, [r1, #-2]
            if (code >= sb && code <= eb) {
 800419e:	45be      	cmp	lr, r7
            eb = block_table[2] + block_table[3] * 0x100;
 80041a0:	eb05 2509 	add.w	r5, r5, r9, lsl #8
            if (code >= sb && code <= eb) {
 80041a4:	d80b      	bhi.n	80041be <fontx_glyph+0x90>
 80041a6:	42bd      	cmp	r5, r7
 80041a8:	d309      	bcc.n	80041be <fontx_glyph+0x90>
                nc += code - sb;
 80041aa:	443e      	add	r6, r7
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80041ac:	2112      	movs	r1, #18
                nc += code - sb;
 80041ae:	eba6 060e 	sub.w	r6, r6, lr
                    4 * font[FONTX_BLOCK_TABLE_SIZE] +
 80041b2:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80041b6:	fb03 1306 	mla	r3, r3, r6, r1
                glyph->buffer = &font[
 80041ba:	4413      	add	r3, r2
 80041bc:	e7d6      	b.n	800416c <fontx_glyph+0x3e>
            nc += eb - sb + 1;
 80041be:	3501      	adds	r5, #1
 80041c0:	4435      	add	r5, r6
 80041c2:	eba5 060e 	sub.w	r6, r5, lr
            block_table += 4;
 80041c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80041ca:	3104      	adds	r1, #4
 80041cc:	e7d8      	b.n	8004180 <fontx_glyph+0x52>
	...

080041d0 <hagl_put_pixel>:
    clip_window.x1 = x1;
    clip_window.y1 = y1;
}

void hagl_put_pixel(int16_t x0, int16_t y0, color_t color)
{
 80041d0:	b470      	push	{r4, r5, r6}
    /* x0 or y0 is before the edge, nothing to do. */
    if ((x0 < clip_window.x0) || (y0 < clip_window.y0))  {
 80041d2:	4c09      	ldr	r4, [pc, #36]	; (80041f8 <hagl_put_pixel+0x28>)
 80041d4:	8826      	ldrh	r6, [r4, #0]
 80041d6:	42b0      	cmp	r0, r6
 80041d8:	db0b      	blt.n	80041f2 <hagl_put_pixel+0x22>
 80041da:	8866      	ldrh	r6, [r4, #2]
 80041dc:	42b1      	cmp	r1, r6
 80041de:	db08      	blt.n	80041f2 <hagl_put_pixel+0x22>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 80041e0:	88a6      	ldrh	r6, [r4, #4]
 80041e2:	42b0      	cmp	r0, r6
 80041e4:	dc05      	bgt.n	80041f2 <hagl_put_pixel+0x22>
 80041e6:	88e4      	ldrh	r4, [r4, #6]
 80041e8:	42a1      	cmp	r1, r4
 80041ea:	dc02      	bgt.n	80041f2 <hagl_put_pixel+0x22>
        return;
    }

    /* If still in bounds set the pixel. */
    hagl_hal_put_pixel(x0, y0, color);
}
 80041ec:	bc70      	pop	{r4, r5, r6}
    hagl_hal_put_pixel(x0, y0, color);
 80041ee:	f7fd b8e9 	b.w	80013c4 <lcd_put_pixel>
}
 80041f2:	bc70      	pop	{r4, r5, r6}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000000c 	.word	0x2000000c

080041fc <hagl_draw_line>:

/*
 * Draw a line using Bresenham's algorithm with given color.
 */
void hagl_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	b085      	sub	sp, #20
 8004202:	f8ad 200a 	strh.w	r2, [sp, #10]
    /* Clip coordinates to fit clip window. */
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8004206:	4a37      	ldr	r2, [pc, #220]	; (80042e4 <hagl_draw_line+0xe8>)
{
 8004208:	f8ad 000e 	strh.w	r0, [sp, #14]
 800420c:	f8ad 100c 	strh.w	r1, [sp, #12]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8004210:	6810      	ldr	r0, [r2, #0]
 8004212:	6851      	ldr	r1, [r2, #4]
{
 8004214:	f8ad 3008 	strh.w	r3, [sp, #8]
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 8004218:	466b      	mov	r3, sp
{
 800421a:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
    if (false == clip_line(&x0, &y0, &x1, &y1, clip_window)) {
 800421e:	f10d 020a 	add.w	r2, sp, #10
 8004222:	c303      	stmia	r3!, {r0, r1}
 8004224:	a903      	add	r1, sp, #12
 8004226:	f10d 000e 	add.w	r0, sp, #14
 800422a:	f7ff fe77 	bl	8003f1c <clip_line>
 800422e:	2800      	cmp	r0, #0
 8004230:	d055      	beq.n	80042de <hagl_draw_line+0xe2>
    int16_t dy;
    int16_t sy;
    int16_t err;
    int16_t e2;

    dx = ABS(x1 - x0);
 8004232:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8004236:	f9bd 900a 	ldrsh.w	r9, [sp, #10]
    sx = x0 < x1 ? 1 : -1;
    dy = ABS(y1 - y0);
 800423a:	f9bd 6008 	ldrsh.w	r6, [sp, #8]
    dx = ABS(x1 - x0);
 800423e:	eba9 0703 	sub.w	r7, r9, r3
 8004242:	2f00      	cmp	r7, #0
 8004244:	bfb8      	it	lt
 8004246:	427f      	neglt	r7, r7
    sx = x0 < x1 ? 1 : -1;
 8004248:	4599      	cmp	r9, r3
 800424a:	bfcc      	ite	gt
 800424c:	f04f 0901 	movgt.w	r9, #1
 8004250:	f04f 39ff 	movle.w	r9, #4294967295
    dy = ABS(y1 - y0);
 8004254:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8004258:	eba6 0803 	sub.w	r8, r6, r3
 800425c:	f1b8 0f00 	cmp.w	r8, #0
 8004260:	bfb8      	it	lt
 8004262:	f1c8 0800 	rsblt	r8, r8, #0
    dx = ABS(x1 - x0);
 8004266:	b23d      	sxth	r5, r7
    dy = ABS(y1 - y0);
 8004268:	fa0f fb88 	sxth.w	fp, r8
    sy = y0 < y1 ? 1 : -1;
 800426c:	429e      	cmp	r6, r3
 800426e:	bfcc      	ite	gt
 8004270:	2601      	movgt	r6, #1
 8004272:	f04f 36ff 	movle.w	r6, #4294967295
    err = (dx > dy ? dx : -dy) / 2;
 8004276:	455d      	cmp	r5, fp
 8004278:	dd2b      	ble.n	80042d2 <hagl_draw_line+0xd6>
 800427a:	eb05 74d5 	add.w	r4, r5, r5, lsr #31
 800427e:	1064      	asrs	r4, r4, #1
            break;
        };

        e2 = err + err;

        if (e2 > -dx) {
 8004280:	426d      	negs	r5, r5
        hagl_put_pixel(x0, y0, color);
 8004282:	4652      	mov	r2, sl
 8004284:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8004288:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
 800428c:	f7ff ffa0 	bl	80041d0 <hagl_put_pixel>
        if (x0 == x1 && y0 == y1) {
 8004290:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8004294:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8004298:	4293      	cmp	r3, r2
 800429a:	d105      	bne.n	80042a8 <hagl_draw_line+0xac>
 800429c:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 80042a0:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80042a4:	4299      	cmp	r1, r3
 80042a6:	d01a      	beq.n	80042de <hagl_draw_line+0xe2>
        e2 = err + err;
 80042a8:	b2a1      	uxth	r1, r4
 80042aa:	004b      	lsls	r3, r1, #1
 80042ac:	b21b      	sxth	r3, r3
        if (e2 > -dx) {
 80042ae:	42ab      	cmp	r3, r5
            err -= dy;
 80042b0:	bfc1      	itttt	gt
 80042b2:	eba1 0108 	subgt.w	r1, r1, r8
            x0 += sx;
 80042b6:	444a      	addgt	r2, r9
            err -= dy;
 80042b8:	b20c      	sxthgt	r4, r1
            x0 += sx;
 80042ba:	f8ad 200e 	strhgt.w	r2, [sp, #14]
        }

        if (e2 < dy) {
 80042be:	459b      	cmp	fp, r3
 80042c0:	dddf      	ble.n	8004282 <hagl_draw_line+0x86>
            err += dx;
            y0 += sy;
 80042c2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            err += dx;
 80042c6:	443c      	add	r4, r7
            y0 += sy;
 80042c8:	4433      	add	r3, r6
            err += dx;
 80042ca:	b224      	sxth	r4, r4
            y0 += sy;
 80042cc:	f8ad 300c 	strh.w	r3, [sp, #12]
 80042d0:	e7d7      	b.n	8004282 <hagl_draw_line+0x86>
    err = (dx > dy ? dx : -dy) / 2;
 80042d2:	eb0b 74db 	add.w	r4, fp, fp, lsr #31
 80042d6:	1064      	asrs	r4, r4, #1
 80042d8:	4264      	negs	r4, r4
 80042da:	b224      	sxth	r4, r4
 80042dc:	e7d0      	b.n	8004280 <hagl_draw_line+0x84>
        }
    }
}
 80042de:	b005      	add	sp, #20
 80042e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <hagl_draw_hline>:
void hagl_draw_hline(int16_t x0, int16_t y0, uint16_t w, color_t color) {
 80042e8:	b507      	push	{r0, r1, r2, lr}
    hagl_draw_line(x0, y0, x0 + w, y0, color);
 80042ea:	4402      	add	r2, r0
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	b212      	sxth	r2, r2
 80042f0:	460b      	mov	r3, r1
 80042f2:	f7ff ff83 	bl	80041fc <hagl_draw_line>
}
 80042f6:	b003      	add	sp, #12
 80042f8:	f85d fb04 	ldr.w	pc, [sp], #4

080042fc <hagl_fill_rectangle>:
 * Draw a filled rectangle with given color.
 */
void hagl_fill_rectangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, color_t color)
{
    /* Make sure x0 is smaller than x1. */
    if (x0 > x1) {
 80042fc:	4290      	cmp	r0, r2
{
 80042fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (x0 > x1) {
 8004302:	bfc8      	it	gt
 8004304:	4604      	movgt	r4, r0
        y1 = y0 - y1;
        y0 = y0 - y1;
    }

    /* x1 or y1 is before the edge, nothing to do. */
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 8004306:	4e1e      	ldr	r6, [pc, #120]	; (8004380 <hagl_fill_rectangle+0x84>)
{
 8004308:	f8bd 8018 	ldrh.w	r8, [sp, #24]
    if (x0 > x1) {
 800430c:	bfc4      	itt	gt
 800430e:	4610      	movgt	r0, r2
 8004310:	4622      	movgt	r2, r4
    if (y0 > y1) {
 8004312:	4299      	cmp	r1, r3
 8004314:	bfc2      	ittt	gt
 8004316:	460c      	movgt	r4, r1
 8004318:	4619      	movgt	r1, r3
 800431a:	4623      	movgt	r3, r4
    if ((x1 < clip_window.x0) || (y1 < clip_window.y0))  {
 800431c:	8834      	ldrh	r4, [r6, #0]
 800431e:	42a2      	cmp	r2, r4
 8004320:	db22      	blt.n	8004368 <hagl_fill_rectangle+0x6c>
 8004322:	8875      	ldrh	r5, [r6, #2]
 8004324:	42ab      	cmp	r3, r5
 8004326:	db1f      	blt.n	8004368 <hagl_fill_rectangle+0x6c>
        return;
    }

    /* x0 or y0 is after the edge, nothing to do. */
    if ((x0 > clip_window.x1) || (y0 > clip_window.y1)) {
 8004328:	f8b6 e004 	ldrh.w	lr, [r6, #4]
 800432c:	4570      	cmp	r0, lr
 800432e:	dc1b      	bgt.n	8004368 <hagl_fill_rectangle+0x6c>
 8004330:	f8b6 c006 	ldrh.w	ip, [r6, #6]
 8004334:	4561      	cmp	r1, ip
 8004336:	dc17      	bgt.n	8004368 <hagl_fill_rectangle+0x6c>
        return;
    }

    x0 = max(x0, clip_window.x0);
 8004338:	42a0      	cmp	r0, r4
 800433a:	bfb8      	it	lt
 800433c:	4620      	movlt	r0, r4
    y0 = max(y0, clip_window.y0);
    x1 = min(x1, clip_window.x1);
    y1 = min(y1, clip_window.y1);

    uint16_t width = x1 - x0 + 1;
 800433e:	4572      	cmp	r2, lr
 8004340:	bfa8      	it	ge
 8004342:	4672      	movge	r2, lr
    uint16_t height = y1 - y0 + 1;
 8004344:	42a9      	cmp	r1, r5
 8004346:	bfb8      	it	lt
 8004348:	4629      	movlt	r1, r5
 800434a:	4563      	cmp	r3, ip
 800434c:	bfa8      	it	ge
 800434e:	4663      	movge	r3, ip
 8004350:	fa13 f581 	uxtah	r5, r3, r1
    uint16_t width = x1 - x0 + 1;
 8004354:	1c54      	adds	r4, r2, #1
    uint16_t height = y1 - y0 + 1;
 8004356:	b28e      	uxth	r6, r1
 8004358:	3501      	adds	r5, #1
    uint16_t width = x1 - x0 + 1;
 800435a:	1a24      	subs	r4, r4, r0
 800435c:	1bad      	subs	r5, r5, r6
    x0 = max(x0, clip_window.x0);
 800435e:	b207      	sxth	r7, r0
    uint16_t width = x1 - x0 + 1;
 8004360:	b2a4      	uxth	r4, r4

    for (uint16_t i = 0; i < height; i++) {
 8004362:	b2ad      	uxth	r5, r5
 8004364:	42ae      	cmp	r6, r5
 8004366:	d101      	bne.n	800436c <hagl_fill_rectangle+0x70>
        hagl_hal_hline(x0, y0 + i, width, color);
#else
        hagl_draw_hline(x0, y0 + i, width, color);
#endif
    }
}
 8004368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hagl_draw_hline(x0, y0 + i, width, color);
 800436c:	b231      	sxth	r1, r6
 800436e:	4643      	mov	r3, r8
 8004370:	4622      	mov	r2, r4
 8004372:	4638      	mov	r0, r7
 8004374:	3601      	adds	r6, #1
 8004376:	f7ff ffb7 	bl	80042e8 <hagl_draw_hline>
    for (uint16_t i = 0; i < height; i++) {
 800437a:	b2b6      	uxth	r6, r6
 800437c:	e7f2      	b.n	8004364 <hagl_fill_rectangle+0x68>
 800437e:	bf00      	nop
 8004380:	2000000c 	.word	0x2000000c

08004384 <hagl_blit>:
 * configurable source and destination see the file blit.c.
 *
 * TODO: Handle transparency.
 */

void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        /* Inside of bounds, can use HAL provided blit. */
        hagl_hal_blit(x0, y0, source);
    }
#else
    color_t color;
    color_t *ptr = (color_t *) source->buffer;
 8004388:	f8d2 a00c 	ldr.w	sl, [r2, #12]
void hagl_blit(int16_t x0, int16_t y0, bitmap_t *source) {
 800438c:	4607      	mov	r7, r0
 800438e:	4688      	mov	r8, r1
 8004390:	4615      	mov	r5, r2

    for (uint16_t y = 0; y < source->height; y++) {
 8004392:	2600      	movs	r6, #0
 8004394:	886a      	ldrh	r2, [r5, #2]
 8004396:	b2b3      	uxth	r3, r6
 8004398:	429a      	cmp	r2, r3
 800439a:	d811      	bhi.n	80043c0 <hagl_blit+0x3c>
            color = *(ptr++);
            hagl_put_pixel(x0 + x, y0 + y, color);
        }
    }
#endif
};
 800439c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hagl_put_pixel(x0 + x, y0 + y, color);
 80043a0:	4438      	add	r0, r7
 80043a2:	f83a 2b02 	ldrh.w	r2, [sl], #2
 80043a6:	4621      	mov	r1, r4
 80043a8:	b200      	sxth	r0, r0
 80043aa:	f7ff ff11 	bl	80041d0 <hagl_put_pixel>
        for (uint16_t x = 0; x < source->width; x++) {
 80043ae:	f109 0901 	add.w	r9, r9, #1
 80043b2:	882b      	ldrh	r3, [r5, #0]
 80043b4:	fa1f f089 	uxth.w	r0, r9
 80043b8:	4283      	cmp	r3, r0
 80043ba:	d8f1      	bhi.n	80043a0 <hagl_blit+0x1c>
    for (uint16_t y = 0; y < source->height; y++) {
 80043bc:	3601      	adds	r6, #1
 80043be:	e7e9      	b.n	8004394 <hagl_blit+0x10>
            hagl_put_pixel(x0 + x, y0 + y, color);
 80043c0:	4443      	add	r3, r8
 80043c2:	f04f 0900 	mov.w	r9, #0
 80043c6:	b21c      	sxth	r4, r3
 80043c8:	e7f3      	b.n	80043b2 <hagl_blit+0x2e>

080043ca <hagl_put_char>:
{
 80043ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ce:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80043d2:	b087      	sub	sp, #28
 80043d4:	4699      	mov	r9, r3
    status = fontx_glyph(&glyph, code, font);
 80043d6:	f50d 5382 	add.w	r3, sp, #4160	; 0x1040
{
 80043da:	460f      	mov	r7, r1
 80043dc:	4690      	mov	r8, r2
    status = fontx_glyph(&glyph, code, font);
 80043de:	4601      	mov	r1, r0
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4668      	mov	r0, sp
 80043e4:	f7ff fea3 	bl	800412e <fontx_glyph>
    if (0 != status) {
 80043e8:	4604      	mov	r4, r0
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d141      	bne.n	8004472 <hagl_put_char+0xa8>
    bitmap.width = glyph.width,
 80043ee:	f89d 3000 	ldrb.w	r3, [sp]
 80043f2:	f8ad 3008 	strh.w	r3, [sp, #8]
    bitmap.height = glyph.height,
 80043f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80043fa:	f8ad 300a 	strh.w	r3, [sp, #10]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 80043fe:	a906      	add	r1, sp, #24
    bitmap.depth = DISPLAY_DEPTH,
 8004400:	2310      	movs	r3, #16
    bitmap_init(&bitmap, (uint8_t *)buffer);
 8004402:	a802      	add	r0, sp, #8
    bitmap.depth = DISPLAY_DEPTH,
 8004404:	f88d 300e 	strb.w	r3, [sp, #14]
    bitmap_init(&bitmap, (uint8_t *)buffer);
 8004408:	f7ff fd7c 	bl	8003f04 <bitmap_init>
        for (uint8_t x = 0; x < glyph.width; x++) {
 800440c:	f89d 1000 	ldrb.w	r1, [sp]
    color_t *ptr = (color_t *) bitmap.buffer;
 8004410:	9b05      	ldr	r3, [sp, #20]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8004412:	f89d e001 	ldrb.w	lr, [sp, #1]
        glyph.buffer += glyph.pitch;
 8004416:	f89d c003 	ldrb.w	ip, [sp, #3]
 800441a:	004a      	lsls	r2, r1, #1
    for (uint8_t y = 0; y < glyph.height; y++) {
 800441c:	4620      	mov	r0, r4
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 800441e:	f04f 0a80 	mov.w	sl, #128	; 0x80
    for (uint8_t y = 0; y < glyph.height; y++) {
 8004422:	b2c4      	uxtb	r4, r0
 8004424:	45a6      	cmp	lr, r4
 8004426:	d918      	bls.n	800445a <hagl_put_char+0x90>
            set = *(glyph.buffer) & (0x80 >> (x % 8));
 8004428:	9e01      	ldr	r6, [sp, #4]
 800442a:	2500      	movs	r5, #0
 800442c:	e00d      	b.n	800444a <hagl_put_char+0x80>
 800442e:	f896 b000 	ldrb.w	fp, [r6]
 8004432:	f004 0407 	and.w	r4, r4, #7
 8004436:	fa4a f404 	asr.w	r4, sl, r4
                *(ptr++) = color;
 800443a:	ea14 0f0b 	tst.w	r4, fp
 800443e:	bf14      	ite	ne
 8004440:	464c      	movne	r4, r9
 8004442:	2400      	moveq	r4, #0
 8004444:	f823 4015 	strh.w	r4, [r3, r5, lsl #1]
        for (uint8_t x = 0; x < glyph.width; x++) {
 8004448:	3501      	adds	r5, #1
 800444a:	b2ec      	uxtb	r4, r5
 800444c:	42a1      	cmp	r1, r4
 800444e:	d8ee      	bhi.n	800442e <hagl_put_char+0x64>
        glyph.buffer += glyph.pitch;
 8004450:	4466      	add	r6, ip
 8004452:	4413      	add	r3, r2
 8004454:	9601      	str	r6, [sp, #4]
    for (uint8_t y = 0; y < glyph.height; y++) {
 8004456:	3001      	adds	r0, #1
 8004458:	e7e3      	b.n	8004422 <hagl_put_char+0x58>
    hagl_blit(x0, y0, &bitmap);
 800445a:	4638      	mov	r0, r7
 800445c:	aa02      	add	r2, sp, #8
 800445e:	4641      	mov	r1, r8
 8004460:	f7ff ff90 	bl	8004384 <hagl_blit>
    return bitmap.width;
 8004464:	f89d 0008 	ldrb.w	r0, [sp, #8]
}
 8004468:	f50d 5d80 	add.w	sp, sp, #4096	; 0x1000
 800446c:	b007      	add	sp, #28
 800446e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 0;
 8004472:	2000      	movs	r0, #0
 8004474:	e7f8      	b.n	8004468 <hagl_put_char+0x9e>

08004476 <hagl_put_text>:
{
 8004476:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800447a:	b087      	sub	sp, #28
 800447c:	4605      	mov	r5, r0
 800447e:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004482:	460f      	mov	r7, r1
    status = fontx_meta(&meta, font);
 8004484:	a803      	add	r0, sp, #12
 8004486:	4649      	mov	r1, r9
{
 8004488:	4616      	mov	r6, r2
 800448a:	4698      	mov	r8, r3
    status = fontx_meta(&meta, font);
 800448c:	f7ff fe41 	bl	8004112 <fontx_meta>
    if (0 != status) {
 8004490:	b9e8      	cbnz	r0, 80044ce <hagl_put_text+0x58>
 8004492:	463c      	mov	r4, r7
        temp = *str++;
 8004494:	f855 0b04 	ldr.w	r0, [r5], #4
        if (13 == temp || 10 == temp) {
 8004498:	280d      	cmp	r0, #13
 800449a:	d001      	beq.n	80044a0 <hagl_put_text+0x2a>
 800449c:	280a      	cmp	r0, #10
 800449e:	d10c      	bne.n	80044ba <hagl_put_text+0x44>
            y0 += meta.height;
 80044a0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80044a4:	4433      	add	r3, r6
 80044a6:	b21e      	sxth	r6, r3
            x0 = 0;
 80044a8:	2400      	movs	r4, #0
    } while (*str != 0);
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1f1      	bne.n	8004494 <hagl_put_text+0x1e>
    return x0 - original;
 80044b0:	1be1      	subs	r1, r4, r7
 80044b2:	b288      	uxth	r0, r1
}
 80044b4:	b007      	add	sp, #28
 80044b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            x0 += hagl_put_char(temp, x0, y0, color, font);
 80044ba:	4621      	mov	r1, r4
 80044bc:	f8cd 9000 	str.w	r9, [sp]
 80044c0:	4643      	mov	r3, r8
 80044c2:	4632      	mov	r2, r6
 80044c4:	f7ff ff81 	bl	80043ca <hagl_put_char>
 80044c8:	4404      	add	r4, r0
 80044ca:	b224      	sxth	r4, r4
 80044cc:	e7ed      	b.n	80044aa <hagl_put_text+0x34>
        return 0;
 80044ce:	2000      	movs	r0, #0
 80044d0:	e7f0      	b.n	80044b4 <hagl_put_text+0x3e>

080044d2 <hagl_color>:
color_t hagl_color(uint8_t r, uint8_t g, uint8_t b)
{
#ifdef HAGL_HAS_HAL_COLOR
    return hagl_hal_color(r, g, b);
#else
    return rgb565(r, g, b);
 80044d2:	f000 b801 	b.w	80044d8 <rgb565>
	...

080044d8 <rgb565>:

uint16_t rgb565(uint8_t r, uint8_t g, uint8_t b)
{
    uint16_t rgb;

    rgb = ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <rgb565+0x18>)
 80044da:	00c9      	lsls	r1, r1, #3
 80044dc:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80044e0:	ea41 02d2 	orr.w	r2, r1, r2, lsr #3
 80044e4:	ea03 2000 	and.w	r0, r3, r0, lsl #8
 80044e8:	4310      	orrs	r0, r2
    rgb = (((rgb) << 8) & 0xFF00) | (((rgb) >> 8) & 0xFF);

    return rgb;
 80044ea:	ba40      	rev16	r0, r0
}
 80044ec:	b280      	uxth	r0, r0
 80044ee:	4770      	bx	lr
 80044f0:	fffff800 	.word	0xfffff800

080044f4 <malloc>:
 80044f4:	4b02      	ldr	r3, [pc, #8]	; (8004500 <malloc+0xc>)
 80044f6:	4601      	mov	r1, r0
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f000 b823 	b.w	8004544 <_malloc_r>
 80044fe:	bf00      	nop
 8004500:	2000006c 	.word	0x2000006c

08004504 <sbrk_aligned>:
 8004504:	b570      	push	{r4, r5, r6, lr}
 8004506:	4e0e      	ldr	r6, [pc, #56]	; (8004540 <sbrk_aligned+0x3c>)
 8004508:	460c      	mov	r4, r1
 800450a:	6831      	ldr	r1, [r6, #0]
 800450c:	4605      	mov	r5, r0
 800450e:	b911      	cbnz	r1, 8004516 <sbrk_aligned+0x12>
 8004510:	f000 fefe 	bl	8005310 <_sbrk_r>
 8004514:	6030      	str	r0, [r6, #0]
 8004516:	4621      	mov	r1, r4
 8004518:	4628      	mov	r0, r5
 800451a:	f000 fef9 	bl	8005310 <_sbrk_r>
 800451e:	1c43      	adds	r3, r0, #1
 8004520:	d00a      	beq.n	8004538 <sbrk_aligned+0x34>
 8004522:	1cc4      	adds	r4, r0, #3
 8004524:	f024 0403 	bic.w	r4, r4, #3
 8004528:	42a0      	cmp	r0, r4
 800452a:	d007      	beq.n	800453c <sbrk_aligned+0x38>
 800452c:	1a21      	subs	r1, r4, r0
 800452e:	4628      	mov	r0, r5
 8004530:	f000 feee 	bl	8005310 <_sbrk_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d101      	bne.n	800453c <sbrk_aligned+0x38>
 8004538:	f04f 34ff 	mov.w	r4, #4294967295
 800453c:	4620      	mov	r0, r4
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	2000a3f4 	.word	0x2000a3f4

08004544 <_malloc_r>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	1ccd      	adds	r5, r1, #3
 800454a:	f025 0503 	bic.w	r5, r5, #3
 800454e:	3508      	adds	r5, #8
 8004550:	2d0c      	cmp	r5, #12
 8004552:	bf38      	it	cc
 8004554:	250c      	movcc	r5, #12
 8004556:	2d00      	cmp	r5, #0
 8004558:	4607      	mov	r7, r0
 800455a:	db01      	blt.n	8004560 <_malloc_r+0x1c>
 800455c:	42a9      	cmp	r1, r5
 800455e:	d905      	bls.n	800456c <_malloc_r+0x28>
 8004560:	230c      	movs	r3, #12
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	2600      	movs	r6, #0
 8004566:	4630      	mov	r0, r6
 8004568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800456c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004640 <_malloc_r+0xfc>
 8004570:	f000 f868 	bl	8004644 <__malloc_lock>
 8004574:	f8d8 3000 	ldr.w	r3, [r8]
 8004578:	461c      	mov	r4, r3
 800457a:	bb5c      	cbnz	r4, 80045d4 <_malloc_r+0x90>
 800457c:	4629      	mov	r1, r5
 800457e:	4638      	mov	r0, r7
 8004580:	f7ff ffc0 	bl	8004504 <sbrk_aligned>
 8004584:	1c43      	adds	r3, r0, #1
 8004586:	4604      	mov	r4, r0
 8004588:	d155      	bne.n	8004636 <_malloc_r+0xf2>
 800458a:	f8d8 4000 	ldr.w	r4, [r8]
 800458e:	4626      	mov	r6, r4
 8004590:	2e00      	cmp	r6, #0
 8004592:	d145      	bne.n	8004620 <_malloc_r+0xdc>
 8004594:	2c00      	cmp	r4, #0
 8004596:	d048      	beq.n	800462a <_malloc_r+0xe6>
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	4631      	mov	r1, r6
 800459c:	4638      	mov	r0, r7
 800459e:	eb04 0903 	add.w	r9, r4, r3
 80045a2:	f000 feb5 	bl	8005310 <_sbrk_r>
 80045a6:	4581      	cmp	r9, r0
 80045a8:	d13f      	bne.n	800462a <_malloc_r+0xe6>
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	1a6d      	subs	r5, r5, r1
 80045ae:	4629      	mov	r1, r5
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ffa7 	bl	8004504 <sbrk_aligned>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d037      	beq.n	800462a <_malloc_r+0xe6>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	442b      	add	r3, r5
 80045be:	6023      	str	r3, [r4, #0]
 80045c0:	f8d8 3000 	ldr.w	r3, [r8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d038      	beq.n	800463a <_malloc_r+0xf6>
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	42a2      	cmp	r2, r4
 80045cc:	d12b      	bne.n	8004626 <_malloc_r+0xe2>
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
 80045d2:	e00f      	b.n	80045f4 <_malloc_r+0xb0>
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	1b52      	subs	r2, r2, r5
 80045d8:	d41f      	bmi.n	800461a <_malloc_r+0xd6>
 80045da:	2a0b      	cmp	r2, #11
 80045dc:	d917      	bls.n	800460e <_malloc_r+0xca>
 80045de:	1961      	adds	r1, r4, r5
 80045e0:	42a3      	cmp	r3, r4
 80045e2:	6025      	str	r5, [r4, #0]
 80045e4:	bf18      	it	ne
 80045e6:	6059      	strne	r1, [r3, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	bf08      	it	eq
 80045ec:	f8c8 1000 	streq.w	r1, [r8]
 80045f0:	5162      	str	r2, [r4, r5]
 80045f2:	604b      	str	r3, [r1, #4]
 80045f4:	4638      	mov	r0, r7
 80045f6:	f104 060b 	add.w	r6, r4, #11
 80045fa:	f000 f829 	bl	8004650 <__malloc_unlock>
 80045fe:	f026 0607 	bic.w	r6, r6, #7
 8004602:	1d23      	adds	r3, r4, #4
 8004604:	1af2      	subs	r2, r6, r3
 8004606:	d0ae      	beq.n	8004566 <_malloc_r+0x22>
 8004608:	1b9b      	subs	r3, r3, r6
 800460a:	50a3      	str	r3, [r4, r2]
 800460c:	e7ab      	b.n	8004566 <_malloc_r+0x22>
 800460e:	42a3      	cmp	r3, r4
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	d1dd      	bne.n	80045d0 <_malloc_r+0x8c>
 8004614:	f8c8 2000 	str.w	r2, [r8]
 8004618:	e7ec      	b.n	80045f4 <_malloc_r+0xb0>
 800461a:	4623      	mov	r3, r4
 800461c:	6864      	ldr	r4, [r4, #4]
 800461e:	e7ac      	b.n	800457a <_malloc_r+0x36>
 8004620:	4634      	mov	r4, r6
 8004622:	6876      	ldr	r6, [r6, #4]
 8004624:	e7b4      	b.n	8004590 <_malloc_r+0x4c>
 8004626:	4613      	mov	r3, r2
 8004628:	e7cc      	b.n	80045c4 <_malloc_r+0x80>
 800462a:	230c      	movs	r3, #12
 800462c:	603b      	str	r3, [r7, #0]
 800462e:	4638      	mov	r0, r7
 8004630:	f000 f80e 	bl	8004650 <__malloc_unlock>
 8004634:	e797      	b.n	8004566 <_malloc_r+0x22>
 8004636:	6025      	str	r5, [r4, #0]
 8004638:	e7dc      	b.n	80045f4 <_malloc_r+0xb0>
 800463a:	605b      	str	r3, [r3, #4]
 800463c:	deff      	udf	#255	; 0xff
 800463e:	bf00      	nop
 8004640:	2000a3f0 	.word	0x2000a3f0

08004644 <__malloc_lock>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <__malloc_lock+0x8>)
 8004646:	f000 beb0 	b.w	80053aa <__retarget_lock_acquire_recursive>
 800464a:	bf00      	nop
 800464c:	2000a538 	.word	0x2000a538

08004650 <__malloc_unlock>:
 8004650:	4801      	ldr	r0, [pc, #4]	; (8004658 <__malloc_unlock+0x8>)
 8004652:	f000 beab 	b.w	80053ac <__retarget_lock_release_recursive>
 8004656:	bf00      	nop
 8004658:	2000a538 	.word	0x2000a538

0800465c <__cvt>:
 800465c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	ec55 4b10 	vmov	r4, r5, d0
 8004664:	2d00      	cmp	r5, #0
 8004666:	460e      	mov	r6, r1
 8004668:	4619      	mov	r1, r3
 800466a:	462b      	mov	r3, r5
 800466c:	bfbb      	ittet	lt
 800466e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004672:	461d      	movlt	r5, r3
 8004674:	2300      	movge	r3, #0
 8004676:	232d      	movlt	r3, #45	; 0x2d
 8004678:	700b      	strb	r3, [r1, #0]
 800467a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800467c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004680:	4691      	mov	r9, r2
 8004682:	f023 0820 	bic.w	r8, r3, #32
 8004686:	bfbc      	itt	lt
 8004688:	4622      	movlt	r2, r4
 800468a:	4614      	movlt	r4, r2
 800468c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004690:	d005      	beq.n	800469e <__cvt+0x42>
 8004692:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004696:	d100      	bne.n	800469a <__cvt+0x3e>
 8004698:	3601      	adds	r6, #1
 800469a:	2102      	movs	r1, #2
 800469c:	e000      	b.n	80046a0 <__cvt+0x44>
 800469e:	2103      	movs	r1, #3
 80046a0:	ab03      	add	r3, sp, #12
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	ab02      	add	r3, sp, #8
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	ec45 4b10 	vmov	d0, r4, r5
 80046ac:	4653      	mov	r3, sl
 80046ae:	4632      	mov	r2, r6
 80046b0:	f000 ff16 	bl	80054e0 <_dtoa_r>
 80046b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046b8:	4607      	mov	r7, r0
 80046ba:	d102      	bne.n	80046c2 <__cvt+0x66>
 80046bc:	f019 0f01 	tst.w	r9, #1
 80046c0:	d022      	beq.n	8004708 <__cvt+0xac>
 80046c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046c6:	eb07 0906 	add.w	r9, r7, r6
 80046ca:	d110      	bne.n	80046ee <__cvt+0x92>
 80046cc:	783b      	ldrb	r3, [r7, #0]
 80046ce:	2b30      	cmp	r3, #48	; 0x30
 80046d0:	d10a      	bne.n	80046e8 <__cvt+0x8c>
 80046d2:	2200      	movs	r2, #0
 80046d4:	2300      	movs	r3, #0
 80046d6:	4620      	mov	r0, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	f7fc f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80046de:	b918      	cbnz	r0, 80046e8 <__cvt+0x8c>
 80046e0:	f1c6 0601 	rsb	r6, r6, #1
 80046e4:	f8ca 6000 	str.w	r6, [sl]
 80046e8:	f8da 3000 	ldr.w	r3, [sl]
 80046ec:	4499      	add	r9, r3
 80046ee:	2200      	movs	r2, #0
 80046f0:	2300      	movs	r3, #0
 80046f2:	4620      	mov	r0, r4
 80046f4:	4629      	mov	r1, r5
 80046f6:	f7fc f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80046fa:	b108      	cbz	r0, 8004700 <__cvt+0xa4>
 80046fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004700:	2230      	movs	r2, #48	; 0x30
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	454b      	cmp	r3, r9
 8004706:	d307      	bcc.n	8004718 <__cvt+0xbc>
 8004708:	9b03      	ldr	r3, [sp, #12]
 800470a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800470c:	1bdb      	subs	r3, r3, r7
 800470e:	4638      	mov	r0, r7
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	b004      	add	sp, #16
 8004714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	9103      	str	r1, [sp, #12]
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e7f0      	b.n	8004702 <__cvt+0xa6>

08004720 <__exponent>:
 8004720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004722:	4603      	mov	r3, r0
 8004724:	2900      	cmp	r1, #0
 8004726:	bfb8      	it	lt
 8004728:	4249      	neglt	r1, r1
 800472a:	f803 2b02 	strb.w	r2, [r3], #2
 800472e:	bfb4      	ite	lt
 8004730:	222d      	movlt	r2, #45	; 0x2d
 8004732:	222b      	movge	r2, #43	; 0x2b
 8004734:	2909      	cmp	r1, #9
 8004736:	7042      	strb	r2, [r0, #1]
 8004738:	dd2a      	ble.n	8004790 <__exponent+0x70>
 800473a:	f10d 0207 	add.w	r2, sp, #7
 800473e:	4617      	mov	r7, r2
 8004740:	260a      	movs	r6, #10
 8004742:	4694      	mov	ip, r2
 8004744:	fb91 f5f6 	sdiv	r5, r1, r6
 8004748:	fb06 1415 	mls	r4, r6, r5, r1
 800474c:	3430      	adds	r4, #48	; 0x30
 800474e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004752:	460c      	mov	r4, r1
 8004754:	2c63      	cmp	r4, #99	; 0x63
 8004756:	f102 32ff 	add.w	r2, r2, #4294967295
 800475a:	4629      	mov	r1, r5
 800475c:	dcf1      	bgt.n	8004742 <__exponent+0x22>
 800475e:	3130      	adds	r1, #48	; 0x30
 8004760:	f1ac 0402 	sub.w	r4, ip, #2
 8004764:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004768:	1c41      	adds	r1, r0, #1
 800476a:	4622      	mov	r2, r4
 800476c:	42ba      	cmp	r2, r7
 800476e:	d30a      	bcc.n	8004786 <__exponent+0x66>
 8004770:	f10d 0209 	add.w	r2, sp, #9
 8004774:	eba2 020c 	sub.w	r2, r2, ip
 8004778:	42bc      	cmp	r4, r7
 800477a:	bf88      	it	hi
 800477c:	2200      	movhi	r2, #0
 800477e:	4413      	add	r3, r2
 8004780:	1a18      	subs	r0, r3, r0
 8004782:	b003      	add	sp, #12
 8004784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004786:	f812 5b01 	ldrb.w	r5, [r2], #1
 800478a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800478e:	e7ed      	b.n	800476c <__exponent+0x4c>
 8004790:	2330      	movs	r3, #48	; 0x30
 8004792:	3130      	adds	r1, #48	; 0x30
 8004794:	7083      	strb	r3, [r0, #2]
 8004796:	70c1      	strb	r1, [r0, #3]
 8004798:	1d03      	adds	r3, r0, #4
 800479a:	e7f1      	b.n	8004780 <__exponent+0x60>

0800479c <_printf_float>:
 800479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	ed2d 8b02 	vpush	{d8}
 80047a4:	b08d      	sub	sp, #52	; 0x34
 80047a6:	460c      	mov	r4, r1
 80047a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047ac:	4616      	mov	r6, r2
 80047ae:	461f      	mov	r7, r3
 80047b0:	4605      	mov	r5, r0
 80047b2:	f000 fd75 	bl	80052a0 <_localeconv_r>
 80047b6:	f8d0 a000 	ldr.w	sl, [r0]
 80047ba:	4650      	mov	r0, sl
 80047bc:	f7fb fd58 	bl	8000270 <strlen>
 80047c0:	2300      	movs	r3, #0
 80047c2:	930a      	str	r3, [sp, #40]	; 0x28
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	9305      	str	r3, [sp, #20]
 80047c8:	f8d8 3000 	ldr.w	r3, [r8]
 80047cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047d0:	3307      	adds	r3, #7
 80047d2:	f023 0307 	bic.w	r3, r3, #7
 80047d6:	f103 0208 	add.w	r2, r3, #8
 80047da:	f8c8 2000 	str.w	r2, [r8]
 80047de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047e6:	9307      	str	r3, [sp, #28]
 80047e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80047ec:	ee08 0a10 	vmov	s16, r0
 80047f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80047f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047f8:	4b9e      	ldr	r3, [pc, #632]	; (8004a74 <_printf_float+0x2d8>)
 80047fa:	f04f 32ff 	mov.w	r2, #4294967295
 80047fe:	f7fc f995 	bl	8000b2c <__aeabi_dcmpun>
 8004802:	bb88      	cbnz	r0, 8004868 <_printf_float+0xcc>
 8004804:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004808:	4b9a      	ldr	r3, [pc, #616]	; (8004a74 <_printf_float+0x2d8>)
 800480a:	f04f 32ff 	mov.w	r2, #4294967295
 800480e:	f7fc f96f 	bl	8000af0 <__aeabi_dcmple>
 8004812:	bb48      	cbnz	r0, 8004868 <_printf_float+0xcc>
 8004814:	2200      	movs	r2, #0
 8004816:	2300      	movs	r3, #0
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fc f95e 	bl	8000adc <__aeabi_dcmplt>
 8004820:	b110      	cbz	r0, 8004828 <_printf_float+0x8c>
 8004822:	232d      	movs	r3, #45	; 0x2d
 8004824:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004828:	4a93      	ldr	r2, [pc, #588]	; (8004a78 <_printf_float+0x2dc>)
 800482a:	4b94      	ldr	r3, [pc, #592]	; (8004a7c <_printf_float+0x2e0>)
 800482c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004830:	bf94      	ite	ls
 8004832:	4690      	movls	r8, r2
 8004834:	4698      	movhi	r8, r3
 8004836:	2303      	movs	r3, #3
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f04f 0900 	mov.w	r9, #0
 8004846:	9700      	str	r7, [sp, #0]
 8004848:	4633      	mov	r3, r6
 800484a:	aa0b      	add	r2, sp, #44	; 0x2c
 800484c:	4621      	mov	r1, r4
 800484e:	4628      	mov	r0, r5
 8004850:	f000 f9da 	bl	8004c08 <_printf_common>
 8004854:	3001      	adds	r0, #1
 8004856:	f040 8090 	bne.w	800497a <_printf_float+0x1de>
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	b00d      	add	sp, #52	; 0x34
 8004860:	ecbd 8b02 	vpop	{d8}
 8004864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	f7fc f95c 	bl	8000b2c <__aeabi_dcmpun>
 8004874:	b140      	cbz	r0, 8004888 <_printf_float+0xec>
 8004876:	464b      	mov	r3, r9
 8004878:	2b00      	cmp	r3, #0
 800487a:	bfbc      	itt	lt
 800487c:	232d      	movlt	r3, #45	; 0x2d
 800487e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004882:	4a7f      	ldr	r2, [pc, #508]	; (8004a80 <_printf_float+0x2e4>)
 8004884:	4b7f      	ldr	r3, [pc, #508]	; (8004a84 <_printf_float+0x2e8>)
 8004886:	e7d1      	b.n	800482c <_printf_float+0x90>
 8004888:	6863      	ldr	r3, [r4, #4]
 800488a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800488e:	9206      	str	r2, [sp, #24]
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	d13f      	bne.n	8004914 <_printf_float+0x178>
 8004894:	2306      	movs	r3, #6
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	9b05      	ldr	r3, [sp, #20]
 800489a:	6861      	ldr	r1, [r4, #4]
 800489c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048a0:	2300      	movs	r3, #0
 80048a2:	9303      	str	r3, [sp, #12]
 80048a4:	ab0a      	add	r3, sp, #40	; 0x28
 80048a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048aa:	ab09      	add	r3, sp, #36	; 0x24
 80048ac:	ec49 8b10 	vmov	d0, r8, r9
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	6022      	str	r2, [r4, #0]
 80048b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048b8:	4628      	mov	r0, r5
 80048ba:	f7ff fecf 	bl	800465c <__cvt>
 80048be:	9b06      	ldr	r3, [sp, #24]
 80048c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048c2:	2b47      	cmp	r3, #71	; 0x47
 80048c4:	4680      	mov	r8, r0
 80048c6:	d108      	bne.n	80048da <_printf_float+0x13e>
 80048c8:	1cc8      	adds	r0, r1, #3
 80048ca:	db02      	blt.n	80048d2 <_printf_float+0x136>
 80048cc:	6863      	ldr	r3, [r4, #4]
 80048ce:	4299      	cmp	r1, r3
 80048d0:	dd41      	ble.n	8004956 <_printf_float+0x1ba>
 80048d2:	f1ab 0302 	sub.w	r3, fp, #2
 80048d6:	fa5f fb83 	uxtb.w	fp, r3
 80048da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048de:	d820      	bhi.n	8004922 <_printf_float+0x186>
 80048e0:	3901      	subs	r1, #1
 80048e2:	465a      	mov	r2, fp
 80048e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048e8:	9109      	str	r1, [sp, #36]	; 0x24
 80048ea:	f7ff ff19 	bl	8004720 <__exponent>
 80048ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048f0:	1813      	adds	r3, r2, r0
 80048f2:	2a01      	cmp	r2, #1
 80048f4:	4681      	mov	r9, r0
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	dc02      	bgt.n	8004900 <_printf_float+0x164>
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	07d2      	lsls	r2, r2, #31
 80048fe:	d501      	bpl.n	8004904 <_printf_float+0x168>
 8004900:	3301      	adds	r3, #1
 8004902:	6123      	str	r3, [r4, #16]
 8004904:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004908:	2b00      	cmp	r3, #0
 800490a:	d09c      	beq.n	8004846 <_printf_float+0xaa>
 800490c:	232d      	movs	r3, #45	; 0x2d
 800490e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004912:	e798      	b.n	8004846 <_printf_float+0xaa>
 8004914:	9a06      	ldr	r2, [sp, #24]
 8004916:	2a47      	cmp	r2, #71	; 0x47
 8004918:	d1be      	bne.n	8004898 <_printf_float+0xfc>
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1bc      	bne.n	8004898 <_printf_float+0xfc>
 800491e:	2301      	movs	r3, #1
 8004920:	e7b9      	b.n	8004896 <_printf_float+0xfa>
 8004922:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004926:	d118      	bne.n	800495a <_printf_float+0x1be>
 8004928:	2900      	cmp	r1, #0
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	dd0b      	ble.n	8004946 <_printf_float+0x1aa>
 800492e:	6121      	str	r1, [r4, #16]
 8004930:	b913      	cbnz	r3, 8004938 <_printf_float+0x19c>
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	07d0      	lsls	r0, r2, #31
 8004936:	d502      	bpl.n	800493e <_printf_float+0x1a2>
 8004938:	3301      	adds	r3, #1
 800493a:	440b      	add	r3, r1
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004940:	f04f 0900 	mov.w	r9, #0
 8004944:	e7de      	b.n	8004904 <_printf_float+0x168>
 8004946:	b913      	cbnz	r3, 800494e <_printf_float+0x1b2>
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	07d2      	lsls	r2, r2, #31
 800494c:	d501      	bpl.n	8004952 <_printf_float+0x1b6>
 800494e:	3302      	adds	r3, #2
 8004950:	e7f4      	b.n	800493c <_printf_float+0x1a0>
 8004952:	2301      	movs	r3, #1
 8004954:	e7f2      	b.n	800493c <_printf_float+0x1a0>
 8004956:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800495a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495c:	4299      	cmp	r1, r3
 800495e:	db05      	blt.n	800496c <_printf_float+0x1d0>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	6121      	str	r1, [r4, #16]
 8004964:	07d8      	lsls	r0, r3, #31
 8004966:	d5ea      	bpl.n	800493e <_printf_float+0x1a2>
 8004968:	1c4b      	adds	r3, r1, #1
 800496a:	e7e7      	b.n	800493c <_printf_float+0x1a0>
 800496c:	2900      	cmp	r1, #0
 800496e:	bfd4      	ite	le
 8004970:	f1c1 0202 	rsble	r2, r1, #2
 8004974:	2201      	movgt	r2, #1
 8004976:	4413      	add	r3, r2
 8004978:	e7e0      	b.n	800493c <_printf_float+0x1a0>
 800497a:	6823      	ldr	r3, [r4, #0]
 800497c:	055a      	lsls	r2, r3, #21
 800497e:	d407      	bmi.n	8004990 <_printf_float+0x1f4>
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	4642      	mov	r2, r8
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	d12c      	bne.n	80049e8 <_printf_float+0x24c>
 800498e:	e764      	b.n	800485a <_printf_float+0xbe>
 8004990:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004994:	f240 80e0 	bls.w	8004b58 <_printf_float+0x3bc>
 8004998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800499c:	2200      	movs	r2, #0
 800499e:	2300      	movs	r3, #0
 80049a0:	f7fc f892 	bl	8000ac8 <__aeabi_dcmpeq>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d034      	beq.n	8004a12 <_printf_float+0x276>
 80049a8:	4a37      	ldr	r2, [pc, #220]	; (8004a88 <_printf_float+0x2ec>)
 80049aa:	2301      	movs	r3, #1
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	f43f af51 	beq.w	800485a <_printf_float+0xbe>
 80049b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049bc:	429a      	cmp	r2, r3
 80049be:	db02      	blt.n	80049c6 <_printf_float+0x22a>
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	07d8      	lsls	r0, r3, #31
 80049c4:	d510      	bpl.n	80049e8 <_printf_float+0x24c>
 80049c6:	ee18 3a10 	vmov	r3, s16
 80049ca:	4652      	mov	r2, sl
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	f43f af41 	beq.w	800485a <_printf_float+0xbe>
 80049d8:	f04f 0800 	mov.w	r8, #0
 80049dc:	f104 091a 	add.w	r9, r4, #26
 80049e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	4543      	cmp	r3, r8
 80049e6:	dc09      	bgt.n	80049fc <_printf_float+0x260>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	079b      	lsls	r3, r3, #30
 80049ec:	f100 8107 	bmi.w	8004bfe <_printf_float+0x462>
 80049f0:	68e0      	ldr	r0, [r4, #12]
 80049f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049f4:	4298      	cmp	r0, r3
 80049f6:	bfb8      	it	lt
 80049f8:	4618      	movlt	r0, r3
 80049fa:	e730      	b.n	800485e <_printf_float+0xc2>
 80049fc:	2301      	movs	r3, #1
 80049fe:	464a      	mov	r2, r9
 8004a00:	4631      	mov	r1, r6
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	f43f af27 	beq.w	800485a <_printf_float+0xbe>
 8004a0c:	f108 0801 	add.w	r8, r8, #1
 8004a10:	e7e6      	b.n	80049e0 <_printf_float+0x244>
 8004a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	dc39      	bgt.n	8004a8c <_printf_float+0x2f0>
 8004a18:	4a1b      	ldr	r2, [pc, #108]	; (8004a88 <_printf_float+0x2ec>)
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	f43f af19 	beq.w	800485a <_printf_float+0xbe>
 8004a28:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	d102      	bne.n	8004a36 <_printf_float+0x29a>
 8004a30:	6823      	ldr	r3, [r4, #0]
 8004a32:	07d9      	lsls	r1, r3, #31
 8004a34:	d5d8      	bpl.n	80049e8 <_printf_float+0x24c>
 8004a36:	ee18 3a10 	vmov	r3, s16
 8004a3a:	4652      	mov	r2, sl
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4628      	mov	r0, r5
 8004a40:	47b8      	blx	r7
 8004a42:	3001      	adds	r0, #1
 8004a44:	f43f af09 	beq.w	800485a <_printf_float+0xbe>
 8004a48:	f04f 0900 	mov.w	r9, #0
 8004a4c:	f104 0a1a 	add.w	sl, r4, #26
 8004a50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a52:	425b      	negs	r3, r3
 8004a54:	454b      	cmp	r3, r9
 8004a56:	dc01      	bgt.n	8004a5c <_printf_float+0x2c0>
 8004a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a5a:	e792      	b.n	8004982 <_printf_float+0x1e6>
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	4652      	mov	r2, sl
 8004a60:	4631      	mov	r1, r6
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	f43f aef7 	beq.w	800485a <_printf_float+0xbe>
 8004a6c:	f109 0901 	add.w	r9, r9, #1
 8004a70:	e7ee      	b.n	8004a50 <_printf_float+0x2b4>
 8004a72:	bf00      	nop
 8004a74:	7fefffff 	.word	0x7fefffff
 8004a78:	0800b21c 	.word	0x0800b21c
 8004a7c:	0800b220 	.word	0x0800b220
 8004a80:	0800b224 	.word	0x0800b224
 8004a84:	0800b228 	.word	0x0800b228
 8004a88:	0800b22c 	.word	0x0800b22c
 8004a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bfa8      	it	ge
 8004a94:	461a      	movge	r2, r3
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	4691      	mov	r9, r2
 8004a9a:	dc37      	bgt.n	8004b0c <_printf_float+0x370>
 8004a9c:	f04f 0b00 	mov.w	fp, #0
 8004aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004aa4:	f104 021a 	add.w	r2, r4, #26
 8004aa8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aaa:	9305      	str	r3, [sp, #20]
 8004aac:	eba3 0309 	sub.w	r3, r3, r9
 8004ab0:	455b      	cmp	r3, fp
 8004ab2:	dc33      	bgt.n	8004b1c <_printf_float+0x380>
 8004ab4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	db3b      	blt.n	8004b34 <_printf_float+0x398>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	07da      	lsls	r2, r3, #31
 8004ac0:	d438      	bmi.n	8004b34 <_printf_float+0x398>
 8004ac2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ac6:	eba2 0903 	sub.w	r9, r2, r3
 8004aca:	9b05      	ldr	r3, [sp, #20]
 8004acc:	1ad2      	subs	r2, r2, r3
 8004ace:	4591      	cmp	r9, r2
 8004ad0:	bfa8      	it	ge
 8004ad2:	4691      	movge	r9, r2
 8004ad4:	f1b9 0f00 	cmp.w	r9, #0
 8004ad8:	dc35      	bgt.n	8004b46 <_printf_float+0x3aa>
 8004ada:	f04f 0800 	mov.w	r8, #0
 8004ade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ae2:	f104 0a1a 	add.w	sl, r4, #26
 8004ae6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aea:	1a9b      	subs	r3, r3, r2
 8004aec:	eba3 0309 	sub.w	r3, r3, r9
 8004af0:	4543      	cmp	r3, r8
 8004af2:	f77f af79 	ble.w	80049e8 <_printf_float+0x24c>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b8      	blx	r7
 8004b00:	3001      	adds	r0, #1
 8004b02:	f43f aeaa 	beq.w	800485a <_printf_float+0xbe>
 8004b06:	f108 0801 	add.w	r8, r8, #1
 8004b0a:	e7ec      	b.n	8004ae6 <_printf_float+0x34a>
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4642      	mov	r2, r8
 8004b12:	4628      	mov	r0, r5
 8004b14:	47b8      	blx	r7
 8004b16:	3001      	adds	r0, #1
 8004b18:	d1c0      	bne.n	8004a9c <_printf_float+0x300>
 8004b1a:	e69e      	b.n	800485a <_printf_float+0xbe>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4631      	mov	r1, r6
 8004b20:	4628      	mov	r0, r5
 8004b22:	9205      	str	r2, [sp, #20]
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f ae97 	beq.w	800485a <_printf_float+0xbe>
 8004b2c:	9a05      	ldr	r2, [sp, #20]
 8004b2e:	f10b 0b01 	add.w	fp, fp, #1
 8004b32:	e7b9      	b.n	8004aa8 <_printf_float+0x30c>
 8004b34:	ee18 3a10 	vmov	r3, s16
 8004b38:	4652      	mov	r2, sl
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	d1be      	bne.n	8004ac2 <_printf_float+0x326>
 8004b44:	e689      	b.n	800485a <_printf_float+0xbe>
 8004b46:	9a05      	ldr	r2, [sp, #20]
 8004b48:	464b      	mov	r3, r9
 8004b4a:	4442      	add	r2, r8
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	d1c1      	bne.n	8004ada <_printf_float+0x33e>
 8004b56:	e680      	b.n	800485a <_printf_float+0xbe>
 8004b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b5a:	2a01      	cmp	r2, #1
 8004b5c:	dc01      	bgt.n	8004b62 <_printf_float+0x3c6>
 8004b5e:	07db      	lsls	r3, r3, #31
 8004b60:	d53a      	bpl.n	8004bd8 <_printf_float+0x43c>
 8004b62:	2301      	movs	r3, #1
 8004b64:	4642      	mov	r2, r8
 8004b66:	4631      	mov	r1, r6
 8004b68:	4628      	mov	r0, r5
 8004b6a:	47b8      	blx	r7
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f43f ae74 	beq.w	800485a <_printf_float+0xbe>
 8004b72:	ee18 3a10 	vmov	r3, s16
 8004b76:	4652      	mov	r2, sl
 8004b78:	4631      	mov	r1, r6
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	47b8      	blx	r7
 8004b7e:	3001      	adds	r0, #1
 8004b80:	f43f ae6b 	beq.w	800485a <_printf_float+0xbe>
 8004b84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004b90:	f7fb ff9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b94:	b9d8      	cbnz	r0, 8004bce <_printf_float+0x432>
 8004b96:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b9a:	f108 0201 	add.w	r2, r8, #1
 8004b9e:	4631      	mov	r1, r6
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	47b8      	blx	r7
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d10e      	bne.n	8004bc6 <_printf_float+0x42a>
 8004ba8:	e657      	b.n	800485a <_printf_float+0xbe>
 8004baa:	2301      	movs	r3, #1
 8004bac:	4652      	mov	r2, sl
 8004bae:	4631      	mov	r1, r6
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	47b8      	blx	r7
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	f43f ae50 	beq.w	800485a <_printf_float+0xbe>
 8004bba:	f108 0801 	add.w	r8, r8, #1
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	4543      	cmp	r3, r8
 8004bc4:	dcf1      	bgt.n	8004baa <_printf_float+0x40e>
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bcc:	e6da      	b.n	8004984 <_printf_float+0x1e8>
 8004bce:	f04f 0800 	mov.w	r8, #0
 8004bd2:	f104 0a1a 	add.w	sl, r4, #26
 8004bd6:	e7f2      	b.n	8004bbe <_printf_float+0x422>
 8004bd8:	2301      	movs	r3, #1
 8004bda:	4642      	mov	r2, r8
 8004bdc:	e7df      	b.n	8004b9e <_printf_float+0x402>
 8004bde:	2301      	movs	r3, #1
 8004be0:	464a      	mov	r2, r9
 8004be2:	4631      	mov	r1, r6
 8004be4:	4628      	mov	r0, r5
 8004be6:	47b8      	blx	r7
 8004be8:	3001      	adds	r0, #1
 8004bea:	f43f ae36 	beq.w	800485a <_printf_float+0xbe>
 8004bee:	f108 0801 	add.w	r8, r8, #1
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bf6:	1a5b      	subs	r3, r3, r1
 8004bf8:	4543      	cmp	r3, r8
 8004bfa:	dcf0      	bgt.n	8004bde <_printf_float+0x442>
 8004bfc:	e6f8      	b.n	80049f0 <_printf_float+0x254>
 8004bfe:	f04f 0800 	mov.w	r8, #0
 8004c02:	f104 0919 	add.w	r9, r4, #25
 8004c06:	e7f4      	b.n	8004bf2 <_printf_float+0x456>

08004c08 <_printf_common>:
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	4616      	mov	r6, r2
 8004c0e:	4699      	mov	r9, r3
 8004c10:	688a      	ldr	r2, [r1, #8]
 8004c12:	690b      	ldr	r3, [r1, #16]
 8004c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	bfb8      	it	lt
 8004c1c:	4613      	movlt	r3, r2
 8004c1e:	6033      	str	r3, [r6, #0]
 8004c20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c24:	4607      	mov	r7, r0
 8004c26:	460c      	mov	r4, r1
 8004c28:	b10a      	cbz	r2, 8004c2e <_printf_common+0x26>
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	6033      	str	r3, [r6, #0]
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	0699      	lsls	r1, r3, #26
 8004c32:	bf42      	ittt	mi
 8004c34:	6833      	ldrmi	r3, [r6, #0]
 8004c36:	3302      	addmi	r3, #2
 8004c38:	6033      	strmi	r3, [r6, #0]
 8004c3a:	6825      	ldr	r5, [r4, #0]
 8004c3c:	f015 0506 	ands.w	r5, r5, #6
 8004c40:	d106      	bne.n	8004c50 <_printf_common+0x48>
 8004c42:	f104 0a19 	add.w	sl, r4, #25
 8004c46:	68e3      	ldr	r3, [r4, #12]
 8004c48:	6832      	ldr	r2, [r6, #0]
 8004c4a:	1a9b      	subs	r3, r3, r2
 8004c4c:	42ab      	cmp	r3, r5
 8004c4e:	dc26      	bgt.n	8004c9e <_printf_common+0x96>
 8004c50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c54:	1e13      	subs	r3, r2, #0
 8004c56:	6822      	ldr	r2, [r4, #0]
 8004c58:	bf18      	it	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	0692      	lsls	r2, r2, #26
 8004c5e:	d42b      	bmi.n	8004cb8 <_printf_common+0xb0>
 8004c60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c64:	4649      	mov	r1, r9
 8004c66:	4638      	mov	r0, r7
 8004c68:	47c0      	blx	r8
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d01e      	beq.n	8004cac <_printf_common+0xa4>
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	6922      	ldr	r2, [r4, #16]
 8004c72:	f003 0306 	and.w	r3, r3, #6
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	bf02      	ittt	eq
 8004c7a:	68e5      	ldreq	r5, [r4, #12]
 8004c7c:	6833      	ldreq	r3, [r6, #0]
 8004c7e:	1aed      	subeq	r5, r5, r3
 8004c80:	68a3      	ldr	r3, [r4, #8]
 8004c82:	bf0c      	ite	eq
 8004c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c88:	2500      	movne	r5, #0
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	bfc4      	itt	gt
 8004c8e:	1a9b      	subgt	r3, r3, r2
 8004c90:	18ed      	addgt	r5, r5, r3
 8004c92:	2600      	movs	r6, #0
 8004c94:	341a      	adds	r4, #26
 8004c96:	42b5      	cmp	r5, r6
 8004c98:	d11a      	bne.n	8004cd0 <_printf_common+0xc8>
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	e008      	b.n	8004cb0 <_printf_common+0xa8>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	4638      	mov	r0, r7
 8004ca6:	47c0      	blx	r8
 8004ca8:	3001      	adds	r0, #1
 8004caa:	d103      	bne.n	8004cb4 <_printf_common+0xac>
 8004cac:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	e7c6      	b.n	8004c46 <_printf_common+0x3e>
 8004cb8:	18e1      	adds	r1, r4, r3
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	2030      	movs	r0, #48	; 0x30
 8004cbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cc2:	4422      	add	r2, r4
 8004cc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ccc:	3302      	adds	r3, #2
 8004cce:	e7c7      	b.n	8004c60 <_printf_common+0x58>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	4622      	mov	r2, r4
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	4638      	mov	r0, r7
 8004cd8:	47c0      	blx	r8
 8004cda:	3001      	adds	r0, #1
 8004cdc:	d0e6      	beq.n	8004cac <_printf_common+0xa4>
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7d9      	b.n	8004c96 <_printf_common+0x8e>
	...

08004ce4 <_printf_i>:
 8004ce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce8:	7e0f      	ldrb	r7, [r1, #24]
 8004cea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004cec:	2f78      	cmp	r7, #120	; 0x78
 8004cee:	4691      	mov	r9, r2
 8004cf0:	4680      	mov	r8, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	469a      	mov	sl, r3
 8004cf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cfa:	d807      	bhi.n	8004d0c <_printf_i+0x28>
 8004cfc:	2f62      	cmp	r7, #98	; 0x62
 8004cfe:	d80a      	bhi.n	8004d16 <_printf_i+0x32>
 8004d00:	2f00      	cmp	r7, #0
 8004d02:	f000 80d4 	beq.w	8004eae <_printf_i+0x1ca>
 8004d06:	2f58      	cmp	r7, #88	; 0x58
 8004d08:	f000 80c0 	beq.w	8004e8c <_printf_i+0x1a8>
 8004d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d14:	e03a      	b.n	8004d8c <_printf_i+0xa8>
 8004d16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d1a:	2b15      	cmp	r3, #21
 8004d1c:	d8f6      	bhi.n	8004d0c <_printf_i+0x28>
 8004d1e:	a101      	add	r1, pc, #4	; (adr r1, 8004d24 <_printf_i+0x40>)
 8004d20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d24:	08004d7d 	.word	0x08004d7d
 8004d28:	08004d91 	.word	0x08004d91
 8004d2c:	08004d0d 	.word	0x08004d0d
 8004d30:	08004d0d 	.word	0x08004d0d
 8004d34:	08004d0d 	.word	0x08004d0d
 8004d38:	08004d0d 	.word	0x08004d0d
 8004d3c:	08004d91 	.word	0x08004d91
 8004d40:	08004d0d 	.word	0x08004d0d
 8004d44:	08004d0d 	.word	0x08004d0d
 8004d48:	08004d0d 	.word	0x08004d0d
 8004d4c:	08004d0d 	.word	0x08004d0d
 8004d50:	08004e95 	.word	0x08004e95
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004e4f 	.word	0x08004e4f
 8004d5c:	08004d0d 	.word	0x08004d0d
 8004d60:	08004d0d 	.word	0x08004d0d
 8004d64:	08004eb7 	.word	0x08004eb7
 8004d68:	08004d0d 	.word	0x08004d0d
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004d0d 	.word	0x08004d0d
 8004d74:	08004d0d 	.word	0x08004d0d
 8004d78:	08004e57 	.word	0x08004e57
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	1d1a      	adds	r2, r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	602a      	str	r2, [r5, #0]
 8004d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e09f      	b.n	8004ed0 <_printf_i+0x1ec>
 8004d90:	6820      	ldr	r0, [r4, #0]
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	0607      	lsls	r7, r0, #24
 8004d96:	f103 0104 	add.w	r1, r3, #4
 8004d9a:	6029      	str	r1, [r5, #0]
 8004d9c:	d501      	bpl.n	8004da2 <_printf_i+0xbe>
 8004d9e:	681e      	ldr	r6, [r3, #0]
 8004da0:	e003      	b.n	8004daa <_printf_i+0xc6>
 8004da2:	0646      	lsls	r6, r0, #25
 8004da4:	d5fb      	bpl.n	8004d9e <_printf_i+0xba>
 8004da6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	da03      	bge.n	8004db6 <_printf_i+0xd2>
 8004dae:	232d      	movs	r3, #45	; 0x2d
 8004db0:	4276      	negs	r6, r6
 8004db2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db6:	485a      	ldr	r0, [pc, #360]	; (8004f20 <_printf_i+0x23c>)
 8004db8:	230a      	movs	r3, #10
 8004dba:	e012      	b.n	8004de2 <_printf_i+0xfe>
 8004dbc:	682b      	ldr	r3, [r5, #0]
 8004dbe:	6820      	ldr	r0, [r4, #0]
 8004dc0:	1d19      	adds	r1, r3, #4
 8004dc2:	6029      	str	r1, [r5, #0]
 8004dc4:	0605      	lsls	r5, r0, #24
 8004dc6:	d501      	bpl.n	8004dcc <_printf_i+0xe8>
 8004dc8:	681e      	ldr	r6, [r3, #0]
 8004dca:	e002      	b.n	8004dd2 <_printf_i+0xee>
 8004dcc:	0641      	lsls	r1, r0, #25
 8004dce:	d5fb      	bpl.n	8004dc8 <_printf_i+0xe4>
 8004dd0:	881e      	ldrh	r6, [r3, #0]
 8004dd2:	4853      	ldr	r0, [pc, #332]	; (8004f20 <_printf_i+0x23c>)
 8004dd4:	2f6f      	cmp	r7, #111	; 0x6f
 8004dd6:	bf0c      	ite	eq
 8004dd8:	2308      	moveq	r3, #8
 8004dda:	230a      	movne	r3, #10
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004de2:	6865      	ldr	r5, [r4, #4]
 8004de4:	60a5      	str	r5, [r4, #8]
 8004de6:	2d00      	cmp	r5, #0
 8004de8:	bfa2      	ittt	ge
 8004dea:	6821      	ldrge	r1, [r4, #0]
 8004dec:	f021 0104 	bicge.w	r1, r1, #4
 8004df0:	6021      	strge	r1, [r4, #0]
 8004df2:	b90e      	cbnz	r6, 8004df8 <_printf_i+0x114>
 8004df4:	2d00      	cmp	r5, #0
 8004df6:	d04b      	beq.n	8004e90 <_printf_i+0x1ac>
 8004df8:	4615      	mov	r5, r2
 8004dfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8004dfe:	fb03 6711 	mls	r7, r3, r1, r6
 8004e02:	5dc7      	ldrb	r7, [r0, r7]
 8004e04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e08:	4637      	mov	r7, r6
 8004e0a:	42bb      	cmp	r3, r7
 8004e0c:	460e      	mov	r6, r1
 8004e0e:	d9f4      	bls.n	8004dfa <_printf_i+0x116>
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d10b      	bne.n	8004e2c <_printf_i+0x148>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	07de      	lsls	r6, r3, #31
 8004e18:	d508      	bpl.n	8004e2c <_printf_i+0x148>
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	6861      	ldr	r1, [r4, #4]
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	bfde      	ittt	le
 8004e22:	2330      	movle	r3, #48	; 0x30
 8004e24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e2c:	1b52      	subs	r2, r2, r5
 8004e2e:	6122      	str	r2, [r4, #16]
 8004e30:	f8cd a000 	str.w	sl, [sp]
 8004e34:	464b      	mov	r3, r9
 8004e36:	aa03      	add	r2, sp, #12
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4640      	mov	r0, r8
 8004e3c:	f7ff fee4 	bl	8004c08 <_printf_common>
 8004e40:	3001      	adds	r0, #1
 8004e42:	d14a      	bne.n	8004eda <_printf_i+0x1f6>
 8004e44:	f04f 30ff 	mov.w	r0, #4294967295
 8004e48:	b004      	add	sp, #16
 8004e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	f043 0320 	orr.w	r3, r3, #32
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	4833      	ldr	r0, [pc, #204]	; (8004f24 <_printf_i+0x240>)
 8004e58:	2778      	movs	r7, #120	; 0x78
 8004e5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	6829      	ldr	r1, [r5, #0]
 8004e62:	061f      	lsls	r7, r3, #24
 8004e64:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e68:	d402      	bmi.n	8004e70 <_printf_i+0x18c>
 8004e6a:	065f      	lsls	r7, r3, #25
 8004e6c:	bf48      	it	mi
 8004e6e:	b2b6      	uxthmi	r6, r6
 8004e70:	07df      	lsls	r7, r3, #31
 8004e72:	bf48      	it	mi
 8004e74:	f043 0320 	orrmi.w	r3, r3, #32
 8004e78:	6029      	str	r1, [r5, #0]
 8004e7a:	bf48      	it	mi
 8004e7c:	6023      	strmi	r3, [r4, #0]
 8004e7e:	b91e      	cbnz	r6, 8004e88 <_printf_i+0x1a4>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	f023 0320 	bic.w	r3, r3, #32
 8004e86:	6023      	str	r3, [r4, #0]
 8004e88:	2310      	movs	r3, #16
 8004e8a:	e7a7      	b.n	8004ddc <_printf_i+0xf8>
 8004e8c:	4824      	ldr	r0, [pc, #144]	; (8004f20 <_printf_i+0x23c>)
 8004e8e:	e7e4      	b.n	8004e5a <_printf_i+0x176>
 8004e90:	4615      	mov	r5, r2
 8004e92:	e7bd      	b.n	8004e10 <_printf_i+0x12c>
 8004e94:	682b      	ldr	r3, [r5, #0]
 8004e96:	6826      	ldr	r6, [r4, #0]
 8004e98:	6961      	ldr	r1, [r4, #20]
 8004e9a:	1d18      	adds	r0, r3, #4
 8004e9c:	6028      	str	r0, [r5, #0]
 8004e9e:	0635      	lsls	r5, r6, #24
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	d501      	bpl.n	8004ea8 <_printf_i+0x1c4>
 8004ea4:	6019      	str	r1, [r3, #0]
 8004ea6:	e002      	b.n	8004eae <_printf_i+0x1ca>
 8004ea8:	0670      	lsls	r0, r6, #25
 8004eaa:	d5fb      	bpl.n	8004ea4 <_printf_i+0x1c0>
 8004eac:	8019      	strh	r1, [r3, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	6123      	str	r3, [r4, #16]
 8004eb2:	4615      	mov	r5, r2
 8004eb4:	e7bc      	b.n	8004e30 <_printf_i+0x14c>
 8004eb6:	682b      	ldr	r3, [r5, #0]
 8004eb8:	1d1a      	adds	r2, r3, #4
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	6862      	ldr	r2, [r4, #4]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	f7fb f984 	bl	80001d0 <memchr>
 8004ec8:	b108      	cbz	r0, 8004ece <_printf_i+0x1ea>
 8004eca:	1b40      	subs	r0, r0, r5
 8004ecc:	6060      	str	r0, [r4, #4]
 8004ece:	6863      	ldr	r3, [r4, #4]
 8004ed0:	6123      	str	r3, [r4, #16]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	e7aa      	b.n	8004e30 <_printf_i+0x14c>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	462a      	mov	r2, r5
 8004ede:	4649      	mov	r1, r9
 8004ee0:	4640      	mov	r0, r8
 8004ee2:	47d0      	blx	sl
 8004ee4:	3001      	adds	r0, #1
 8004ee6:	d0ad      	beq.n	8004e44 <_printf_i+0x160>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	079b      	lsls	r3, r3, #30
 8004eec:	d413      	bmi.n	8004f16 <_printf_i+0x232>
 8004eee:	68e0      	ldr	r0, [r4, #12]
 8004ef0:	9b03      	ldr	r3, [sp, #12]
 8004ef2:	4298      	cmp	r0, r3
 8004ef4:	bfb8      	it	lt
 8004ef6:	4618      	movlt	r0, r3
 8004ef8:	e7a6      	b.n	8004e48 <_printf_i+0x164>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4632      	mov	r2, r6
 8004efe:	4649      	mov	r1, r9
 8004f00:	4640      	mov	r0, r8
 8004f02:	47d0      	blx	sl
 8004f04:	3001      	adds	r0, #1
 8004f06:	d09d      	beq.n	8004e44 <_printf_i+0x160>
 8004f08:	3501      	adds	r5, #1
 8004f0a:	68e3      	ldr	r3, [r4, #12]
 8004f0c:	9903      	ldr	r1, [sp, #12]
 8004f0e:	1a5b      	subs	r3, r3, r1
 8004f10:	42ab      	cmp	r3, r5
 8004f12:	dcf2      	bgt.n	8004efa <_printf_i+0x216>
 8004f14:	e7eb      	b.n	8004eee <_printf_i+0x20a>
 8004f16:	2500      	movs	r5, #0
 8004f18:	f104 0619 	add.w	r6, r4, #25
 8004f1c:	e7f5      	b.n	8004f0a <_printf_i+0x226>
 8004f1e:	bf00      	nop
 8004f20:	0800b22e 	.word	0x0800b22e
 8004f24:	0800b23f 	.word	0x0800b23f

08004f28 <__sflush_r>:
 8004f28:	898a      	ldrh	r2, [r1, #12]
 8004f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2e:	4605      	mov	r5, r0
 8004f30:	0710      	lsls	r0, r2, #28
 8004f32:	460c      	mov	r4, r1
 8004f34:	d458      	bmi.n	8004fe8 <__sflush_r+0xc0>
 8004f36:	684b      	ldr	r3, [r1, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	dc05      	bgt.n	8004f48 <__sflush_r+0x20>
 8004f3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	dc02      	bgt.n	8004f48 <__sflush_r+0x20>
 8004f42:	2000      	movs	r0, #0
 8004f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f4a:	2e00      	cmp	r6, #0
 8004f4c:	d0f9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f54:	682f      	ldr	r7, [r5, #0]
 8004f56:	6a21      	ldr	r1, [r4, #32]
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	d032      	beq.n	8004fc2 <__sflush_r+0x9a>
 8004f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f5e:	89a3      	ldrh	r3, [r4, #12]
 8004f60:	075a      	lsls	r2, r3, #29
 8004f62:	d505      	bpl.n	8004f70 <__sflush_r+0x48>
 8004f64:	6863      	ldr	r3, [r4, #4]
 8004f66:	1ac0      	subs	r0, r0, r3
 8004f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f6a:	b10b      	cbz	r3, 8004f70 <__sflush_r+0x48>
 8004f6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f6e:	1ac0      	subs	r0, r0, r3
 8004f70:	2300      	movs	r3, #0
 8004f72:	4602      	mov	r2, r0
 8004f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f76:	6a21      	ldr	r1, [r4, #32]
 8004f78:	4628      	mov	r0, r5
 8004f7a:	47b0      	blx	r6
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	d106      	bne.n	8004f90 <__sflush_r+0x68>
 8004f82:	6829      	ldr	r1, [r5, #0]
 8004f84:	291d      	cmp	r1, #29
 8004f86:	d82b      	bhi.n	8004fe0 <__sflush_r+0xb8>
 8004f88:	4a29      	ldr	r2, [pc, #164]	; (8005030 <__sflush_r+0x108>)
 8004f8a:	410a      	asrs	r2, r1
 8004f8c:	07d6      	lsls	r6, r2, #31
 8004f8e:	d427      	bmi.n	8004fe0 <__sflush_r+0xb8>
 8004f90:	2200      	movs	r2, #0
 8004f92:	6062      	str	r2, [r4, #4]
 8004f94:	04d9      	lsls	r1, r3, #19
 8004f96:	6922      	ldr	r2, [r4, #16]
 8004f98:	6022      	str	r2, [r4, #0]
 8004f9a:	d504      	bpl.n	8004fa6 <__sflush_r+0x7e>
 8004f9c:	1c42      	adds	r2, r0, #1
 8004f9e:	d101      	bne.n	8004fa4 <__sflush_r+0x7c>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b903      	cbnz	r3, 8004fa6 <__sflush_r+0x7e>
 8004fa4:	6560      	str	r0, [r4, #84]	; 0x54
 8004fa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fa8:	602f      	str	r7, [r5, #0]
 8004faa:	2900      	cmp	r1, #0
 8004fac:	d0c9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fb2:	4299      	cmp	r1, r3
 8004fb4:	d002      	beq.n	8004fbc <__sflush_r+0x94>
 8004fb6:	4628      	mov	r0, r5
 8004fb8:	f001 f884 	bl	80060c4 <_free_r>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	6360      	str	r0, [r4, #52]	; 0x34
 8004fc0:	e7c0      	b.n	8004f44 <__sflush_r+0x1c>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b0      	blx	r6
 8004fc8:	1c41      	adds	r1, r0, #1
 8004fca:	d1c8      	bne.n	8004f5e <__sflush_r+0x36>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0c5      	beq.n	8004f5e <__sflush_r+0x36>
 8004fd2:	2b1d      	cmp	r3, #29
 8004fd4:	d001      	beq.n	8004fda <__sflush_r+0xb2>
 8004fd6:	2b16      	cmp	r3, #22
 8004fd8:	d101      	bne.n	8004fde <__sflush_r+0xb6>
 8004fda:	602f      	str	r7, [r5, #0]
 8004fdc:	e7b1      	b.n	8004f42 <__sflush_r+0x1a>
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	81a3      	strh	r3, [r4, #12]
 8004fe6:	e7ad      	b.n	8004f44 <__sflush_r+0x1c>
 8004fe8:	690f      	ldr	r7, [r1, #16]
 8004fea:	2f00      	cmp	r7, #0
 8004fec:	d0a9      	beq.n	8004f42 <__sflush_r+0x1a>
 8004fee:	0793      	lsls	r3, r2, #30
 8004ff0:	680e      	ldr	r6, [r1, #0]
 8004ff2:	bf08      	it	eq
 8004ff4:	694b      	ldreq	r3, [r1, #20]
 8004ff6:	600f      	str	r7, [r1, #0]
 8004ff8:	bf18      	it	ne
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	eba6 0807 	sub.w	r8, r6, r7
 8005000:	608b      	str	r3, [r1, #8]
 8005002:	f1b8 0f00 	cmp.w	r8, #0
 8005006:	dd9c      	ble.n	8004f42 <__sflush_r+0x1a>
 8005008:	6a21      	ldr	r1, [r4, #32]
 800500a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800500c:	4643      	mov	r3, r8
 800500e:	463a      	mov	r2, r7
 8005010:	4628      	mov	r0, r5
 8005012:	47b0      	blx	r6
 8005014:	2800      	cmp	r0, #0
 8005016:	dc06      	bgt.n	8005026 <__sflush_r+0xfe>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501e:	81a3      	strh	r3, [r4, #12]
 8005020:	f04f 30ff 	mov.w	r0, #4294967295
 8005024:	e78e      	b.n	8004f44 <__sflush_r+0x1c>
 8005026:	4407      	add	r7, r0
 8005028:	eba8 0800 	sub.w	r8, r8, r0
 800502c:	e7e9      	b.n	8005002 <__sflush_r+0xda>
 800502e:	bf00      	nop
 8005030:	dfbffffe 	.word	0xdfbffffe

08005034 <_fflush_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	690b      	ldr	r3, [r1, #16]
 8005038:	4605      	mov	r5, r0
 800503a:	460c      	mov	r4, r1
 800503c:	b913      	cbnz	r3, 8005044 <_fflush_r+0x10>
 800503e:	2500      	movs	r5, #0
 8005040:	4628      	mov	r0, r5
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	b118      	cbz	r0, 800504e <_fflush_r+0x1a>
 8005046:	6a03      	ldr	r3, [r0, #32]
 8005048:	b90b      	cbnz	r3, 800504e <_fflush_r+0x1a>
 800504a:	f000 f8a7 	bl	800519c <__sinit>
 800504e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f3      	beq.n	800503e <_fflush_r+0xa>
 8005056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005058:	07d0      	lsls	r0, r2, #31
 800505a:	d404      	bmi.n	8005066 <_fflush_r+0x32>
 800505c:	0599      	lsls	r1, r3, #22
 800505e:	d402      	bmi.n	8005066 <_fflush_r+0x32>
 8005060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005062:	f000 f9a2 	bl	80053aa <__retarget_lock_acquire_recursive>
 8005066:	4628      	mov	r0, r5
 8005068:	4621      	mov	r1, r4
 800506a:	f7ff ff5d 	bl	8004f28 <__sflush_r>
 800506e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005070:	07da      	lsls	r2, r3, #31
 8005072:	4605      	mov	r5, r0
 8005074:	d4e4      	bmi.n	8005040 <_fflush_r+0xc>
 8005076:	89a3      	ldrh	r3, [r4, #12]
 8005078:	059b      	lsls	r3, r3, #22
 800507a:	d4e1      	bmi.n	8005040 <_fflush_r+0xc>
 800507c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507e:	f000 f995 	bl	80053ac <__retarget_lock_release_recursive>
 8005082:	e7dd      	b.n	8005040 <_fflush_r+0xc>

08005084 <std>:
 8005084:	2300      	movs	r3, #0
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	e9c0 3300 	strd	r3, r3, [r0]
 800508e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005092:	6083      	str	r3, [r0, #8]
 8005094:	8181      	strh	r1, [r0, #12]
 8005096:	6643      	str	r3, [r0, #100]	; 0x64
 8005098:	81c2      	strh	r2, [r0, #14]
 800509a:	6183      	str	r3, [r0, #24]
 800509c:	4619      	mov	r1, r3
 800509e:	2208      	movs	r2, #8
 80050a0:	305c      	adds	r0, #92	; 0x5c
 80050a2:	f000 f8f4 	bl	800528e <memset>
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <std+0x58>)
 80050a8:	6263      	str	r3, [r4, #36]	; 0x24
 80050aa:	4b0d      	ldr	r3, [pc, #52]	; (80050e0 <std+0x5c>)
 80050ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <std+0x60>)
 80050b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b2:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <std+0x64>)
 80050b4:	6323      	str	r3, [r4, #48]	; 0x30
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <std+0x68>)
 80050b8:	6224      	str	r4, [r4, #32]
 80050ba:	429c      	cmp	r4, r3
 80050bc:	d006      	beq.n	80050cc <std+0x48>
 80050be:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80050c2:	4294      	cmp	r4, r2
 80050c4:	d002      	beq.n	80050cc <std+0x48>
 80050c6:	33d0      	adds	r3, #208	; 0xd0
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d105      	bne.n	80050d8 <std+0x54>
 80050cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d4:	f000 b968 	b.w	80053a8 <__retarget_lock_init_recursive>
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	08005209 	.word	0x08005209
 80050e0:	0800522b 	.word	0x0800522b
 80050e4:	08005263 	.word	0x08005263
 80050e8:	08005287 	.word	0x08005287
 80050ec:	2000a3f8 	.word	0x2000a3f8

080050f0 <stdio_exit_handler>:
 80050f0:	4a02      	ldr	r2, [pc, #8]	; (80050fc <stdio_exit_handler+0xc>)
 80050f2:	4903      	ldr	r1, [pc, #12]	; (8005100 <stdio_exit_handler+0x10>)
 80050f4:	4803      	ldr	r0, [pc, #12]	; (8005104 <stdio_exit_handler+0x14>)
 80050f6:	f000 b869 	b.w	80051cc <_fwalk_sglue>
 80050fa:	bf00      	nop
 80050fc:	20000014 	.word	0x20000014
 8005100:	08005035 	.word	0x08005035
 8005104:	20000020 	.word	0x20000020

08005108 <cleanup_stdio>:
 8005108:	6841      	ldr	r1, [r0, #4]
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <cleanup_stdio+0x34>)
 800510c:	4299      	cmp	r1, r3
 800510e:	b510      	push	{r4, lr}
 8005110:	4604      	mov	r4, r0
 8005112:	d001      	beq.n	8005118 <cleanup_stdio+0x10>
 8005114:	f7ff ff8e 	bl	8005034 <_fflush_r>
 8005118:	68a1      	ldr	r1, [r4, #8]
 800511a:	4b09      	ldr	r3, [pc, #36]	; (8005140 <cleanup_stdio+0x38>)
 800511c:	4299      	cmp	r1, r3
 800511e:	d002      	beq.n	8005126 <cleanup_stdio+0x1e>
 8005120:	4620      	mov	r0, r4
 8005122:	f7ff ff87 	bl	8005034 <_fflush_r>
 8005126:	68e1      	ldr	r1, [r4, #12]
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <cleanup_stdio+0x3c>)
 800512a:	4299      	cmp	r1, r3
 800512c:	d004      	beq.n	8005138 <cleanup_stdio+0x30>
 800512e:	4620      	mov	r0, r4
 8005130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005134:	f7ff bf7e 	b.w	8005034 <_fflush_r>
 8005138:	bd10      	pop	{r4, pc}
 800513a:	bf00      	nop
 800513c:	2000a3f8 	.word	0x2000a3f8
 8005140:	2000a460 	.word	0x2000a460
 8005144:	2000a4c8 	.word	0x2000a4c8

08005148 <global_stdio_init.part.0>:
 8005148:	b510      	push	{r4, lr}
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <global_stdio_init.part.0+0x30>)
 800514c:	4c0b      	ldr	r4, [pc, #44]	; (800517c <global_stdio_init.part.0+0x34>)
 800514e:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <global_stdio_init.part.0+0x38>)
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	4620      	mov	r0, r4
 8005154:	2200      	movs	r2, #0
 8005156:	2104      	movs	r1, #4
 8005158:	f7ff ff94 	bl	8005084 <std>
 800515c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005160:	2201      	movs	r2, #1
 8005162:	2109      	movs	r1, #9
 8005164:	f7ff ff8e 	bl	8005084 <std>
 8005168:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800516c:	2202      	movs	r2, #2
 800516e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005172:	2112      	movs	r1, #18
 8005174:	f7ff bf86 	b.w	8005084 <std>
 8005178:	2000a530 	.word	0x2000a530
 800517c:	2000a3f8 	.word	0x2000a3f8
 8005180:	080050f1 	.word	0x080050f1

08005184 <__sfp_lock_acquire>:
 8005184:	4801      	ldr	r0, [pc, #4]	; (800518c <__sfp_lock_acquire+0x8>)
 8005186:	f000 b910 	b.w	80053aa <__retarget_lock_acquire_recursive>
 800518a:	bf00      	nop
 800518c:	2000a539 	.word	0x2000a539

08005190 <__sfp_lock_release>:
 8005190:	4801      	ldr	r0, [pc, #4]	; (8005198 <__sfp_lock_release+0x8>)
 8005192:	f000 b90b 	b.w	80053ac <__retarget_lock_release_recursive>
 8005196:	bf00      	nop
 8005198:	2000a539 	.word	0x2000a539

0800519c <__sinit>:
 800519c:	b510      	push	{r4, lr}
 800519e:	4604      	mov	r4, r0
 80051a0:	f7ff fff0 	bl	8005184 <__sfp_lock_acquire>
 80051a4:	6a23      	ldr	r3, [r4, #32]
 80051a6:	b11b      	cbz	r3, 80051b0 <__sinit+0x14>
 80051a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ac:	f7ff bff0 	b.w	8005190 <__sfp_lock_release>
 80051b0:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <__sinit+0x28>)
 80051b2:	6223      	str	r3, [r4, #32]
 80051b4:	4b04      	ldr	r3, [pc, #16]	; (80051c8 <__sinit+0x2c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f5      	bne.n	80051a8 <__sinit+0xc>
 80051bc:	f7ff ffc4 	bl	8005148 <global_stdio_init.part.0>
 80051c0:	e7f2      	b.n	80051a8 <__sinit+0xc>
 80051c2:	bf00      	nop
 80051c4:	08005109 	.word	0x08005109
 80051c8:	2000a530 	.word	0x2000a530

080051cc <_fwalk_sglue>:
 80051cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051d0:	4607      	mov	r7, r0
 80051d2:	4688      	mov	r8, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	2600      	movs	r6, #0
 80051d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80051dc:	f1b9 0901 	subs.w	r9, r9, #1
 80051e0:	d505      	bpl.n	80051ee <_fwalk_sglue+0x22>
 80051e2:	6824      	ldr	r4, [r4, #0]
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d1f7      	bne.n	80051d8 <_fwalk_sglue+0xc>
 80051e8:	4630      	mov	r0, r6
 80051ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ee:	89ab      	ldrh	r3, [r5, #12]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d907      	bls.n	8005204 <_fwalk_sglue+0x38>
 80051f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051f8:	3301      	adds	r3, #1
 80051fa:	d003      	beq.n	8005204 <_fwalk_sglue+0x38>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	47c0      	blx	r8
 8005202:	4306      	orrs	r6, r0
 8005204:	3568      	adds	r5, #104	; 0x68
 8005206:	e7e9      	b.n	80051dc <_fwalk_sglue+0x10>

08005208 <__sread>:
 8005208:	b510      	push	{r4, lr}
 800520a:	460c      	mov	r4, r1
 800520c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005210:	f000 f86c 	bl	80052ec <_read_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	bfab      	itete	ge
 8005218:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800521a:	89a3      	ldrhlt	r3, [r4, #12]
 800521c:	181b      	addge	r3, r3, r0
 800521e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005222:	bfac      	ite	ge
 8005224:	6563      	strge	r3, [r4, #84]	; 0x54
 8005226:	81a3      	strhlt	r3, [r4, #12]
 8005228:	bd10      	pop	{r4, pc}

0800522a <__swrite>:
 800522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522e:	461f      	mov	r7, r3
 8005230:	898b      	ldrh	r3, [r1, #12]
 8005232:	05db      	lsls	r3, r3, #23
 8005234:	4605      	mov	r5, r0
 8005236:	460c      	mov	r4, r1
 8005238:	4616      	mov	r6, r2
 800523a:	d505      	bpl.n	8005248 <__swrite+0x1e>
 800523c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005240:	2302      	movs	r3, #2
 8005242:	2200      	movs	r2, #0
 8005244:	f000 f840 	bl	80052c8 <_lseek_r>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800524e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	4632      	mov	r2, r6
 8005256:	463b      	mov	r3, r7
 8005258:	4628      	mov	r0, r5
 800525a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800525e:	f000 b867 	b.w	8005330 <_write_r>

08005262 <__sseek>:
 8005262:	b510      	push	{r4, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 f82d 	bl	80052c8 <_lseek_r>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	bf15      	itete	ne
 8005274:	6560      	strne	r0, [r4, #84]	; 0x54
 8005276:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800527a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800527e:	81a3      	strheq	r3, [r4, #12]
 8005280:	bf18      	it	ne
 8005282:	81a3      	strhne	r3, [r4, #12]
 8005284:	bd10      	pop	{r4, pc}

08005286 <__sclose>:
 8005286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528a:	f000 b80d 	b.w	80052a8 <_close_r>

0800528e <memset>:
 800528e:	4402      	add	r2, r0
 8005290:	4603      	mov	r3, r0
 8005292:	4293      	cmp	r3, r2
 8005294:	d100      	bne.n	8005298 <memset+0xa>
 8005296:	4770      	bx	lr
 8005298:	f803 1b01 	strb.w	r1, [r3], #1
 800529c:	e7f9      	b.n	8005292 <memset+0x4>
	...

080052a0 <_localeconv_r>:
 80052a0:	4800      	ldr	r0, [pc, #0]	; (80052a4 <_localeconv_r+0x4>)
 80052a2:	4770      	bx	lr
 80052a4:	20000160 	.word	0x20000160

080052a8 <_close_r>:
 80052a8:	b538      	push	{r3, r4, r5, lr}
 80052aa:	4d06      	ldr	r5, [pc, #24]	; (80052c4 <_close_r+0x1c>)
 80052ac:	2300      	movs	r3, #0
 80052ae:	4604      	mov	r4, r0
 80052b0:	4608      	mov	r0, r1
 80052b2:	602b      	str	r3, [r5, #0]
 80052b4:	f7fc fa1e 	bl	80016f4 <_close>
 80052b8:	1c43      	adds	r3, r0, #1
 80052ba:	d102      	bne.n	80052c2 <_close_r+0x1a>
 80052bc:	682b      	ldr	r3, [r5, #0]
 80052be:	b103      	cbz	r3, 80052c2 <_close_r+0x1a>
 80052c0:	6023      	str	r3, [r4, #0]
 80052c2:	bd38      	pop	{r3, r4, r5, pc}
 80052c4:	2000a534 	.word	0x2000a534

080052c8 <_lseek_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d07      	ldr	r5, [pc, #28]	; (80052e8 <_lseek_r+0x20>)
 80052cc:	4604      	mov	r4, r0
 80052ce:	4608      	mov	r0, r1
 80052d0:	4611      	mov	r1, r2
 80052d2:	2200      	movs	r2, #0
 80052d4:	602a      	str	r2, [r5, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	f7fc fa16 	bl	8001708 <_lseek>
 80052dc:	1c43      	adds	r3, r0, #1
 80052de:	d102      	bne.n	80052e6 <_lseek_r+0x1e>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b103      	cbz	r3, 80052e6 <_lseek_r+0x1e>
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	2000a534 	.word	0x2000a534

080052ec <_read_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d07      	ldr	r5, [pc, #28]	; (800530c <_read_r+0x20>)
 80052f0:	4604      	mov	r4, r0
 80052f2:	4608      	mov	r0, r1
 80052f4:	4611      	mov	r1, r2
 80052f6:	2200      	movs	r2, #0
 80052f8:	602a      	str	r2, [r5, #0]
 80052fa:	461a      	mov	r2, r3
 80052fc:	f7fc f9de 	bl	80016bc <_read>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d102      	bne.n	800530a <_read_r+0x1e>
 8005304:	682b      	ldr	r3, [r5, #0]
 8005306:	b103      	cbz	r3, 800530a <_read_r+0x1e>
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	2000a534 	.word	0x2000a534

08005310 <_sbrk_r>:
 8005310:	b538      	push	{r3, r4, r5, lr}
 8005312:	4d06      	ldr	r5, [pc, #24]	; (800532c <_sbrk_r+0x1c>)
 8005314:	2300      	movs	r3, #0
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	602b      	str	r3, [r5, #0]
 800531c:	f7fc f9f6 	bl	800170c <_sbrk>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_sbrk_r+0x1a>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_sbrk_r+0x1a>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	2000a534 	.word	0x2000a534

08005330 <_write_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	; (8005350 <_write_r+0x20>)
 8005334:	4604      	mov	r4, r0
 8005336:	4608      	mov	r0, r1
 8005338:	4611      	mov	r1, r2
 800533a:	2200      	movs	r2, #0
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	f7fc f9ca 	bl	80016d8 <_write>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_write_r+0x1e>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_write_r+0x1e>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	2000a534 	.word	0x2000a534

08005354 <__errno>:
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <__errno+0x8>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	2000006c 	.word	0x2000006c

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4d0d      	ldr	r5, [pc, #52]	; (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	; (800539c <__libc_init_array+0x3c>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2600      	movs	r6, #0
 800536c:	42a6      	cmp	r6, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4d0b      	ldr	r5, [pc, #44]	; (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	; (80053a4 <__libc_init_array+0x44>)
 8005374:	f002 fec4 	bl	8008100 <_init>
 8005378:	1b64      	subs	r4, r4, r5
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2600      	movs	r6, #0
 800537e:	42a6      	cmp	r6, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f855 3b04 	ldr.w	r3, [r5], #4
 8005388:	4798      	blx	r3
 800538a:	3601      	adds	r6, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005392:	4798      	blx	r3
 8005394:	3601      	adds	r6, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	0800b770 	.word	0x0800b770
 800539c:	0800b770 	.word	0x0800b770
 80053a0:	0800b770 	.word	0x0800b770
 80053a4:	0800b774 	.word	0x0800b774

080053a8 <__retarget_lock_init_recursive>:
 80053a8:	4770      	bx	lr

080053aa <__retarget_lock_acquire_recursive>:
 80053aa:	4770      	bx	lr

080053ac <__retarget_lock_release_recursive>:
 80053ac:	4770      	bx	lr

080053ae <memcpy>:
 80053ae:	440a      	add	r2, r1
 80053b0:	4291      	cmp	r1, r2
 80053b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b6:	d100      	bne.n	80053ba <memcpy+0xc>
 80053b8:	4770      	bx	lr
 80053ba:	b510      	push	{r4, lr}
 80053bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c4:	4291      	cmp	r1, r2
 80053c6:	d1f9      	bne.n	80053bc <memcpy+0xe>
 80053c8:	bd10      	pop	{r4, pc}

080053ca <quorem>:
 80053ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ce:	6903      	ldr	r3, [r0, #16]
 80053d0:	690c      	ldr	r4, [r1, #16]
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	4607      	mov	r7, r0
 80053d6:	db7e      	blt.n	80054d6 <quorem+0x10c>
 80053d8:	3c01      	subs	r4, #1
 80053da:	f101 0814 	add.w	r8, r1, #20
 80053de:	f100 0514 	add.w	r5, r0, #20
 80053e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053f0:	3301      	adds	r3, #1
 80053f2:	429a      	cmp	r2, r3
 80053f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005400:	d331      	bcc.n	8005466 <quorem+0x9c>
 8005402:	f04f 0e00 	mov.w	lr, #0
 8005406:	4640      	mov	r0, r8
 8005408:	46ac      	mov	ip, r5
 800540a:	46f2      	mov	sl, lr
 800540c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005410:	b293      	uxth	r3, r2
 8005412:	fb06 e303 	mla	r3, r6, r3, lr
 8005416:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800541a:	0c1a      	lsrs	r2, r3, #16
 800541c:	b29b      	uxth	r3, r3
 800541e:	ebaa 0303 	sub.w	r3, sl, r3
 8005422:	f8dc a000 	ldr.w	sl, [ip]
 8005426:	fa13 f38a 	uxtah	r3, r3, sl
 800542a:	fb06 220e 	mla	r2, r6, lr, r2
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	9b00      	ldr	r3, [sp, #0]
 8005432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005436:	b292      	uxth	r2, r2
 8005438:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800543c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005440:	f8bd 3000 	ldrh.w	r3, [sp]
 8005444:	4581      	cmp	r9, r0
 8005446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800544a:	f84c 3b04 	str.w	r3, [ip], #4
 800544e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005452:	d2db      	bcs.n	800540c <quorem+0x42>
 8005454:	f855 300b 	ldr.w	r3, [r5, fp]
 8005458:	b92b      	cbnz	r3, 8005466 <quorem+0x9c>
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	3b04      	subs	r3, #4
 800545e:	429d      	cmp	r5, r3
 8005460:	461a      	mov	r2, r3
 8005462:	d32c      	bcc.n	80054be <quorem+0xf4>
 8005464:	613c      	str	r4, [r7, #16]
 8005466:	4638      	mov	r0, r7
 8005468:	f001 f8f4 	bl	8006654 <__mcmp>
 800546c:	2800      	cmp	r0, #0
 800546e:	db22      	blt.n	80054b6 <quorem+0xec>
 8005470:	3601      	adds	r6, #1
 8005472:	4629      	mov	r1, r5
 8005474:	2000      	movs	r0, #0
 8005476:	f858 2b04 	ldr.w	r2, [r8], #4
 800547a:	f8d1 c000 	ldr.w	ip, [r1]
 800547e:	b293      	uxth	r3, r2
 8005480:	1ac3      	subs	r3, r0, r3
 8005482:	0c12      	lsrs	r2, r2, #16
 8005484:	fa13 f38c 	uxtah	r3, r3, ip
 8005488:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800548c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005490:	b29b      	uxth	r3, r3
 8005492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005496:	45c1      	cmp	r9, r8
 8005498:	f841 3b04 	str.w	r3, [r1], #4
 800549c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80054a0:	d2e9      	bcs.n	8005476 <quorem+0xac>
 80054a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054aa:	b922      	cbnz	r2, 80054b6 <quorem+0xec>
 80054ac:	3b04      	subs	r3, #4
 80054ae:	429d      	cmp	r5, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	d30a      	bcc.n	80054ca <quorem+0x100>
 80054b4:	613c      	str	r4, [r7, #16]
 80054b6:	4630      	mov	r0, r6
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d1ce      	bne.n	8005464 <quorem+0x9a>
 80054c6:	3c01      	subs	r4, #1
 80054c8:	e7c9      	b.n	800545e <quorem+0x94>
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	3b04      	subs	r3, #4
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d1f0      	bne.n	80054b4 <quorem+0xea>
 80054d2:	3c01      	subs	r4, #1
 80054d4:	e7eb      	b.n	80054ae <quorem+0xe4>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e7ee      	b.n	80054b8 <quorem+0xee>
 80054da:	0000      	movs	r0, r0
 80054dc:	0000      	movs	r0, r0
	...

080054e0 <_dtoa_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ed2d 8b04 	vpush	{d8-d9}
 80054e8:	69c5      	ldr	r5, [r0, #28]
 80054ea:	b093      	sub	sp, #76	; 0x4c
 80054ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80054f0:	ec57 6b10 	vmov	r6, r7, d0
 80054f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054f8:	9107      	str	r1, [sp, #28]
 80054fa:	4604      	mov	r4, r0
 80054fc:	920a      	str	r2, [sp, #40]	; 0x28
 80054fe:	930d      	str	r3, [sp, #52]	; 0x34
 8005500:	b975      	cbnz	r5, 8005520 <_dtoa_r+0x40>
 8005502:	2010      	movs	r0, #16
 8005504:	f7fe fff6 	bl	80044f4 <malloc>
 8005508:	4602      	mov	r2, r0
 800550a:	61e0      	str	r0, [r4, #28]
 800550c:	b920      	cbnz	r0, 8005518 <_dtoa_r+0x38>
 800550e:	4bae      	ldr	r3, [pc, #696]	; (80057c8 <_dtoa_r+0x2e8>)
 8005510:	21ef      	movs	r1, #239	; 0xef
 8005512:	48ae      	ldr	r0, [pc, #696]	; (80057cc <_dtoa_r+0x2ec>)
 8005514:	f001 fa22 	bl	800695c <__assert_func>
 8005518:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800551c:	6005      	str	r5, [r0, #0]
 800551e:	60c5      	str	r5, [r0, #12]
 8005520:	69e3      	ldr	r3, [r4, #28]
 8005522:	6819      	ldr	r1, [r3, #0]
 8005524:	b151      	cbz	r1, 800553c <_dtoa_r+0x5c>
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	604a      	str	r2, [r1, #4]
 800552a:	2301      	movs	r3, #1
 800552c:	4093      	lsls	r3, r2
 800552e:	608b      	str	r3, [r1, #8]
 8005530:	4620      	mov	r0, r4
 8005532:	f000 fe53 	bl	80061dc <_Bfree>
 8005536:	69e3      	ldr	r3, [r4, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	1e3b      	subs	r3, r7, #0
 800553e:	bfbb      	ittet	lt
 8005540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005544:	9303      	strlt	r3, [sp, #12]
 8005546:	2300      	movge	r3, #0
 8005548:	2201      	movlt	r2, #1
 800554a:	bfac      	ite	ge
 800554c:	f8c8 3000 	strge.w	r3, [r8]
 8005550:	f8c8 2000 	strlt.w	r2, [r8]
 8005554:	4b9e      	ldr	r3, [pc, #632]	; (80057d0 <_dtoa_r+0x2f0>)
 8005556:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800555a:	ea33 0308 	bics.w	r3, r3, r8
 800555e:	d11b      	bne.n	8005598 <_dtoa_r+0xb8>
 8005560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005562:	f242 730f 	movw	r3, #9999	; 0x270f
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800556c:	4333      	orrs	r3, r6
 800556e:	f000 8593 	beq.w	8006098 <_dtoa_r+0xbb8>
 8005572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005574:	b963      	cbnz	r3, 8005590 <_dtoa_r+0xb0>
 8005576:	4b97      	ldr	r3, [pc, #604]	; (80057d4 <_dtoa_r+0x2f4>)
 8005578:	e027      	b.n	80055ca <_dtoa_r+0xea>
 800557a:	4b97      	ldr	r3, [pc, #604]	; (80057d8 <_dtoa_r+0x2f8>)
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005582:	6013      	str	r3, [r2, #0]
 8005584:	9800      	ldr	r0, [sp, #0]
 8005586:	b013      	add	sp, #76	; 0x4c
 8005588:	ecbd 8b04 	vpop	{d8-d9}
 800558c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005590:	4b90      	ldr	r3, [pc, #576]	; (80057d4 <_dtoa_r+0x2f4>)
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	3303      	adds	r3, #3
 8005596:	e7f3      	b.n	8005580 <_dtoa_r+0xa0>
 8005598:	ed9d 7b02 	vldr	d7, [sp, #8]
 800559c:	2200      	movs	r2, #0
 800559e:	ec51 0b17 	vmov	r0, r1, d7
 80055a2:	eeb0 8a47 	vmov.f32	s16, s14
 80055a6:	eef0 8a67 	vmov.f32	s17, s15
 80055aa:	2300      	movs	r3, #0
 80055ac:	f7fb fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80055b0:	4681      	mov	r9, r0
 80055b2:	b160      	cbz	r0, 80055ce <_dtoa_r+0xee>
 80055b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055b6:	2301      	movs	r3, #1
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8568 	beq.w	8006092 <_dtoa_r+0xbb2>
 80055c2:	4b86      	ldr	r3, [pc, #536]	; (80057dc <_dtoa_r+0x2fc>)
 80055c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	3b01      	subs	r3, #1
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	e7da      	b.n	8005584 <_dtoa_r+0xa4>
 80055ce:	aa10      	add	r2, sp, #64	; 0x40
 80055d0:	a911      	add	r1, sp, #68	; 0x44
 80055d2:	4620      	mov	r0, r4
 80055d4:	eeb0 0a48 	vmov.f32	s0, s16
 80055d8:	eef0 0a68 	vmov.f32	s1, s17
 80055dc:	f001 f8e0 	bl	80067a0 <__d2b>
 80055e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80055e4:	4682      	mov	sl, r0
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	d07f      	beq.n	80056ea <_dtoa_r+0x20a>
 80055ea:	ee18 3a90 	vmov	r3, s17
 80055ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80055f6:	ec51 0b18 	vmov	r0, r1, d8
 80055fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80055fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005602:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005606:	4619      	mov	r1, r3
 8005608:	2200      	movs	r2, #0
 800560a:	4b75      	ldr	r3, [pc, #468]	; (80057e0 <_dtoa_r+0x300>)
 800560c:	f7fa fe3c 	bl	8000288 <__aeabi_dsub>
 8005610:	a367      	add	r3, pc, #412	; (adr r3, 80057b0 <_dtoa_r+0x2d0>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	f7fa ffef 	bl	80005f8 <__aeabi_dmul>
 800561a:	a367      	add	r3, pc, #412	; (adr r3, 80057b8 <_dtoa_r+0x2d8>)
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f7fa fe34 	bl	800028c <__adddf3>
 8005624:	4606      	mov	r6, r0
 8005626:	4628      	mov	r0, r5
 8005628:	460f      	mov	r7, r1
 800562a:	f7fa ff7b 	bl	8000524 <__aeabi_i2d>
 800562e:	a364      	add	r3, pc, #400	; (adr r3, 80057c0 <_dtoa_r+0x2e0>)
 8005630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005634:	f7fa ffe0 	bl	80005f8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fa fe24 	bl	800028c <__adddf3>
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	f7fb fa86 	bl	8000b58 <__aeabi_d2iz>
 800564c:	2200      	movs	r2, #0
 800564e:	4683      	mov	fp, r0
 8005650:	2300      	movs	r3, #0
 8005652:	4630      	mov	r0, r6
 8005654:	4639      	mov	r1, r7
 8005656:	f7fb fa41 	bl	8000adc <__aeabi_dcmplt>
 800565a:	b148      	cbz	r0, 8005670 <_dtoa_r+0x190>
 800565c:	4658      	mov	r0, fp
 800565e:	f7fa ff61 	bl	8000524 <__aeabi_i2d>
 8005662:	4632      	mov	r2, r6
 8005664:	463b      	mov	r3, r7
 8005666:	f7fb fa2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800566a:	b908      	cbnz	r0, 8005670 <_dtoa_r+0x190>
 800566c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005670:	f1bb 0f16 	cmp.w	fp, #22
 8005674:	d857      	bhi.n	8005726 <_dtoa_r+0x246>
 8005676:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <_dtoa_r+0x304>)
 8005678:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	ec51 0b18 	vmov	r0, r1, d8
 8005684:	f7fb fa2a 	bl	8000adc <__aeabi_dcmplt>
 8005688:	2800      	cmp	r0, #0
 800568a:	d04e      	beq.n	800572a <_dtoa_r+0x24a>
 800568c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005690:	2300      	movs	r3, #0
 8005692:	930c      	str	r3, [sp, #48]	; 0x30
 8005694:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005696:	1b5b      	subs	r3, r3, r5
 8005698:	1e5a      	subs	r2, r3, #1
 800569a:	bf45      	ittet	mi
 800569c:	f1c3 0301 	rsbmi	r3, r3, #1
 80056a0:	9305      	strmi	r3, [sp, #20]
 80056a2:	2300      	movpl	r3, #0
 80056a4:	2300      	movmi	r3, #0
 80056a6:	9206      	str	r2, [sp, #24]
 80056a8:	bf54      	ite	pl
 80056aa:	9305      	strpl	r3, [sp, #20]
 80056ac:	9306      	strmi	r3, [sp, #24]
 80056ae:	f1bb 0f00 	cmp.w	fp, #0
 80056b2:	db3c      	blt.n	800572e <_dtoa_r+0x24e>
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80056ba:	445b      	add	r3, fp
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	2300      	movs	r3, #0
 80056c0:	9308      	str	r3, [sp, #32]
 80056c2:	9b07      	ldr	r3, [sp, #28]
 80056c4:	2b09      	cmp	r3, #9
 80056c6:	d868      	bhi.n	800579a <_dtoa_r+0x2ba>
 80056c8:	2b05      	cmp	r3, #5
 80056ca:	bfc4      	itt	gt
 80056cc:	3b04      	subgt	r3, #4
 80056ce:	9307      	strgt	r3, [sp, #28]
 80056d0:	9b07      	ldr	r3, [sp, #28]
 80056d2:	f1a3 0302 	sub.w	r3, r3, #2
 80056d6:	bfcc      	ite	gt
 80056d8:	2500      	movgt	r5, #0
 80056da:	2501      	movle	r5, #1
 80056dc:	2b03      	cmp	r3, #3
 80056de:	f200 8085 	bhi.w	80057ec <_dtoa_r+0x30c>
 80056e2:	e8df f003 	tbb	[pc, r3]
 80056e6:	3b2e      	.short	0x3b2e
 80056e8:	5839      	.short	0x5839
 80056ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80056ee:	441d      	add	r5, r3
 80056f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	bfc1      	itttt	gt
 80056f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8005700:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005704:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005708:	bfd6      	itet	le
 800570a:	f1c3 0320 	rsble	r3, r3, #32
 800570e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005712:	fa06 f003 	lslle.w	r0, r6, r3
 8005716:	f7fa fef5 	bl	8000504 <__aeabi_ui2d>
 800571a:	2201      	movs	r2, #1
 800571c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005720:	3d01      	subs	r5, #1
 8005722:	920e      	str	r2, [sp, #56]	; 0x38
 8005724:	e76f      	b.n	8005606 <_dtoa_r+0x126>
 8005726:	2301      	movs	r3, #1
 8005728:	e7b3      	b.n	8005692 <_dtoa_r+0x1b2>
 800572a:	900c      	str	r0, [sp, #48]	; 0x30
 800572c:	e7b2      	b.n	8005694 <_dtoa_r+0x1b4>
 800572e:	9b05      	ldr	r3, [sp, #20]
 8005730:	eba3 030b 	sub.w	r3, r3, fp
 8005734:	9305      	str	r3, [sp, #20]
 8005736:	f1cb 0300 	rsb	r3, fp, #0
 800573a:	9308      	str	r3, [sp, #32]
 800573c:	2300      	movs	r3, #0
 800573e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005740:	e7bf      	b.n	80056c2 <_dtoa_r+0x1e2>
 8005742:	2300      	movs	r3, #0
 8005744:	9309      	str	r3, [sp, #36]	; 0x24
 8005746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005748:	2b00      	cmp	r3, #0
 800574a:	dc52      	bgt.n	80057f2 <_dtoa_r+0x312>
 800574c:	2301      	movs	r3, #1
 800574e:	9301      	str	r3, [sp, #4]
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	461a      	mov	r2, r3
 8005754:	920a      	str	r2, [sp, #40]	; 0x28
 8005756:	e00b      	b.n	8005770 <_dtoa_r+0x290>
 8005758:	2301      	movs	r3, #1
 800575a:	e7f3      	b.n	8005744 <_dtoa_r+0x264>
 800575c:	2300      	movs	r3, #0
 800575e:	9309      	str	r3, [sp, #36]	; 0x24
 8005760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005762:	445b      	add	r3, fp
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	3301      	adds	r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	bfb8      	it	lt
 800576e:	2301      	movlt	r3, #1
 8005770:	69e0      	ldr	r0, [r4, #28]
 8005772:	2100      	movs	r1, #0
 8005774:	2204      	movs	r2, #4
 8005776:	f102 0614 	add.w	r6, r2, #20
 800577a:	429e      	cmp	r6, r3
 800577c:	d93d      	bls.n	80057fa <_dtoa_r+0x31a>
 800577e:	6041      	str	r1, [r0, #4]
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fceb 	bl	800615c <_Balloc>
 8005786:	9000      	str	r0, [sp, #0]
 8005788:	2800      	cmp	r0, #0
 800578a:	d139      	bne.n	8005800 <_dtoa_r+0x320>
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <_dtoa_r+0x308>)
 800578e:	4602      	mov	r2, r0
 8005790:	f240 11af 	movw	r1, #431	; 0x1af
 8005794:	e6bd      	b.n	8005512 <_dtoa_r+0x32>
 8005796:	2301      	movs	r3, #1
 8005798:	e7e1      	b.n	800575e <_dtoa_r+0x27e>
 800579a:	2501      	movs	r5, #1
 800579c:	2300      	movs	r3, #0
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	9509      	str	r5, [sp, #36]	; 0x24
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
 80057a6:	9301      	str	r3, [sp, #4]
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	2200      	movs	r2, #0
 80057ac:	2312      	movs	r3, #18
 80057ae:	e7d1      	b.n	8005754 <_dtoa_r+0x274>
 80057b0:	636f4361 	.word	0x636f4361
 80057b4:	3fd287a7 	.word	0x3fd287a7
 80057b8:	8b60c8b3 	.word	0x8b60c8b3
 80057bc:	3fc68a28 	.word	0x3fc68a28
 80057c0:	509f79fb 	.word	0x509f79fb
 80057c4:	3fd34413 	.word	0x3fd34413
 80057c8:	0800b25d 	.word	0x0800b25d
 80057cc:	0800b274 	.word	0x0800b274
 80057d0:	7ff00000 	.word	0x7ff00000
 80057d4:	0800b259 	.word	0x0800b259
 80057d8:	0800b250 	.word	0x0800b250
 80057dc:	0800b22d 	.word	0x0800b22d
 80057e0:	3ff80000 	.word	0x3ff80000
 80057e4:	0800b360 	.word	0x0800b360
 80057e8:	0800b2cc 	.word	0x0800b2cc
 80057ec:	2301      	movs	r3, #1
 80057ee:	9309      	str	r3, [sp, #36]	; 0x24
 80057f0:	e7d7      	b.n	80057a2 <_dtoa_r+0x2c2>
 80057f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f4:	9301      	str	r3, [sp, #4]
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	e7ba      	b.n	8005770 <_dtoa_r+0x290>
 80057fa:	3101      	adds	r1, #1
 80057fc:	0052      	lsls	r2, r2, #1
 80057fe:	e7ba      	b.n	8005776 <_dtoa_r+0x296>
 8005800:	69e3      	ldr	r3, [r4, #28]
 8005802:	9a00      	ldr	r2, [sp, #0]
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	9b04      	ldr	r3, [sp, #16]
 8005808:	2b0e      	cmp	r3, #14
 800580a:	f200 80a8 	bhi.w	800595e <_dtoa_r+0x47e>
 800580e:	2d00      	cmp	r5, #0
 8005810:	f000 80a5 	beq.w	800595e <_dtoa_r+0x47e>
 8005814:	f1bb 0f00 	cmp.w	fp, #0
 8005818:	dd38      	ble.n	800588c <_dtoa_r+0x3ac>
 800581a:	4bc0      	ldr	r3, [pc, #768]	; (8005b1c <_dtoa_r+0x63c>)
 800581c:	f00b 020f 	and.w	r2, fp, #15
 8005820:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005824:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005828:	e9d3 6700 	ldrd	r6, r7, [r3]
 800582c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005830:	d019      	beq.n	8005866 <_dtoa_r+0x386>
 8005832:	4bbb      	ldr	r3, [pc, #748]	; (8005b20 <_dtoa_r+0x640>)
 8005834:	ec51 0b18 	vmov	r0, r1, d8
 8005838:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800583c:	f7fb f806 	bl	800084c <__aeabi_ddiv>
 8005840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005844:	f008 080f 	and.w	r8, r8, #15
 8005848:	2503      	movs	r5, #3
 800584a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005b20 <_dtoa_r+0x640>
 800584e:	f1b8 0f00 	cmp.w	r8, #0
 8005852:	d10a      	bne.n	800586a <_dtoa_r+0x38a>
 8005854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	f7fa fff6 	bl	800084c <__aeabi_ddiv>
 8005860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005864:	e02b      	b.n	80058be <_dtoa_r+0x3de>
 8005866:	2502      	movs	r5, #2
 8005868:	e7ef      	b.n	800584a <_dtoa_r+0x36a>
 800586a:	f018 0f01 	tst.w	r8, #1
 800586e:	d008      	beq.n	8005882 <_dtoa_r+0x3a2>
 8005870:	4630      	mov	r0, r6
 8005872:	4639      	mov	r1, r7
 8005874:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005878:	f7fa febe 	bl	80005f8 <__aeabi_dmul>
 800587c:	3501      	adds	r5, #1
 800587e:	4606      	mov	r6, r0
 8005880:	460f      	mov	r7, r1
 8005882:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005886:	f109 0908 	add.w	r9, r9, #8
 800588a:	e7e0      	b.n	800584e <_dtoa_r+0x36e>
 800588c:	f000 809f 	beq.w	80059ce <_dtoa_r+0x4ee>
 8005890:	f1cb 0600 	rsb	r6, fp, #0
 8005894:	4ba1      	ldr	r3, [pc, #644]	; (8005b1c <_dtoa_r+0x63c>)
 8005896:	4fa2      	ldr	r7, [pc, #648]	; (8005b20 <_dtoa_r+0x640>)
 8005898:	f006 020f 	and.w	r2, r6, #15
 800589c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	ec51 0b18 	vmov	r0, r1, d8
 80058a8:	f7fa fea6 	bl	80005f8 <__aeabi_dmul>
 80058ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b0:	1136      	asrs	r6, r6, #4
 80058b2:	2300      	movs	r3, #0
 80058b4:	2502      	movs	r5, #2
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	d17e      	bne.n	80059b8 <_dtoa_r+0x4d8>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1d0      	bne.n	8005860 <_dtoa_r+0x380>
 80058be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80058c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f000 8084 	beq.w	80059d2 <_dtoa_r+0x4f2>
 80058ca:	4b96      	ldr	r3, [pc, #600]	; (8005b24 <_dtoa_r+0x644>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	f7fb f903 	bl	8000adc <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d07b      	beq.n	80059d2 <_dtoa_r+0x4f2>
 80058da:	9b04      	ldr	r3, [sp, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d078      	beq.n	80059d2 <_dtoa_r+0x4f2>
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dd39      	ble.n	800595a <_dtoa_r+0x47a>
 80058e6:	4b90      	ldr	r3, [pc, #576]	; (8005b28 <_dtoa_r+0x648>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	f7fa fe83 	bl	80005f8 <__aeabi_dmul>
 80058f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058f6:	9e01      	ldr	r6, [sp, #4]
 80058f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80058fc:	3501      	adds	r5, #1
 80058fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005902:	4628      	mov	r0, r5
 8005904:	f7fa fe0e 	bl	8000524 <__aeabi_i2d>
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	f7fa fe74 	bl	80005f8 <__aeabi_dmul>
 8005910:	4b86      	ldr	r3, [pc, #536]	; (8005b2c <_dtoa_r+0x64c>)
 8005912:	2200      	movs	r2, #0
 8005914:	f7fa fcba 	bl	800028c <__adddf3>
 8005918:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800591c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005920:	9303      	str	r3, [sp, #12]
 8005922:	2e00      	cmp	r6, #0
 8005924:	d158      	bne.n	80059d8 <_dtoa_r+0x4f8>
 8005926:	4b82      	ldr	r3, [pc, #520]	; (8005b30 <_dtoa_r+0x650>)
 8005928:	2200      	movs	r2, #0
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	f7fa fcab 	bl	8000288 <__aeabi_dsub>
 8005932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005936:	4680      	mov	r8, r0
 8005938:	4689      	mov	r9, r1
 800593a:	f7fb f8ed 	bl	8000b18 <__aeabi_dcmpgt>
 800593e:	2800      	cmp	r0, #0
 8005940:	f040 8296 	bne.w	8005e70 <_dtoa_r+0x990>
 8005944:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005948:	4640      	mov	r0, r8
 800594a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800594e:	4649      	mov	r1, r9
 8005950:	f7fb f8c4 	bl	8000adc <__aeabi_dcmplt>
 8005954:	2800      	cmp	r0, #0
 8005956:	f040 8289 	bne.w	8005e6c <_dtoa_r+0x98c>
 800595a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005960:	2b00      	cmp	r3, #0
 8005962:	f2c0 814e 	blt.w	8005c02 <_dtoa_r+0x722>
 8005966:	f1bb 0f0e 	cmp.w	fp, #14
 800596a:	f300 814a 	bgt.w	8005c02 <_dtoa_r+0x722>
 800596e:	4b6b      	ldr	r3, [pc, #428]	; (8005b1c <_dtoa_r+0x63c>)
 8005970:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005974:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	f280 80dc 	bge.w	8005b38 <_dtoa_r+0x658>
 8005980:	9b04      	ldr	r3, [sp, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f300 80d8 	bgt.w	8005b38 <_dtoa_r+0x658>
 8005988:	f040 826f 	bne.w	8005e6a <_dtoa_r+0x98a>
 800598c:	4b68      	ldr	r3, [pc, #416]	; (8005b30 <_dtoa_r+0x650>)
 800598e:	2200      	movs	r2, #0
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fa fe30 	bl	80005f8 <__aeabi_dmul>
 8005998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800599c:	f7fb f8b2 	bl	8000b04 <__aeabi_dcmpge>
 80059a0:	9e04      	ldr	r6, [sp, #16]
 80059a2:	4637      	mov	r7, r6
 80059a4:	2800      	cmp	r0, #0
 80059a6:	f040 8245 	bne.w	8005e34 <_dtoa_r+0x954>
 80059aa:	9d00      	ldr	r5, [sp, #0]
 80059ac:	2331      	movs	r3, #49	; 0x31
 80059ae:	f805 3b01 	strb.w	r3, [r5], #1
 80059b2:	f10b 0b01 	add.w	fp, fp, #1
 80059b6:	e241      	b.n	8005e3c <_dtoa_r+0x95c>
 80059b8:	07f2      	lsls	r2, r6, #31
 80059ba:	d505      	bpl.n	80059c8 <_dtoa_r+0x4e8>
 80059bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c0:	f7fa fe1a 	bl	80005f8 <__aeabi_dmul>
 80059c4:	3501      	adds	r5, #1
 80059c6:	2301      	movs	r3, #1
 80059c8:	1076      	asrs	r6, r6, #1
 80059ca:	3708      	adds	r7, #8
 80059cc:	e773      	b.n	80058b6 <_dtoa_r+0x3d6>
 80059ce:	2502      	movs	r5, #2
 80059d0:	e775      	b.n	80058be <_dtoa_r+0x3de>
 80059d2:	9e04      	ldr	r6, [sp, #16]
 80059d4:	465f      	mov	r7, fp
 80059d6:	e792      	b.n	80058fe <_dtoa_r+0x41e>
 80059d8:	9900      	ldr	r1, [sp, #0]
 80059da:	4b50      	ldr	r3, [pc, #320]	; (8005b1c <_dtoa_r+0x63c>)
 80059dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059e0:	4431      	add	r1, r6
 80059e2:	9102      	str	r1, [sp, #8]
 80059e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059e6:	eeb0 9a47 	vmov.f32	s18, s14
 80059ea:	eef0 9a67 	vmov.f32	s19, s15
 80059ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d044      	beq.n	8005a84 <_dtoa_r+0x5a4>
 80059fa:	494e      	ldr	r1, [pc, #312]	; (8005b34 <_dtoa_r+0x654>)
 80059fc:	2000      	movs	r0, #0
 80059fe:	f7fa ff25 	bl	800084c <__aeabi_ddiv>
 8005a02:	ec53 2b19 	vmov	r2, r3, d9
 8005a06:	f7fa fc3f 	bl	8000288 <__aeabi_dsub>
 8005a0a:	9d00      	ldr	r5, [sp, #0]
 8005a0c:	ec41 0b19 	vmov	d9, r0, r1
 8005a10:	4649      	mov	r1, r9
 8005a12:	4640      	mov	r0, r8
 8005a14:	f7fb f8a0 	bl	8000b58 <__aeabi_d2iz>
 8005a18:	4606      	mov	r6, r0
 8005a1a:	f7fa fd83 	bl	8000524 <__aeabi_i2d>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4640      	mov	r0, r8
 8005a24:	4649      	mov	r1, r9
 8005a26:	f7fa fc2f 	bl	8000288 <__aeabi_dsub>
 8005a2a:	3630      	adds	r6, #48	; 0x30
 8005a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8005a30:	ec53 2b19 	vmov	r2, r3, d9
 8005a34:	4680      	mov	r8, r0
 8005a36:	4689      	mov	r9, r1
 8005a38:	f7fb f850 	bl	8000adc <__aeabi_dcmplt>
 8005a3c:	2800      	cmp	r0, #0
 8005a3e:	d164      	bne.n	8005b0a <_dtoa_r+0x62a>
 8005a40:	4642      	mov	r2, r8
 8005a42:	464b      	mov	r3, r9
 8005a44:	4937      	ldr	r1, [pc, #220]	; (8005b24 <_dtoa_r+0x644>)
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fa fc1e 	bl	8000288 <__aeabi_dsub>
 8005a4c:	ec53 2b19 	vmov	r2, r3, d9
 8005a50:	f7fb f844 	bl	8000adc <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	f040 80b6 	bne.w	8005bc6 <_dtoa_r+0x6e6>
 8005a5a:	9b02      	ldr	r3, [sp, #8]
 8005a5c:	429d      	cmp	r5, r3
 8005a5e:	f43f af7c 	beq.w	800595a <_dtoa_r+0x47a>
 8005a62:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <_dtoa_r+0x648>)
 8005a64:	ec51 0b19 	vmov	r0, r1, d9
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f7fa fdc5 	bl	80005f8 <__aeabi_dmul>
 8005a6e:	4b2e      	ldr	r3, [pc, #184]	; (8005b28 <_dtoa_r+0x648>)
 8005a70:	ec41 0b19 	vmov	d9, r0, r1
 8005a74:	2200      	movs	r2, #0
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa fdbd 	bl	80005f8 <__aeabi_dmul>
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4689      	mov	r9, r1
 8005a82:	e7c5      	b.n	8005a10 <_dtoa_r+0x530>
 8005a84:	ec51 0b17 	vmov	r0, r1, d7
 8005a88:	f7fa fdb6 	bl	80005f8 <__aeabi_dmul>
 8005a8c:	9b02      	ldr	r3, [sp, #8]
 8005a8e:	9d00      	ldr	r5, [sp, #0]
 8005a90:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a92:	ec41 0b19 	vmov	d9, r0, r1
 8005a96:	4649      	mov	r1, r9
 8005a98:	4640      	mov	r0, r8
 8005a9a:	f7fb f85d 	bl	8000b58 <__aeabi_d2iz>
 8005a9e:	4606      	mov	r6, r0
 8005aa0:	f7fa fd40 	bl	8000524 <__aeabi_i2d>
 8005aa4:	3630      	adds	r6, #48	; 0x30
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa fbeb 	bl	8000288 <__aeabi_dsub>
 8005ab2:	f805 6b01 	strb.w	r6, [r5], #1
 8005ab6:	9b02      	ldr	r3, [sp, #8]
 8005ab8:	429d      	cmp	r5, r3
 8005aba:	4680      	mov	r8, r0
 8005abc:	4689      	mov	r9, r1
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	d124      	bne.n	8005b0e <_dtoa_r+0x62e>
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	; (8005b34 <_dtoa_r+0x654>)
 8005ac6:	ec51 0b19 	vmov	r0, r1, d9
 8005aca:	f7fa fbdf 	bl	800028c <__adddf3>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4640      	mov	r0, r8
 8005ad4:	4649      	mov	r1, r9
 8005ad6:	f7fb f81f 	bl	8000b18 <__aeabi_dcmpgt>
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d173      	bne.n	8005bc6 <_dtoa_r+0x6e6>
 8005ade:	ec53 2b19 	vmov	r2, r3, d9
 8005ae2:	4914      	ldr	r1, [pc, #80]	; (8005b34 <_dtoa_r+0x654>)
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7fa fbcf 	bl	8000288 <__aeabi_dsub>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4640      	mov	r0, r8
 8005af0:	4649      	mov	r1, r9
 8005af2:	f7fa fff3 	bl	8000adc <__aeabi_dcmplt>
 8005af6:	2800      	cmp	r0, #0
 8005af8:	f43f af2f 	beq.w	800595a <_dtoa_r+0x47a>
 8005afc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005afe:	1e6b      	subs	r3, r5, #1
 8005b00:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b06:	2b30      	cmp	r3, #48	; 0x30
 8005b08:	d0f8      	beq.n	8005afc <_dtoa_r+0x61c>
 8005b0a:	46bb      	mov	fp, r7
 8005b0c:	e04a      	b.n	8005ba4 <_dtoa_r+0x6c4>
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <_dtoa_r+0x648>)
 8005b10:	f7fa fd72 	bl	80005f8 <__aeabi_dmul>
 8005b14:	4680      	mov	r8, r0
 8005b16:	4689      	mov	r9, r1
 8005b18:	e7bd      	b.n	8005a96 <_dtoa_r+0x5b6>
 8005b1a:	bf00      	nop
 8005b1c:	0800b360 	.word	0x0800b360
 8005b20:	0800b338 	.word	0x0800b338
 8005b24:	3ff00000 	.word	0x3ff00000
 8005b28:	40240000 	.word	0x40240000
 8005b2c:	401c0000 	.word	0x401c0000
 8005b30:	40140000 	.word	0x40140000
 8005b34:	3fe00000 	.word	0x3fe00000
 8005b38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b3c:	9d00      	ldr	r5, [sp, #0]
 8005b3e:	4642      	mov	r2, r8
 8005b40:	464b      	mov	r3, r9
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fe81 	bl	800084c <__aeabi_ddiv>
 8005b4a:	f7fb f805 	bl	8000b58 <__aeabi_d2iz>
 8005b4e:	9001      	str	r0, [sp, #4]
 8005b50:	f7fa fce8 	bl	8000524 <__aeabi_i2d>
 8005b54:	4642      	mov	r2, r8
 8005b56:	464b      	mov	r3, r9
 8005b58:	f7fa fd4e 	bl	80005f8 <__aeabi_dmul>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa fb90 	bl	8000288 <__aeabi_dsub>
 8005b68:	9e01      	ldr	r6, [sp, #4]
 8005b6a:	9f04      	ldr	r7, [sp, #16]
 8005b6c:	3630      	adds	r6, #48	; 0x30
 8005b6e:	f805 6b01 	strb.w	r6, [r5], #1
 8005b72:	9e00      	ldr	r6, [sp, #0]
 8005b74:	1bae      	subs	r6, r5, r6
 8005b76:	42b7      	cmp	r7, r6
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	d134      	bne.n	8005be8 <_dtoa_r+0x708>
 8005b7e:	f7fa fb85 	bl	800028c <__adddf3>
 8005b82:	4642      	mov	r2, r8
 8005b84:	464b      	mov	r3, r9
 8005b86:	4606      	mov	r6, r0
 8005b88:	460f      	mov	r7, r1
 8005b8a:	f7fa ffc5 	bl	8000b18 <__aeabi_dcmpgt>
 8005b8e:	b9c8      	cbnz	r0, 8005bc4 <_dtoa_r+0x6e4>
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	4630      	mov	r0, r6
 8005b96:	4639      	mov	r1, r7
 8005b98:	f7fa ff96 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b9c:	b110      	cbz	r0, 8005ba4 <_dtoa_r+0x6c4>
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	07db      	lsls	r3, r3, #31
 8005ba2:	d40f      	bmi.n	8005bc4 <_dtoa_r+0x6e4>
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	4620      	mov	r0, r4
 8005ba8:	f000 fb18 	bl	80061dc <_Bfree>
 8005bac:	2300      	movs	r3, #0
 8005bae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bb0:	702b      	strb	r3, [r5, #0]
 8005bb2:	f10b 0301 	add.w	r3, fp, #1
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f43f ace2 	beq.w	8005584 <_dtoa_r+0xa4>
 8005bc0:	601d      	str	r5, [r3, #0]
 8005bc2:	e4df      	b.n	8005584 <_dtoa_r+0xa4>
 8005bc4:	465f      	mov	r7, fp
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	461d      	mov	r5, r3
 8005bca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bce:	2a39      	cmp	r2, #57	; 0x39
 8005bd0:	d106      	bne.n	8005be0 <_dtoa_r+0x700>
 8005bd2:	9a00      	ldr	r2, [sp, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d1f7      	bne.n	8005bc8 <_dtoa_r+0x6e8>
 8005bd8:	9900      	ldr	r1, [sp, #0]
 8005bda:	2230      	movs	r2, #48	; 0x30
 8005bdc:	3701      	adds	r7, #1
 8005bde:	700a      	strb	r2, [r1, #0]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	3201      	adds	r2, #1
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	e790      	b.n	8005b0a <_dtoa_r+0x62a>
 8005be8:	4ba3      	ldr	r3, [pc, #652]	; (8005e78 <_dtoa_r+0x998>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	460f      	mov	r7, r1
 8005bf8:	f7fa ff66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d09e      	beq.n	8005b3e <_dtoa_r+0x65e>
 8005c00:	e7d0      	b.n	8005ba4 <_dtoa_r+0x6c4>
 8005c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	f000 80ca 	beq.w	8005d9e <_dtoa_r+0x8be>
 8005c0a:	9a07      	ldr	r2, [sp, #28]
 8005c0c:	2a01      	cmp	r2, #1
 8005c0e:	f300 80ad 	bgt.w	8005d6c <_dtoa_r+0x88c>
 8005c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	f000 80a5 	beq.w	8005d64 <_dtoa_r+0x884>
 8005c1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c1e:	9e08      	ldr	r6, [sp, #32]
 8005c20:	9d05      	ldr	r5, [sp, #20]
 8005c22:	9a05      	ldr	r2, [sp, #20]
 8005c24:	441a      	add	r2, r3
 8005c26:	9205      	str	r2, [sp, #20]
 8005c28:	9a06      	ldr	r2, [sp, #24]
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	441a      	add	r2, r3
 8005c2e:	4620      	mov	r0, r4
 8005c30:	9206      	str	r2, [sp, #24]
 8005c32:	f000 fb89 	bl	8006348 <__i2b>
 8005c36:	4607      	mov	r7, r0
 8005c38:	b165      	cbz	r5, 8005c54 <_dtoa_r+0x774>
 8005c3a:	9b06      	ldr	r3, [sp, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dd09      	ble.n	8005c54 <_dtoa_r+0x774>
 8005c40:	42ab      	cmp	r3, r5
 8005c42:	9a05      	ldr	r2, [sp, #20]
 8005c44:	bfa8      	it	ge
 8005c46:	462b      	movge	r3, r5
 8005c48:	1ad2      	subs	r2, r2, r3
 8005c4a:	9205      	str	r2, [sp, #20]
 8005c4c:	9a06      	ldr	r2, [sp, #24]
 8005c4e:	1aed      	subs	r5, r5, r3
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	9306      	str	r3, [sp, #24]
 8005c54:	9b08      	ldr	r3, [sp, #32]
 8005c56:	b1f3      	cbz	r3, 8005c96 <_dtoa_r+0x7b6>
 8005c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 80a3 	beq.w	8005da6 <_dtoa_r+0x8c6>
 8005c60:	2e00      	cmp	r6, #0
 8005c62:	dd10      	ble.n	8005c86 <_dtoa_r+0x7a6>
 8005c64:	4639      	mov	r1, r7
 8005c66:	4632      	mov	r2, r6
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 fc2d 	bl	80064c8 <__pow5mult>
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4601      	mov	r1, r0
 8005c72:	4607      	mov	r7, r0
 8005c74:	4620      	mov	r0, r4
 8005c76:	f000 fb7d 	bl	8006374 <__multiply>
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	4620      	mov	r0, r4
 8005c80:	f000 faac 	bl	80061dc <_Bfree>
 8005c84:	46c2      	mov	sl, r8
 8005c86:	9b08      	ldr	r3, [sp, #32]
 8005c88:	1b9a      	subs	r2, r3, r6
 8005c8a:	d004      	beq.n	8005c96 <_dtoa_r+0x7b6>
 8005c8c:	4651      	mov	r1, sl
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 fc1a 	bl	80064c8 <__pow5mult>
 8005c94:	4682      	mov	sl, r0
 8005c96:	2101      	movs	r1, #1
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fb55 	bl	8006348 <__i2b>
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	f340 8081 	ble.w	8005daa <_dtoa_r+0x8ca>
 8005ca8:	461a      	mov	r2, r3
 8005caa:	4601      	mov	r1, r0
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 fc0b 	bl	80064c8 <__pow5mult>
 8005cb2:	9b07      	ldr	r3, [sp, #28]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	4606      	mov	r6, r0
 8005cb8:	dd7a      	ble.n	8005db0 <_dtoa_r+0x8d0>
 8005cba:	f04f 0800 	mov.w	r8, #0
 8005cbe:	6933      	ldr	r3, [r6, #16]
 8005cc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005cc4:	6918      	ldr	r0, [r3, #16]
 8005cc6:	f000 faf1 	bl	80062ac <__hi0bits>
 8005cca:	f1c0 0020 	rsb	r0, r0, #32
 8005cce:	9b06      	ldr	r3, [sp, #24]
 8005cd0:	4418      	add	r0, r3
 8005cd2:	f010 001f 	ands.w	r0, r0, #31
 8005cd6:	f000 8094 	beq.w	8005e02 <_dtoa_r+0x922>
 8005cda:	f1c0 0320 	rsb	r3, r0, #32
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	f340 8085 	ble.w	8005dee <_dtoa_r+0x90e>
 8005ce4:	9b05      	ldr	r3, [sp, #20]
 8005ce6:	f1c0 001c 	rsb	r0, r0, #28
 8005cea:	4403      	add	r3, r0
 8005cec:	9305      	str	r3, [sp, #20]
 8005cee:	9b06      	ldr	r3, [sp, #24]
 8005cf0:	4403      	add	r3, r0
 8005cf2:	4405      	add	r5, r0
 8005cf4:	9306      	str	r3, [sp, #24]
 8005cf6:	9b05      	ldr	r3, [sp, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dd05      	ble.n	8005d08 <_dtoa_r+0x828>
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4620      	mov	r0, r4
 8005d02:	f000 fc3b 	bl	800657c <__lshift>
 8005d06:	4682      	mov	sl, r0
 8005d08:	9b06      	ldr	r3, [sp, #24]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dd05      	ble.n	8005d1a <_dtoa_r+0x83a>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	461a      	mov	r2, r3
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fc32 	bl	800657c <__lshift>
 8005d18:	4606      	mov	r6, r0
 8005d1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d072      	beq.n	8005e06 <_dtoa_r+0x926>
 8005d20:	4631      	mov	r1, r6
 8005d22:	4650      	mov	r0, sl
 8005d24:	f000 fc96 	bl	8006654 <__mcmp>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	da6c      	bge.n	8005e06 <_dtoa_r+0x926>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	4651      	mov	r1, sl
 8005d30:	220a      	movs	r2, #10
 8005d32:	4620      	mov	r0, r4
 8005d34:	f000 fa74 	bl	8006220 <__multadd>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d3e:	4682      	mov	sl, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 81b0 	beq.w	80060a6 <_dtoa_r+0xbc6>
 8005d46:	2300      	movs	r3, #0
 8005d48:	4639      	mov	r1, r7
 8005d4a:	220a      	movs	r2, #10
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fa67 	bl	8006220 <__multadd>
 8005d52:	9b01      	ldr	r3, [sp, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	4607      	mov	r7, r0
 8005d58:	f300 8096 	bgt.w	8005e88 <_dtoa_r+0x9a8>
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	dc59      	bgt.n	8005e16 <_dtoa_r+0x936>
 8005d62:	e091      	b.n	8005e88 <_dtoa_r+0x9a8>
 8005d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d6a:	e758      	b.n	8005c1e <_dtoa_r+0x73e>
 8005d6c:	9b04      	ldr	r3, [sp, #16]
 8005d6e:	1e5e      	subs	r6, r3, #1
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	42b3      	cmp	r3, r6
 8005d74:	bfbf      	itttt	lt
 8005d76:	9b08      	ldrlt	r3, [sp, #32]
 8005d78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005d7a:	9608      	strlt	r6, [sp, #32]
 8005d7c:	1af3      	sublt	r3, r6, r3
 8005d7e:	bfb4      	ite	lt
 8005d80:	18d2      	addlt	r2, r2, r3
 8005d82:	1b9e      	subge	r6, r3, r6
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	bfbc      	itt	lt
 8005d88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005d8a:	2600      	movlt	r6, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bfb7      	itett	lt
 8005d90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005d94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005d98:	1a9d      	sublt	r5, r3, r2
 8005d9a:	2300      	movlt	r3, #0
 8005d9c:	e741      	b.n	8005c22 <_dtoa_r+0x742>
 8005d9e:	9e08      	ldr	r6, [sp, #32]
 8005da0:	9d05      	ldr	r5, [sp, #20]
 8005da2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005da4:	e748      	b.n	8005c38 <_dtoa_r+0x758>
 8005da6:	9a08      	ldr	r2, [sp, #32]
 8005da8:	e770      	b.n	8005c8c <_dtoa_r+0x7ac>
 8005daa:	9b07      	ldr	r3, [sp, #28]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	dc19      	bgt.n	8005de4 <_dtoa_r+0x904>
 8005db0:	9b02      	ldr	r3, [sp, #8]
 8005db2:	b9bb      	cbnz	r3, 8005de4 <_dtoa_r+0x904>
 8005db4:	9b03      	ldr	r3, [sp, #12]
 8005db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dba:	b99b      	cbnz	r3, 8005de4 <_dtoa_r+0x904>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dc2:	0d1b      	lsrs	r3, r3, #20
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	b183      	cbz	r3, 8005dea <_dtoa_r+0x90a>
 8005dc8:	9b05      	ldr	r3, [sp, #20]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	9305      	str	r3, [sp, #20]
 8005dce:	9b06      	ldr	r3, [sp, #24]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	9306      	str	r3, [sp, #24]
 8005dd4:	f04f 0801 	mov.w	r8, #1
 8005dd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f47f af6f 	bne.w	8005cbe <_dtoa_r+0x7de>
 8005de0:	2001      	movs	r0, #1
 8005de2:	e774      	b.n	8005cce <_dtoa_r+0x7ee>
 8005de4:	f04f 0800 	mov.w	r8, #0
 8005de8:	e7f6      	b.n	8005dd8 <_dtoa_r+0x8f8>
 8005dea:	4698      	mov	r8, r3
 8005dec:	e7f4      	b.n	8005dd8 <_dtoa_r+0x8f8>
 8005dee:	d082      	beq.n	8005cf6 <_dtoa_r+0x816>
 8005df0:	9a05      	ldr	r2, [sp, #20]
 8005df2:	331c      	adds	r3, #28
 8005df4:	441a      	add	r2, r3
 8005df6:	9205      	str	r2, [sp, #20]
 8005df8:	9a06      	ldr	r2, [sp, #24]
 8005dfa:	441a      	add	r2, r3
 8005dfc:	441d      	add	r5, r3
 8005dfe:	9206      	str	r2, [sp, #24]
 8005e00:	e779      	b.n	8005cf6 <_dtoa_r+0x816>
 8005e02:	4603      	mov	r3, r0
 8005e04:	e7f4      	b.n	8005df0 <_dtoa_r+0x910>
 8005e06:	9b04      	ldr	r3, [sp, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	dc37      	bgt.n	8005e7c <_dtoa_r+0x99c>
 8005e0c:	9b07      	ldr	r3, [sp, #28]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	dd34      	ble.n	8005e7c <_dtoa_r+0x99c>
 8005e12:	9b04      	ldr	r3, [sp, #16]
 8005e14:	9301      	str	r3, [sp, #4]
 8005e16:	9b01      	ldr	r3, [sp, #4]
 8005e18:	b963      	cbnz	r3, 8005e34 <_dtoa_r+0x954>
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	2205      	movs	r2, #5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f9fe 	bl	8006220 <__multadd>
 8005e24:	4601      	mov	r1, r0
 8005e26:	4606      	mov	r6, r0
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f000 fc13 	bl	8006654 <__mcmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f73f adbb 	bgt.w	80059aa <_dtoa_r+0x4ca>
 8005e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e36:	9d00      	ldr	r5, [sp, #0]
 8005e38:	ea6f 0b03 	mvn.w	fp, r3
 8005e3c:	f04f 0800 	mov.w	r8, #0
 8005e40:	4631      	mov	r1, r6
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 f9ca 	bl	80061dc <_Bfree>
 8005e48:	2f00      	cmp	r7, #0
 8005e4a:	f43f aeab 	beq.w	8005ba4 <_dtoa_r+0x6c4>
 8005e4e:	f1b8 0f00 	cmp.w	r8, #0
 8005e52:	d005      	beq.n	8005e60 <_dtoa_r+0x980>
 8005e54:	45b8      	cmp	r8, r7
 8005e56:	d003      	beq.n	8005e60 <_dtoa_r+0x980>
 8005e58:	4641      	mov	r1, r8
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	f000 f9be 	bl	80061dc <_Bfree>
 8005e60:	4639      	mov	r1, r7
 8005e62:	4620      	mov	r0, r4
 8005e64:	f000 f9ba 	bl	80061dc <_Bfree>
 8005e68:	e69c      	b.n	8005ba4 <_dtoa_r+0x6c4>
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	4637      	mov	r7, r6
 8005e6e:	e7e1      	b.n	8005e34 <_dtoa_r+0x954>
 8005e70:	46bb      	mov	fp, r7
 8005e72:	4637      	mov	r7, r6
 8005e74:	e599      	b.n	80059aa <_dtoa_r+0x4ca>
 8005e76:	bf00      	nop
 8005e78:	40240000 	.word	0x40240000
 8005e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 80c8 	beq.w	8006014 <_dtoa_r+0xb34>
 8005e84:	9b04      	ldr	r3, [sp, #16]
 8005e86:	9301      	str	r3, [sp, #4]
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	dd05      	ble.n	8005e98 <_dtoa_r+0x9b8>
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	462a      	mov	r2, r5
 8005e90:	4620      	mov	r0, r4
 8005e92:	f000 fb73 	bl	800657c <__lshift>
 8005e96:	4607      	mov	r7, r0
 8005e98:	f1b8 0f00 	cmp.w	r8, #0
 8005e9c:	d05b      	beq.n	8005f56 <_dtoa_r+0xa76>
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 f95b 	bl	800615c <_Balloc>
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	b928      	cbnz	r0, 8005eb6 <_dtoa_r+0x9d6>
 8005eaa:	4b83      	ldr	r3, [pc, #524]	; (80060b8 <_dtoa_r+0xbd8>)
 8005eac:	4602      	mov	r2, r0
 8005eae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005eb2:	f7ff bb2e 	b.w	8005512 <_dtoa_r+0x32>
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	3202      	adds	r2, #2
 8005eba:	0092      	lsls	r2, r2, #2
 8005ebc:	f107 010c 	add.w	r1, r7, #12
 8005ec0:	300c      	adds	r0, #12
 8005ec2:	f7ff fa74 	bl	80053ae <memcpy>
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fb56 	bl	800657c <__lshift>
 8005ed0:	9b00      	ldr	r3, [sp, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eda:	4413      	add	r3, r2
 8005edc:	9308      	str	r3, [sp, #32]
 8005ede:	9b02      	ldr	r3, [sp, #8]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	46b8      	mov	r8, r7
 8005ee6:	9306      	str	r3, [sp, #24]
 8005ee8:	4607      	mov	r7, r0
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	4631      	mov	r1, r6
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	f7ff fa69 	bl	80053ca <quorem>
 8005ef8:	4641      	mov	r1, r8
 8005efa:	9002      	str	r0, [sp, #8]
 8005efc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005f00:	4650      	mov	r0, sl
 8005f02:	f000 fba7 	bl	8006654 <__mcmp>
 8005f06:	463a      	mov	r2, r7
 8005f08:	9005      	str	r0, [sp, #20]
 8005f0a:	4631      	mov	r1, r6
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fbbd 	bl	800668c <__mdiff>
 8005f12:	68c2      	ldr	r2, [r0, #12]
 8005f14:	4605      	mov	r5, r0
 8005f16:	bb02      	cbnz	r2, 8005f5a <_dtoa_r+0xa7a>
 8005f18:	4601      	mov	r1, r0
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	f000 fb9a 	bl	8006654 <__mcmp>
 8005f20:	4602      	mov	r2, r0
 8005f22:	4629      	mov	r1, r5
 8005f24:	4620      	mov	r0, r4
 8005f26:	9209      	str	r2, [sp, #36]	; 0x24
 8005f28:	f000 f958 	bl	80061dc <_Bfree>
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f30:	9d04      	ldr	r5, [sp, #16]
 8005f32:	ea43 0102 	orr.w	r1, r3, r2
 8005f36:	9b06      	ldr	r3, [sp, #24]
 8005f38:	4319      	orrs	r1, r3
 8005f3a:	d110      	bne.n	8005f5e <_dtoa_r+0xa7e>
 8005f3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f40:	d029      	beq.n	8005f96 <_dtoa_r+0xab6>
 8005f42:	9b05      	ldr	r3, [sp, #20]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dd02      	ble.n	8005f4e <_dtoa_r+0xa6e>
 8005f48:	9b02      	ldr	r3, [sp, #8]
 8005f4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005f4e:	9b01      	ldr	r3, [sp, #4]
 8005f50:	f883 9000 	strb.w	r9, [r3]
 8005f54:	e774      	b.n	8005e40 <_dtoa_r+0x960>
 8005f56:	4638      	mov	r0, r7
 8005f58:	e7ba      	b.n	8005ed0 <_dtoa_r+0x9f0>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	e7e1      	b.n	8005f22 <_dtoa_r+0xa42>
 8005f5e:	9b05      	ldr	r3, [sp, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	db04      	blt.n	8005f6e <_dtoa_r+0xa8e>
 8005f64:	9907      	ldr	r1, [sp, #28]
 8005f66:	430b      	orrs	r3, r1
 8005f68:	9906      	ldr	r1, [sp, #24]
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	d120      	bne.n	8005fb0 <_dtoa_r+0xad0>
 8005f6e:	2a00      	cmp	r2, #0
 8005f70:	dded      	ble.n	8005f4e <_dtoa_r+0xa6e>
 8005f72:	4651      	mov	r1, sl
 8005f74:	2201      	movs	r2, #1
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fb00 	bl	800657c <__lshift>
 8005f7c:	4631      	mov	r1, r6
 8005f7e:	4682      	mov	sl, r0
 8005f80:	f000 fb68 	bl	8006654 <__mcmp>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	dc03      	bgt.n	8005f90 <_dtoa_r+0xab0>
 8005f88:	d1e1      	bne.n	8005f4e <_dtoa_r+0xa6e>
 8005f8a:	f019 0f01 	tst.w	r9, #1
 8005f8e:	d0de      	beq.n	8005f4e <_dtoa_r+0xa6e>
 8005f90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005f94:	d1d8      	bne.n	8005f48 <_dtoa_r+0xa68>
 8005f96:	9a01      	ldr	r2, [sp, #4]
 8005f98:	2339      	movs	r3, #57	; 0x39
 8005f9a:	7013      	strb	r3, [r2, #0]
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fa6:	2a39      	cmp	r2, #57	; 0x39
 8005fa8:	d06c      	beq.n	8006084 <_dtoa_r+0xba4>
 8005faa:	3201      	adds	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e747      	b.n	8005e40 <_dtoa_r+0x960>
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	dd07      	ble.n	8005fc4 <_dtoa_r+0xae4>
 8005fb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005fb8:	d0ed      	beq.n	8005f96 <_dtoa_r+0xab6>
 8005fba:	9a01      	ldr	r2, [sp, #4]
 8005fbc:	f109 0301 	add.w	r3, r9, #1
 8005fc0:	7013      	strb	r3, [r2, #0]
 8005fc2:	e73d      	b.n	8005e40 <_dtoa_r+0x960>
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	9a08      	ldr	r2, [sp, #32]
 8005fc8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d043      	beq.n	8006058 <_dtoa_r+0xb78>
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	220a      	movs	r2, #10
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	f000 f922 	bl	8006220 <__multadd>
 8005fdc:	45b8      	cmp	r8, r7
 8005fde:	4682      	mov	sl, r0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	f04f 020a 	mov.w	r2, #10
 8005fe8:	4641      	mov	r1, r8
 8005fea:	4620      	mov	r0, r4
 8005fec:	d107      	bne.n	8005ffe <_dtoa_r+0xb1e>
 8005fee:	f000 f917 	bl	8006220 <__multadd>
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	4607      	mov	r7, r0
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	9304      	str	r3, [sp, #16]
 8005ffc:	e775      	b.n	8005eea <_dtoa_r+0xa0a>
 8005ffe:	f000 f90f 	bl	8006220 <__multadd>
 8006002:	4639      	mov	r1, r7
 8006004:	4680      	mov	r8, r0
 8006006:	2300      	movs	r3, #0
 8006008:	220a      	movs	r2, #10
 800600a:	4620      	mov	r0, r4
 800600c:	f000 f908 	bl	8006220 <__multadd>
 8006010:	4607      	mov	r7, r0
 8006012:	e7f0      	b.n	8005ff6 <_dtoa_r+0xb16>
 8006014:	9b04      	ldr	r3, [sp, #16]
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	9d00      	ldr	r5, [sp, #0]
 800601a:	4631      	mov	r1, r6
 800601c:	4650      	mov	r0, sl
 800601e:	f7ff f9d4 	bl	80053ca <quorem>
 8006022:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	f805 9b01 	strb.w	r9, [r5], #1
 800602c:	1aea      	subs	r2, r5, r3
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	4293      	cmp	r3, r2
 8006032:	dd07      	ble.n	8006044 <_dtoa_r+0xb64>
 8006034:	4651      	mov	r1, sl
 8006036:	2300      	movs	r3, #0
 8006038:	220a      	movs	r2, #10
 800603a:	4620      	mov	r0, r4
 800603c:	f000 f8f0 	bl	8006220 <__multadd>
 8006040:	4682      	mov	sl, r0
 8006042:	e7ea      	b.n	800601a <_dtoa_r+0xb3a>
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	bfc8      	it	gt
 800604a:	461d      	movgt	r5, r3
 800604c:	9b00      	ldr	r3, [sp, #0]
 800604e:	bfd8      	it	le
 8006050:	2501      	movle	r5, #1
 8006052:	441d      	add	r5, r3
 8006054:	f04f 0800 	mov.w	r8, #0
 8006058:	4651      	mov	r1, sl
 800605a:	2201      	movs	r2, #1
 800605c:	4620      	mov	r0, r4
 800605e:	f000 fa8d 	bl	800657c <__lshift>
 8006062:	4631      	mov	r1, r6
 8006064:	4682      	mov	sl, r0
 8006066:	f000 faf5 	bl	8006654 <__mcmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	dc96      	bgt.n	8005f9c <_dtoa_r+0xabc>
 800606e:	d102      	bne.n	8006076 <_dtoa_r+0xb96>
 8006070:	f019 0f01 	tst.w	r9, #1
 8006074:	d192      	bne.n	8005f9c <_dtoa_r+0xabc>
 8006076:	462b      	mov	r3, r5
 8006078:	461d      	mov	r5, r3
 800607a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800607e:	2a30      	cmp	r2, #48	; 0x30
 8006080:	d0fa      	beq.n	8006078 <_dtoa_r+0xb98>
 8006082:	e6dd      	b.n	8005e40 <_dtoa_r+0x960>
 8006084:	9a00      	ldr	r2, [sp, #0]
 8006086:	429a      	cmp	r2, r3
 8006088:	d189      	bne.n	8005f9e <_dtoa_r+0xabe>
 800608a:	f10b 0b01 	add.w	fp, fp, #1
 800608e:	2331      	movs	r3, #49	; 0x31
 8006090:	e796      	b.n	8005fc0 <_dtoa_r+0xae0>
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <_dtoa_r+0xbdc>)
 8006094:	f7ff ba99 	b.w	80055ca <_dtoa_r+0xea>
 8006098:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800609a:	2b00      	cmp	r3, #0
 800609c:	f47f aa6d 	bne.w	800557a <_dtoa_r+0x9a>
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <_dtoa_r+0xbe0>)
 80060a2:	f7ff ba92 	b.w	80055ca <_dtoa_r+0xea>
 80060a6:	9b01      	ldr	r3, [sp, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dcb5      	bgt.n	8006018 <_dtoa_r+0xb38>
 80060ac:	9b07      	ldr	r3, [sp, #28]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	f73f aeb1 	bgt.w	8005e16 <_dtoa_r+0x936>
 80060b4:	e7b0      	b.n	8006018 <_dtoa_r+0xb38>
 80060b6:	bf00      	nop
 80060b8:	0800b2cc 	.word	0x0800b2cc
 80060bc:	0800b22c 	.word	0x0800b22c
 80060c0:	0800b250 	.word	0x0800b250

080060c4 <_free_r>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	2900      	cmp	r1, #0
 80060c8:	d044      	beq.n	8006154 <_free_r+0x90>
 80060ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ce:	9001      	str	r0, [sp, #4]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f1a1 0404 	sub.w	r4, r1, #4
 80060d6:	bfb8      	it	lt
 80060d8:	18e4      	addlt	r4, r4, r3
 80060da:	f7fe fab3 	bl	8004644 <__malloc_lock>
 80060de:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <_free_r+0x94>)
 80060e0:	9801      	ldr	r0, [sp, #4]
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	b933      	cbnz	r3, 80060f4 <_free_r+0x30>
 80060e6:	6063      	str	r3, [r4, #4]
 80060e8:	6014      	str	r4, [r2, #0]
 80060ea:	b003      	add	sp, #12
 80060ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060f0:	f7fe baae 	b.w	8004650 <__malloc_unlock>
 80060f4:	42a3      	cmp	r3, r4
 80060f6:	d908      	bls.n	800610a <_free_r+0x46>
 80060f8:	6825      	ldr	r5, [r4, #0]
 80060fa:	1961      	adds	r1, r4, r5
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf01      	itttt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	1949      	addeq	r1, r1, r5
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	e7ed      	b.n	80060e6 <_free_r+0x22>
 800610a:	461a      	mov	r2, r3
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	b10b      	cbz	r3, 8006114 <_free_r+0x50>
 8006110:	42a3      	cmp	r3, r4
 8006112:	d9fa      	bls.n	800610a <_free_r+0x46>
 8006114:	6811      	ldr	r1, [r2, #0]
 8006116:	1855      	adds	r5, r2, r1
 8006118:	42a5      	cmp	r5, r4
 800611a:	d10b      	bne.n	8006134 <_free_r+0x70>
 800611c:	6824      	ldr	r4, [r4, #0]
 800611e:	4421      	add	r1, r4
 8006120:	1854      	adds	r4, r2, r1
 8006122:	42a3      	cmp	r3, r4
 8006124:	6011      	str	r1, [r2, #0]
 8006126:	d1e0      	bne.n	80060ea <_free_r+0x26>
 8006128:	681c      	ldr	r4, [r3, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	6053      	str	r3, [r2, #4]
 800612e:	440c      	add	r4, r1
 8006130:	6014      	str	r4, [r2, #0]
 8006132:	e7da      	b.n	80060ea <_free_r+0x26>
 8006134:	d902      	bls.n	800613c <_free_r+0x78>
 8006136:	230c      	movs	r3, #12
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	e7d6      	b.n	80060ea <_free_r+0x26>
 800613c:	6825      	ldr	r5, [r4, #0]
 800613e:	1961      	adds	r1, r4, r5
 8006140:	428b      	cmp	r3, r1
 8006142:	bf04      	itt	eq
 8006144:	6819      	ldreq	r1, [r3, #0]
 8006146:	685b      	ldreq	r3, [r3, #4]
 8006148:	6063      	str	r3, [r4, #4]
 800614a:	bf04      	itt	eq
 800614c:	1949      	addeq	r1, r1, r5
 800614e:	6021      	streq	r1, [r4, #0]
 8006150:	6054      	str	r4, [r2, #4]
 8006152:	e7ca      	b.n	80060ea <_free_r+0x26>
 8006154:	b003      	add	sp, #12
 8006156:	bd30      	pop	{r4, r5, pc}
 8006158:	2000a3f0 	.word	0x2000a3f0

0800615c <_Balloc>:
 800615c:	b570      	push	{r4, r5, r6, lr}
 800615e:	69c6      	ldr	r6, [r0, #28]
 8006160:	4604      	mov	r4, r0
 8006162:	460d      	mov	r5, r1
 8006164:	b976      	cbnz	r6, 8006184 <_Balloc+0x28>
 8006166:	2010      	movs	r0, #16
 8006168:	f7fe f9c4 	bl	80044f4 <malloc>
 800616c:	4602      	mov	r2, r0
 800616e:	61e0      	str	r0, [r4, #28]
 8006170:	b920      	cbnz	r0, 800617c <_Balloc+0x20>
 8006172:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <_Balloc+0x78>)
 8006174:	4818      	ldr	r0, [pc, #96]	; (80061d8 <_Balloc+0x7c>)
 8006176:	216b      	movs	r1, #107	; 0x6b
 8006178:	f000 fbf0 	bl	800695c <__assert_func>
 800617c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006180:	6006      	str	r6, [r0, #0]
 8006182:	60c6      	str	r6, [r0, #12]
 8006184:	69e6      	ldr	r6, [r4, #28]
 8006186:	68f3      	ldr	r3, [r6, #12]
 8006188:	b183      	cbz	r3, 80061ac <_Balloc+0x50>
 800618a:	69e3      	ldr	r3, [r4, #28]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006192:	b9b8      	cbnz	r0, 80061c4 <_Balloc+0x68>
 8006194:	2101      	movs	r1, #1
 8006196:	fa01 f605 	lsl.w	r6, r1, r5
 800619a:	1d72      	adds	r2, r6, #5
 800619c:	0092      	lsls	r2, r2, #2
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 fbfa 	bl	8006998 <_calloc_r>
 80061a4:	b160      	cbz	r0, 80061c0 <_Balloc+0x64>
 80061a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061aa:	e00e      	b.n	80061ca <_Balloc+0x6e>
 80061ac:	2221      	movs	r2, #33	; 0x21
 80061ae:	2104      	movs	r1, #4
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fbf1 	bl	8006998 <_calloc_r>
 80061b6:	69e3      	ldr	r3, [r4, #28]
 80061b8:	60f0      	str	r0, [r6, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1e4      	bne.n	800618a <_Balloc+0x2e>
 80061c0:	2000      	movs	r0, #0
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	6802      	ldr	r2, [r0, #0]
 80061c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80061ca:	2300      	movs	r3, #0
 80061cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80061d0:	e7f7      	b.n	80061c2 <_Balloc+0x66>
 80061d2:	bf00      	nop
 80061d4:	0800b25d 	.word	0x0800b25d
 80061d8:	0800b2dd 	.word	0x0800b2dd

080061dc <_Bfree>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	69c6      	ldr	r6, [r0, #28]
 80061e0:	4605      	mov	r5, r0
 80061e2:	460c      	mov	r4, r1
 80061e4:	b976      	cbnz	r6, 8006204 <_Bfree+0x28>
 80061e6:	2010      	movs	r0, #16
 80061e8:	f7fe f984 	bl	80044f4 <malloc>
 80061ec:	4602      	mov	r2, r0
 80061ee:	61e8      	str	r0, [r5, #28]
 80061f0:	b920      	cbnz	r0, 80061fc <_Bfree+0x20>
 80061f2:	4b09      	ldr	r3, [pc, #36]	; (8006218 <_Bfree+0x3c>)
 80061f4:	4809      	ldr	r0, [pc, #36]	; (800621c <_Bfree+0x40>)
 80061f6:	218f      	movs	r1, #143	; 0x8f
 80061f8:	f000 fbb0 	bl	800695c <__assert_func>
 80061fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006200:	6006      	str	r6, [r0, #0]
 8006202:	60c6      	str	r6, [r0, #12]
 8006204:	b13c      	cbz	r4, 8006216 <_Bfree+0x3a>
 8006206:	69eb      	ldr	r3, [r5, #28]
 8006208:	6862      	ldr	r2, [r4, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006210:	6021      	str	r1, [r4, #0]
 8006212:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	0800b25d 	.word	0x0800b25d
 800621c:	0800b2dd 	.word	0x0800b2dd

08006220 <__multadd>:
 8006220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006224:	690d      	ldr	r5, [r1, #16]
 8006226:	4607      	mov	r7, r0
 8006228:	460c      	mov	r4, r1
 800622a:	461e      	mov	r6, r3
 800622c:	f101 0c14 	add.w	ip, r1, #20
 8006230:	2000      	movs	r0, #0
 8006232:	f8dc 3000 	ldr.w	r3, [ip]
 8006236:	b299      	uxth	r1, r3
 8006238:	fb02 6101 	mla	r1, r2, r1, r6
 800623c:	0c1e      	lsrs	r6, r3, #16
 800623e:	0c0b      	lsrs	r3, r1, #16
 8006240:	fb02 3306 	mla	r3, r2, r6, r3
 8006244:	b289      	uxth	r1, r1
 8006246:	3001      	adds	r0, #1
 8006248:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800624c:	4285      	cmp	r5, r0
 800624e:	f84c 1b04 	str.w	r1, [ip], #4
 8006252:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006256:	dcec      	bgt.n	8006232 <__multadd+0x12>
 8006258:	b30e      	cbz	r6, 800629e <__multadd+0x7e>
 800625a:	68a3      	ldr	r3, [r4, #8]
 800625c:	42ab      	cmp	r3, r5
 800625e:	dc19      	bgt.n	8006294 <__multadd+0x74>
 8006260:	6861      	ldr	r1, [r4, #4]
 8006262:	4638      	mov	r0, r7
 8006264:	3101      	adds	r1, #1
 8006266:	f7ff ff79 	bl	800615c <_Balloc>
 800626a:	4680      	mov	r8, r0
 800626c:	b928      	cbnz	r0, 800627a <__multadd+0x5a>
 800626e:	4602      	mov	r2, r0
 8006270:	4b0c      	ldr	r3, [pc, #48]	; (80062a4 <__multadd+0x84>)
 8006272:	480d      	ldr	r0, [pc, #52]	; (80062a8 <__multadd+0x88>)
 8006274:	21ba      	movs	r1, #186	; 0xba
 8006276:	f000 fb71 	bl	800695c <__assert_func>
 800627a:	6922      	ldr	r2, [r4, #16]
 800627c:	3202      	adds	r2, #2
 800627e:	f104 010c 	add.w	r1, r4, #12
 8006282:	0092      	lsls	r2, r2, #2
 8006284:	300c      	adds	r0, #12
 8006286:	f7ff f892 	bl	80053ae <memcpy>
 800628a:	4621      	mov	r1, r4
 800628c:	4638      	mov	r0, r7
 800628e:	f7ff ffa5 	bl	80061dc <_Bfree>
 8006292:	4644      	mov	r4, r8
 8006294:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006298:	3501      	adds	r5, #1
 800629a:	615e      	str	r6, [r3, #20]
 800629c:	6125      	str	r5, [r4, #16]
 800629e:	4620      	mov	r0, r4
 80062a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062a4:	0800b2cc 	.word	0x0800b2cc
 80062a8:	0800b2dd 	.word	0x0800b2dd

080062ac <__hi0bits>:
 80062ac:	0c03      	lsrs	r3, r0, #16
 80062ae:	041b      	lsls	r3, r3, #16
 80062b0:	b9d3      	cbnz	r3, 80062e8 <__hi0bits+0x3c>
 80062b2:	0400      	lsls	r0, r0, #16
 80062b4:	2310      	movs	r3, #16
 80062b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80062ba:	bf04      	itt	eq
 80062bc:	0200      	lsleq	r0, r0, #8
 80062be:	3308      	addeq	r3, #8
 80062c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80062c4:	bf04      	itt	eq
 80062c6:	0100      	lsleq	r0, r0, #4
 80062c8:	3304      	addeq	r3, #4
 80062ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80062ce:	bf04      	itt	eq
 80062d0:	0080      	lsleq	r0, r0, #2
 80062d2:	3302      	addeq	r3, #2
 80062d4:	2800      	cmp	r0, #0
 80062d6:	db05      	blt.n	80062e4 <__hi0bits+0x38>
 80062d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062dc:	f103 0301 	add.w	r3, r3, #1
 80062e0:	bf08      	it	eq
 80062e2:	2320      	moveq	r3, #32
 80062e4:	4618      	mov	r0, r3
 80062e6:	4770      	bx	lr
 80062e8:	2300      	movs	r3, #0
 80062ea:	e7e4      	b.n	80062b6 <__hi0bits+0xa>

080062ec <__lo0bits>:
 80062ec:	6803      	ldr	r3, [r0, #0]
 80062ee:	f013 0207 	ands.w	r2, r3, #7
 80062f2:	d00c      	beq.n	800630e <__lo0bits+0x22>
 80062f4:	07d9      	lsls	r1, r3, #31
 80062f6:	d422      	bmi.n	800633e <__lo0bits+0x52>
 80062f8:	079a      	lsls	r2, r3, #30
 80062fa:	bf49      	itett	mi
 80062fc:	085b      	lsrmi	r3, r3, #1
 80062fe:	089b      	lsrpl	r3, r3, #2
 8006300:	6003      	strmi	r3, [r0, #0]
 8006302:	2201      	movmi	r2, #1
 8006304:	bf5c      	itt	pl
 8006306:	6003      	strpl	r3, [r0, #0]
 8006308:	2202      	movpl	r2, #2
 800630a:	4610      	mov	r0, r2
 800630c:	4770      	bx	lr
 800630e:	b299      	uxth	r1, r3
 8006310:	b909      	cbnz	r1, 8006316 <__lo0bits+0x2a>
 8006312:	0c1b      	lsrs	r3, r3, #16
 8006314:	2210      	movs	r2, #16
 8006316:	b2d9      	uxtb	r1, r3
 8006318:	b909      	cbnz	r1, 800631e <__lo0bits+0x32>
 800631a:	3208      	adds	r2, #8
 800631c:	0a1b      	lsrs	r3, r3, #8
 800631e:	0719      	lsls	r1, r3, #28
 8006320:	bf04      	itt	eq
 8006322:	091b      	lsreq	r3, r3, #4
 8006324:	3204      	addeq	r2, #4
 8006326:	0799      	lsls	r1, r3, #30
 8006328:	bf04      	itt	eq
 800632a:	089b      	lsreq	r3, r3, #2
 800632c:	3202      	addeq	r2, #2
 800632e:	07d9      	lsls	r1, r3, #31
 8006330:	d403      	bmi.n	800633a <__lo0bits+0x4e>
 8006332:	085b      	lsrs	r3, r3, #1
 8006334:	f102 0201 	add.w	r2, r2, #1
 8006338:	d003      	beq.n	8006342 <__lo0bits+0x56>
 800633a:	6003      	str	r3, [r0, #0]
 800633c:	e7e5      	b.n	800630a <__lo0bits+0x1e>
 800633e:	2200      	movs	r2, #0
 8006340:	e7e3      	b.n	800630a <__lo0bits+0x1e>
 8006342:	2220      	movs	r2, #32
 8006344:	e7e1      	b.n	800630a <__lo0bits+0x1e>
	...

08006348 <__i2b>:
 8006348:	b510      	push	{r4, lr}
 800634a:	460c      	mov	r4, r1
 800634c:	2101      	movs	r1, #1
 800634e:	f7ff ff05 	bl	800615c <_Balloc>
 8006352:	4602      	mov	r2, r0
 8006354:	b928      	cbnz	r0, 8006362 <__i2b+0x1a>
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <__i2b+0x24>)
 8006358:	4805      	ldr	r0, [pc, #20]	; (8006370 <__i2b+0x28>)
 800635a:	f240 1145 	movw	r1, #325	; 0x145
 800635e:	f000 fafd 	bl	800695c <__assert_func>
 8006362:	2301      	movs	r3, #1
 8006364:	6144      	str	r4, [r0, #20]
 8006366:	6103      	str	r3, [r0, #16]
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	0800b2cc 	.word	0x0800b2cc
 8006370:	0800b2dd 	.word	0x0800b2dd

08006374 <__multiply>:
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	4691      	mov	r9, r2
 800637a:	690a      	ldr	r2, [r1, #16]
 800637c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006380:	429a      	cmp	r2, r3
 8006382:	bfb8      	it	lt
 8006384:	460b      	movlt	r3, r1
 8006386:	460c      	mov	r4, r1
 8006388:	bfbc      	itt	lt
 800638a:	464c      	movlt	r4, r9
 800638c:	4699      	movlt	r9, r3
 800638e:	6927      	ldr	r7, [r4, #16]
 8006390:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006394:	68a3      	ldr	r3, [r4, #8]
 8006396:	6861      	ldr	r1, [r4, #4]
 8006398:	eb07 060a 	add.w	r6, r7, sl
 800639c:	42b3      	cmp	r3, r6
 800639e:	b085      	sub	sp, #20
 80063a0:	bfb8      	it	lt
 80063a2:	3101      	addlt	r1, #1
 80063a4:	f7ff feda 	bl	800615c <_Balloc>
 80063a8:	b930      	cbnz	r0, 80063b8 <__multiply+0x44>
 80063aa:	4602      	mov	r2, r0
 80063ac:	4b44      	ldr	r3, [pc, #272]	; (80064c0 <__multiply+0x14c>)
 80063ae:	4845      	ldr	r0, [pc, #276]	; (80064c4 <__multiply+0x150>)
 80063b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80063b4:	f000 fad2 	bl	800695c <__assert_func>
 80063b8:	f100 0514 	add.w	r5, r0, #20
 80063bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063c0:	462b      	mov	r3, r5
 80063c2:	2200      	movs	r2, #0
 80063c4:	4543      	cmp	r3, r8
 80063c6:	d321      	bcc.n	800640c <__multiply+0x98>
 80063c8:	f104 0314 	add.w	r3, r4, #20
 80063cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80063d0:	f109 0314 	add.w	r3, r9, #20
 80063d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80063d8:	9202      	str	r2, [sp, #8]
 80063da:	1b3a      	subs	r2, r7, r4
 80063dc:	3a15      	subs	r2, #21
 80063de:	f022 0203 	bic.w	r2, r2, #3
 80063e2:	3204      	adds	r2, #4
 80063e4:	f104 0115 	add.w	r1, r4, #21
 80063e8:	428f      	cmp	r7, r1
 80063ea:	bf38      	it	cc
 80063ec:	2204      	movcc	r2, #4
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9a02      	ldr	r2, [sp, #8]
 80063f2:	9303      	str	r3, [sp, #12]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d80c      	bhi.n	8006412 <__multiply+0x9e>
 80063f8:	2e00      	cmp	r6, #0
 80063fa:	dd03      	ble.n	8006404 <__multiply+0x90>
 80063fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006400:	2b00      	cmp	r3, #0
 8006402:	d05b      	beq.n	80064bc <__multiply+0x148>
 8006404:	6106      	str	r6, [r0, #16]
 8006406:	b005      	add	sp, #20
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	f843 2b04 	str.w	r2, [r3], #4
 8006410:	e7d8      	b.n	80063c4 <__multiply+0x50>
 8006412:	f8b3 a000 	ldrh.w	sl, [r3]
 8006416:	f1ba 0f00 	cmp.w	sl, #0
 800641a:	d024      	beq.n	8006466 <__multiply+0xf2>
 800641c:	f104 0e14 	add.w	lr, r4, #20
 8006420:	46a9      	mov	r9, r5
 8006422:	f04f 0c00 	mov.w	ip, #0
 8006426:	f85e 2b04 	ldr.w	r2, [lr], #4
 800642a:	f8d9 1000 	ldr.w	r1, [r9]
 800642e:	fa1f fb82 	uxth.w	fp, r2
 8006432:	b289      	uxth	r1, r1
 8006434:	fb0a 110b 	mla	r1, sl, fp, r1
 8006438:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800643c:	f8d9 2000 	ldr.w	r2, [r9]
 8006440:	4461      	add	r1, ip
 8006442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006446:	fb0a c20b 	mla	r2, sl, fp, ip
 800644a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800644e:	b289      	uxth	r1, r1
 8006450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006454:	4577      	cmp	r7, lr
 8006456:	f849 1b04 	str.w	r1, [r9], #4
 800645a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800645e:	d8e2      	bhi.n	8006426 <__multiply+0xb2>
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	f845 c002 	str.w	ip, [r5, r2]
 8006466:	9a03      	ldr	r2, [sp, #12]
 8006468:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800646c:	3304      	adds	r3, #4
 800646e:	f1b9 0f00 	cmp.w	r9, #0
 8006472:	d021      	beq.n	80064b8 <__multiply+0x144>
 8006474:	6829      	ldr	r1, [r5, #0]
 8006476:	f104 0c14 	add.w	ip, r4, #20
 800647a:	46ae      	mov	lr, r5
 800647c:	f04f 0a00 	mov.w	sl, #0
 8006480:	f8bc b000 	ldrh.w	fp, [ip]
 8006484:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006488:	fb09 220b 	mla	r2, r9, fp, r2
 800648c:	4452      	add	r2, sl
 800648e:	b289      	uxth	r1, r1
 8006490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006494:	f84e 1b04 	str.w	r1, [lr], #4
 8006498:	f85c 1b04 	ldr.w	r1, [ip], #4
 800649c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064a0:	f8be 1000 	ldrh.w	r1, [lr]
 80064a4:	fb09 110a 	mla	r1, r9, sl, r1
 80064a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80064ac:	4567      	cmp	r7, ip
 80064ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80064b2:	d8e5      	bhi.n	8006480 <__multiply+0x10c>
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	50a9      	str	r1, [r5, r2]
 80064b8:	3504      	adds	r5, #4
 80064ba:	e799      	b.n	80063f0 <__multiply+0x7c>
 80064bc:	3e01      	subs	r6, #1
 80064be:	e79b      	b.n	80063f8 <__multiply+0x84>
 80064c0:	0800b2cc 	.word	0x0800b2cc
 80064c4:	0800b2dd 	.word	0x0800b2dd

080064c8 <__pow5mult>:
 80064c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064cc:	4615      	mov	r5, r2
 80064ce:	f012 0203 	ands.w	r2, r2, #3
 80064d2:	4606      	mov	r6, r0
 80064d4:	460f      	mov	r7, r1
 80064d6:	d007      	beq.n	80064e8 <__pow5mult+0x20>
 80064d8:	4c25      	ldr	r4, [pc, #148]	; (8006570 <__pow5mult+0xa8>)
 80064da:	3a01      	subs	r2, #1
 80064dc:	2300      	movs	r3, #0
 80064de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064e2:	f7ff fe9d 	bl	8006220 <__multadd>
 80064e6:	4607      	mov	r7, r0
 80064e8:	10ad      	asrs	r5, r5, #2
 80064ea:	d03d      	beq.n	8006568 <__pow5mult+0xa0>
 80064ec:	69f4      	ldr	r4, [r6, #28]
 80064ee:	b97c      	cbnz	r4, 8006510 <__pow5mult+0x48>
 80064f0:	2010      	movs	r0, #16
 80064f2:	f7fd ffff 	bl	80044f4 <malloc>
 80064f6:	4602      	mov	r2, r0
 80064f8:	61f0      	str	r0, [r6, #28]
 80064fa:	b928      	cbnz	r0, 8006508 <__pow5mult+0x40>
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <__pow5mult+0xac>)
 80064fe:	481e      	ldr	r0, [pc, #120]	; (8006578 <__pow5mult+0xb0>)
 8006500:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006504:	f000 fa2a 	bl	800695c <__assert_func>
 8006508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800650c:	6004      	str	r4, [r0, #0]
 800650e:	60c4      	str	r4, [r0, #12]
 8006510:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006518:	b94c      	cbnz	r4, 800652e <__pow5mult+0x66>
 800651a:	f240 2171 	movw	r1, #625	; 0x271
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ff12 	bl	8006348 <__i2b>
 8006524:	2300      	movs	r3, #0
 8006526:	f8c8 0008 	str.w	r0, [r8, #8]
 800652a:	4604      	mov	r4, r0
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	f04f 0900 	mov.w	r9, #0
 8006532:	07eb      	lsls	r3, r5, #31
 8006534:	d50a      	bpl.n	800654c <__pow5mult+0x84>
 8006536:	4639      	mov	r1, r7
 8006538:	4622      	mov	r2, r4
 800653a:	4630      	mov	r0, r6
 800653c:	f7ff ff1a 	bl	8006374 <__multiply>
 8006540:	4639      	mov	r1, r7
 8006542:	4680      	mov	r8, r0
 8006544:	4630      	mov	r0, r6
 8006546:	f7ff fe49 	bl	80061dc <_Bfree>
 800654a:	4647      	mov	r7, r8
 800654c:	106d      	asrs	r5, r5, #1
 800654e:	d00b      	beq.n	8006568 <__pow5mult+0xa0>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	b938      	cbnz	r0, 8006564 <__pow5mult+0x9c>
 8006554:	4622      	mov	r2, r4
 8006556:	4621      	mov	r1, r4
 8006558:	4630      	mov	r0, r6
 800655a:	f7ff ff0b 	bl	8006374 <__multiply>
 800655e:	6020      	str	r0, [r4, #0]
 8006560:	f8c0 9000 	str.w	r9, [r0]
 8006564:	4604      	mov	r4, r0
 8006566:	e7e4      	b.n	8006532 <__pow5mult+0x6a>
 8006568:	4638      	mov	r0, r7
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	bf00      	nop
 8006570:	0800b428 	.word	0x0800b428
 8006574:	0800b25d 	.word	0x0800b25d
 8006578:	0800b2dd 	.word	0x0800b2dd

0800657c <__lshift>:
 800657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	460c      	mov	r4, r1
 8006582:	6849      	ldr	r1, [r1, #4]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800658a:	68a3      	ldr	r3, [r4, #8]
 800658c:	4607      	mov	r7, r0
 800658e:	4691      	mov	r9, r2
 8006590:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006594:	f108 0601 	add.w	r6, r8, #1
 8006598:	42b3      	cmp	r3, r6
 800659a:	db0b      	blt.n	80065b4 <__lshift+0x38>
 800659c:	4638      	mov	r0, r7
 800659e:	f7ff fddd 	bl	800615c <_Balloc>
 80065a2:	4605      	mov	r5, r0
 80065a4:	b948      	cbnz	r0, 80065ba <__lshift+0x3e>
 80065a6:	4602      	mov	r2, r0
 80065a8:	4b28      	ldr	r3, [pc, #160]	; (800664c <__lshift+0xd0>)
 80065aa:	4829      	ldr	r0, [pc, #164]	; (8006650 <__lshift+0xd4>)
 80065ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80065b0:	f000 f9d4 	bl	800695c <__assert_func>
 80065b4:	3101      	adds	r1, #1
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	e7ee      	b.n	8006598 <__lshift+0x1c>
 80065ba:	2300      	movs	r3, #0
 80065bc:	f100 0114 	add.w	r1, r0, #20
 80065c0:	f100 0210 	add.w	r2, r0, #16
 80065c4:	4618      	mov	r0, r3
 80065c6:	4553      	cmp	r3, sl
 80065c8:	db33      	blt.n	8006632 <__lshift+0xb6>
 80065ca:	6920      	ldr	r0, [r4, #16]
 80065cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065d0:	f104 0314 	add.w	r3, r4, #20
 80065d4:	f019 091f 	ands.w	r9, r9, #31
 80065d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80065e0:	d02b      	beq.n	800663a <__lshift+0xbe>
 80065e2:	f1c9 0e20 	rsb	lr, r9, #32
 80065e6:	468a      	mov	sl, r1
 80065e8:	2200      	movs	r2, #0
 80065ea:	6818      	ldr	r0, [r3, #0]
 80065ec:	fa00 f009 	lsl.w	r0, r0, r9
 80065f0:	4310      	orrs	r0, r2
 80065f2:	f84a 0b04 	str.w	r0, [sl], #4
 80065f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fa:	459c      	cmp	ip, r3
 80065fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8006600:	d8f3      	bhi.n	80065ea <__lshift+0x6e>
 8006602:	ebac 0304 	sub.w	r3, ip, r4
 8006606:	3b15      	subs	r3, #21
 8006608:	f023 0303 	bic.w	r3, r3, #3
 800660c:	3304      	adds	r3, #4
 800660e:	f104 0015 	add.w	r0, r4, #21
 8006612:	4584      	cmp	ip, r0
 8006614:	bf38      	it	cc
 8006616:	2304      	movcc	r3, #4
 8006618:	50ca      	str	r2, [r1, r3]
 800661a:	b10a      	cbz	r2, 8006620 <__lshift+0xa4>
 800661c:	f108 0602 	add.w	r6, r8, #2
 8006620:	3e01      	subs	r6, #1
 8006622:	4638      	mov	r0, r7
 8006624:	612e      	str	r6, [r5, #16]
 8006626:	4621      	mov	r1, r4
 8006628:	f7ff fdd8 	bl	80061dc <_Bfree>
 800662c:	4628      	mov	r0, r5
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	f842 0f04 	str.w	r0, [r2, #4]!
 8006636:	3301      	adds	r3, #1
 8006638:	e7c5      	b.n	80065c6 <__lshift+0x4a>
 800663a:	3904      	subs	r1, #4
 800663c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006640:	f841 2f04 	str.w	r2, [r1, #4]!
 8006644:	459c      	cmp	ip, r3
 8006646:	d8f9      	bhi.n	800663c <__lshift+0xc0>
 8006648:	e7ea      	b.n	8006620 <__lshift+0xa4>
 800664a:	bf00      	nop
 800664c:	0800b2cc 	.word	0x0800b2cc
 8006650:	0800b2dd 	.word	0x0800b2dd

08006654 <__mcmp>:
 8006654:	b530      	push	{r4, r5, lr}
 8006656:	6902      	ldr	r2, [r0, #16]
 8006658:	690c      	ldr	r4, [r1, #16]
 800665a:	1b12      	subs	r2, r2, r4
 800665c:	d10e      	bne.n	800667c <__mcmp+0x28>
 800665e:	f100 0314 	add.w	r3, r0, #20
 8006662:	3114      	adds	r1, #20
 8006664:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006668:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800666c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006670:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006674:	42a5      	cmp	r5, r4
 8006676:	d003      	beq.n	8006680 <__mcmp+0x2c>
 8006678:	d305      	bcc.n	8006686 <__mcmp+0x32>
 800667a:	2201      	movs	r2, #1
 800667c:	4610      	mov	r0, r2
 800667e:	bd30      	pop	{r4, r5, pc}
 8006680:	4283      	cmp	r3, r0
 8006682:	d3f3      	bcc.n	800666c <__mcmp+0x18>
 8006684:	e7fa      	b.n	800667c <__mcmp+0x28>
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	e7f7      	b.n	800667c <__mcmp+0x28>

0800668c <__mdiff>:
 800668c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	4606      	mov	r6, r0
 8006694:	4611      	mov	r1, r2
 8006696:	4620      	mov	r0, r4
 8006698:	4690      	mov	r8, r2
 800669a:	f7ff ffdb 	bl	8006654 <__mcmp>
 800669e:	1e05      	subs	r5, r0, #0
 80066a0:	d110      	bne.n	80066c4 <__mdiff+0x38>
 80066a2:	4629      	mov	r1, r5
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7ff fd59 	bl	800615c <_Balloc>
 80066aa:	b930      	cbnz	r0, 80066ba <__mdiff+0x2e>
 80066ac:	4b3a      	ldr	r3, [pc, #232]	; (8006798 <__mdiff+0x10c>)
 80066ae:	4602      	mov	r2, r0
 80066b0:	f240 2137 	movw	r1, #567	; 0x237
 80066b4:	4839      	ldr	r0, [pc, #228]	; (800679c <__mdiff+0x110>)
 80066b6:	f000 f951 	bl	800695c <__assert_func>
 80066ba:	2301      	movs	r3, #1
 80066bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80066c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	bfa4      	itt	ge
 80066c6:	4643      	movge	r3, r8
 80066c8:	46a0      	movge	r8, r4
 80066ca:	4630      	mov	r0, r6
 80066cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066d0:	bfa6      	itte	ge
 80066d2:	461c      	movge	r4, r3
 80066d4:	2500      	movge	r5, #0
 80066d6:	2501      	movlt	r5, #1
 80066d8:	f7ff fd40 	bl	800615c <_Balloc>
 80066dc:	b920      	cbnz	r0, 80066e8 <__mdiff+0x5c>
 80066de:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <__mdiff+0x10c>)
 80066e0:	4602      	mov	r2, r0
 80066e2:	f240 2145 	movw	r1, #581	; 0x245
 80066e6:	e7e5      	b.n	80066b4 <__mdiff+0x28>
 80066e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066ec:	6926      	ldr	r6, [r4, #16]
 80066ee:	60c5      	str	r5, [r0, #12]
 80066f0:	f104 0914 	add.w	r9, r4, #20
 80066f4:	f108 0514 	add.w	r5, r8, #20
 80066f8:	f100 0e14 	add.w	lr, r0, #20
 80066fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006700:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006704:	f108 0210 	add.w	r2, r8, #16
 8006708:	46f2      	mov	sl, lr
 800670a:	2100      	movs	r1, #0
 800670c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006710:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006714:	fa11 f88b 	uxtah	r8, r1, fp
 8006718:	b299      	uxth	r1, r3
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	eba8 0801 	sub.w	r8, r8, r1
 8006720:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006724:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006728:	fa1f f888 	uxth.w	r8, r8
 800672c:	1419      	asrs	r1, r3, #16
 800672e:	454e      	cmp	r6, r9
 8006730:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006734:	f84a 3b04 	str.w	r3, [sl], #4
 8006738:	d8e8      	bhi.n	800670c <__mdiff+0x80>
 800673a:	1b33      	subs	r3, r6, r4
 800673c:	3b15      	subs	r3, #21
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	3304      	adds	r3, #4
 8006744:	3415      	adds	r4, #21
 8006746:	42a6      	cmp	r6, r4
 8006748:	bf38      	it	cc
 800674a:	2304      	movcc	r3, #4
 800674c:	441d      	add	r5, r3
 800674e:	4473      	add	r3, lr
 8006750:	469e      	mov	lr, r3
 8006752:	462e      	mov	r6, r5
 8006754:	4566      	cmp	r6, ip
 8006756:	d30e      	bcc.n	8006776 <__mdiff+0xea>
 8006758:	f10c 0203 	add.w	r2, ip, #3
 800675c:	1b52      	subs	r2, r2, r5
 800675e:	f022 0203 	bic.w	r2, r2, #3
 8006762:	3d03      	subs	r5, #3
 8006764:	45ac      	cmp	ip, r5
 8006766:	bf38      	it	cc
 8006768:	2200      	movcc	r2, #0
 800676a:	4413      	add	r3, r2
 800676c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006770:	b17a      	cbz	r2, 8006792 <__mdiff+0x106>
 8006772:	6107      	str	r7, [r0, #16]
 8006774:	e7a4      	b.n	80066c0 <__mdiff+0x34>
 8006776:	f856 8b04 	ldr.w	r8, [r6], #4
 800677a:	fa11 f288 	uxtah	r2, r1, r8
 800677e:	1414      	asrs	r4, r2, #16
 8006780:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006784:	b292      	uxth	r2, r2
 8006786:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800678a:	f84e 2b04 	str.w	r2, [lr], #4
 800678e:	1421      	asrs	r1, r4, #16
 8006790:	e7e0      	b.n	8006754 <__mdiff+0xc8>
 8006792:	3f01      	subs	r7, #1
 8006794:	e7ea      	b.n	800676c <__mdiff+0xe0>
 8006796:	bf00      	nop
 8006798:	0800b2cc 	.word	0x0800b2cc
 800679c:	0800b2dd 	.word	0x0800b2dd

080067a0 <__d2b>:
 80067a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80067a4:	460f      	mov	r7, r1
 80067a6:	2101      	movs	r1, #1
 80067a8:	ec59 8b10 	vmov	r8, r9, d0
 80067ac:	4616      	mov	r6, r2
 80067ae:	f7ff fcd5 	bl	800615c <_Balloc>
 80067b2:	4604      	mov	r4, r0
 80067b4:	b930      	cbnz	r0, 80067c4 <__d2b+0x24>
 80067b6:	4602      	mov	r2, r0
 80067b8:	4b24      	ldr	r3, [pc, #144]	; (800684c <__d2b+0xac>)
 80067ba:	4825      	ldr	r0, [pc, #148]	; (8006850 <__d2b+0xb0>)
 80067bc:	f240 310f 	movw	r1, #783	; 0x30f
 80067c0:	f000 f8cc 	bl	800695c <__assert_func>
 80067c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80067c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80067cc:	bb2d      	cbnz	r5, 800681a <__d2b+0x7a>
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	f1b8 0300 	subs.w	r3, r8, #0
 80067d4:	d026      	beq.n	8006824 <__d2b+0x84>
 80067d6:	4668      	mov	r0, sp
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	f7ff fd87 	bl	80062ec <__lo0bits>
 80067de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067e2:	b1e8      	cbz	r0, 8006820 <__d2b+0x80>
 80067e4:	f1c0 0320 	rsb	r3, r0, #32
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	430b      	orrs	r3, r1
 80067ee:	40c2      	lsrs	r2, r0
 80067f0:	6163      	str	r3, [r4, #20]
 80067f2:	9201      	str	r2, [sp, #4]
 80067f4:	9b01      	ldr	r3, [sp, #4]
 80067f6:	61a3      	str	r3, [r4, #24]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	bf14      	ite	ne
 80067fc:	2202      	movne	r2, #2
 80067fe:	2201      	moveq	r2, #1
 8006800:	6122      	str	r2, [r4, #16]
 8006802:	b1bd      	cbz	r5, 8006834 <__d2b+0x94>
 8006804:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006808:	4405      	add	r5, r0
 800680a:	603d      	str	r5, [r7, #0]
 800680c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006810:	6030      	str	r0, [r6, #0]
 8006812:	4620      	mov	r0, r4
 8006814:	b003      	add	sp, #12
 8006816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800681a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681e:	e7d6      	b.n	80067ce <__d2b+0x2e>
 8006820:	6161      	str	r1, [r4, #20]
 8006822:	e7e7      	b.n	80067f4 <__d2b+0x54>
 8006824:	a801      	add	r0, sp, #4
 8006826:	f7ff fd61 	bl	80062ec <__lo0bits>
 800682a:	9b01      	ldr	r3, [sp, #4]
 800682c:	6163      	str	r3, [r4, #20]
 800682e:	3020      	adds	r0, #32
 8006830:	2201      	movs	r2, #1
 8006832:	e7e5      	b.n	8006800 <__d2b+0x60>
 8006834:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006838:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800683c:	6038      	str	r0, [r7, #0]
 800683e:	6918      	ldr	r0, [r3, #16]
 8006840:	f7ff fd34 	bl	80062ac <__hi0bits>
 8006844:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006848:	e7e2      	b.n	8006810 <__d2b+0x70>
 800684a:	bf00      	nop
 800684c:	0800b2cc 	.word	0x0800b2cc
 8006850:	0800b2dd 	.word	0x0800b2dd

08006854 <__swhatbuf_r>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	460c      	mov	r4, r1
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	2900      	cmp	r1, #0
 800685e:	b096      	sub	sp, #88	; 0x58
 8006860:	4615      	mov	r5, r2
 8006862:	461e      	mov	r6, r3
 8006864:	da0d      	bge.n	8006882 <__swhatbuf_r+0x2e>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f013 0f80 	tst.w	r3, #128	; 0x80
 800686c:	f04f 0100 	mov.w	r1, #0
 8006870:	bf0c      	ite	eq
 8006872:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006876:	2340      	movne	r3, #64	; 0x40
 8006878:	2000      	movs	r0, #0
 800687a:	6031      	str	r1, [r6, #0]
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	b016      	add	sp, #88	; 0x58
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	466a      	mov	r2, sp
 8006884:	f000 f848 	bl	8006918 <_fstat_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	dbec      	blt.n	8006866 <__swhatbuf_r+0x12>
 800688c:	9901      	ldr	r1, [sp, #4]
 800688e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006892:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006896:	4259      	negs	r1, r3
 8006898:	4159      	adcs	r1, r3
 800689a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800689e:	e7eb      	b.n	8006878 <__swhatbuf_r+0x24>

080068a0 <__smakebuf_r>:
 80068a0:	898b      	ldrh	r3, [r1, #12]
 80068a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068a4:	079d      	lsls	r5, r3, #30
 80068a6:	4606      	mov	r6, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	d507      	bpl.n	80068bc <__smakebuf_r+0x1c>
 80068ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	2301      	movs	r3, #1
 80068b6:	6163      	str	r3, [r4, #20]
 80068b8:	b002      	add	sp, #8
 80068ba:	bd70      	pop	{r4, r5, r6, pc}
 80068bc:	ab01      	add	r3, sp, #4
 80068be:	466a      	mov	r2, sp
 80068c0:	f7ff ffc8 	bl	8006854 <__swhatbuf_r>
 80068c4:	9900      	ldr	r1, [sp, #0]
 80068c6:	4605      	mov	r5, r0
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7fd fe3b 	bl	8004544 <_malloc_r>
 80068ce:	b948      	cbnz	r0, 80068e4 <__smakebuf_r+0x44>
 80068d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d4:	059a      	lsls	r2, r3, #22
 80068d6:	d4ef      	bmi.n	80068b8 <__smakebuf_r+0x18>
 80068d8:	f023 0303 	bic.w	r3, r3, #3
 80068dc:	f043 0302 	orr.w	r3, r3, #2
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	e7e3      	b.n	80068ac <__smakebuf_r+0xc>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	6020      	str	r0, [r4, #0]
 80068e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	6163      	str	r3, [r4, #20]
 80068f2:	9b01      	ldr	r3, [sp, #4]
 80068f4:	6120      	str	r0, [r4, #16]
 80068f6:	b15b      	cbz	r3, 8006910 <__smakebuf_r+0x70>
 80068f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fc:	4630      	mov	r0, r6
 80068fe:	f000 f81d 	bl	800693c <_isatty_r>
 8006902:	b128      	cbz	r0, 8006910 <__smakebuf_r+0x70>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	431d      	orrs	r5, r3
 8006914:	81a5      	strh	r5, [r4, #12]
 8006916:	e7cf      	b.n	80068b8 <__smakebuf_r+0x18>

08006918 <_fstat_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d07      	ldr	r5, [pc, #28]	; (8006938 <_fstat_r+0x20>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	4611      	mov	r1, r2
 8006924:	602b      	str	r3, [r5, #0]
 8006926:	f7fa fee8 	bl	80016fa <_fstat>
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	d102      	bne.n	8006934 <_fstat_r+0x1c>
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	b103      	cbz	r3, 8006934 <_fstat_r+0x1c>
 8006932:	6023      	str	r3, [r4, #0]
 8006934:	bd38      	pop	{r3, r4, r5, pc}
 8006936:	bf00      	nop
 8006938:	2000a534 	.word	0x2000a534

0800693c <_isatty_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d06      	ldr	r5, [pc, #24]	; (8006958 <_isatty_r+0x1c>)
 8006940:	2300      	movs	r3, #0
 8006942:	4604      	mov	r4, r0
 8006944:	4608      	mov	r0, r1
 8006946:	602b      	str	r3, [r5, #0]
 8006948:	f7fa fedc 	bl	8001704 <_isatty>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_isatty_r+0x1a>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_isatty_r+0x1a>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	2000a534 	.word	0x2000a534

0800695c <__assert_func>:
 800695c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800695e:	4614      	mov	r4, r2
 8006960:	461a      	mov	r2, r3
 8006962:	4b09      	ldr	r3, [pc, #36]	; (8006988 <__assert_func+0x2c>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4605      	mov	r5, r0
 8006968:	68d8      	ldr	r0, [r3, #12]
 800696a:	b14c      	cbz	r4, 8006980 <__assert_func+0x24>
 800696c:	4b07      	ldr	r3, [pc, #28]	; (800698c <__assert_func+0x30>)
 800696e:	9100      	str	r1, [sp, #0]
 8006970:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006974:	4906      	ldr	r1, [pc, #24]	; (8006990 <__assert_func+0x34>)
 8006976:	462b      	mov	r3, r5
 8006978:	f000 f844 	bl	8006a04 <fiprintf>
 800697c:	f000 f854 	bl	8006a28 <abort>
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <__assert_func+0x38>)
 8006982:	461c      	mov	r4, r3
 8006984:	e7f3      	b.n	800696e <__assert_func+0x12>
 8006986:	bf00      	nop
 8006988:	2000006c 	.word	0x2000006c
 800698c:	0800b43e 	.word	0x0800b43e
 8006990:	0800b44b 	.word	0x0800b44b
 8006994:	0800b479 	.word	0x0800b479

08006998 <_calloc_r>:
 8006998:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800699a:	fba1 2402 	umull	r2, r4, r1, r2
 800699e:	b94c      	cbnz	r4, 80069b4 <_calloc_r+0x1c>
 80069a0:	4611      	mov	r1, r2
 80069a2:	9201      	str	r2, [sp, #4]
 80069a4:	f7fd fdce 	bl	8004544 <_malloc_r>
 80069a8:	9a01      	ldr	r2, [sp, #4]
 80069aa:	4605      	mov	r5, r0
 80069ac:	b930      	cbnz	r0, 80069bc <_calloc_r+0x24>
 80069ae:	4628      	mov	r0, r5
 80069b0:	b003      	add	sp, #12
 80069b2:	bd30      	pop	{r4, r5, pc}
 80069b4:	220c      	movs	r2, #12
 80069b6:	6002      	str	r2, [r0, #0]
 80069b8:	2500      	movs	r5, #0
 80069ba:	e7f8      	b.n	80069ae <_calloc_r+0x16>
 80069bc:	4621      	mov	r1, r4
 80069be:	f7fe fc66 	bl	800528e <memset>
 80069c2:	e7f4      	b.n	80069ae <_calloc_r+0x16>

080069c4 <__ascii_mbtowc>:
 80069c4:	b082      	sub	sp, #8
 80069c6:	b901      	cbnz	r1, 80069ca <__ascii_mbtowc+0x6>
 80069c8:	a901      	add	r1, sp, #4
 80069ca:	b142      	cbz	r2, 80069de <__ascii_mbtowc+0x1a>
 80069cc:	b14b      	cbz	r3, 80069e2 <__ascii_mbtowc+0x1e>
 80069ce:	7813      	ldrb	r3, [r2, #0]
 80069d0:	600b      	str	r3, [r1, #0]
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	1e10      	subs	r0, r2, #0
 80069d6:	bf18      	it	ne
 80069d8:	2001      	movne	r0, #1
 80069da:	b002      	add	sp, #8
 80069dc:	4770      	bx	lr
 80069de:	4610      	mov	r0, r2
 80069e0:	e7fb      	b.n	80069da <__ascii_mbtowc+0x16>
 80069e2:	f06f 0001 	mvn.w	r0, #1
 80069e6:	e7f8      	b.n	80069da <__ascii_mbtowc+0x16>

080069e8 <__ascii_wctomb>:
 80069e8:	b149      	cbz	r1, 80069fe <__ascii_wctomb+0x16>
 80069ea:	2aff      	cmp	r2, #255	; 0xff
 80069ec:	bf85      	ittet	hi
 80069ee:	238a      	movhi	r3, #138	; 0x8a
 80069f0:	6003      	strhi	r3, [r0, #0]
 80069f2:	700a      	strbls	r2, [r1, #0]
 80069f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80069f8:	bf98      	it	ls
 80069fa:	2001      	movls	r0, #1
 80069fc:	4770      	bx	lr
 80069fe:	4608      	mov	r0, r1
 8006a00:	4770      	bx	lr
	...

08006a04 <fiprintf>:
 8006a04:	b40e      	push	{r1, r2, r3}
 8006a06:	b503      	push	{r0, r1, lr}
 8006a08:	4601      	mov	r1, r0
 8006a0a:	ab03      	add	r3, sp, #12
 8006a0c:	4805      	ldr	r0, [pc, #20]	; (8006a24 <fiprintf+0x20>)
 8006a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a12:	6800      	ldr	r0, [r0, #0]
 8006a14:	9301      	str	r3, [sp, #4]
 8006a16:	f000 f837 	bl	8006a88 <_vfiprintf_r>
 8006a1a:	b002      	add	sp, #8
 8006a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a20:	b003      	add	sp, #12
 8006a22:	4770      	bx	lr
 8006a24:	2000006c 	.word	0x2000006c

08006a28 <abort>:
 8006a28:	b508      	push	{r3, lr}
 8006a2a:	2006      	movs	r0, #6
 8006a2c:	f000 fa04 	bl	8006e38 <raise>
 8006a30:	2001      	movs	r0, #1
 8006a32:	f7fa fe3d 	bl	80016b0 <_exit>

08006a36 <__sfputc_r>:
 8006a36:	6893      	ldr	r3, [r2, #8]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	b410      	push	{r4}
 8006a3e:	6093      	str	r3, [r2, #8]
 8006a40:	da08      	bge.n	8006a54 <__sfputc_r+0x1e>
 8006a42:	6994      	ldr	r4, [r2, #24]
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	db01      	blt.n	8006a4c <__sfputc_r+0x16>
 8006a48:	290a      	cmp	r1, #10
 8006a4a:	d103      	bne.n	8006a54 <__sfputc_r+0x1e>
 8006a4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a50:	f000 b934 	b.w	8006cbc <__swbuf_r>
 8006a54:	6813      	ldr	r3, [r2, #0]
 8006a56:	1c58      	adds	r0, r3, #1
 8006a58:	6010      	str	r0, [r2, #0]
 8006a5a:	7019      	strb	r1, [r3, #0]
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <__sfputs_r>:
 8006a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a66:	4606      	mov	r6, r0
 8006a68:	460f      	mov	r7, r1
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	18d5      	adds	r5, r2, r3
 8006a6e:	42ac      	cmp	r4, r5
 8006a70:	d101      	bne.n	8006a76 <__sfputs_r+0x12>
 8006a72:	2000      	movs	r0, #0
 8006a74:	e007      	b.n	8006a86 <__sfputs_r+0x22>
 8006a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	f7ff ffda 	bl	8006a36 <__sfputc_r>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d1f3      	bne.n	8006a6e <__sfputs_r+0xa>
 8006a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a88 <_vfiprintf_r>:
 8006a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a8c:	460d      	mov	r5, r1
 8006a8e:	b09d      	sub	sp, #116	; 0x74
 8006a90:	4614      	mov	r4, r2
 8006a92:	4698      	mov	r8, r3
 8006a94:	4606      	mov	r6, r0
 8006a96:	b118      	cbz	r0, 8006aa0 <_vfiprintf_r+0x18>
 8006a98:	6a03      	ldr	r3, [r0, #32]
 8006a9a:	b90b      	cbnz	r3, 8006aa0 <_vfiprintf_r+0x18>
 8006a9c:	f7fe fb7e 	bl	800519c <__sinit>
 8006aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aa2:	07d9      	lsls	r1, r3, #31
 8006aa4:	d405      	bmi.n	8006ab2 <_vfiprintf_r+0x2a>
 8006aa6:	89ab      	ldrh	r3, [r5, #12]
 8006aa8:	059a      	lsls	r2, r3, #22
 8006aaa:	d402      	bmi.n	8006ab2 <_vfiprintf_r+0x2a>
 8006aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006aae:	f7fe fc7c 	bl	80053aa <__retarget_lock_acquire_recursive>
 8006ab2:	89ab      	ldrh	r3, [r5, #12]
 8006ab4:	071b      	lsls	r3, r3, #28
 8006ab6:	d501      	bpl.n	8006abc <_vfiprintf_r+0x34>
 8006ab8:	692b      	ldr	r3, [r5, #16]
 8006aba:	b99b      	cbnz	r3, 8006ae4 <_vfiprintf_r+0x5c>
 8006abc:	4629      	mov	r1, r5
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f000 f93a 	bl	8006d38 <__swsetup_r>
 8006ac4:	b170      	cbz	r0, 8006ae4 <_vfiprintf_r+0x5c>
 8006ac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ac8:	07dc      	lsls	r4, r3, #31
 8006aca:	d504      	bpl.n	8006ad6 <_vfiprintf_r+0x4e>
 8006acc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad0:	b01d      	add	sp, #116	; 0x74
 8006ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad6:	89ab      	ldrh	r3, [r5, #12]
 8006ad8:	0598      	lsls	r0, r3, #22
 8006ada:	d4f7      	bmi.n	8006acc <_vfiprintf_r+0x44>
 8006adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ade:	f7fe fc65 	bl	80053ac <__retarget_lock_release_recursive>
 8006ae2:	e7f3      	b.n	8006acc <_vfiprintf_r+0x44>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae8:	2320      	movs	r3, #32
 8006aea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aee:	f8cd 800c 	str.w	r8, [sp, #12]
 8006af2:	2330      	movs	r3, #48	; 0x30
 8006af4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006ca8 <_vfiprintf_r+0x220>
 8006af8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006afc:	f04f 0901 	mov.w	r9, #1
 8006b00:	4623      	mov	r3, r4
 8006b02:	469a      	mov	sl, r3
 8006b04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b08:	b10a      	cbz	r2, 8006b0e <_vfiprintf_r+0x86>
 8006b0a:	2a25      	cmp	r2, #37	; 0x25
 8006b0c:	d1f9      	bne.n	8006b02 <_vfiprintf_r+0x7a>
 8006b0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006b12:	d00b      	beq.n	8006b2c <_vfiprintf_r+0xa4>
 8006b14:	465b      	mov	r3, fp
 8006b16:	4622      	mov	r2, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff ffa2 	bl	8006a64 <__sfputs_r>
 8006b20:	3001      	adds	r0, #1
 8006b22:	f000 80a9 	beq.w	8006c78 <_vfiprintf_r+0x1f0>
 8006b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b28:	445a      	add	r2, fp
 8006b2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 80a1 	beq.w	8006c78 <_vfiprintf_r+0x1f0>
 8006b36:	2300      	movs	r3, #0
 8006b38:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b40:	f10a 0a01 	add.w	sl, sl, #1
 8006b44:	9304      	str	r3, [sp, #16]
 8006b46:	9307      	str	r3, [sp, #28]
 8006b48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b4c:	931a      	str	r3, [sp, #104]	; 0x68
 8006b4e:	4654      	mov	r4, sl
 8006b50:	2205      	movs	r2, #5
 8006b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b56:	4854      	ldr	r0, [pc, #336]	; (8006ca8 <_vfiprintf_r+0x220>)
 8006b58:	f7f9 fb3a 	bl	80001d0 <memchr>
 8006b5c:	9a04      	ldr	r2, [sp, #16]
 8006b5e:	b9d8      	cbnz	r0, 8006b98 <_vfiprintf_r+0x110>
 8006b60:	06d1      	lsls	r1, r2, #27
 8006b62:	bf44      	itt	mi
 8006b64:	2320      	movmi	r3, #32
 8006b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6a:	0713      	lsls	r3, r2, #28
 8006b6c:	bf44      	itt	mi
 8006b6e:	232b      	movmi	r3, #43	; 0x2b
 8006b70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b74:	f89a 3000 	ldrb.w	r3, [sl]
 8006b78:	2b2a      	cmp	r3, #42	; 0x2a
 8006b7a:	d015      	beq.n	8006ba8 <_vfiprintf_r+0x120>
 8006b7c:	9a07      	ldr	r2, [sp, #28]
 8006b7e:	4654      	mov	r4, sl
 8006b80:	2000      	movs	r0, #0
 8006b82:	f04f 0c0a 	mov.w	ip, #10
 8006b86:	4621      	mov	r1, r4
 8006b88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b8c:	3b30      	subs	r3, #48	; 0x30
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d94d      	bls.n	8006c2e <_vfiprintf_r+0x1a6>
 8006b92:	b1b0      	cbz	r0, 8006bc2 <_vfiprintf_r+0x13a>
 8006b94:	9207      	str	r2, [sp, #28]
 8006b96:	e014      	b.n	8006bc2 <_vfiprintf_r+0x13a>
 8006b98:	eba0 0308 	sub.w	r3, r0, r8
 8006b9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	9304      	str	r3, [sp, #16]
 8006ba4:	46a2      	mov	sl, r4
 8006ba6:	e7d2      	b.n	8006b4e <_vfiprintf_r+0xc6>
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	1d19      	adds	r1, r3, #4
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	9103      	str	r1, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	bfbb      	ittet	lt
 8006bb4:	425b      	neglt	r3, r3
 8006bb6:	f042 0202 	orrlt.w	r2, r2, #2
 8006bba:	9307      	strge	r3, [sp, #28]
 8006bbc:	9307      	strlt	r3, [sp, #28]
 8006bbe:	bfb8      	it	lt
 8006bc0:	9204      	strlt	r2, [sp, #16]
 8006bc2:	7823      	ldrb	r3, [r4, #0]
 8006bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc6:	d10c      	bne.n	8006be2 <_vfiprintf_r+0x15a>
 8006bc8:	7863      	ldrb	r3, [r4, #1]
 8006bca:	2b2a      	cmp	r3, #42	; 0x2a
 8006bcc:	d134      	bne.n	8006c38 <_vfiprintf_r+0x1b0>
 8006bce:	9b03      	ldr	r3, [sp, #12]
 8006bd0:	1d1a      	adds	r2, r3, #4
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	9203      	str	r2, [sp, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bfb8      	it	lt
 8006bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bde:	3402      	adds	r4, #2
 8006be0:	9305      	str	r3, [sp, #20]
 8006be2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006cb8 <_vfiprintf_r+0x230>
 8006be6:	7821      	ldrb	r1, [r4, #0]
 8006be8:	2203      	movs	r2, #3
 8006bea:	4650      	mov	r0, sl
 8006bec:	f7f9 faf0 	bl	80001d0 <memchr>
 8006bf0:	b138      	cbz	r0, 8006c02 <_vfiprintf_r+0x17a>
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	eba0 000a 	sub.w	r0, r0, sl
 8006bf8:	2240      	movs	r2, #64	; 0x40
 8006bfa:	4082      	lsls	r2, r0
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	3401      	adds	r4, #1
 8006c00:	9304      	str	r3, [sp, #16]
 8006c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c06:	4829      	ldr	r0, [pc, #164]	; (8006cac <_vfiprintf_r+0x224>)
 8006c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c0c:	2206      	movs	r2, #6
 8006c0e:	f7f9 fadf 	bl	80001d0 <memchr>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d03f      	beq.n	8006c96 <_vfiprintf_r+0x20e>
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <_vfiprintf_r+0x228>)
 8006c18:	bb1b      	cbnz	r3, 8006c62 <_vfiprintf_r+0x1da>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	3307      	adds	r3, #7
 8006c1e:	f023 0307 	bic.w	r3, r3, #7
 8006c22:	3308      	adds	r3, #8
 8006c24:	9303      	str	r3, [sp, #12]
 8006c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c28:	443b      	add	r3, r7
 8006c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c2c:	e768      	b.n	8006b00 <_vfiprintf_r+0x78>
 8006c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c32:	460c      	mov	r4, r1
 8006c34:	2001      	movs	r0, #1
 8006c36:	e7a6      	b.n	8006b86 <_vfiprintf_r+0xfe>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	3401      	adds	r4, #1
 8006c3c:	9305      	str	r3, [sp, #20]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f04f 0c0a 	mov.w	ip, #10
 8006c44:	4620      	mov	r0, r4
 8006c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c4a:	3a30      	subs	r2, #48	; 0x30
 8006c4c:	2a09      	cmp	r2, #9
 8006c4e:	d903      	bls.n	8006c58 <_vfiprintf_r+0x1d0>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0c6      	beq.n	8006be2 <_vfiprintf_r+0x15a>
 8006c54:	9105      	str	r1, [sp, #20]
 8006c56:	e7c4      	b.n	8006be2 <_vfiprintf_r+0x15a>
 8006c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c5c:	4604      	mov	r4, r0
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e7f0      	b.n	8006c44 <_vfiprintf_r+0x1bc>
 8006c62:	ab03      	add	r3, sp, #12
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	462a      	mov	r2, r5
 8006c68:	4b12      	ldr	r3, [pc, #72]	; (8006cb4 <_vfiprintf_r+0x22c>)
 8006c6a:	a904      	add	r1, sp, #16
 8006c6c:	4630      	mov	r0, r6
 8006c6e:	f7fd fd95 	bl	800479c <_printf_float>
 8006c72:	4607      	mov	r7, r0
 8006c74:	1c78      	adds	r0, r7, #1
 8006c76:	d1d6      	bne.n	8006c26 <_vfiprintf_r+0x19e>
 8006c78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c7a:	07d9      	lsls	r1, r3, #31
 8006c7c:	d405      	bmi.n	8006c8a <_vfiprintf_r+0x202>
 8006c7e:	89ab      	ldrh	r3, [r5, #12]
 8006c80:	059a      	lsls	r2, r3, #22
 8006c82:	d402      	bmi.n	8006c8a <_vfiprintf_r+0x202>
 8006c84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c86:	f7fe fb91 	bl	80053ac <__retarget_lock_release_recursive>
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	065b      	lsls	r3, r3, #25
 8006c8e:	f53f af1d 	bmi.w	8006acc <_vfiprintf_r+0x44>
 8006c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c94:	e71c      	b.n	8006ad0 <_vfiprintf_r+0x48>
 8006c96:	ab03      	add	r3, sp, #12
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	462a      	mov	r2, r5
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <_vfiprintf_r+0x22c>)
 8006c9e:	a904      	add	r1, sp, #16
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	f7fe f81f 	bl	8004ce4 <_printf_i>
 8006ca6:	e7e4      	b.n	8006c72 <_vfiprintf_r+0x1ea>
 8006ca8:	0800b57b 	.word	0x0800b57b
 8006cac:	0800b585 	.word	0x0800b585
 8006cb0:	0800479d 	.word	0x0800479d
 8006cb4:	08006a65 	.word	0x08006a65
 8006cb8:	0800b581 	.word	0x0800b581

08006cbc <__swbuf_r>:
 8006cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cbe:	460e      	mov	r6, r1
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	b118      	cbz	r0, 8006cce <__swbuf_r+0x12>
 8006cc6:	6a03      	ldr	r3, [r0, #32]
 8006cc8:	b90b      	cbnz	r3, 8006cce <__swbuf_r+0x12>
 8006cca:	f7fe fa67 	bl	800519c <__sinit>
 8006cce:	69a3      	ldr	r3, [r4, #24]
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	071a      	lsls	r2, r3, #28
 8006cd6:	d525      	bpl.n	8006d24 <__swbuf_r+0x68>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	b31b      	cbz	r3, 8006d24 <__swbuf_r+0x68>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	6922      	ldr	r2, [r4, #16]
 8006ce0:	1a98      	subs	r0, r3, r2
 8006ce2:	6963      	ldr	r3, [r4, #20]
 8006ce4:	b2f6      	uxtb	r6, r6
 8006ce6:	4283      	cmp	r3, r0
 8006ce8:	4637      	mov	r7, r6
 8006cea:	dc04      	bgt.n	8006cf6 <__swbuf_r+0x3a>
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7fe f9a0 	bl	8005034 <_fflush_r>
 8006cf4:	b9e0      	cbnz	r0, 8006d30 <__swbuf_r+0x74>
 8006cf6:	68a3      	ldr	r3, [r4, #8]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	60a3      	str	r3, [r4, #8]
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	6022      	str	r2, [r4, #0]
 8006d02:	701e      	strb	r6, [r3, #0]
 8006d04:	6962      	ldr	r2, [r4, #20]
 8006d06:	1c43      	adds	r3, r0, #1
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d004      	beq.n	8006d16 <__swbuf_r+0x5a>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	07db      	lsls	r3, r3, #31
 8006d10:	d506      	bpl.n	8006d20 <__swbuf_r+0x64>
 8006d12:	2e0a      	cmp	r6, #10
 8006d14:	d104      	bne.n	8006d20 <__swbuf_r+0x64>
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f7fe f98b 	bl	8005034 <_fflush_r>
 8006d1e:	b938      	cbnz	r0, 8006d30 <__swbuf_r+0x74>
 8006d20:	4638      	mov	r0, r7
 8006d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d24:	4621      	mov	r1, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	f000 f806 	bl	8006d38 <__swsetup_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d0d5      	beq.n	8006cdc <__swbuf_r+0x20>
 8006d30:	f04f 37ff 	mov.w	r7, #4294967295
 8006d34:	e7f4      	b.n	8006d20 <__swbuf_r+0x64>
	...

08006d38 <__swsetup_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4b2a      	ldr	r3, [pc, #168]	; (8006de4 <__swsetup_r+0xac>)
 8006d3c:	4605      	mov	r5, r0
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	460c      	mov	r4, r1
 8006d42:	b118      	cbz	r0, 8006d4c <__swsetup_r+0x14>
 8006d44:	6a03      	ldr	r3, [r0, #32]
 8006d46:	b90b      	cbnz	r3, 8006d4c <__swsetup_r+0x14>
 8006d48:	f7fe fa28 	bl	800519c <__sinit>
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d52:	0718      	lsls	r0, r3, #28
 8006d54:	d422      	bmi.n	8006d9c <__swsetup_r+0x64>
 8006d56:	06d9      	lsls	r1, r3, #27
 8006d58:	d407      	bmi.n	8006d6a <__swsetup_r+0x32>
 8006d5a:	2309      	movs	r3, #9
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e034      	b.n	8006dd4 <__swsetup_r+0x9c>
 8006d6a:	0758      	lsls	r0, r3, #29
 8006d6c:	d512      	bpl.n	8006d94 <__swsetup_r+0x5c>
 8006d6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d70:	b141      	cbz	r1, 8006d84 <__swsetup_r+0x4c>
 8006d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d76:	4299      	cmp	r1, r3
 8006d78:	d002      	beq.n	8006d80 <__swsetup_r+0x48>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7ff f9a2 	bl	80060c4 <_free_r>
 8006d80:	2300      	movs	r3, #0
 8006d82:	6363      	str	r3, [r4, #52]	; 0x34
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	6063      	str	r3, [r4, #4]
 8006d90:	6923      	ldr	r3, [r4, #16]
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f043 0308 	orr.w	r3, r3, #8
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	b94b      	cbnz	r3, 8006db4 <__swsetup_r+0x7c>
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006daa:	d003      	beq.n	8006db4 <__swsetup_r+0x7c>
 8006dac:	4621      	mov	r1, r4
 8006dae:	4628      	mov	r0, r5
 8006db0:	f7ff fd76 	bl	80068a0 <__smakebuf_r>
 8006db4:	89a0      	ldrh	r0, [r4, #12]
 8006db6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dba:	f010 0301 	ands.w	r3, r0, #1
 8006dbe:	d00a      	beq.n	8006dd6 <__swsetup_r+0x9e>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	60a3      	str	r3, [r4, #8]
 8006dc4:	6963      	ldr	r3, [r4, #20]
 8006dc6:	425b      	negs	r3, r3
 8006dc8:	61a3      	str	r3, [r4, #24]
 8006dca:	6923      	ldr	r3, [r4, #16]
 8006dcc:	b943      	cbnz	r3, 8006de0 <__swsetup_r+0xa8>
 8006dce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dd2:	d1c4      	bne.n	8006d5e <__swsetup_r+0x26>
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	0781      	lsls	r1, r0, #30
 8006dd8:	bf58      	it	pl
 8006dda:	6963      	ldrpl	r3, [r4, #20]
 8006ddc:	60a3      	str	r3, [r4, #8]
 8006dde:	e7f4      	b.n	8006dca <__swsetup_r+0x92>
 8006de0:	2000      	movs	r0, #0
 8006de2:	e7f7      	b.n	8006dd4 <__swsetup_r+0x9c>
 8006de4:	2000006c 	.word	0x2000006c

08006de8 <_raise_r>:
 8006de8:	291f      	cmp	r1, #31
 8006dea:	b538      	push	{r3, r4, r5, lr}
 8006dec:	4604      	mov	r4, r0
 8006dee:	460d      	mov	r5, r1
 8006df0:	d904      	bls.n	8006dfc <_raise_r+0x14>
 8006df2:	2316      	movs	r3, #22
 8006df4:	6003      	str	r3, [r0, #0]
 8006df6:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006dfe:	b112      	cbz	r2, 8006e06 <_raise_r+0x1e>
 8006e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e04:	b94b      	cbnz	r3, 8006e1a <_raise_r+0x32>
 8006e06:	4620      	mov	r0, r4
 8006e08:	f000 f830 	bl	8006e6c <_getpid_r>
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	4601      	mov	r1, r0
 8006e10:	4620      	mov	r0, r4
 8006e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e16:	f000 b817 	b.w	8006e48 <_kill_r>
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d00a      	beq.n	8006e34 <_raise_r+0x4c>
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	d103      	bne.n	8006e2a <_raise_r+0x42>
 8006e22:	2316      	movs	r3, #22
 8006e24:	6003      	str	r3, [r0, #0]
 8006e26:	2001      	movs	r0, #1
 8006e28:	e7e7      	b.n	8006dfa <_raise_r+0x12>
 8006e2a:	2400      	movs	r4, #0
 8006e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e30:	4628      	mov	r0, r5
 8006e32:	4798      	blx	r3
 8006e34:	2000      	movs	r0, #0
 8006e36:	e7e0      	b.n	8006dfa <_raise_r+0x12>

08006e38 <raise>:
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <raise+0xc>)
 8006e3a:	4601      	mov	r1, r0
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	f7ff bfd3 	b.w	8006de8 <_raise_r>
 8006e42:	bf00      	nop
 8006e44:	2000006c 	.word	0x2000006c

08006e48 <_kill_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	; (8006e68 <_kill_r+0x20>)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	602b      	str	r3, [r5, #0]
 8006e56:	f7fa fc23 	bl	80016a0 <_kill>
 8006e5a:	1c43      	adds	r3, r0, #1
 8006e5c:	d102      	bne.n	8006e64 <_kill_r+0x1c>
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	b103      	cbz	r3, 8006e64 <_kill_r+0x1c>
 8006e62:	6023      	str	r3, [r4, #0]
 8006e64:	bd38      	pop	{r3, r4, r5, pc}
 8006e66:	bf00      	nop
 8006e68:	2000a534 	.word	0x2000a534

08006e6c <_getpid_r>:
 8006e6c:	f7fa bc16 	b.w	800169c <_getpid>

08006e70 <sqrt>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	ed2d 8b02 	vpush	{d8}
 8006e76:	ec55 4b10 	vmov	r4, r5, d0
 8006e7a:	f000 f87d 	bl	8006f78 <__ieee754_sqrt>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	eeb0 8a40 	vmov.f32	s16, s0
 8006e8a:	eef0 8a60 	vmov.f32	s17, s1
 8006e8e:	f7f9 fe4d 	bl	8000b2c <__aeabi_dcmpun>
 8006e92:	b990      	cbnz	r0, 8006eba <sqrt+0x4a>
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fe1e 	bl	8000adc <__aeabi_dcmplt>
 8006ea0:	b158      	cbz	r0, 8006eba <sqrt+0x4a>
 8006ea2:	f7fe fa57 	bl	8005354 <__errno>
 8006ea6:	2321      	movs	r3, #33	; 0x21
 8006ea8:	6003      	str	r3, [r0, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	2300      	movs	r3, #0
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7f9 fccb 	bl	800084c <__aeabi_ddiv>
 8006eb6:	ec41 0b18 	vmov	d8, r0, r1
 8006eba:	eeb0 0a48 	vmov.f32	s0, s16
 8006ebe:	eef0 0a68 	vmov.f32	s1, s17
 8006ec2:	ecbd 8b02 	vpop	{d8}
 8006ec6:	bd38      	pop	{r3, r4, r5, pc}

08006ec8 <sin>:
 8006ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eca:	ec53 2b10 	vmov	r2, r3, d0
 8006ece:	4828      	ldr	r0, [pc, #160]	; (8006f70 <sin+0xa8>)
 8006ed0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ed4:	4281      	cmp	r1, r0
 8006ed6:	dc07      	bgt.n	8006ee8 <sin+0x20>
 8006ed8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006f68 <sin+0xa0>
 8006edc:	2000      	movs	r0, #0
 8006ede:	b005      	add	sp, #20
 8006ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ee4:	f000 b9ec 	b.w	80072c0 <__kernel_sin>
 8006ee8:	4822      	ldr	r0, [pc, #136]	; (8006f74 <sin+0xac>)
 8006eea:	4281      	cmp	r1, r0
 8006eec:	dd09      	ble.n	8006f02 <sin+0x3a>
 8006eee:	ee10 0a10 	vmov	r0, s0
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	f7f9 f9c8 	bl	8000288 <__aeabi_dsub>
 8006ef8:	ec41 0b10 	vmov	d0, r0, r1
 8006efc:	b005      	add	sp, #20
 8006efe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f02:	4668      	mov	r0, sp
 8006f04:	f000 fa9c 	bl	8007440 <__ieee754_rem_pio2>
 8006f08:	f000 0003 	and.w	r0, r0, #3
 8006f0c:	2801      	cmp	r0, #1
 8006f0e:	d00c      	beq.n	8006f2a <sin+0x62>
 8006f10:	2802      	cmp	r0, #2
 8006f12:	d011      	beq.n	8006f38 <sin+0x70>
 8006f14:	b9f0      	cbnz	r0, 8006f54 <sin+0x8c>
 8006f16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f1a:	ed9d 0b00 	vldr	d0, [sp]
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f000 f9ce 	bl	80072c0 <__kernel_sin>
 8006f24:	ec51 0b10 	vmov	r0, r1, d0
 8006f28:	e7e6      	b.n	8006ef8 <sin+0x30>
 8006f2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f2e:	ed9d 0b00 	vldr	d0, [sp]
 8006f32:	f000 f8fd 	bl	8007130 <__kernel_cos>
 8006f36:	e7f5      	b.n	8006f24 <sin+0x5c>
 8006f38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f3c:	ed9d 0b00 	vldr	d0, [sp]
 8006f40:	2001      	movs	r0, #1
 8006f42:	f000 f9bd 	bl	80072c0 <__kernel_sin>
 8006f46:	ec53 2b10 	vmov	r2, r3, d0
 8006f4a:	ee10 0a10 	vmov	r0, s0
 8006f4e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f52:	e7d1      	b.n	8006ef8 <sin+0x30>
 8006f54:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f58:	ed9d 0b00 	vldr	d0, [sp]
 8006f5c:	f000 f8e8 	bl	8007130 <__kernel_cos>
 8006f60:	e7f1      	b.n	8006f46 <sin+0x7e>
 8006f62:	bf00      	nop
 8006f64:	f3af 8000 	nop.w
	...
 8006f70:	3fe921fb 	.word	0x3fe921fb
 8006f74:	7fefffff 	.word	0x7fefffff

08006f78 <__ieee754_sqrt>:
 8006f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	ec55 4b10 	vmov	r4, r5, d0
 8006f80:	4e67      	ldr	r6, [pc, #412]	; (8007120 <__ieee754_sqrt+0x1a8>)
 8006f82:	43ae      	bics	r6, r5
 8006f84:	ee10 0a10 	vmov	r0, s0
 8006f88:	ee10 2a10 	vmov	r2, s0
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	462b      	mov	r3, r5
 8006f90:	d10d      	bne.n	8006fae <__ieee754_sqrt+0x36>
 8006f92:	f7f9 fb31 	bl	80005f8 <__aeabi_dmul>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 f975 	bl	800028c <__adddf3>
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	460d      	mov	r5, r1
 8006fa6:	ec45 4b10 	vmov	d0, r4, r5
 8006faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	2d00      	cmp	r5, #0
 8006fb0:	dc0b      	bgt.n	8006fca <__ieee754_sqrt+0x52>
 8006fb2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006fb6:	4326      	orrs	r6, r4
 8006fb8:	d0f5      	beq.n	8006fa6 <__ieee754_sqrt+0x2e>
 8006fba:	b135      	cbz	r5, 8006fca <__ieee754_sqrt+0x52>
 8006fbc:	f7f9 f964 	bl	8000288 <__aeabi_dsub>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	f7f9 fc42 	bl	800084c <__aeabi_ddiv>
 8006fc8:	e7eb      	b.n	8006fa2 <__ieee754_sqrt+0x2a>
 8006fca:	1509      	asrs	r1, r1, #20
 8006fcc:	f000 808d 	beq.w	80070ea <__ieee754_sqrt+0x172>
 8006fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fd4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fdc:	07c9      	lsls	r1, r1, #31
 8006fde:	bf5c      	itt	pl
 8006fe0:	005b      	lslpl	r3, r3, #1
 8006fe2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006fe6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fea:	bf58      	it	pl
 8006fec:	0052      	lslpl	r2, r2, #1
 8006fee:	2500      	movs	r5, #0
 8006ff0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006ff4:	1076      	asrs	r6, r6, #1
 8006ff6:	0052      	lsls	r2, r2, #1
 8006ff8:	f04f 0e16 	mov.w	lr, #22
 8006ffc:	46ac      	mov	ip, r5
 8006ffe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007002:	eb0c 0001 	add.w	r0, ip, r1
 8007006:	4298      	cmp	r0, r3
 8007008:	bfde      	ittt	le
 800700a:	1a1b      	suble	r3, r3, r0
 800700c:	eb00 0c01 	addle.w	ip, r0, r1
 8007010:	186d      	addle	r5, r5, r1
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	f1be 0e01 	subs.w	lr, lr, #1
 8007018:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800701c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007020:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007024:	d1ed      	bne.n	8007002 <__ieee754_sqrt+0x8a>
 8007026:	4674      	mov	r4, lr
 8007028:	2720      	movs	r7, #32
 800702a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800702e:	4563      	cmp	r3, ip
 8007030:	eb01 000e 	add.w	r0, r1, lr
 8007034:	dc02      	bgt.n	800703c <__ieee754_sqrt+0xc4>
 8007036:	d113      	bne.n	8007060 <__ieee754_sqrt+0xe8>
 8007038:	4290      	cmp	r0, r2
 800703a:	d811      	bhi.n	8007060 <__ieee754_sqrt+0xe8>
 800703c:	2800      	cmp	r0, #0
 800703e:	eb00 0e01 	add.w	lr, r0, r1
 8007042:	da57      	bge.n	80070f4 <__ieee754_sqrt+0x17c>
 8007044:	f1be 0f00 	cmp.w	lr, #0
 8007048:	db54      	blt.n	80070f4 <__ieee754_sqrt+0x17c>
 800704a:	f10c 0801 	add.w	r8, ip, #1
 800704e:	eba3 030c 	sub.w	r3, r3, ip
 8007052:	4290      	cmp	r0, r2
 8007054:	bf88      	it	hi
 8007056:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800705a:	1a12      	subs	r2, r2, r0
 800705c:	440c      	add	r4, r1
 800705e:	46c4      	mov	ip, r8
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	3f01      	subs	r7, #1
 8007064:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007068:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800706c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007070:	d1dd      	bne.n	800702e <__ieee754_sqrt+0xb6>
 8007072:	4313      	orrs	r3, r2
 8007074:	d01b      	beq.n	80070ae <__ieee754_sqrt+0x136>
 8007076:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007124 <__ieee754_sqrt+0x1ac>
 800707a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007128 <__ieee754_sqrt+0x1b0>
 800707e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007082:	e9db 2300 	ldrd	r2, r3, [fp]
 8007086:	f7f9 f8ff 	bl	8000288 <__aeabi_dsub>
 800708a:	e9da 8900 	ldrd	r8, r9, [sl]
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4640      	mov	r0, r8
 8007094:	4649      	mov	r1, r9
 8007096:	f7f9 fd2b 	bl	8000af0 <__aeabi_dcmple>
 800709a:	b140      	cbz	r0, 80070ae <__ieee754_sqrt+0x136>
 800709c:	f1b4 3fff 	cmp.w	r4, #4294967295
 80070a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80070a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80070a8:	d126      	bne.n	80070f8 <__ieee754_sqrt+0x180>
 80070aa:	3501      	adds	r5, #1
 80070ac:	463c      	mov	r4, r7
 80070ae:	106a      	asrs	r2, r5, #1
 80070b0:	0863      	lsrs	r3, r4, #1
 80070b2:	07e9      	lsls	r1, r5, #31
 80070b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80070b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80070bc:	bf48      	it	mi
 80070be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80070c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80070c6:	461c      	mov	r4, r3
 80070c8:	e76d      	b.n	8006fa6 <__ieee754_sqrt+0x2e>
 80070ca:	0ad3      	lsrs	r3, r2, #11
 80070cc:	3815      	subs	r0, #21
 80070ce:	0552      	lsls	r2, r2, #21
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d0fa      	beq.n	80070ca <__ieee754_sqrt+0x152>
 80070d4:	02dc      	lsls	r4, r3, #11
 80070d6:	d50a      	bpl.n	80070ee <__ieee754_sqrt+0x176>
 80070d8:	f1c1 0420 	rsb	r4, r1, #32
 80070dc:	fa22 f404 	lsr.w	r4, r2, r4
 80070e0:	1e4d      	subs	r5, r1, #1
 80070e2:	408a      	lsls	r2, r1
 80070e4:	4323      	orrs	r3, r4
 80070e6:	1b41      	subs	r1, r0, r5
 80070e8:	e772      	b.n	8006fd0 <__ieee754_sqrt+0x58>
 80070ea:	4608      	mov	r0, r1
 80070ec:	e7f0      	b.n	80070d0 <__ieee754_sqrt+0x158>
 80070ee:	005b      	lsls	r3, r3, #1
 80070f0:	3101      	adds	r1, #1
 80070f2:	e7ef      	b.n	80070d4 <__ieee754_sqrt+0x15c>
 80070f4:	46e0      	mov	r8, ip
 80070f6:	e7aa      	b.n	800704e <__ieee754_sqrt+0xd6>
 80070f8:	f7f9 f8c8 	bl	800028c <__adddf3>
 80070fc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007100:	4602      	mov	r2, r0
 8007102:	460b      	mov	r3, r1
 8007104:	4640      	mov	r0, r8
 8007106:	4649      	mov	r1, r9
 8007108:	f7f9 fce8 	bl	8000adc <__aeabi_dcmplt>
 800710c:	b120      	cbz	r0, 8007118 <__ieee754_sqrt+0x1a0>
 800710e:	1ca0      	adds	r0, r4, #2
 8007110:	bf08      	it	eq
 8007112:	3501      	addeq	r5, #1
 8007114:	3402      	adds	r4, #2
 8007116:	e7ca      	b.n	80070ae <__ieee754_sqrt+0x136>
 8007118:	3401      	adds	r4, #1
 800711a:	f024 0401 	bic.w	r4, r4, #1
 800711e:	e7c6      	b.n	80070ae <__ieee754_sqrt+0x136>
 8007120:	7ff00000 	.word	0x7ff00000
 8007124:	200001e0 	.word	0x200001e0
 8007128:	200001e8 	.word	0x200001e8
 800712c:	00000000 	.word	0x00000000

08007130 <__kernel_cos>:
 8007130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007134:	ec57 6b10 	vmov	r6, r7, d0
 8007138:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800713c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007140:	ed8d 1b00 	vstr	d1, [sp]
 8007144:	da07      	bge.n	8007156 <__kernel_cos+0x26>
 8007146:	ee10 0a10 	vmov	r0, s0
 800714a:	4639      	mov	r1, r7
 800714c:	f7f9 fd04 	bl	8000b58 <__aeabi_d2iz>
 8007150:	2800      	cmp	r0, #0
 8007152:	f000 8088 	beq.w	8007266 <__kernel_cos+0x136>
 8007156:	4632      	mov	r2, r6
 8007158:	463b      	mov	r3, r7
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 fa4b 	bl	80005f8 <__aeabi_dmul>
 8007162:	4b51      	ldr	r3, [pc, #324]	; (80072a8 <__kernel_cos+0x178>)
 8007164:	2200      	movs	r2, #0
 8007166:	4604      	mov	r4, r0
 8007168:	460d      	mov	r5, r1
 800716a:	f7f9 fa45 	bl	80005f8 <__aeabi_dmul>
 800716e:	a340      	add	r3, pc, #256	; (adr r3, 8007270 <__kernel_cos+0x140>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	4682      	mov	sl, r0
 8007176:	468b      	mov	fp, r1
 8007178:	4620      	mov	r0, r4
 800717a:	4629      	mov	r1, r5
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_dmul>
 8007180:	a33d      	add	r3, pc, #244	; (adr r3, 8007278 <__kernel_cos+0x148>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	f7f9 f881 	bl	800028c <__adddf3>
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f7f9 fa33 	bl	80005f8 <__aeabi_dmul>
 8007192:	a33b      	add	r3, pc, #236	; (adr r3, 8007280 <__kernel_cos+0x150>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7f9 f876 	bl	8000288 <__aeabi_dsub>
 800719c:	4622      	mov	r2, r4
 800719e:	462b      	mov	r3, r5
 80071a0:	f7f9 fa2a 	bl	80005f8 <__aeabi_dmul>
 80071a4:	a338      	add	r3, pc, #224	; (adr r3, 8007288 <__kernel_cos+0x158>)
 80071a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071aa:	f7f9 f86f 	bl	800028c <__adddf3>
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	f7f9 fa21 	bl	80005f8 <__aeabi_dmul>
 80071b6:	a336      	add	r3, pc, #216	; (adr r3, 8007290 <__kernel_cos+0x160>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	f7f9 f864 	bl	8000288 <__aeabi_dsub>
 80071c0:	4622      	mov	r2, r4
 80071c2:	462b      	mov	r3, r5
 80071c4:	f7f9 fa18 	bl	80005f8 <__aeabi_dmul>
 80071c8:	a333      	add	r3, pc, #204	; (adr r3, 8007298 <__kernel_cos+0x168>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f85d 	bl	800028c <__adddf3>
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	f7f9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	f7f9 fa0b 	bl	80005f8 <__aeabi_dmul>
 80071e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7f9 fa03 	bl	80005f8 <__aeabi_dmul>
 80071f2:	460b      	mov	r3, r1
 80071f4:	4602      	mov	r2, r0
 80071f6:	4629      	mov	r1, r5
 80071f8:	4620      	mov	r0, r4
 80071fa:	f7f9 f845 	bl	8000288 <__aeabi_dsub>
 80071fe:	4b2b      	ldr	r3, [pc, #172]	; (80072ac <__kernel_cos+0x17c>)
 8007200:	4598      	cmp	r8, r3
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	dc10      	bgt.n	800722a <__kernel_cos+0xfa>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4650      	mov	r0, sl
 800720e:	4659      	mov	r1, fp
 8007210:	f7f9 f83a 	bl	8000288 <__aeabi_dsub>
 8007214:	460b      	mov	r3, r1
 8007216:	4926      	ldr	r1, [pc, #152]	; (80072b0 <__kernel_cos+0x180>)
 8007218:	4602      	mov	r2, r0
 800721a:	2000      	movs	r0, #0
 800721c:	f7f9 f834 	bl	8000288 <__aeabi_dsub>
 8007220:	ec41 0b10 	vmov	d0, r0, r1
 8007224:	b003      	add	sp, #12
 8007226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722a:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <__kernel_cos+0x184>)
 800722c:	4920      	ldr	r1, [pc, #128]	; (80072b0 <__kernel_cos+0x180>)
 800722e:	4598      	cmp	r8, r3
 8007230:	bfcc      	ite	gt
 8007232:	4d21      	ldrgt	r5, [pc, #132]	; (80072b8 <__kernel_cos+0x188>)
 8007234:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007238:	2400      	movs	r4, #0
 800723a:	4622      	mov	r2, r4
 800723c:	462b      	mov	r3, r5
 800723e:	2000      	movs	r0, #0
 8007240:	f7f9 f822 	bl	8000288 <__aeabi_dsub>
 8007244:	4622      	mov	r2, r4
 8007246:	4680      	mov	r8, r0
 8007248:	4689      	mov	r9, r1
 800724a:	462b      	mov	r3, r5
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	f7f9 f81a 	bl	8000288 <__aeabi_dsub>
 8007254:	4632      	mov	r2, r6
 8007256:	463b      	mov	r3, r7
 8007258:	f7f9 f816 	bl	8000288 <__aeabi_dsub>
 800725c:	4602      	mov	r2, r0
 800725e:	460b      	mov	r3, r1
 8007260:	4640      	mov	r0, r8
 8007262:	4649      	mov	r1, r9
 8007264:	e7da      	b.n	800721c <__kernel_cos+0xec>
 8007266:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80072a0 <__kernel_cos+0x170>
 800726a:	e7db      	b.n	8007224 <__kernel_cos+0xf4>
 800726c:	f3af 8000 	nop.w
 8007270:	be8838d4 	.word	0xbe8838d4
 8007274:	bda8fae9 	.word	0xbda8fae9
 8007278:	bdb4b1c4 	.word	0xbdb4b1c4
 800727c:	3e21ee9e 	.word	0x3e21ee9e
 8007280:	809c52ad 	.word	0x809c52ad
 8007284:	3e927e4f 	.word	0x3e927e4f
 8007288:	19cb1590 	.word	0x19cb1590
 800728c:	3efa01a0 	.word	0x3efa01a0
 8007290:	16c15177 	.word	0x16c15177
 8007294:	3f56c16c 	.word	0x3f56c16c
 8007298:	5555554c 	.word	0x5555554c
 800729c:	3fa55555 	.word	0x3fa55555
 80072a0:	00000000 	.word	0x00000000
 80072a4:	3ff00000 	.word	0x3ff00000
 80072a8:	3fe00000 	.word	0x3fe00000
 80072ac:	3fd33332 	.word	0x3fd33332
 80072b0:	3ff00000 	.word	0x3ff00000
 80072b4:	3fe90000 	.word	0x3fe90000
 80072b8:	3fd20000 	.word	0x3fd20000
 80072bc:	00000000 	.word	0x00000000

080072c0 <__kernel_sin>:
 80072c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c4:	ed2d 8b04 	vpush	{d8-d9}
 80072c8:	eeb0 8a41 	vmov.f32	s16, s2
 80072cc:	eef0 8a61 	vmov.f32	s17, s3
 80072d0:	ec55 4b10 	vmov	r4, r5, d0
 80072d4:	b083      	sub	sp, #12
 80072d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80072da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80072de:	9001      	str	r0, [sp, #4]
 80072e0:	da06      	bge.n	80072f0 <__kernel_sin+0x30>
 80072e2:	ee10 0a10 	vmov	r0, s0
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f9 fc36 	bl	8000b58 <__aeabi_d2iz>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d051      	beq.n	8007394 <__kernel_sin+0xd4>
 80072f0:	4622      	mov	r2, r4
 80072f2:	462b      	mov	r3, r5
 80072f4:	4620      	mov	r0, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	f7f9 f97e 	bl	80005f8 <__aeabi_dmul>
 80072fc:	4682      	mov	sl, r0
 80072fe:	468b      	mov	fp, r1
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	4620      	mov	r0, r4
 8007306:	4629      	mov	r1, r5
 8007308:	f7f9 f976 	bl	80005f8 <__aeabi_dmul>
 800730c:	a341      	add	r3, pc, #260	; (adr r3, 8007414 <__kernel_sin+0x154>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	4680      	mov	r8, r0
 8007314:	4689      	mov	r9, r1
 8007316:	4650      	mov	r0, sl
 8007318:	4659      	mov	r1, fp
 800731a:	f7f9 f96d 	bl	80005f8 <__aeabi_dmul>
 800731e:	a33f      	add	r3, pc, #252	; (adr r3, 800741c <__kernel_sin+0x15c>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f8 ffb0 	bl	8000288 <__aeabi_dsub>
 8007328:	4652      	mov	r2, sl
 800732a:	465b      	mov	r3, fp
 800732c:	f7f9 f964 	bl	80005f8 <__aeabi_dmul>
 8007330:	a33c      	add	r3, pc, #240	; (adr r3, 8007424 <__kernel_sin+0x164>)
 8007332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007336:	f7f8 ffa9 	bl	800028c <__adddf3>
 800733a:	4652      	mov	r2, sl
 800733c:	465b      	mov	r3, fp
 800733e:	f7f9 f95b 	bl	80005f8 <__aeabi_dmul>
 8007342:	a33a      	add	r3, pc, #232	; (adr r3, 800742c <__kernel_sin+0x16c>)
 8007344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007348:	f7f8 ff9e 	bl	8000288 <__aeabi_dsub>
 800734c:	4652      	mov	r2, sl
 800734e:	465b      	mov	r3, fp
 8007350:	f7f9 f952 	bl	80005f8 <__aeabi_dmul>
 8007354:	a337      	add	r3, pc, #220	; (adr r3, 8007434 <__kernel_sin+0x174>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f8 ff97 	bl	800028c <__adddf3>
 800735e:	9b01      	ldr	r3, [sp, #4]
 8007360:	4606      	mov	r6, r0
 8007362:	460f      	mov	r7, r1
 8007364:	b9eb      	cbnz	r3, 80073a2 <__kernel_sin+0xe2>
 8007366:	4602      	mov	r2, r0
 8007368:	460b      	mov	r3, r1
 800736a:	4650      	mov	r0, sl
 800736c:	4659      	mov	r1, fp
 800736e:	f7f9 f943 	bl	80005f8 <__aeabi_dmul>
 8007372:	a325      	add	r3, pc, #148	; (adr r3, 8007408 <__kernel_sin+0x148>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f8 ff86 	bl	8000288 <__aeabi_dsub>
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	f7f9 f93a 	bl	80005f8 <__aeabi_dmul>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f8 ff7e 	bl	800028c <__adddf3>
 8007390:	4604      	mov	r4, r0
 8007392:	460d      	mov	r5, r1
 8007394:	ec45 4b10 	vmov	d0, r4, r5
 8007398:	b003      	add	sp, #12
 800739a:	ecbd 8b04 	vpop	{d8-d9}
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <__kernel_sin+0x150>)
 80073a4:	ec51 0b18 	vmov	r0, r1, d8
 80073a8:	2200      	movs	r2, #0
 80073aa:	f7f9 f925 	bl	80005f8 <__aeabi_dmul>
 80073ae:	4632      	mov	r2, r6
 80073b0:	ec41 0b19 	vmov	d9, r0, r1
 80073b4:	463b      	mov	r3, r7
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	f7f9 f91d 	bl	80005f8 <__aeabi_dmul>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	ec51 0b19 	vmov	r0, r1, d9
 80073c6:	f7f8 ff5f 	bl	8000288 <__aeabi_dsub>
 80073ca:	4652      	mov	r2, sl
 80073cc:	465b      	mov	r3, fp
 80073ce:	f7f9 f913 	bl	80005f8 <__aeabi_dmul>
 80073d2:	ec53 2b18 	vmov	r2, r3, d8
 80073d6:	f7f8 ff57 	bl	8000288 <__aeabi_dsub>
 80073da:	a30b      	add	r3, pc, #44	; (adr r3, 8007408 <__kernel_sin+0x148>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	4606      	mov	r6, r0
 80073e2:	460f      	mov	r7, r1
 80073e4:	4640      	mov	r0, r8
 80073e6:	4649      	mov	r1, r9
 80073e8:	f7f9 f906 	bl	80005f8 <__aeabi_dmul>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4630      	mov	r0, r6
 80073f2:	4639      	mov	r1, r7
 80073f4:	f7f8 ff4a 	bl	800028c <__adddf3>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4620      	mov	r0, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	f7f8 ff42 	bl	8000288 <__aeabi_dsub>
 8007404:	e7c4      	b.n	8007390 <__kernel_sin+0xd0>
 8007406:	bf00      	nop
 8007408:	55555549 	.word	0x55555549
 800740c:	3fc55555 	.word	0x3fc55555
 8007410:	3fe00000 	.word	0x3fe00000
 8007414:	5acfd57c 	.word	0x5acfd57c
 8007418:	3de5d93a 	.word	0x3de5d93a
 800741c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007420:	3e5ae5e6 	.word	0x3e5ae5e6
 8007424:	57b1fe7d 	.word	0x57b1fe7d
 8007428:	3ec71de3 	.word	0x3ec71de3
 800742c:	19c161d5 	.word	0x19c161d5
 8007430:	3f2a01a0 	.word	0x3f2a01a0
 8007434:	1110f8a6 	.word	0x1110f8a6
 8007438:	3f811111 	.word	0x3f811111
 800743c:	00000000 	.word	0x00000000

08007440 <__ieee754_rem_pio2>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	ed2d 8b02 	vpush	{d8}
 8007448:	ec55 4b10 	vmov	r4, r5, d0
 800744c:	4bca      	ldr	r3, [pc, #808]	; (8007778 <__ieee754_rem_pio2+0x338>)
 800744e:	b08b      	sub	sp, #44	; 0x2c
 8007450:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007454:	4598      	cmp	r8, r3
 8007456:	4682      	mov	sl, r0
 8007458:	9502      	str	r5, [sp, #8]
 800745a:	dc08      	bgt.n	800746e <__ieee754_rem_pio2+0x2e>
 800745c:	2200      	movs	r2, #0
 800745e:	2300      	movs	r3, #0
 8007460:	ed80 0b00 	vstr	d0, [r0]
 8007464:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007468:	f04f 0b00 	mov.w	fp, #0
 800746c:	e028      	b.n	80074c0 <__ieee754_rem_pio2+0x80>
 800746e:	4bc3      	ldr	r3, [pc, #780]	; (800777c <__ieee754_rem_pio2+0x33c>)
 8007470:	4598      	cmp	r8, r3
 8007472:	dc78      	bgt.n	8007566 <__ieee754_rem_pio2+0x126>
 8007474:	9b02      	ldr	r3, [sp, #8]
 8007476:	4ec2      	ldr	r6, [pc, #776]	; (8007780 <__ieee754_rem_pio2+0x340>)
 8007478:	2b00      	cmp	r3, #0
 800747a:	ee10 0a10 	vmov	r0, s0
 800747e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007740 <__ieee754_rem_pio2+0x300>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	4629      	mov	r1, r5
 8007486:	dd39      	ble.n	80074fc <__ieee754_rem_pio2+0xbc>
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	45b0      	cmp	r8, r6
 800748e:	4604      	mov	r4, r0
 8007490:	460d      	mov	r5, r1
 8007492:	d01b      	beq.n	80074cc <__ieee754_rem_pio2+0x8c>
 8007494:	a3ac      	add	r3, pc, #688	; (adr r3, 8007748 <__ieee754_rem_pio2+0x308>)
 8007496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749a:	f7f8 fef5 	bl	8000288 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	e9ca 2300 	strd	r2, r3, [sl]
 80074a6:	4620      	mov	r0, r4
 80074a8:	4629      	mov	r1, r5
 80074aa:	f7f8 feed 	bl	8000288 <__aeabi_dsub>
 80074ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007748 <__ieee754_rem_pio2+0x308>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 fee8 	bl	8000288 <__aeabi_dsub>
 80074b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80074bc:	f04f 0b01 	mov.w	fp, #1
 80074c0:	4658      	mov	r0, fp
 80074c2:	b00b      	add	sp, #44	; 0x2c
 80074c4:	ecbd 8b02 	vpop	{d8}
 80074c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007750 <__ieee754_rem_pio2+0x310>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 fed9 	bl	8000288 <__aeabi_dsub>
 80074d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007758 <__ieee754_rem_pio2+0x318>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	4604      	mov	r4, r0
 80074de:	460d      	mov	r5, r1
 80074e0:	f7f8 fed2 	bl	8000288 <__aeabi_dsub>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	e9ca 2300 	strd	r2, r3, [sl]
 80074ec:	4620      	mov	r0, r4
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7f8 feca 	bl	8000288 <__aeabi_dsub>
 80074f4:	a398      	add	r3, pc, #608	; (adr r3, 8007758 <__ieee754_rem_pio2+0x318>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	e7db      	b.n	80074b4 <__ieee754_rem_pio2+0x74>
 80074fc:	f7f8 fec6 	bl	800028c <__adddf3>
 8007500:	45b0      	cmp	r8, r6
 8007502:	4604      	mov	r4, r0
 8007504:	460d      	mov	r5, r1
 8007506:	d016      	beq.n	8007536 <__ieee754_rem_pio2+0xf6>
 8007508:	a38f      	add	r3, pc, #572	; (adr r3, 8007748 <__ieee754_rem_pio2+0x308>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 febd 	bl	800028c <__adddf3>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	e9ca 2300 	strd	r2, r3, [sl]
 800751a:	4620      	mov	r0, r4
 800751c:	4629      	mov	r1, r5
 800751e:	f7f8 feb3 	bl	8000288 <__aeabi_dsub>
 8007522:	a389      	add	r3, pc, #548	; (adr r3, 8007748 <__ieee754_rem_pio2+0x308>)
 8007524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007528:	f7f8 feb0 	bl	800028c <__adddf3>
 800752c:	f04f 3bff 	mov.w	fp, #4294967295
 8007530:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007534:	e7c4      	b.n	80074c0 <__ieee754_rem_pio2+0x80>
 8007536:	a386      	add	r3, pc, #536	; (adr r3, 8007750 <__ieee754_rem_pio2+0x310>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f7f8 fea6 	bl	800028c <__adddf3>
 8007540:	a385      	add	r3, pc, #532	; (adr r3, 8007758 <__ieee754_rem_pio2+0x318>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	4604      	mov	r4, r0
 8007548:	460d      	mov	r5, r1
 800754a:	f7f8 fe9f 	bl	800028c <__adddf3>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	e9ca 2300 	strd	r2, r3, [sl]
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 fe95 	bl	8000288 <__aeabi_dsub>
 800755e:	a37e      	add	r3, pc, #504	; (adr r3, 8007758 <__ieee754_rem_pio2+0x318>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	e7e0      	b.n	8007528 <__ieee754_rem_pio2+0xe8>
 8007566:	4b87      	ldr	r3, [pc, #540]	; (8007784 <__ieee754_rem_pio2+0x344>)
 8007568:	4598      	cmp	r8, r3
 800756a:	f300 80d8 	bgt.w	800771e <__ieee754_rem_pio2+0x2de>
 800756e:	f000 f96d 	bl	800784c <fabs>
 8007572:	ec55 4b10 	vmov	r4, r5, d0
 8007576:	ee10 0a10 	vmov	r0, s0
 800757a:	a379      	add	r3, pc, #484	; (adr r3, 8007760 <__ieee754_rem_pio2+0x320>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	4629      	mov	r1, r5
 8007582:	f7f9 f839 	bl	80005f8 <__aeabi_dmul>
 8007586:	4b80      	ldr	r3, [pc, #512]	; (8007788 <__ieee754_rem_pio2+0x348>)
 8007588:	2200      	movs	r2, #0
 800758a:	f7f8 fe7f 	bl	800028c <__adddf3>
 800758e:	f7f9 fae3 	bl	8000b58 <__aeabi_d2iz>
 8007592:	4683      	mov	fp, r0
 8007594:	f7f8 ffc6 	bl	8000524 <__aeabi_i2d>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	ec43 2b18 	vmov	d8, r2, r3
 80075a0:	a367      	add	r3, pc, #412	; (adr r3, 8007740 <__ieee754_rem_pio2+0x300>)
 80075a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a6:	f7f9 f827 	bl	80005f8 <__aeabi_dmul>
 80075aa:	4602      	mov	r2, r0
 80075ac:	460b      	mov	r3, r1
 80075ae:	4620      	mov	r0, r4
 80075b0:	4629      	mov	r1, r5
 80075b2:	f7f8 fe69 	bl	8000288 <__aeabi_dsub>
 80075b6:	a364      	add	r3, pc, #400	; (adr r3, 8007748 <__ieee754_rem_pio2+0x308>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	4606      	mov	r6, r0
 80075be:	460f      	mov	r7, r1
 80075c0:	ec51 0b18 	vmov	r0, r1, d8
 80075c4:	f7f9 f818 	bl	80005f8 <__aeabi_dmul>
 80075c8:	f1bb 0f1f 	cmp.w	fp, #31
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	dc0d      	bgt.n	80075ee <__ieee754_rem_pio2+0x1ae>
 80075d2:	4b6e      	ldr	r3, [pc, #440]	; (800778c <__ieee754_rem_pio2+0x34c>)
 80075d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80075d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075dc:	4543      	cmp	r3, r8
 80075de:	d006      	beq.n	80075ee <__ieee754_rem_pio2+0x1ae>
 80075e0:	4622      	mov	r2, r4
 80075e2:	462b      	mov	r3, r5
 80075e4:	4630      	mov	r0, r6
 80075e6:	4639      	mov	r1, r7
 80075e8:	f7f8 fe4e 	bl	8000288 <__aeabi_dsub>
 80075ec:	e00e      	b.n	800760c <__ieee754_rem_pio2+0x1cc>
 80075ee:	462b      	mov	r3, r5
 80075f0:	4622      	mov	r2, r4
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f8 fe47 	bl	8000288 <__aeabi_dsub>
 80075fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007604:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007608:	2b10      	cmp	r3, #16
 800760a:	dc02      	bgt.n	8007612 <__ieee754_rem_pio2+0x1d2>
 800760c:	e9ca 0100 	strd	r0, r1, [sl]
 8007610:	e039      	b.n	8007686 <__ieee754_rem_pio2+0x246>
 8007612:	a34f      	add	r3, pc, #316	; (adr r3, 8007750 <__ieee754_rem_pio2+0x310>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	ec51 0b18 	vmov	r0, r1, d8
 800761c:	f7f8 ffec 	bl	80005f8 <__aeabi_dmul>
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f8 fe2c 	bl	8000288 <__aeabi_dsub>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4680      	mov	r8, r0
 8007636:	4689      	mov	r9, r1
 8007638:	4630      	mov	r0, r6
 800763a:	4639      	mov	r1, r7
 800763c:	f7f8 fe24 	bl	8000288 <__aeabi_dsub>
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	f7f8 fe20 	bl	8000288 <__aeabi_dsub>
 8007648:	a343      	add	r3, pc, #268	; (adr r3, 8007758 <__ieee754_rem_pio2+0x318>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4604      	mov	r4, r0
 8007650:	460d      	mov	r5, r1
 8007652:	ec51 0b18 	vmov	r0, r1, d8
 8007656:	f7f8 ffcf 	bl	80005f8 <__aeabi_dmul>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 fe13 	bl	8000288 <__aeabi_dsub>
 8007662:	4602      	mov	r2, r0
 8007664:	460b      	mov	r3, r1
 8007666:	4604      	mov	r4, r0
 8007668:	460d      	mov	r5, r1
 800766a:	4640      	mov	r0, r8
 800766c:	4649      	mov	r1, r9
 800766e:	f7f8 fe0b 	bl	8000288 <__aeabi_dsub>
 8007672:	9a03      	ldr	r2, [sp, #12]
 8007674:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	2b31      	cmp	r3, #49	; 0x31
 800767c:	dc24      	bgt.n	80076c8 <__ieee754_rem_pio2+0x288>
 800767e:	e9ca 0100 	strd	r0, r1, [sl]
 8007682:	4646      	mov	r6, r8
 8007684:	464f      	mov	r7, r9
 8007686:	e9da 8900 	ldrd	r8, r9, [sl]
 800768a:	4630      	mov	r0, r6
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4639      	mov	r1, r7
 8007692:	f7f8 fdf9 	bl	8000288 <__aeabi_dsub>
 8007696:	462b      	mov	r3, r5
 8007698:	4622      	mov	r2, r4
 800769a:	f7f8 fdf5 	bl	8000288 <__aeabi_dsub>
 800769e:	9b02      	ldr	r3, [sp, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80076a6:	f6bf af0b 	bge.w	80074c0 <__ieee754_rem_pio2+0x80>
 80076aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80076ae:	f8ca 3004 	str.w	r3, [sl, #4]
 80076b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076b6:	f8ca 8000 	str.w	r8, [sl]
 80076ba:	f8ca 0008 	str.w	r0, [sl, #8]
 80076be:	f8ca 300c 	str.w	r3, [sl, #12]
 80076c2:	f1cb 0b00 	rsb	fp, fp, #0
 80076c6:	e6fb      	b.n	80074c0 <__ieee754_rem_pio2+0x80>
 80076c8:	a327      	add	r3, pc, #156	; (adr r3, 8007768 <__ieee754_rem_pio2+0x328>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	ec51 0b18 	vmov	r0, r1, d8
 80076d2:	f7f8 ff91 	bl	80005f8 <__aeabi_dmul>
 80076d6:	4604      	mov	r4, r0
 80076d8:	460d      	mov	r5, r1
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4640      	mov	r0, r8
 80076e0:	4649      	mov	r1, r9
 80076e2:	f7f8 fdd1 	bl	8000288 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	4640      	mov	r0, r8
 80076f0:	4649      	mov	r1, r9
 80076f2:	f7f8 fdc9 	bl	8000288 <__aeabi_dsub>
 80076f6:	4622      	mov	r2, r4
 80076f8:	462b      	mov	r3, r5
 80076fa:	f7f8 fdc5 	bl	8000288 <__aeabi_dsub>
 80076fe:	a31c      	add	r3, pc, #112	; (adr r3, 8007770 <__ieee754_rem_pio2+0x330>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	4604      	mov	r4, r0
 8007706:	460d      	mov	r5, r1
 8007708:	ec51 0b18 	vmov	r0, r1, d8
 800770c:	f7f8 ff74 	bl	80005f8 <__aeabi_dmul>
 8007710:	4622      	mov	r2, r4
 8007712:	462b      	mov	r3, r5
 8007714:	f7f8 fdb8 	bl	8000288 <__aeabi_dsub>
 8007718:	4604      	mov	r4, r0
 800771a:	460d      	mov	r5, r1
 800771c:	e760      	b.n	80075e0 <__ieee754_rem_pio2+0x1a0>
 800771e:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <__ieee754_rem_pio2+0x350>)
 8007720:	4598      	cmp	r8, r3
 8007722:	dd37      	ble.n	8007794 <__ieee754_rem_pio2+0x354>
 8007724:	ee10 2a10 	vmov	r2, s0
 8007728:	462b      	mov	r3, r5
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 fdab 	bl	8000288 <__aeabi_dsub>
 8007732:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007736:	e9ca 0100 	strd	r0, r1, [sl]
 800773a:	e695      	b.n	8007468 <__ieee754_rem_pio2+0x28>
 800773c:	f3af 8000 	nop.w
 8007740:	54400000 	.word	0x54400000
 8007744:	3ff921fb 	.word	0x3ff921fb
 8007748:	1a626331 	.word	0x1a626331
 800774c:	3dd0b461 	.word	0x3dd0b461
 8007750:	1a600000 	.word	0x1a600000
 8007754:	3dd0b461 	.word	0x3dd0b461
 8007758:	2e037073 	.word	0x2e037073
 800775c:	3ba3198a 	.word	0x3ba3198a
 8007760:	6dc9c883 	.word	0x6dc9c883
 8007764:	3fe45f30 	.word	0x3fe45f30
 8007768:	2e000000 	.word	0x2e000000
 800776c:	3ba3198a 	.word	0x3ba3198a
 8007770:	252049c1 	.word	0x252049c1
 8007774:	397b839a 	.word	0x397b839a
 8007778:	3fe921fb 	.word	0x3fe921fb
 800777c:	4002d97b 	.word	0x4002d97b
 8007780:	3ff921fb 	.word	0x3ff921fb
 8007784:	413921fb 	.word	0x413921fb
 8007788:	3fe00000 	.word	0x3fe00000
 800778c:	0800b58c 	.word	0x0800b58c
 8007790:	7fefffff 	.word	0x7fefffff
 8007794:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007798:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800779c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80077a0:	4620      	mov	r0, r4
 80077a2:	460d      	mov	r5, r1
 80077a4:	f7f9 f9d8 	bl	8000b58 <__aeabi_d2iz>
 80077a8:	f7f8 febc 	bl	8000524 <__aeabi_i2d>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4620      	mov	r0, r4
 80077b2:	4629      	mov	r1, r5
 80077b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077b8:	f7f8 fd66 	bl	8000288 <__aeabi_dsub>
 80077bc:	4b21      	ldr	r3, [pc, #132]	; (8007844 <__ieee754_rem_pio2+0x404>)
 80077be:	2200      	movs	r2, #0
 80077c0:	f7f8 ff1a 	bl	80005f8 <__aeabi_dmul>
 80077c4:	460d      	mov	r5, r1
 80077c6:	4604      	mov	r4, r0
 80077c8:	f7f9 f9c6 	bl	8000b58 <__aeabi_d2iz>
 80077cc:	f7f8 feaa 	bl	8000524 <__aeabi_i2d>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4620      	mov	r0, r4
 80077d6:	4629      	mov	r1, r5
 80077d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077dc:	f7f8 fd54 	bl	8000288 <__aeabi_dsub>
 80077e0:	4b18      	ldr	r3, [pc, #96]	; (8007844 <__ieee754_rem_pio2+0x404>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f7f8 ff08 	bl	80005f8 <__aeabi_dmul>
 80077e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80077ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80077f0:	2703      	movs	r7, #3
 80077f2:	2400      	movs	r4, #0
 80077f4:	2500      	movs	r5, #0
 80077f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	46b9      	mov	r9, r7
 8007800:	3f01      	subs	r7, #1
 8007802:	f7f9 f961 	bl	8000ac8 <__aeabi_dcmpeq>
 8007806:	2800      	cmp	r0, #0
 8007808:	d1f5      	bne.n	80077f6 <__ieee754_rem_pio2+0x3b6>
 800780a:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <__ieee754_rem_pio2+0x408>)
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	2302      	movs	r3, #2
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4632      	mov	r2, r6
 8007814:	464b      	mov	r3, r9
 8007816:	4651      	mov	r1, sl
 8007818:	a804      	add	r0, sp, #16
 800781a:	f000 f821 	bl	8007860 <__kernel_rem_pio2>
 800781e:	9b02      	ldr	r3, [sp, #8]
 8007820:	2b00      	cmp	r3, #0
 8007822:	4683      	mov	fp, r0
 8007824:	f6bf ae4c 	bge.w	80074c0 <__ieee754_rem_pio2+0x80>
 8007828:	e9da 2100 	ldrd	r2, r1, [sl]
 800782c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007830:	e9ca 2300 	strd	r2, r3, [sl]
 8007834:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007838:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800783c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007840:	e73f      	b.n	80076c2 <__ieee754_rem_pio2+0x282>
 8007842:	bf00      	nop
 8007844:	41700000 	.word	0x41700000
 8007848:	0800b60c 	.word	0x0800b60c

0800784c <fabs>:
 800784c:	ec51 0b10 	vmov	r0, r1, d0
 8007850:	ee10 2a10 	vmov	r2, s0
 8007854:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007858:	ec43 2b10 	vmov	d0, r2, r3
 800785c:	4770      	bx	lr
	...

08007860 <__kernel_rem_pio2>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	ed2d 8b02 	vpush	{d8}
 8007868:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800786c:	f112 0f14 	cmn.w	r2, #20
 8007870:	9306      	str	r3, [sp, #24]
 8007872:	9104      	str	r1, [sp, #16]
 8007874:	4bc2      	ldr	r3, [pc, #776]	; (8007b80 <__kernel_rem_pio2+0x320>)
 8007876:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007878:	9009      	str	r0, [sp, #36]	; 0x24
 800787a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	f103 33ff 	add.w	r3, r3, #4294967295
 8007886:	bfa8      	it	ge
 8007888:	1ed4      	subge	r4, r2, #3
 800788a:	9305      	str	r3, [sp, #20]
 800788c:	bfb2      	itee	lt
 800788e:	2400      	movlt	r4, #0
 8007890:	2318      	movge	r3, #24
 8007892:	fb94 f4f3 	sdivge	r4, r4, r3
 8007896:	f06f 0317 	mvn.w	r3, #23
 800789a:	fb04 3303 	mla	r3, r4, r3, r3
 800789e:	eb03 0a02 	add.w	sl, r3, r2
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007b70 <__kernel_rem_pio2+0x310>
 80078aa:	eb03 0802 	add.w	r8, r3, r2
 80078ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80078b0:	1aa7      	subs	r7, r4, r2
 80078b2:	ae20      	add	r6, sp, #128	; 0x80
 80078b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078b8:	2500      	movs	r5, #0
 80078ba:	4545      	cmp	r5, r8
 80078bc:	dd13      	ble.n	80078e6 <__kernel_rem_pio2+0x86>
 80078be:	9b06      	ldr	r3, [sp, #24]
 80078c0:	aa20      	add	r2, sp, #128	; 0x80
 80078c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80078c6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80078ca:	f04f 0800 	mov.w	r8, #0
 80078ce:	9b00      	ldr	r3, [sp, #0]
 80078d0:	4598      	cmp	r8, r3
 80078d2:	dc31      	bgt.n	8007938 <__kernel_rem_pio2+0xd8>
 80078d4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007b70 <__kernel_rem_pio2+0x310>
 80078d8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80078dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80078e0:	462f      	mov	r7, r5
 80078e2:	2600      	movs	r6, #0
 80078e4:	e01b      	b.n	800791e <__kernel_rem_pio2+0xbe>
 80078e6:	42ef      	cmn	r7, r5
 80078e8:	d407      	bmi.n	80078fa <__kernel_rem_pio2+0x9a>
 80078ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80078ee:	f7f8 fe19 	bl	8000524 <__aeabi_i2d>
 80078f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80078f6:	3501      	adds	r5, #1
 80078f8:	e7df      	b.n	80078ba <__kernel_rem_pio2+0x5a>
 80078fa:	ec51 0b18 	vmov	r0, r1, d8
 80078fe:	e7f8      	b.n	80078f2 <__kernel_rem_pio2+0x92>
 8007900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007904:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007908:	f7f8 fe76 	bl	80005f8 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007914:	f7f8 fcba 	bl	800028c <__adddf3>
 8007918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800791c:	3601      	adds	r6, #1
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	429e      	cmp	r6, r3
 8007922:	f1a7 0708 	sub.w	r7, r7, #8
 8007926:	ddeb      	ble.n	8007900 <__kernel_rem_pio2+0xa0>
 8007928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800792c:	f108 0801 	add.w	r8, r8, #1
 8007930:	ecab 7b02 	vstmia	fp!, {d7}
 8007934:	3508      	adds	r5, #8
 8007936:	e7ca      	b.n	80078ce <__kernel_rem_pio2+0x6e>
 8007938:	9b00      	ldr	r3, [sp, #0]
 800793a:	aa0c      	add	r2, sp, #48	; 0x30
 800793c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007940:	930b      	str	r3, [sp, #44]	; 0x2c
 8007942:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007944:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007948:	9c00      	ldr	r4, [sp, #0]
 800794a:	930a      	str	r3, [sp, #40]	; 0x28
 800794c:	00e3      	lsls	r3, r4, #3
 800794e:	9308      	str	r3, [sp, #32]
 8007950:	ab98      	add	r3, sp, #608	; 0x260
 8007952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007956:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800795a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800795e:	ab70      	add	r3, sp, #448	; 0x1c0
 8007960:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007964:	46c3      	mov	fp, r8
 8007966:	46a1      	mov	r9, r4
 8007968:	f1b9 0f00 	cmp.w	r9, #0
 800796c:	f1a5 0508 	sub.w	r5, r5, #8
 8007970:	dc77      	bgt.n	8007a62 <__kernel_rem_pio2+0x202>
 8007972:	ec47 6b10 	vmov	d0, r6, r7
 8007976:	4650      	mov	r0, sl
 8007978:	f000 fac2 	bl	8007f00 <scalbn>
 800797c:	ec57 6b10 	vmov	r6, r7, d0
 8007980:	2200      	movs	r2, #0
 8007982:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007986:	ee10 0a10 	vmov	r0, s0
 800798a:	4639      	mov	r1, r7
 800798c:	f7f8 fe34 	bl	80005f8 <__aeabi_dmul>
 8007990:	ec41 0b10 	vmov	d0, r0, r1
 8007994:	f000 fb34 	bl	8008000 <floor>
 8007998:	4b7a      	ldr	r3, [pc, #488]	; (8007b84 <__kernel_rem_pio2+0x324>)
 800799a:	ec51 0b10 	vmov	r0, r1, d0
 800799e:	2200      	movs	r2, #0
 80079a0:	f7f8 fe2a 	bl	80005f8 <__aeabi_dmul>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	f7f8 fc6c 	bl	8000288 <__aeabi_dsub>
 80079b0:	460f      	mov	r7, r1
 80079b2:	4606      	mov	r6, r0
 80079b4:	f7f9 f8d0 	bl	8000b58 <__aeabi_d2iz>
 80079b8:	9002      	str	r0, [sp, #8]
 80079ba:	f7f8 fdb3 	bl	8000524 <__aeabi_i2d>
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4630      	mov	r0, r6
 80079c4:	4639      	mov	r1, r7
 80079c6:	f7f8 fc5f 	bl	8000288 <__aeabi_dsub>
 80079ca:	f1ba 0f00 	cmp.w	sl, #0
 80079ce:	4606      	mov	r6, r0
 80079d0:	460f      	mov	r7, r1
 80079d2:	dd6d      	ble.n	8007ab0 <__kernel_rem_pio2+0x250>
 80079d4:	1e61      	subs	r1, r4, #1
 80079d6:	ab0c      	add	r3, sp, #48	; 0x30
 80079d8:	9d02      	ldr	r5, [sp, #8]
 80079da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80079de:	f1ca 0018 	rsb	r0, sl, #24
 80079e2:	fa43 f200 	asr.w	r2, r3, r0
 80079e6:	4415      	add	r5, r2
 80079e8:	4082      	lsls	r2, r0
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	aa0c      	add	r2, sp, #48	; 0x30
 80079ee:	9502      	str	r5, [sp, #8]
 80079f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80079f4:	f1ca 0217 	rsb	r2, sl, #23
 80079f8:	fa43 fb02 	asr.w	fp, r3, r2
 80079fc:	f1bb 0f00 	cmp.w	fp, #0
 8007a00:	dd65      	ble.n	8007ace <__kernel_rem_pio2+0x26e>
 8007a02:	9b02      	ldr	r3, [sp, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	3301      	adds	r3, #1
 8007a08:	9302      	str	r3, [sp, #8]
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a10:	4294      	cmp	r4, r2
 8007a12:	f300 809f 	bgt.w	8007b54 <__kernel_rem_pio2+0x2f4>
 8007a16:	f1ba 0f00 	cmp.w	sl, #0
 8007a1a:	dd07      	ble.n	8007a2c <__kernel_rem_pio2+0x1cc>
 8007a1c:	f1ba 0f01 	cmp.w	sl, #1
 8007a20:	f000 80c1 	beq.w	8007ba6 <__kernel_rem_pio2+0x346>
 8007a24:	f1ba 0f02 	cmp.w	sl, #2
 8007a28:	f000 80c7 	beq.w	8007bba <__kernel_rem_pio2+0x35a>
 8007a2c:	f1bb 0f02 	cmp.w	fp, #2
 8007a30:	d14d      	bne.n	8007ace <__kernel_rem_pio2+0x26e>
 8007a32:	4632      	mov	r2, r6
 8007a34:	463b      	mov	r3, r7
 8007a36:	4954      	ldr	r1, [pc, #336]	; (8007b88 <__kernel_rem_pio2+0x328>)
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f7f8 fc25 	bl	8000288 <__aeabi_dsub>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	460f      	mov	r7, r1
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	d043      	beq.n	8007ace <__kernel_rem_pio2+0x26e>
 8007a46:	4650      	mov	r0, sl
 8007a48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007b78 <__kernel_rem_pio2+0x318>
 8007a4c:	f000 fa58 	bl	8007f00 <scalbn>
 8007a50:	4630      	mov	r0, r6
 8007a52:	4639      	mov	r1, r7
 8007a54:	ec53 2b10 	vmov	r2, r3, d0
 8007a58:	f7f8 fc16 	bl	8000288 <__aeabi_dsub>
 8007a5c:	4606      	mov	r6, r0
 8007a5e:	460f      	mov	r7, r1
 8007a60:	e035      	b.n	8007ace <__kernel_rem_pio2+0x26e>
 8007a62:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <__kernel_rem_pio2+0x32c>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f8 fdc5 	bl	80005f8 <__aeabi_dmul>
 8007a6e:	f7f9 f873 	bl	8000b58 <__aeabi_d2iz>
 8007a72:	f7f8 fd57 	bl	8000524 <__aeabi_i2d>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	ec43 2b18 	vmov	d8, r2, r3
 8007a7e:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <__kernel_rem_pio2+0x330>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	f7f8 fdb9 	bl	80005f8 <__aeabi_dmul>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	f7f8 fbfb 	bl	8000288 <__aeabi_dsub>
 8007a92:	f7f9 f861 	bl	8000b58 <__aeabi_d2iz>
 8007a96:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a9a:	f84b 0b04 	str.w	r0, [fp], #4
 8007a9e:	ec51 0b18 	vmov	r0, r1, d8
 8007aa2:	f7f8 fbf3 	bl	800028c <__adddf3>
 8007aa6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007aaa:	4606      	mov	r6, r0
 8007aac:	460f      	mov	r7, r1
 8007aae:	e75b      	b.n	8007968 <__kernel_rem_pio2+0x108>
 8007ab0:	d106      	bne.n	8007ac0 <__kernel_rem_pio2+0x260>
 8007ab2:	1e63      	subs	r3, r4, #1
 8007ab4:	aa0c      	add	r2, sp, #48	; 0x30
 8007ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007abe:	e79d      	b.n	80079fc <__kernel_rem_pio2+0x19c>
 8007ac0:	4b34      	ldr	r3, [pc, #208]	; (8007b94 <__kernel_rem_pio2+0x334>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f7f9 f81e 	bl	8000b04 <__aeabi_dcmpge>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d140      	bne.n	8007b4e <__kernel_rem_pio2+0x2ee>
 8007acc:	4683      	mov	fp, r0
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	4639      	mov	r1, r7
 8007ad6:	f7f8 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f000 80c1 	beq.w	8007c62 <__kernel_rem_pio2+0x402>
 8007ae0:	1e65      	subs	r5, r4, #1
 8007ae2:	462b      	mov	r3, r5
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9900      	ldr	r1, [sp, #0]
 8007ae8:	428b      	cmp	r3, r1
 8007aea:	da6d      	bge.n	8007bc8 <__kernel_rem_pio2+0x368>
 8007aec:	2a00      	cmp	r2, #0
 8007aee:	f000 808a 	beq.w	8007c06 <__kernel_rem_pio2+0x3a6>
 8007af2:	ab0c      	add	r3, sp, #48	; 0x30
 8007af4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007af8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80ae 	beq.w	8007c5e <__kernel_rem_pio2+0x3fe>
 8007b02:	4650      	mov	r0, sl
 8007b04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007b78 <__kernel_rem_pio2+0x318>
 8007b08:	f000 f9fa 	bl	8007f00 <scalbn>
 8007b0c:	1c6b      	adds	r3, r5, #1
 8007b0e:	00da      	lsls	r2, r3, #3
 8007b10:	9205      	str	r2, [sp, #20]
 8007b12:	ec57 6b10 	vmov	r6, r7, d0
 8007b16:	aa70      	add	r2, sp, #448	; 0x1c0
 8007b18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007b8c <__kernel_rem_pio2+0x32c>
 8007b1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007b20:	462c      	mov	r4, r5
 8007b22:	f04f 0800 	mov.w	r8, #0
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	f280 80d4 	bge.w	8007cd4 <__kernel_rem_pio2+0x474>
 8007b2c:	462c      	mov	r4, r5
 8007b2e:	2c00      	cmp	r4, #0
 8007b30:	f2c0 8102 	blt.w	8007d38 <__kernel_rem_pio2+0x4d8>
 8007b34:	4b18      	ldr	r3, [pc, #96]	; (8007b98 <__kernel_rem_pio2+0x338>)
 8007b36:	461e      	mov	r6, r3
 8007b38:	ab70      	add	r3, sp, #448	; 0x1c0
 8007b3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8007b3e:	1b2b      	subs	r3, r5, r4
 8007b40:	f04f 0900 	mov.w	r9, #0
 8007b44:	f04f 0a00 	mov.w	sl, #0
 8007b48:	2700      	movs	r7, #0
 8007b4a:	9306      	str	r3, [sp, #24]
 8007b4c:	e0e6      	b.n	8007d1c <__kernel_rem_pio2+0x4bc>
 8007b4e:	f04f 0b02 	mov.w	fp, #2
 8007b52:	e756      	b.n	8007a02 <__kernel_rem_pio2+0x1a2>
 8007b54:	f8d8 3000 	ldr.w	r3, [r8]
 8007b58:	bb05      	cbnz	r5, 8007b9c <__kernel_rem_pio2+0x33c>
 8007b5a:	b123      	cbz	r3, 8007b66 <__kernel_rem_pio2+0x306>
 8007b5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007b60:	f8c8 3000 	str.w	r3, [r8]
 8007b64:	2301      	movs	r3, #1
 8007b66:	3201      	adds	r2, #1
 8007b68:	f108 0804 	add.w	r8, r8, #4
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	e74f      	b.n	8007a10 <__kernel_rem_pio2+0x1b0>
	...
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	0800b758 	.word	0x0800b758
 8007b84:	40200000 	.word	0x40200000
 8007b88:	3ff00000 	.word	0x3ff00000
 8007b8c:	3e700000 	.word	0x3e700000
 8007b90:	41700000 	.word	0x41700000
 8007b94:	3fe00000 	.word	0x3fe00000
 8007b98:	0800b718 	.word	0x0800b718
 8007b9c:	1acb      	subs	r3, r1, r3
 8007b9e:	f8c8 3000 	str.w	r3, [r8]
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	e7df      	b.n	8007b66 <__kernel_rem_pio2+0x306>
 8007ba6:	1e62      	subs	r2, r4, #1
 8007ba8:	ab0c      	add	r3, sp, #48	; 0x30
 8007baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bb2:	a90c      	add	r1, sp, #48	; 0x30
 8007bb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007bb8:	e738      	b.n	8007a2c <__kernel_rem_pio2+0x1cc>
 8007bba:	1e62      	subs	r2, r4, #1
 8007bbc:	ab0c      	add	r3, sp, #48	; 0x30
 8007bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007bc6:	e7f4      	b.n	8007bb2 <__kernel_rem_pio2+0x352>
 8007bc8:	a90c      	add	r1, sp, #48	; 0x30
 8007bca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	e788      	b.n	8007ae6 <__kernel_rem_pio2+0x286>
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007bda:	2900      	cmp	r1, #0
 8007bdc:	d0fa      	beq.n	8007bd4 <__kernel_rem_pio2+0x374>
 8007bde:	9a08      	ldr	r2, [sp, #32]
 8007be0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007be4:	446a      	add	r2, sp
 8007be6:	3a98      	subs	r2, #152	; 0x98
 8007be8:	9208      	str	r2, [sp, #32]
 8007bea:	9a06      	ldr	r2, [sp, #24]
 8007bec:	a920      	add	r1, sp, #128	; 0x80
 8007bee:	18a2      	adds	r2, r4, r2
 8007bf0:	18e3      	adds	r3, r4, r3
 8007bf2:	f104 0801 	add.w	r8, r4, #1
 8007bf6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	9b02      	ldr	r3, [sp, #8]
 8007bfe:	4543      	cmp	r3, r8
 8007c00:	da04      	bge.n	8007c0c <__kernel_rem_pio2+0x3ac>
 8007c02:	461c      	mov	r4, r3
 8007c04:	e6a2      	b.n	800794c <__kernel_rem_pio2+0xec>
 8007c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e7e4      	b.n	8007bd6 <__kernel_rem_pio2+0x376>
 8007c0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c12:	f7f8 fc87 	bl	8000524 <__aeabi_i2d>
 8007c16:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c1c:	46ab      	mov	fp, r5
 8007c1e:	461c      	mov	r4, r3
 8007c20:	f04f 0900 	mov.w	r9, #0
 8007c24:	2600      	movs	r6, #0
 8007c26:	2700      	movs	r7, #0
 8007c28:	9b05      	ldr	r3, [sp, #20]
 8007c2a:	4599      	cmp	r9, r3
 8007c2c:	dd06      	ble.n	8007c3c <__kernel_rem_pio2+0x3dc>
 8007c2e:	9b08      	ldr	r3, [sp, #32]
 8007c30:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007c34:	f108 0801 	add.w	r8, r8, #1
 8007c38:	9308      	str	r3, [sp, #32]
 8007c3a:	e7df      	b.n	8007bfc <__kernel_rem_pio2+0x39c>
 8007c3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007c40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007c44:	f7f8 fcd8 	bl	80005f8 <__aeabi_dmul>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	4639      	mov	r1, r7
 8007c50:	f7f8 fb1c 	bl	800028c <__adddf3>
 8007c54:	f109 0901 	add.w	r9, r9, #1
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	e7e4      	b.n	8007c28 <__kernel_rem_pio2+0x3c8>
 8007c5e:	3d01      	subs	r5, #1
 8007c60:	e747      	b.n	8007af2 <__kernel_rem_pio2+0x292>
 8007c62:	ec47 6b10 	vmov	d0, r6, r7
 8007c66:	f1ca 0000 	rsb	r0, sl, #0
 8007c6a:	f000 f949 	bl	8007f00 <scalbn>
 8007c6e:	ec57 6b10 	vmov	r6, r7, d0
 8007c72:	4ba0      	ldr	r3, [pc, #640]	; (8007ef4 <__kernel_rem_pio2+0x694>)
 8007c74:	ee10 0a10 	vmov	r0, s0
 8007c78:	2200      	movs	r2, #0
 8007c7a:	4639      	mov	r1, r7
 8007c7c:	f7f8 ff42 	bl	8000b04 <__aeabi_dcmpge>
 8007c80:	b1f8      	cbz	r0, 8007cc2 <__kernel_rem_pio2+0x462>
 8007c82:	4b9d      	ldr	r3, [pc, #628]	; (8007ef8 <__kernel_rem_pio2+0x698>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	4630      	mov	r0, r6
 8007c88:	4639      	mov	r1, r7
 8007c8a:	f7f8 fcb5 	bl	80005f8 <__aeabi_dmul>
 8007c8e:	f7f8 ff63 	bl	8000b58 <__aeabi_d2iz>
 8007c92:	4680      	mov	r8, r0
 8007c94:	f7f8 fc46 	bl	8000524 <__aeabi_i2d>
 8007c98:	4b96      	ldr	r3, [pc, #600]	; (8007ef4 <__kernel_rem_pio2+0x694>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f7f8 fcac 	bl	80005f8 <__aeabi_dmul>
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f7f8 faee 	bl	8000288 <__aeabi_dsub>
 8007cac:	f7f8 ff54 	bl	8000b58 <__aeabi_d2iz>
 8007cb0:	1c65      	adds	r5, r4, #1
 8007cb2:	ab0c      	add	r3, sp, #48	; 0x30
 8007cb4:	f10a 0a18 	add.w	sl, sl, #24
 8007cb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cbc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007cc0:	e71f      	b.n	8007b02 <__kernel_rem_pio2+0x2a2>
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 ff47 	bl	8000b58 <__aeabi_d2iz>
 8007cca:	ab0c      	add	r3, sp, #48	; 0x30
 8007ccc:	4625      	mov	r5, r4
 8007cce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007cd2:	e716      	b.n	8007b02 <__kernel_rem_pio2+0x2a2>
 8007cd4:	ab0c      	add	r3, sp, #48	; 0x30
 8007cd6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007cda:	f7f8 fc23 	bl	8000524 <__aeabi_i2d>
 8007cde:	4632      	mov	r2, r6
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	f7f8 fc89 	bl	80005f8 <__aeabi_dmul>
 8007ce6:	4642      	mov	r2, r8
 8007ce8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007cec:	464b      	mov	r3, r9
 8007cee:	4630      	mov	r0, r6
 8007cf0:	4639      	mov	r1, r7
 8007cf2:	f7f8 fc81 	bl	80005f8 <__aeabi_dmul>
 8007cf6:	3c01      	subs	r4, #1
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	460f      	mov	r7, r1
 8007cfc:	e713      	b.n	8007b26 <__kernel_rem_pio2+0x2c6>
 8007cfe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007d02:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007d06:	f7f8 fc77 	bl	80005f8 <__aeabi_dmul>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4648      	mov	r0, r9
 8007d10:	4651      	mov	r1, sl
 8007d12:	f7f8 fabb 	bl	800028c <__adddf3>
 8007d16:	3701      	adds	r7, #1
 8007d18:	4681      	mov	r9, r0
 8007d1a:	468a      	mov	sl, r1
 8007d1c:	9b00      	ldr	r3, [sp, #0]
 8007d1e:	429f      	cmp	r7, r3
 8007d20:	dc02      	bgt.n	8007d28 <__kernel_rem_pio2+0x4c8>
 8007d22:	9b06      	ldr	r3, [sp, #24]
 8007d24:	429f      	cmp	r7, r3
 8007d26:	ddea      	ble.n	8007cfe <__kernel_rem_pio2+0x49e>
 8007d28:	9a06      	ldr	r2, [sp, #24]
 8007d2a:	ab48      	add	r3, sp, #288	; 0x120
 8007d2c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007d30:	e9c6 9a00 	strd	r9, sl, [r6]
 8007d34:	3c01      	subs	r4, #1
 8007d36:	e6fa      	b.n	8007b2e <__kernel_rem_pio2+0x2ce>
 8007d38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	dc0b      	bgt.n	8007d56 <__kernel_rem_pio2+0x4f6>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	dc39      	bgt.n	8007db6 <__kernel_rem_pio2+0x556>
 8007d42:	d05d      	beq.n	8007e00 <__kernel_rem_pio2+0x5a0>
 8007d44:	9b02      	ldr	r3, [sp, #8]
 8007d46:	f003 0007 	and.w	r0, r3, #7
 8007d4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007d4e:	ecbd 8b02 	vpop	{d8}
 8007d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d1f3      	bne.n	8007d44 <__kernel_rem_pio2+0x4e4>
 8007d5c:	9b05      	ldr	r3, [sp, #20]
 8007d5e:	9500      	str	r5, [sp, #0]
 8007d60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007d64:	eb0d 0403 	add.w	r4, sp, r3
 8007d68:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007d6c:	46a2      	mov	sl, r4
 8007d6e:	9b00      	ldr	r3, [sp, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f1aa 0a08 	sub.w	sl, sl, #8
 8007d76:	dc69      	bgt.n	8007e4c <__kernel_rem_pio2+0x5ec>
 8007d78:	46aa      	mov	sl, r5
 8007d7a:	f1ba 0f01 	cmp.w	sl, #1
 8007d7e:	f1a4 0408 	sub.w	r4, r4, #8
 8007d82:	f300 8083 	bgt.w	8007e8c <__kernel_rem_pio2+0x62c>
 8007d86:	9c05      	ldr	r4, [sp, #20]
 8007d88:	ab48      	add	r3, sp, #288	; 0x120
 8007d8a:	441c      	add	r4, r3
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	2d01      	cmp	r5, #1
 8007d92:	f300 809a 	bgt.w	8007eca <__kernel_rem_pio2+0x66a>
 8007d96:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007d9a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007d9e:	f1bb 0f00 	cmp.w	fp, #0
 8007da2:	f040 8098 	bne.w	8007ed6 <__kernel_rem_pio2+0x676>
 8007da6:	9b04      	ldr	r3, [sp, #16]
 8007da8:	e9c3 7800 	strd	r7, r8, [r3]
 8007dac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007db0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007db4:	e7c6      	b.n	8007d44 <__kernel_rem_pio2+0x4e4>
 8007db6:	9e05      	ldr	r6, [sp, #20]
 8007db8:	ab48      	add	r3, sp, #288	; 0x120
 8007dba:	441e      	add	r6, r3
 8007dbc:	462c      	mov	r4, r5
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	da33      	bge.n	8007e2e <__kernel_rem_pio2+0x5ce>
 8007dc6:	f1bb 0f00 	cmp.w	fp, #0
 8007dca:	d036      	beq.n	8007e3a <__kernel_rem_pio2+0x5da>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007dd2:	9c04      	ldr	r4, [sp, #16]
 8007dd4:	e9c4 2300 	strd	r2, r3, [r4]
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007de0:	f7f8 fa52 	bl	8000288 <__aeabi_dsub>
 8007de4:	ae4a      	add	r6, sp, #296	; 0x128
 8007de6:	2401      	movs	r4, #1
 8007de8:	42a5      	cmp	r5, r4
 8007dea:	da29      	bge.n	8007e40 <__kernel_rem_pio2+0x5e0>
 8007dec:	f1bb 0f00 	cmp.w	fp, #0
 8007df0:	d002      	beq.n	8007df8 <__kernel_rem_pio2+0x598>
 8007df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007df6:	4619      	mov	r1, r3
 8007df8:	9b04      	ldr	r3, [sp, #16]
 8007dfa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007dfe:	e7a1      	b.n	8007d44 <__kernel_rem_pio2+0x4e4>
 8007e00:	9c05      	ldr	r4, [sp, #20]
 8007e02:	ab48      	add	r3, sp, #288	; 0x120
 8007e04:	441c      	add	r4, r3
 8007e06:	2000      	movs	r0, #0
 8007e08:	2100      	movs	r1, #0
 8007e0a:	2d00      	cmp	r5, #0
 8007e0c:	da09      	bge.n	8007e22 <__kernel_rem_pio2+0x5c2>
 8007e0e:	f1bb 0f00 	cmp.w	fp, #0
 8007e12:	d002      	beq.n	8007e1a <__kernel_rem_pio2+0x5ba>
 8007e14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e18:	4619      	mov	r1, r3
 8007e1a:	9b04      	ldr	r3, [sp, #16]
 8007e1c:	e9c3 0100 	strd	r0, r1, [r3]
 8007e20:	e790      	b.n	8007d44 <__kernel_rem_pio2+0x4e4>
 8007e22:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e26:	f7f8 fa31 	bl	800028c <__adddf3>
 8007e2a:	3d01      	subs	r5, #1
 8007e2c:	e7ed      	b.n	8007e0a <__kernel_rem_pio2+0x5aa>
 8007e2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007e32:	f7f8 fa2b 	bl	800028c <__adddf3>
 8007e36:	3c01      	subs	r4, #1
 8007e38:	e7c3      	b.n	8007dc2 <__kernel_rem_pio2+0x562>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	e7c8      	b.n	8007dd2 <__kernel_rem_pio2+0x572>
 8007e40:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007e44:	f7f8 fa22 	bl	800028c <__adddf3>
 8007e48:	3401      	adds	r4, #1
 8007e4a:	e7cd      	b.n	8007de8 <__kernel_rem_pio2+0x588>
 8007e4c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e50:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007e54:	9b00      	ldr	r3, [sp, #0]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	9300      	str	r3, [sp, #0]
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	463b      	mov	r3, r7
 8007e5e:	4640      	mov	r0, r8
 8007e60:	4649      	mov	r1, r9
 8007e62:	f7f8 fa13 	bl	800028c <__adddf3>
 8007e66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	4640      	mov	r0, r8
 8007e70:	4649      	mov	r1, r9
 8007e72:	f7f8 fa09 	bl	8000288 <__aeabi_dsub>
 8007e76:	4632      	mov	r2, r6
 8007e78:	463b      	mov	r3, r7
 8007e7a:	f7f8 fa07 	bl	800028c <__adddf3>
 8007e7e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007e82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e86:	ed8a 7b00 	vstr	d7, [sl]
 8007e8a:	e770      	b.n	8007d6e <__kernel_rem_pio2+0x50e>
 8007e8c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007e90:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007e94:	4640      	mov	r0, r8
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	4649      	mov	r1, r9
 8007e9c:	f7f8 f9f6 	bl	800028c <__adddf3>
 8007ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	4649      	mov	r1, r9
 8007eac:	f7f8 f9ec 	bl	8000288 <__aeabi_dsub>
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	463b      	mov	r3, r7
 8007eb4:	f7f8 f9ea 	bl	800028c <__adddf3>
 8007eb8:	ed9d 7b00 	vldr	d7, [sp]
 8007ebc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ec0:	ed84 7b00 	vstr	d7, [r4]
 8007ec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec8:	e757      	b.n	8007d7a <__kernel_rem_pio2+0x51a>
 8007eca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ece:	f7f8 f9dd 	bl	800028c <__adddf3>
 8007ed2:	3d01      	subs	r5, #1
 8007ed4:	e75c      	b.n	8007d90 <__kernel_rem_pio2+0x530>
 8007ed6:	9b04      	ldr	r3, [sp, #16]
 8007ed8:	9a04      	ldr	r2, [sp, #16]
 8007eda:	601f      	str	r7, [r3, #0]
 8007edc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007ee0:	605c      	str	r4, [r3, #4]
 8007ee2:	609d      	str	r5, [r3, #8]
 8007ee4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007ee8:	60d3      	str	r3, [r2, #12]
 8007eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007eee:	6110      	str	r0, [r2, #16]
 8007ef0:	6153      	str	r3, [r2, #20]
 8007ef2:	e727      	b.n	8007d44 <__kernel_rem_pio2+0x4e4>
 8007ef4:	41700000 	.word	0x41700000
 8007ef8:	3e700000 	.word	0x3e700000
 8007efc:	00000000 	.word	0x00000000

08007f00 <scalbn>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	ec55 4b10 	vmov	r4, r5, d0
 8007f06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	b999      	cbnz	r1, 8007f38 <scalbn+0x38>
 8007f10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007f14:	4323      	orrs	r3, r4
 8007f16:	d03f      	beq.n	8007f98 <scalbn+0x98>
 8007f18:	4b35      	ldr	r3, [pc, #212]	; (8007ff0 <scalbn+0xf0>)
 8007f1a:	4629      	mov	r1, r5
 8007f1c:	ee10 0a10 	vmov	r0, s0
 8007f20:	2200      	movs	r2, #0
 8007f22:	f7f8 fb69 	bl	80005f8 <__aeabi_dmul>
 8007f26:	4b33      	ldr	r3, [pc, #204]	; (8007ff4 <scalbn+0xf4>)
 8007f28:	429e      	cmp	r6, r3
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	460d      	mov	r5, r1
 8007f2e:	da10      	bge.n	8007f52 <scalbn+0x52>
 8007f30:	a327      	add	r3, pc, #156	; (adr r3, 8007fd0 <scalbn+0xd0>)
 8007f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f36:	e01f      	b.n	8007f78 <scalbn+0x78>
 8007f38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007f3c:	4291      	cmp	r1, r2
 8007f3e:	d10c      	bne.n	8007f5a <scalbn+0x5a>
 8007f40:	ee10 2a10 	vmov	r2, s0
 8007f44:	4620      	mov	r0, r4
 8007f46:	4629      	mov	r1, r5
 8007f48:	f7f8 f9a0 	bl	800028c <__adddf3>
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	460d      	mov	r5, r1
 8007f50:	e022      	b.n	8007f98 <scalbn+0x98>
 8007f52:	460b      	mov	r3, r1
 8007f54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007f58:	3936      	subs	r1, #54	; 0x36
 8007f5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007f5e:	4296      	cmp	r6, r2
 8007f60:	dd0d      	ble.n	8007f7e <scalbn+0x7e>
 8007f62:	2d00      	cmp	r5, #0
 8007f64:	a11c      	add	r1, pc, #112	; (adr r1, 8007fd8 <scalbn+0xd8>)
 8007f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f6a:	da02      	bge.n	8007f72 <scalbn+0x72>
 8007f6c:	a11c      	add	r1, pc, #112	; (adr r1, 8007fe0 <scalbn+0xe0>)
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	a319      	add	r3, pc, #100	; (adr r3, 8007fd8 <scalbn+0xd8>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 fb3e 	bl	80005f8 <__aeabi_dmul>
 8007f7c:	e7e6      	b.n	8007f4c <scalbn+0x4c>
 8007f7e:	1872      	adds	r2, r6, r1
 8007f80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f84:	428a      	cmp	r2, r1
 8007f86:	dcec      	bgt.n	8007f62 <scalbn+0x62>
 8007f88:	2a00      	cmp	r2, #0
 8007f8a:	dd08      	ble.n	8007f9e <scalbn+0x9e>
 8007f8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f98:	ec45 4b10 	vmov	d0, r4, r5
 8007f9c:	bd70      	pop	{r4, r5, r6, pc}
 8007f9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007fa2:	da08      	bge.n	8007fb6 <scalbn+0xb6>
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	a10a      	add	r1, pc, #40	; (adr r1, 8007fd0 <scalbn+0xd0>)
 8007fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fac:	dac0      	bge.n	8007f30 <scalbn+0x30>
 8007fae:	a10e      	add	r1, pc, #56	; (adr r1, 8007fe8 <scalbn+0xe8>)
 8007fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fb4:	e7bc      	b.n	8007f30 <scalbn+0x30>
 8007fb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007fba:	3236      	adds	r2, #54	; 0x36
 8007fbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007fc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <scalbn+0xf8>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	e7d5      	b.n	8007f78 <scalbn+0x78>
 8007fcc:	f3af 8000 	nop.w
 8007fd0:	c2f8f359 	.word	0xc2f8f359
 8007fd4:	01a56e1f 	.word	0x01a56e1f
 8007fd8:	8800759c 	.word	0x8800759c
 8007fdc:	7e37e43c 	.word	0x7e37e43c
 8007fe0:	8800759c 	.word	0x8800759c
 8007fe4:	fe37e43c 	.word	0xfe37e43c
 8007fe8:	c2f8f359 	.word	0xc2f8f359
 8007fec:	81a56e1f 	.word	0x81a56e1f
 8007ff0:	43500000 	.word	0x43500000
 8007ff4:	ffff3cb0 	.word	0xffff3cb0
 8007ff8:	3c900000 	.word	0x3c900000
 8007ffc:	00000000 	.word	0x00000000

08008000 <floor>:
 8008000:	ec51 0b10 	vmov	r0, r1, d0
 8008004:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800800c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008010:	2e13      	cmp	r6, #19
 8008012:	ee10 5a10 	vmov	r5, s0
 8008016:	ee10 8a10 	vmov	r8, s0
 800801a:	460c      	mov	r4, r1
 800801c:	dc31      	bgt.n	8008082 <floor+0x82>
 800801e:	2e00      	cmp	r6, #0
 8008020:	da14      	bge.n	800804c <floor+0x4c>
 8008022:	a333      	add	r3, pc, #204	; (adr r3, 80080f0 <floor+0xf0>)
 8008024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008028:	f7f8 f930 	bl	800028c <__adddf3>
 800802c:	2200      	movs	r2, #0
 800802e:	2300      	movs	r3, #0
 8008030:	f7f8 fd72 	bl	8000b18 <__aeabi_dcmpgt>
 8008034:	b138      	cbz	r0, 8008046 <floor+0x46>
 8008036:	2c00      	cmp	r4, #0
 8008038:	da53      	bge.n	80080e2 <floor+0xe2>
 800803a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800803e:	4325      	orrs	r5, r4
 8008040:	d052      	beq.n	80080e8 <floor+0xe8>
 8008042:	4c2d      	ldr	r4, [pc, #180]	; (80080f8 <floor+0xf8>)
 8008044:	2500      	movs	r5, #0
 8008046:	4621      	mov	r1, r4
 8008048:	4628      	mov	r0, r5
 800804a:	e024      	b.n	8008096 <floor+0x96>
 800804c:	4f2b      	ldr	r7, [pc, #172]	; (80080fc <floor+0xfc>)
 800804e:	4137      	asrs	r7, r6
 8008050:	ea01 0307 	and.w	r3, r1, r7
 8008054:	4303      	orrs	r3, r0
 8008056:	d01e      	beq.n	8008096 <floor+0x96>
 8008058:	a325      	add	r3, pc, #148	; (adr r3, 80080f0 <floor+0xf0>)
 800805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805e:	f7f8 f915 	bl	800028c <__adddf3>
 8008062:	2200      	movs	r2, #0
 8008064:	2300      	movs	r3, #0
 8008066:	f7f8 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800806a:	2800      	cmp	r0, #0
 800806c:	d0eb      	beq.n	8008046 <floor+0x46>
 800806e:	2c00      	cmp	r4, #0
 8008070:	bfbe      	ittt	lt
 8008072:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008076:	4133      	asrlt	r3, r6
 8008078:	18e4      	addlt	r4, r4, r3
 800807a:	ea24 0407 	bic.w	r4, r4, r7
 800807e:	2500      	movs	r5, #0
 8008080:	e7e1      	b.n	8008046 <floor+0x46>
 8008082:	2e33      	cmp	r6, #51	; 0x33
 8008084:	dd0b      	ble.n	800809e <floor+0x9e>
 8008086:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800808a:	d104      	bne.n	8008096 <floor+0x96>
 800808c:	ee10 2a10 	vmov	r2, s0
 8008090:	460b      	mov	r3, r1
 8008092:	f7f8 f8fb 	bl	800028c <__adddf3>
 8008096:	ec41 0b10 	vmov	d0, r0, r1
 800809a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80080a2:	f04f 37ff 	mov.w	r7, #4294967295
 80080a6:	40df      	lsrs	r7, r3
 80080a8:	4238      	tst	r0, r7
 80080aa:	d0f4      	beq.n	8008096 <floor+0x96>
 80080ac:	a310      	add	r3, pc, #64	; (adr r3, 80080f0 <floor+0xf0>)
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	f7f8 f8eb 	bl	800028c <__adddf3>
 80080b6:	2200      	movs	r2, #0
 80080b8:	2300      	movs	r3, #0
 80080ba:	f7f8 fd2d 	bl	8000b18 <__aeabi_dcmpgt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	d0c1      	beq.n	8008046 <floor+0x46>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	da0a      	bge.n	80080dc <floor+0xdc>
 80080c6:	2e14      	cmp	r6, #20
 80080c8:	d101      	bne.n	80080ce <floor+0xce>
 80080ca:	3401      	adds	r4, #1
 80080cc:	e006      	b.n	80080dc <floor+0xdc>
 80080ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80080d2:	2301      	movs	r3, #1
 80080d4:	40b3      	lsls	r3, r6
 80080d6:	441d      	add	r5, r3
 80080d8:	45a8      	cmp	r8, r5
 80080da:	d8f6      	bhi.n	80080ca <floor+0xca>
 80080dc:	ea25 0507 	bic.w	r5, r5, r7
 80080e0:	e7b1      	b.n	8008046 <floor+0x46>
 80080e2:	2500      	movs	r5, #0
 80080e4:	462c      	mov	r4, r5
 80080e6:	e7ae      	b.n	8008046 <floor+0x46>
 80080e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80080ec:	e7ab      	b.n	8008046 <floor+0x46>
 80080ee:	bf00      	nop
 80080f0:	8800759c 	.word	0x8800759c
 80080f4:	7e37e43c 	.word	0x7e37e43c
 80080f8:	bff00000 	.word	0xbff00000
 80080fc:	000fffff 	.word	0x000fffff

08008100 <_init>:
 8008100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008102:	bf00      	nop
 8008104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008106:	bc08      	pop	{r3}
 8008108:	469e      	mov	lr, r3
 800810a:	4770      	bx	lr

0800810c <_fini>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	bf00      	nop
 8008110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008112:	bc08      	pop	{r3}
 8008114:	469e      	mov	lr, r3
 8008116:	4770      	bx	lr
