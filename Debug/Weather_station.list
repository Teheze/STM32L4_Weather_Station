
Weather_station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08005590  08005590  00015590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059dc  080059dc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  080059dc  080059dc  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059dc  080059dc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059dc  080059dc  000159dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059e0  080059e0  000159e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080059e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  200001d4  08005bb8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005bb8  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000769f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a38  00000000  00000000  000278e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00029320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068c  00000000  00000000  00029c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026604  00000000  00000000  0002a294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b077  00000000  00000000  00050898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e62b0  00000000  00000000  0005b90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031b8  00000000  00000000  00141bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00144d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005578 	.word	0x08005578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08005578 	.word	0x08005578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a14      	ldr	r2, [pc, #80]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_GPIO_Init+0x9c>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f640 0104 	movw	r1, #2052	; 0x804
 8000c0c:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_GPIO_Init+0xa0>)
 8000c0e:	f000 fe37 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <MX_GPIO_Init+0xa0>)
 8000c1a:	f000 fe31 	bl	8001880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_CS_Pin;
 8000c1e:	f641 0304 	movw	r3, #6148	; 0x1804
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	4619      	mov	r1, r3
 8000c36:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0xa0>)
 8000c38:	f000 fc78 	bl	800152c <HAL_GPIO_Init>

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000400 	.word	0x48000400

08000c4c <lcd_cmd>:
#define ST7735S_GAMCTRP1		0xe0
#define ST7735S_GAMCTRN1		0xe1


static void lcd_cmd(uint8_t cmd)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5c:	480c      	ldr	r0, [pc, #48]	; (8000c90 <lcd_cmd+0x44>)
 8000c5e:	f000 fe0f 	bl	8001880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c68:	4809      	ldr	r0, [pc, #36]	; (8000c90 <lcd_cmd+0x44>)
 8000c6a:	f000 fe09 	bl	8001880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &cmd, 1, HAL_MAX_DELAY);
 8000c6e:	1df9      	adds	r1, r7, #7
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2201      	movs	r2, #1
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <lcd_cmd+0x48>)
 8000c78:	f001 fce9 	bl	800264e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c82:	4803      	ldr	r0, [pc, #12]	; (8000c90 <lcd_cmd+0x44>)
 8000c84:	f000 fdfc 	bl	8001880 <HAL_GPIO_WritePin>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	48000400 	.word	0x48000400
 8000c94:	200001f0 	.word	0x200001f0

08000c98 <lcd_data>:

static void lcd_data(uint8_t data)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <lcd_data+0x44>)
 8000caa:	f000 fde9 	bl	8001880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb4:	4809      	ldr	r0, [pc, #36]	; (8000cdc <lcd_data+0x44>)
 8000cb6:	f000 fde3 	bl	8001880 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8000cba:	1df9      	adds	r1, r7, #7
 8000cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <lcd_data+0x48>)
 8000cc4:	f001 fcc3 	bl	800264e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cce:	4803      	ldr	r0, [pc, #12]	; (8000cdc <lcd_data+0x44>)
 8000cd0:	f000 fdd6 	bl	8001880 <HAL_GPIO_WritePin>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	48000400 	.word	0x48000400
 8000ce0:	200001f0 	.word	0x200001f0

08000ce4 <lcd_send>:

#define CMD(x)			((x) | 0x100)

static void lcd_send(uint16_t value)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000cee:	88fb      	ldrh	r3, [r7, #6]
 8000cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d005      	beq.n	8000d04 <lcd_send+0x20>
		lcd_cmd(value);
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffa5 	bl	8000c4c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000d02:	e004      	b.n	8000d0e <lcd_send+0x2a>
		lcd_data(value);
 8000d04:	88fb      	ldrh	r3, [r7, #6]
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffc5 	bl	8000c98 <lcd_data>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <lcd_init>:
}

static uint16_t frame_buffer[LCD_WIDTH * LCD_HEIGHT];

void lcd_init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  int i;

  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2104      	movs	r1, #4
 8000d22:	4817      	ldr	r0, [pc, #92]	; (8000d80 <lcd_init+0x68>)
 8000d24:	f000 fdac 	bl	8001880 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f000 faf5 	bl	8001318 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	2104      	movs	r1, #4
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <lcd_init+0x68>)
 8000d34:	f000 fda4 	bl	8001880 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d38:	2064      	movs	r0, #100	; 0x64
 8000d3a:	f000 faed 	bl	8001318 <HAL_Delay>

  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	e009      	b.n	8000d58 <lcd_init+0x40>
    lcd_send(init_table[i]);
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <lcd_init+0x6c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffc9 	bl	8000ce4 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b4b      	cmp	r3, #75	; 0x4b
 8000d5c:	d9f2      	bls.n	8000d44 <lcd_init+0x2c>
  }

  HAL_Delay(200);
 8000d5e:	20c8      	movs	r0, #200	; 0xc8
 8000d60:	f000 fada 	bl	8001318 <HAL_Delay>

  lcd_cmd(ST7735S_SLPOUT);
 8000d64:	2011      	movs	r0, #17
 8000d66:	f7ff ff71 	bl	8000c4c <lcd_cmd>
  HAL_Delay(120);
 8000d6a:	2078      	movs	r0, #120	; 0x78
 8000d6c:	f000 fad4 	bl	8001318 <HAL_Delay>

  lcd_cmd(ST7735S_DISPON);
 8000d70:	2029      	movs	r0, #41	; 0x29
 8000d72:	f7ff ff6b 	bl	8000c4c <lcd_cmd>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	48000400 	.word	0x48000400
 8000d84:	08005590 	.word	0x08005590

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f000 fa4f 	bl	800122e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f807 	bl	8000da2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f7ff ff08 	bl	8000ba8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000d98:	f000 f85a 	bl	8000e50 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_init();
 8000d9c:	f7ff ffbc 	bl	8000d18 <lcd_init>
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <main+0x18>

08000da2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b096      	sub	sp, #88	; 0x58
 8000da6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2244      	movs	r2, #68	; 0x44
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fc90 	bl	80036d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000dc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dc8:	f000 fd80 	bl	80018cc <HAL_PWREx_ControlVoltageScaling>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000dd2:	f000 f838 	bl	8000e46 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000de2:	2360      	movs	r3, #96	; 0x60
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000df2:	2328      	movs	r3, #40	; 0x28
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fdb6 	bl	8001978 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e12:	f000 f818 	bl	8000e46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2104      	movs	r1, #4
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f97e 	bl	8002130 <HAL_RCC_ClockConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e3a:	f000 f804 	bl	8000e46 <Error_Handler>
  }
}
 8000e3e:	bf00      	nop
 8000e40:	3758      	adds	r7, #88	; 0x58
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e4a:	b672      	cpsid	i
}
 8000e4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <Error_Handler+0x8>

08000e50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e56:	4a1c      	ldr	r2, [pc, #112]	; (8000ec8 <MX_SPI2_Init+0x78>)
 8000e58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e6a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e6e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e82:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e86:	2210      	movs	r2, #16
 8000e88:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000e9e:	2207      	movs	r2, #7
 8000ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ea2:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_SPI2_Init+0x74>)
 8000eb0:	f001 fb2a 	bl	8002508 <HAL_SPI_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f7ff ffc4 	bl	8000e46 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200001f0 	.word	0x200001f0
 8000ec8:	40003800 	.word	0x40003800

08000ecc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a25      	ldr	r2, [pc, #148]	; (8000f80 <HAL_SPI_MspInit+0xb4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d144      	bne.n	8000f78 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a1e      	ldr	r2, [pc, #120]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0304 	and.w	r3, r3, #4
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a18      	ldr	r2, [pc, #96]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_SPI_MspInit+0xb8>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f36:	2308      	movs	r3, #8
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f46:	2305      	movs	r3, #5
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <HAL_SPI_MspInit+0xbc>)
 8000f52:	f000 faeb 	bl	800152c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f68:	2305      	movs	r3, #5
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <HAL_SPI_MspInit+0xc0>)
 8000f74:	f000 fada 	bl	800152c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40003800 	.word	0x40003800
 8000f84:	40021000 	.word	0x40021000
 8000f88:	48000800 	.word	0x48000800
 8000f8c:	48000400 	.word	0x48000400

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	; (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	4a08      	ldr	r2, [pc, #32]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001024:	f000 f958 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_kill>:

int _kill(int pid, int sig)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001046:	f002 fb99 	bl	800377c <__errno>
 800104a:	4603      	mov	r3, r0
 800104c:	2216      	movs	r2, #22
 800104e:	601a      	str	r2, [r3, #0]
  return -1;
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_exit>:

void _exit (int status)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ffe7 	bl	800103c <_kill>
  while (1) {}    /* Make sure we hang here */
 800106e:	e7fe      	b.n	800106e <_exit+0x12>

08001070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e00a      	b.n	8001098 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001082:	f3af 8000 	nop.w
 8001086:	4601      	mov	r1, r0
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1c5a      	adds	r2, r3, #1
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	b2ca      	uxtb	r2, r1
 8001090:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf0      	blt.n	8001082 <_read+0x12>
  }

  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	60f8      	str	r0, [r7, #12]
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	e009      	b.n	80010d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3301      	adds	r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697a      	ldr	r2, [r7, #20]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	dbf1      	blt.n	80010bc <_write+0x12>
  }
  return len;
 80010d8:	687b      	ldr	r3, [r7, #4]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_close>:

int _close(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800110a:	605a      	str	r2, [r3, #4]
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <_isatty>:

int _isatty(int file)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f002 fafe 	bl	800377c <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20018000 	.word	0x20018000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	20000254 	.word	0x20000254
 80011b4:	200003a8 	.word	0x200003a8

080011b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <SystemInit+0x20>)
 80011be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <SystemInit+0x20>)
 80011c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001214 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e0:	f7ff ffea 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e4:	480c      	ldr	r0, [pc, #48]	; (8001218 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e6:	490d      	ldr	r1, [pc, #52]	; (800121c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e8:	4a0d      	ldr	r2, [pc, #52]	; (8001220 <LoopForever+0xe>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ec:	e002      	b.n	80011f4 <LoopCopyDataInit>

080011ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f2:	3304      	adds	r3, #4

080011f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f8:	d3f9      	bcc.n	80011ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011fc:	4c0a      	ldr	r4, [pc, #40]	; (8001228 <LoopForever+0x16>)
  movs r3, #0
 80011fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001200:	e001      	b.n	8001206 <LoopFillZerobss>

08001202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001204:	3204      	adds	r2, #4

08001206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001208:	d3fb      	bcc.n	8001202 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120a:	f002 fabd 	bl	8003788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120e:	f7ff fdbb 	bl	8000d88 <main>

08001212 <LoopForever>:

LoopForever:
    b LoopForever
 8001212:	e7fe      	b.n	8001212 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001214:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001220:	080059e4 	.word	0x080059e4
  ldr r2, =_sbss
 8001224:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001228:	200003a8 	.word	0x200003a8

0800122c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800122c:	e7fe      	b.n	800122c <ADC1_2_IRQHandler>

0800122e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f943 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	200f      	movs	r0, #15
 8001240:	f000 f80e 	bl	8001260 <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e001      	b.n	8001254 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001250:	f7ff fe9e 	bl	8000f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001254:	79fb      	ldrb	r3, [r7, #7]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d023      	beq.n	80012bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_InitTick+0x70>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_InitTick+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f941 	bl	8001512 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10f      	bne.n	80012b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d809      	bhi.n	80012b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 f919 	bl	80014da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a8:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_InitTick+0x74>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e007      	b.n	80012c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	e001      	b.n	80012c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000004 	.word	0x20000004

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000258 	.word	0x20000258

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000258 	.word	0x20000258

08001318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff ffee 	bl	8001300 <HAL_GetTick>
 8001324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d005      	beq.n	800133e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_Delay+0x44>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4413      	add	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800133e:	bf00      	nop
 8001340:	f7ff ffde 	bl	8001300 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	429a      	cmp	r2, r3
 800134e:	d8f7      	bhi.n	8001340 <HAL_Delay+0x28>
  {
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000008 	.word	0x20000008

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800138c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
         );
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff47 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff5c 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffb0 	bl	8001480 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	e17f      	b.n	800183c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2101      	movs	r1, #1
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8171 	beq.w	8001836 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b01      	cmp	r3, #1
 800155e:	d005      	beq.n	800156c <HAL_GPIO_Init+0x40>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d130      	bne.n	80015ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	2203      	movs	r2, #3
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	fa02 f303 	lsl.w	r3, r2, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a2:	2201      	movs	r2, #1
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	091b      	lsrs	r3, r3, #4
 80015b8:	f003 0201 	and.w	r2, r3, #1
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d118      	bne.n	800160c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4313      	orrs	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	6939      	ldr	r1, [r7, #16]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80ac 	beq.w	8001836 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b5f      	ldr	r3, [pc, #380]	; (800185c <HAL_GPIO_Init+0x330>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	4a5e      	ldr	r2, [pc, #376]	; (800185c <HAL_GPIO_Init+0x330>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	; 0x60
 80016ea:	4b5c      	ldr	r3, [pc, #368]	; (800185c <HAL_GPIO_Init+0x330>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016f6:	4a5a      	ldr	r2, [pc, #360]	; (8001860 <HAL_GPIO_Init+0x334>)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	089b      	lsrs	r3, r3, #2
 80016fc:	3302      	adds	r3, #2
 80016fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	220f      	movs	r2, #15
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001720:	d025      	beq.n	800176e <HAL_GPIO_Init+0x242>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_GPIO_Init+0x338>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x23e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_GPIO_Init+0x33c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x23a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a4d      	ldr	r2, [pc, #308]	; (800186c <HAL_GPIO_Init+0x340>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x236>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a4c      	ldr	r2, [pc, #304]	; (8001870 <HAL_GPIO_Init+0x344>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x232>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4b      	ldr	r2, [pc, #300]	; (8001874 <HAL_GPIO_Init+0x348>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x22e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_GPIO_Init+0x34c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x22a>
 8001752:	2306      	movs	r3, #6
 8001754:	e00c      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001756:	2307      	movs	r3, #7
 8001758:	e00a      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800175a:	2305      	movs	r3, #5
 800175c:	e008      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800175e:	2304      	movs	r3, #4
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001762:	2303      	movs	r3, #3
 8001764:	e004      	b.n	8001770 <HAL_GPIO_Init+0x244>
 8001766:	2302      	movs	r3, #2
 8001768:	e002      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x244>
 800176e:	2300      	movs	r3, #0
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	f002 0203 	and.w	r2, r2, #3
 8001776:	0092      	lsls	r2, r2, #2
 8001778:	4093      	lsls	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001780:	4937      	ldr	r1, [pc, #220]	; (8001860 <HAL_GPIO_Init+0x334>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_GPIO_Init+0x350>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b2:	4a32      	ldr	r2, [pc, #200]	; (800187c <HAL_GPIO_Init+0x350>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <HAL_GPIO_Init+0x350>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017dc:	4a27      	ldr	r2, [pc, #156]	; (800187c <HAL_GPIO_Init+0x350>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <HAL_GPIO_Init+0x350>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001806:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_GPIO_Init+0x350>)
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_GPIO_Init+0x350>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	43db      	mvns	r3, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4013      	ands	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_GPIO_Init+0x350>)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	f47f ae78 	bne.w	800153c <HAL_GPIO_Init+0x10>
  }
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000
 8001860:	40010000 	.word	0x40010000
 8001864:	48000400 	.word	0x48000400
 8001868:	48000800 	.word	0x48000800
 800186c:	48000c00 	.word	0x48000c00
 8001870:	48001000 	.word	0x48001000
 8001874:	48001400 	.word	0x48001400
 8001878:	48001800 	.word	0x48001800
 800187c:	40010400 	.word	0x40010400

08001880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	807b      	strh	r3, [r7, #2]
 800188c:	4613      	mov	r3, r2
 800188e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001890:	787b      	ldrb	r3, [r7, #1]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800189c:	e002      	b.n	80018a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800189e:	887a      	ldrh	r2, [r7, #2]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40007000 	.word	0x40007000

080018cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018da:	d130      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e8:	d038      	beq.n	800195c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018f2:	4a1e      	ldr	r2, [pc, #120]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2232      	movs	r2, #50	; 0x32
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	4a1b      	ldr	r2, [pc, #108]	; (8001974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	0c9b      	lsrs	r3, r3, #18
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001910:	e002      	b.n	8001918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3b01      	subs	r3, #1
 8001916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001918:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001924:	d102      	bne.n	800192c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f2      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d110      	bne.n	800195c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e00f      	b.n	800195e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d007      	beq.n	800195c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001954:	4a05      	ldr	r2, [pc, #20]	; (800196c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40007000 	.word	0x40007000
 8001970:	20000000 	.word	0x20000000
 8001974:	431bde83 	.word	0x431bde83

08001978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e3ca      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800198a:	4b97      	ldr	r3, [pc, #604]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001994:	4b94      	ldr	r3, [pc, #592]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 80e4 	beq.w	8001b74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4a>
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b0c      	cmp	r3, #12
 80019b6:	f040 808b 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	f040 8087 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019c2:	4b89      	ldr	r3, [pc, #548]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x62>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e3a2      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1a      	ldr	r2, [r3, #32]
 80019de:	4b82      	ldr	r3, [pc, #520]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d004      	beq.n	80019f4 <HAL_RCC_OscConfig+0x7c>
 80019ea:	4b7f      	ldr	r3, [pc, #508]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f2:	e005      	b.n	8001a00 <HAL_RCC_OscConfig+0x88>
 80019f4:	4b7c      	ldr	r3, [pc, #496]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d223      	bcs.n	8001a4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fd1d 	bl	8002448 <RCC_SetFlashLatencyFromMSIRange>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e383      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a18:	4b73      	ldr	r3, [pc, #460]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a72      	ldr	r2, [pc, #456]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f043 0308 	orr.w	r3, r3, #8
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b70      	ldr	r3, [pc, #448]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	496d      	ldr	r1, [pc, #436]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	4968      	ldr	r1, [pc, #416]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	604b      	str	r3, [r1, #4]
 8001a4a:	e025      	b.n	8001a98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4c:	4b66      	ldr	r3, [pc, #408]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a65      	ldr	r2, [pc, #404]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6013      	str	r3, [r2, #0]
 8001a58:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4960      	ldr	r1, [pc, #384]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a6a:	4b5f      	ldr	r3, [pc, #380]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	495b      	ldr	r1, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 fcdd 	bl	8002448 <RCC_SetFlashLatencyFromMSIRange>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e343      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a98:	f000 fc4a 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	4950      	ldr	r1, [pc, #320]	; (8001bec <HAL_RCC_OscConfig+0x274>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	f003 031f 	and.w	r3, r3, #31
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	4a4e      	ldr	r2, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x278>)
 8001ab6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ab8:	4b4e      	ldr	r3, [pc, #312]	; (8001bf4 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fbcf 	bl	8001260 <HAL_InitTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d052      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	e327      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d032      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad8:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fc0c 	bl	8001300 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aec:	f7ff fc08 	bl	8001300 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e310      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001afe:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a36      	ldr	r2, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4931      	ldr	r1, [pc, #196]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	021b      	lsls	r3, r3, #8
 8001b36:	492c      	ldr	r1, [pc, #176]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
 8001b3c:	e01a      	b.n	8001b74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fbd9 	bl	8001300 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b52:	f7ff fbd5 	bl	8001300 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e2dd      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x1da>
 8001b70:	e000      	b.n	8001b74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d074      	beq.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x21a>
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	2b0c      	cmp	r3, #12
 8001b8a:	d10e      	bne.n	8001baa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d10b      	bne.n	8001baa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d064      	beq.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d160      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e2ba      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x24a>
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e026      	b.n	8001c10 <HAL_RCC_OscConfig+0x298>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bca:	d115      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x280>
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a02      	ldr	r2, [pc, #8]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e014      	b.n	8001c10 <HAL_RCC_OscConfig+0x298>
 8001be6:	bf00      	nop
 8001be8:	40021000 	.word	0x40021000
 8001bec:	08005628 	.word	0x08005628
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	4ba0      	ldr	r3, [pc, #640]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a9f      	ldr	r2, [pc, #636]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b9d      	ldr	r3, [pc, #628]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a9c      	ldr	r2, [pc, #624]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fb72 	bl	8001300 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fb6e 	bl	8001300 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e276      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	4b92      	ldr	r3, [pc, #584]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x2a8>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb5e 	bl	8001300 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb5a 	bl	8001300 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e262      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x2d0>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d060      	beq.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x310>
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b0c      	cmp	r3, #12
 8001c80:	d119      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d116      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c88:	4b7c      	ldr	r3, [pc, #496]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x328>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e23f      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	061b      	lsls	r3, r3, #24
 8001cae:	4973      	ldr	r1, [pc, #460]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cb4:	e040      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d023      	beq.n	8001d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cca:	f7ff fb19 	bl	8001300 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fb15 	bl	8001300 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e21d      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	495f      	ldr	r1, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
 8001d04:	e018      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d06:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a5c      	ldr	r2, [pc, #368]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7ff faf5 	bl	8001300 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7ff faf1 	bl	8001300 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e1f9      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	4b53      	ldr	r3, [pc, #332]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4c:	4b4b      	ldr	r3, [pc, #300]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d52:	4a4a      	ldr	r2, [pc, #296]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fad0 	bl	8001300 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7ff facc 	bl	8001300 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1d4      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	4b41      	ldr	r3, [pc, #260]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x3ec>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8c:	4a3b      	ldr	r2, [pc, #236]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff fab3 	bl	8001300 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7ff faaf 	bl	8001300 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1b7      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 80a6 	beq.w	8001f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ddc:	4b27      	ldr	r3, [pc, #156]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	4a26      	ldr	r2, [pc, #152]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df4:	2301      	movs	r3, #1
 8001df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d118      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e10:	f7ff fa76 	bl	8001300 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e18:	f7ff fa72 	bl	8001300 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e17a      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_RCC_OscConfig+0x508>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d108      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d8>
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e4e:	e029      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d115      	bne.n	8001e84 <HAL_RCC_OscConfig+0x50c>
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a07      	ldr	r2, [pc, #28]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6e:	4a03      	ldr	r2, [pc, #12]	; (8001e7c <HAL_RCC_OscConfig+0x504>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
 8001e84:	4b9c      	ldr	r3, [pc, #624]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8a:	4a9b      	ldr	r2, [pc, #620]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e94:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	4a97      	ldr	r2, [pc, #604]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d016      	beq.n	8001eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eac:	f7ff fa28 	bl	8001300 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7ff fa24 	bl	8001300 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e12a      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0ed      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x53c>
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa11 	bl	8001300 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7ff fa0d 	bl	8001300 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e113      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef8:	4b7f      	ldr	r3, [pc, #508]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ed      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f06:	7ffb      	ldrb	r3, [r7, #31]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d105      	bne.n	8001f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0c:	4b7a      	ldr	r3, [pc, #488]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a79      	ldr	r2, [pc, #484]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80fe 	beq.w	800211e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	f040 80d0 	bne.w	80020cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f2c:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0203 	and.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d130      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d127      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d11f      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f6c:	2a07      	cmp	r2, #7
 8001f6e:	bf14      	ite	ne
 8001f70:	2201      	movne	r2, #1
 8001f72:	2200      	moveq	r2, #0
 8001f74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d06e      	beq.n	8002080 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	2b0c      	cmp	r3, #12
 8001fa6:	d069      	beq.n	800207c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0ad      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fd0:	f7ff f996 	bl	8001300 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f992 	bl	8001300 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e09a      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff6:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4b40      	ldr	r3, [pc, #256]	; (80020fc <HAL_RCC_OscConfig+0x784>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002006:	3a01      	subs	r2, #1
 8002008:	0112      	lsls	r2, r2, #4
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002010:	0212      	lsls	r2, r2, #8
 8002012:	4311      	orrs	r1, r2
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002018:	0852      	lsrs	r2, r2, #1
 800201a:	3a01      	subs	r2, #1
 800201c:	0552      	lsls	r2, r2, #21
 800201e:	4311      	orrs	r1, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002024:	0852      	lsrs	r2, r2, #1
 8002026:	3a01      	subs	r2, #1
 8002028:	0652      	lsls	r2, r2, #25
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002030:	0912      	lsrs	r2, r2, #4
 8002032:	0452      	lsls	r2, r2, #17
 8002034:	430a      	orrs	r2, r1
 8002036:	4930      	ldr	r1, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8002038:	4313      	orrs	r3, r2
 800203a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a2d      	ldr	r2, [pc, #180]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a2a      	ldr	r2, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002054:	f7ff f954 	bl	8001300 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205c:	f7ff f950 	bl	8001300 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e058      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206e:	4b22      	ldr	r3, [pc, #136]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800207a:	e050      	b.n	800211e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e04f      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002080:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d148      	bne.n	800211e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800208c:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 8002092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 800209e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020a4:	f7ff f92c 	bl	8001300 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ac:	f7ff f928 	bl	8001300 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e030      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0x734>
 80020ca:	e028      	b.n	800211e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b0c      	cmp	r3, #12
 80020d0:	d023      	beq.n	800211a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_RCC_OscConfig+0x780>)
 80020d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020de:	f7ff f90f 	bl	8001300 <HAL_GetTick>
 80020e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e4:	e00c      	b.n	8002100 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7ff f90b 	bl	8001300 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d905      	bls.n	8002100 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
 80020f8:	40021000 	.word	0x40021000
 80020fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_OscConfig+0x7b0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1ec      	bne.n	80020e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_OscConfig+0x7b0>)
 800210e:	68da      	ldr	r2, [r3, #12]
 8002110:	4905      	ldr	r1, [pc, #20]	; (8002128 <HAL_RCC_OscConfig+0x7b0>)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_OscConfig+0x7b4>)
 8002114:	4013      	ands	r3, r2
 8002116:	60cb      	str	r3, [r1, #12]
 8002118:	e001      	b.n	800211e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3720      	adds	r7, #32
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	feeefffc 	.word	0xfeeefffc

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0e7      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d910      	bls.n	8002174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4970      	ldr	r1, [pc, #448]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b6e      	ldr	r3, [pc, #440]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e0cf      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800218c:	429a      	cmp	r2, r3
 800218e:	d908      	bls.n	80021a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002190:	4b63      	ldr	r3, [pc, #396]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4960      	ldr	r1, [pc, #384]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d04c      	beq.n	8002248 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d107      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b6:	4b5a      	ldr	r3, [pc, #360]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d121      	bne.n	8002206 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0a6      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d115      	bne.n	8002206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e09a      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d107      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021e6:	4b4e      	ldr	r3, [pc, #312]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e08e      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f6:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e086      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 0203 	bic.w	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4943      	ldr	r1, [pc, #268]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002218:	f7ff f872 	bl	8001300 <HAL_GetTick>
 800221c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800221e:	e00a      	b.n	8002236 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7ff f86e 	bl	8001300 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f241 3288 	movw	r2, #5000	; 0x1388
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e06e      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002236:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 020c 	and.w	r2, r3, #12
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	429a      	cmp	r2, r3
 8002246:	d1eb      	bne.n	8002220 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d010      	beq.n	8002276 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002260:	429a      	cmp	r2, r3
 8002262:	d208      	bcs.n	8002276 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	492b      	ldr	r1, [pc, #172]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d210      	bcs.n	80022a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002284:	4b25      	ldr	r3, [pc, #148]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 0207 	bic.w	r2, r3, #7
 800228c:	4923      	ldr	r1, [pc, #140]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_ClockConfig+0x1ec>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e036      	b.n	8002314 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b2:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4918      	ldr	r1, [pc, #96]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d009      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4910      	ldr	r1, [pc, #64]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022e4:	f000 f824 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022e8:	4602      	mov	r2, r0
 80022ea:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	490b      	ldr	r1, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x1f4>)
 80022f6:	5ccb      	ldrb	r3, [r1, r3]
 80022f8:	f003 031f 	and.w	r3, r3, #31
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	4a09      	ldr	r2, [pc, #36]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 8002302:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002304:	4b09      	ldr	r3, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1fc>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7fe ffa9 	bl	8001260 <HAL_InitTick>
 800230e:	4603      	mov	r3, r0
 8002310:	72fb      	strb	r3, [r7, #11]

  return status;
 8002312:	7afb      	ldrb	r3, [r7, #11]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40022000 	.word	0x40022000
 8002320:	40021000 	.word	0x40021000
 8002324:	08005628 	.word	0x08005628
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
 800233a:	2300      	movs	r3, #0
 800233c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002348:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d121      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d11e      	bne.n	80023a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e005      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002380:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800238c:	4a2b      	ldr	r2, [pc, #172]	; (800243c <HAL_RCC_GetSysClockFreq+0x10c>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10d      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023a0:	e00a      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d102      	bne.n	80023ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023a8:	4b25      	ldr	r3, [pc, #148]	; (8002440 <HAL_RCC_GetSysClockFreq+0x110>)
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	e004      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_RCC_GetSysClockFreq+0x114>)
 80023b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d134      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d003      	beq.n	80023d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d003      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0xac>
 80023d4:	e005      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d8:	617b      	str	r3, [r7, #20]
      break;
 80023da:	e005      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023dc:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_RCC_GetSysClockFreq+0x114>)
 80023de:	617b      	str	r3, [r7, #20]
      break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	617b      	str	r3, [r7, #20]
      break;
 80023e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	fb03 f202 	mul.w	r2, r3, r2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	fbb2 f3f3 	udiv	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_GetSysClockFreq+0x108>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	0e5b      	lsrs	r3, r3, #25
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	3301      	adds	r3, #1
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	fbb2 f3f3 	udiv	r3, r2, r3
 8002426:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002428:	69bb      	ldr	r3, [r7, #24]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40021000 	.word	0x40021000
 800243c:	08005638 	.word	0x08005638
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002454:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002460:	f7ff fa26 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
 8002464:	6178      	str	r0, [r7, #20]
 8002466:	e014      	b.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	4a24      	ldr	r2, [pc, #144]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6593      	str	r3, [r2, #88]	; 0x58
 8002474:	4b22      	ldr	r3, [pc, #136]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002480:	f7ff fa16 	bl	80018b0 <HAL_PWREx_GetVoltageRange>
 8002484:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002490:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002498:	d10b      	bne.n	80024b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b80      	cmp	r3, #128	; 0x80
 800249e:	d919      	bls.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2ba0      	cmp	r3, #160	; 0xa0
 80024a4:	d902      	bls.n	80024ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024a6:	2302      	movs	r3, #2
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e013      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ac:	2301      	movs	r3, #1
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	e010      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b80      	cmp	r3, #128	; 0x80
 80024b6:	d902      	bls.n	80024be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024b8:	2303      	movs	r3, #3
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	e00a      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d102      	bne.n	80024ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c4:	2302      	movs	r3, #2
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	e004      	b.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b70      	cmp	r3, #112	; 0x70
 80024ce:	d101      	bne.n	80024d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024d0:	2301      	movs	r3, #1
 80024d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 0207 	bic.w	r2, r3, #7
 80024dc:	4909      	ldr	r1, [pc, #36]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d001      	beq.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000
 8002504:	40022000 	.word	0x40022000

08002508 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e095      	b.n	8002646 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b00      	cmp	r3, #0
 8002520:	d108      	bne.n	8002534 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800252a:	d009      	beq.n	8002540 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
 8002532:	e005      	b.n	8002540 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe fcb6 	bl	8000ecc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002576:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002580:	d902      	bls.n	8002588 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	e002      	b.n	800258e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800258c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002596:	d007      	beq.n	80025a8 <HAL_SPI_Init+0xa0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	0c1b      	lsrs	r3, r3, #16
 8002604:	f003 0204 	and.w	r2, r3, #4
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002624:	ea42 0103 	orr.w	r1, r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b088      	sub	sp, #32
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_SPI_Transmit+0x22>
 800266c:	2302      	movs	r3, #2
 800266e:	e15f      	b.n	8002930 <HAL_SPI_Transmit+0x2e2>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002678:	f7fe fe42 	bl	8001300 <HAL_GetTick>
 800267c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d002      	beq.n	8002694 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002692:	e148      	b.n	8002926 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_SPI_Transmit+0x52>
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d102      	bne.n	80026a6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80026a4:	e13f      	b.n	8002926 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2203      	movs	r2, #3
 80026aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	88fa      	ldrh	r2, [r7, #6]
 80026be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	88fa      	ldrh	r2, [r7, #6]
 80026c4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026f0:	d10f      	bne.n	8002712 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002700:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002710:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271c:	2b40      	cmp	r3, #64	; 0x40
 800271e:	d007      	beq.n	8002730 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800272e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002738:	d94f      	bls.n	80027da <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <HAL_SPI_Transmit+0xfa>
 8002742:	8afb      	ldrh	r3, [r7, #22]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d142      	bne.n	80027ce <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	1c9a      	adds	r2, r3, #2
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800276c:	e02f      	b.n	80027ce <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d112      	bne.n	80027a2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	881a      	ldrh	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	1c9a      	adds	r2, r3, #2
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027a0:	e015      	b.n	80027ce <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a2:	f7fe fdad 	bl	8001300 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d803      	bhi.n	80027ba <HAL_SPI_Transmit+0x16c>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d102      	bne.n	80027c0 <HAL_SPI_Transmit+0x172>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d106      	bne.n	80027ce <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80027cc:	e0ab      	b.n	8002926 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ca      	bne.n	800276e <HAL_SPI_Transmit+0x120>
 80027d8:	e080      	b.n	80028dc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Transmit+0x19a>
 80027e2:	8afb      	ldrh	r3, [r7, #22]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d174      	bne.n	80028d2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d912      	bls.n	8002818 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f6:	881a      	ldrh	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	1c9a      	adds	r2, r3, #2
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b02      	subs	r3, #2
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002816:	e05c      	b.n	80028d2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	330c      	adds	r3, #12
 8002822:	7812      	ldrb	r2, [r2, #0]
 8002824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800283e:	e048      	b.n	80028d2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b02      	cmp	r3, #2
 800284c:	d12b      	bne.n	80028a6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b01      	cmp	r3, #1
 8002856:	d912      	bls.n	800287e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	1c9a      	adds	r2, r3, #2
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b02      	subs	r3, #2
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800287c:	e029      	b.n	80028d2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	7812      	ldrb	r2, [r2, #0]
 800288a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028a4:	e015      	b.n	80028d2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028a6:	f7fe fd2b 	bl	8001300 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d803      	bhi.n	80028be <HAL_SPI_Transmit+0x270>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d102      	bne.n	80028c4 <HAL_SPI_Transmit+0x276>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80028d0:	e029      	b.n	8002926 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1b1      	bne.n	8002840 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f947 	bl	8002b74 <SPI_EndRxTxTransaction>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d002      	beq.n	80028f2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10a      	bne.n	8002910 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e003      	b.n	8002926 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800292e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002948:	f7fe fcda 	bl	8001300 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002958:	f7fe fcd2 	bl	8001300 <HAL_GetTick>
 800295c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800295e:	4b39      	ldr	r3, [pc, #228]	; (8002a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	015b      	lsls	r3, r3, #5
 8002964:	0d1b      	lsrs	r3, r3, #20
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	fb02 f303 	mul.w	r3, r2, r3
 800296c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800296e:	e054      	b.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002976:	d050      	beq.n	8002a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002978:	f7fe fcc2 	bl	8001300 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	69fa      	ldr	r2, [r7, #28]
 8002984:	429a      	cmp	r2, r3
 8002986:	d902      	bls.n	800298e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13d      	bne.n	8002a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800299c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029a6:	d111      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029b0:	d004      	beq.n	80029bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d107      	bne.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d4:	d10f      	bne.n	80029f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e017      	b.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	4013      	ands	r3, r2
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf0c      	ite	eq
 8002a2a:	2301      	moveq	r3, #1
 8002a2c:	2300      	movne	r3, #0
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d19b      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000000 	.word	0x20000000

08002a48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002a5a:	f7fe fc51 	bl	8001300 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002a6a:	f7fe fc49 	bl	8001300 <HAL_GetTick>
 8002a6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a78:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00da      	lsls	r2, r3, #3
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	0d1b      	lsrs	r3, r3, #20
 8002a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a90:	e060      	b.n	8002b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002a98:	d107      	bne.n	8002aaa <SPI_WaitFifoStateUntilTimeout+0x62>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d050      	beq.n	8002b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ab2:	f7fe fc25 	bl	8001300 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d902      	bls.n	8002ac8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d13d      	bne.n	8002b44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ad6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ae0:	d111      	bne.n	8002b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aea:	d004      	beq.n	8002af6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af4:	d107      	bne.n	8002b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	d10f      	bne.n	8002b30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e010      	b.n	8002b66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d196      	bne.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af02      	add	r7, sp, #8
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff ff5b 	bl	8002a48 <SPI_WaitFifoStateUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e027      	b.n	8002bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2180      	movs	r1, #128	; 0x80
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff fec0 	bl	8002938 <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e014      	b.n	8002bf8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f7ff ff34 	bl	8002a48 <SPI_WaitFifoStateUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bea:	f043 0220 	orr.w	r2, r3, #32
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e000      	b.n	8002bf8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <__cvt>:
 8002c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c04:	ec55 4b10 	vmov	r4, r5, d0
 8002c08:	2d00      	cmp	r5, #0
 8002c0a:	460e      	mov	r6, r1
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	462b      	mov	r3, r5
 8002c10:	bfbb      	ittet	lt
 8002c12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002c16:	461d      	movlt	r5, r3
 8002c18:	2300      	movge	r3, #0
 8002c1a:	232d      	movlt	r3, #45	; 0x2d
 8002c1c:	700b      	strb	r3, [r1, #0]
 8002c1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002c24:	4691      	mov	r9, r2
 8002c26:	f023 0820 	bic.w	r8, r3, #32
 8002c2a:	bfbc      	itt	lt
 8002c2c:	4622      	movlt	r2, r4
 8002c2e:	4614      	movlt	r4, r2
 8002c30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c34:	d005      	beq.n	8002c42 <__cvt+0x42>
 8002c36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002c3a:	d100      	bne.n	8002c3e <__cvt+0x3e>
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	2102      	movs	r1, #2
 8002c40:	e000      	b.n	8002c44 <__cvt+0x44>
 8002c42:	2103      	movs	r1, #3
 8002c44:	ab03      	add	r3, sp, #12
 8002c46:	9301      	str	r3, [sp, #4]
 8002c48:	ab02      	add	r3, sp, #8
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	ec45 4b10 	vmov	d0, r4, r5
 8002c50:	4653      	mov	r3, sl
 8002c52:	4632      	mov	r2, r6
 8002c54:	f000 fe48 	bl	80038e8 <_dtoa_r>
 8002c58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	d102      	bne.n	8002c66 <__cvt+0x66>
 8002c60:	f019 0f01 	tst.w	r9, #1
 8002c64:	d022      	beq.n	8002cac <__cvt+0xac>
 8002c66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002c6a:	eb07 0906 	add.w	r9, r7, r6
 8002c6e:	d110      	bne.n	8002c92 <__cvt+0x92>
 8002c70:	783b      	ldrb	r3, [r7, #0]
 8002c72:	2b30      	cmp	r3, #48	; 0x30
 8002c74:	d10a      	bne.n	8002c8c <__cvt+0x8c>
 8002c76:	2200      	movs	r2, #0
 8002c78:	2300      	movs	r3, #0
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	4629      	mov	r1, r5
 8002c7e:	f7fd ff23 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c82:	b918      	cbnz	r0, 8002c8c <__cvt+0x8c>
 8002c84:	f1c6 0601 	rsb	r6, r6, #1
 8002c88:	f8ca 6000 	str.w	r6, [sl]
 8002c8c:	f8da 3000 	ldr.w	r3, [sl]
 8002c90:	4499      	add	r9, r3
 8002c92:	2200      	movs	r2, #0
 8002c94:	2300      	movs	r3, #0
 8002c96:	4620      	mov	r0, r4
 8002c98:	4629      	mov	r1, r5
 8002c9a:	f7fd ff15 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c9e:	b108      	cbz	r0, 8002ca4 <__cvt+0xa4>
 8002ca0:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ca4:	2230      	movs	r2, #48	; 0x30
 8002ca6:	9b03      	ldr	r3, [sp, #12]
 8002ca8:	454b      	cmp	r3, r9
 8002caa:	d307      	bcc.n	8002cbc <__cvt+0xbc>
 8002cac:	9b03      	ldr	r3, [sp, #12]
 8002cae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002cb0:	1bdb      	subs	r3, r3, r7
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	b004      	add	sp, #16
 8002cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cbc:	1c59      	adds	r1, r3, #1
 8002cbe:	9103      	str	r1, [sp, #12]
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e7f0      	b.n	8002ca6 <__cvt+0xa6>

08002cc4 <__exponent>:
 8002cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	bfb8      	it	lt
 8002ccc:	4249      	neglt	r1, r1
 8002cce:	f803 2b02 	strb.w	r2, [r3], #2
 8002cd2:	bfb4      	ite	lt
 8002cd4:	222d      	movlt	r2, #45	; 0x2d
 8002cd6:	222b      	movge	r2, #43	; 0x2b
 8002cd8:	2909      	cmp	r1, #9
 8002cda:	7042      	strb	r2, [r0, #1]
 8002cdc:	dd2a      	ble.n	8002d34 <__exponent+0x70>
 8002cde:	f10d 0207 	add.w	r2, sp, #7
 8002ce2:	4617      	mov	r7, r2
 8002ce4:	260a      	movs	r6, #10
 8002ce6:	4694      	mov	ip, r2
 8002ce8:	fb91 f5f6 	sdiv	r5, r1, r6
 8002cec:	fb06 1415 	mls	r4, r6, r5, r1
 8002cf0:	3430      	adds	r4, #48	; 0x30
 8002cf2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	2c63      	cmp	r4, #99	; 0x63
 8002cfa:	f102 32ff 	add.w	r2, r2, #4294967295
 8002cfe:	4629      	mov	r1, r5
 8002d00:	dcf1      	bgt.n	8002ce6 <__exponent+0x22>
 8002d02:	3130      	adds	r1, #48	; 0x30
 8002d04:	f1ac 0402 	sub.w	r4, ip, #2
 8002d08:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002d0c:	1c41      	adds	r1, r0, #1
 8002d0e:	4622      	mov	r2, r4
 8002d10:	42ba      	cmp	r2, r7
 8002d12:	d30a      	bcc.n	8002d2a <__exponent+0x66>
 8002d14:	f10d 0209 	add.w	r2, sp, #9
 8002d18:	eba2 020c 	sub.w	r2, r2, ip
 8002d1c:	42bc      	cmp	r4, r7
 8002d1e:	bf88      	it	hi
 8002d20:	2200      	movhi	r2, #0
 8002d22:	4413      	add	r3, r2
 8002d24:	1a18      	subs	r0, r3, r0
 8002d26:	b003      	add	sp, #12
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d2a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002d2e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002d32:	e7ed      	b.n	8002d10 <__exponent+0x4c>
 8002d34:	2330      	movs	r3, #48	; 0x30
 8002d36:	3130      	adds	r1, #48	; 0x30
 8002d38:	7083      	strb	r3, [r0, #2]
 8002d3a:	70c1      	strb	r1, [r0, #3]
 8002d3c:	1d03      	adds	r3, r0, #4
 8002d3e:	e7f1      	b.n	8002d24 <__exponent+0x60>

08002d40 <_printf_float>:
 8002d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d44:	ed2d 8b02 	vpush	{d8}
 8002d48:	b08d      	sub	sp, #52	; 0x34
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002d50:	4616      	mov	r6, r2
 8002d52:	461f      	mov	r7, r3
 8002d54:	4605      	mov	r5, r0
 8002d56:	f000 fcc7 	bl	80036e8 <_localeconv_r>
 8002d5a:	f8d0 a000 	ldr.w	sl, [r0]
 8002d5e:	4650      	mov	r0, sl
 8002d60:	f7fd fa86 	bl	8000270 <strlen>
 8002d64:	2300      	movs	r3, #0
 8002d66:	930a      	str	r3, [sp, #40]	; 0x28
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	9305      	str	r3, [sp, #20]
 8002d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002d74:	3307      	adds	r3, #7
 8002d76:	f023 0307 	bic.w	r3, r3, #7
 8002d7a:	f103 0208 	add.w	r2, r3, #8
 8002d7e:	f8c8 2000 	str.w	r2, [r8]
 8002d82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002d8a:	9307      	str	r3, [sp, #28]
 8002d8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d90:	ee08 0a10 	vmov	s16, r0
 8002d94:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002d98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002d9c:	4b9e      	ldr	r3, [pc, #632]	; (8003018 <_printf_float+0x2d8>)
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	f7fd fec3 	bl	8000b2c <__aeabi_dcmpun>
 8002da6:	bb88      	cbnz	r0, 8002e0c <_printf_float+0xcc>
 8002da8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002dac:	4b9a      	ldr	r3, [pc, #616]	; (8003018 <_printf_float+0x2d8>)
 8002dae:	f04f 32ff 	mov.w	r2, #4294967295
 8002db2:	f7fd fe9d 	bl	8000af0 <__aeabi_dcmple>
 8002db6:	bb48      	cbnz	r0, 8002e0c <_printf_float+0xcc>
 8002db8:	2200      	movs	r2, #0
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4640      	mov	r0, r8
 8002dbe:	4649      	mov	r1, r9
 8002dc0:	f7fd fe8c 	bl	8000adc <__aeabi_dcmplt>
 8002dc4:	b110      	cbz	r0, 8002dcc <_printf_float+0x8c>
 8002dc6:	232d      	movs	r3, #45	; 0x2d
 8002dc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dcc:	4a93      	ldr	r2, [pc, #588]	; (800301c <_printf_float+0x2dc>)
 8002dce:	4b94      	ldr	r3, [pc, #592]	; (8003020 <_printf_float+0x2e0>)
 8002dd0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002dd4:	bf94      	ite	ls
 8002dd6:	4690      	movls	r8, r2
 8002dd8:	4698      	movhi	r8, r3
 8002dda:	2303      	movs	r3, #3
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	9b05      	ldr	r3, [sp, #20]
 8002de0:	f023 0304 	bic.w	r3, r3, #4
 8002de4:	6023      	str	r3, [r4, #0]
 8002de6:	f04f 0900 	mov.w	r9, #0
 8002dea:	9700      	str	r7, [sp, #0]
 8002dec:	4633      	mov	r3, r6
 8002dee:	aa0b      	add	r2, sp, #44	; 0x2c
 8002df0:	4621      	mov	r1, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 f9da 	bl	80031ac <_printf_common>
 8002df8:	3001      	adds	r0, #1
 8002dfa:	f040 8090 	bne.w	8002f1e <_printf_float+0x1de>
 8002dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8002e02:	b00d      	add	sp, #52	; 0x34
 8002e04:	ecbd 8b02 	vpop	{d8}
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e0c:	4642      	mov	r2, r8
 8002e0e:	464b      	mov	r3, r9
 8002e10:	4640      	mov	r0, r8
 8002e12:	4649      	mov	r1, r9
 8002e14:	f7fd fe8a 	bl	8000b2c <__aeabi_dcmpun>
 8002e18:	b140      	cbz	r0, 8002e2c <_printf_float+0xec>
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bfbc      	itt	lt
 8002e20:	232d      	movlt	r3, #45	; 0x2d
 8002e22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002e26:	4a7f      	ldr	r2, [pc, #508]	; (8003024 <_printf_float+0x2e4>)
 8002e28:	4b7f      	ldr	r3, [pc, #508]	; (8003028 <_printf_float+0x2e8>)
 8002e2a:	e7d1      	b.n	8002dd0 <_printf_float+0x90>
 8002e2c:	6863      	ldr	r3, [r4, #4]
 8002e2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002e32:	9206      	str	r2, [sp, #24]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	d13f      	bne.n	8002eb8 <_printf_float+0x178>
 8002e38:	2306      	movs	r3, #6
 8002e3a:	6063      	str	r3, [r4, #4]
 8002e3c:	9b05      	ldr	r3, [sp, #20]
 8002e3e:	6861      	ldr	r1, [r4, #4]
 8002e40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e44:	2300      	movs	r3, #0
 8002e46:	9303      	str	r3, [sp, #12]
 8002e48:	ab0a      	add	r3, sp, #40	; 0x28
 8002e4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002e4e:	ab09      	add	r3, sp, #36	; 0x24
 8002e50:	ec49 8b10 	vmov	d0, r8, r9
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	6022      	str	r2, [r4, #0]
 8002e58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f7ff fecf 	bl	8002c00 <__cvt>
 8002e62:	9b06      	ldr	r3, [sp, #24]
 8002e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e66:	2b47      	cmp	r3, #71	; 0x47
 8002e68:	4680      	mov	r8, r0
 8002e6a:	d108      	bne.n	8002e7e <_printf_float+0x13e>
 8002e6c:	1cc8      	adds	r0, r1, #3
 8002e6e:	db02      	blt.n	8002e76 <_printf_float+0x136>
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	4299      	cmp	r1, r3
 8002e74:	dd41      	ble.n	8002efa <_printf_float+0x1ba>
 8002e76:	f1ab 0302 	sub.w	r3, fp, #2
 8002e7a:	fa5f fb83 	uxtb.w	fp, r3
 8002e7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002e82:	d820      	bhi.n	8002ec6 <_printf_float+0x186>
 8002e84:	3901      	subs	r1, #1
 8002e86:	465a      	mov	r2, fp
 8002e88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8002e8e:	f7ff ff19 	bl	8002cc4 <__exponent>
 8002e92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e94:	1813      	adds	r3, r2, r0
 8002e96:	2a01      	cmp	r2, #1
 8002e98:	4681      	mov	r9, r0
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	dc02      	bgt.n	8002ea4 <_printf_float+0x164>
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	07d2      	lsls	r2, r2, #31
 8002ea2:	d501      	bpl.n	8002ea8 <_printf_float+0x168>
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	6123      	str	r3, [r4, #16]
 8002ea8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d09c      	beq.n	8002dea <_printf_float+0xaa>
 8002eb0:	232d      	movs	r3, #45	; 0x2d
 8002eb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002eb6:	e798      	b.n	8002dea <_printf_float+0xaa>
 8002eb8:	9a06      	ldr	r2, [sp, #24]
 8002eba:	2a47      	cmp	r2, #71	; 0x47
 8002ebc:	d1be      	bne.n	8002e3c <_printf_float+0xfc>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1bc      	bne.n	8002e3c <_printf_float+0xfc>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e7b9      	b.n	8002e3a <_printf_float+0xfa>
 8002ec6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002eca:	d118      	bne.n	8002efe <_printf_float+0x1be>
 8002ecc:	2900      	cmp	r1, #0
 8002ece:	6863      	ldr	r3, [r4, #4]
 8002ed0:	dd0b      	ble.n	8002eea <_printf_float+0x1aa>
 8002ed2:	6121      	str	r1, [r4, #16]
 8002ed4:	b913      	cbnz	r3, 8002edc <_printf_float+0x19c>
 8002ed6:	6822      	ldr	r2, [r4, #0]
 8002ed8:	07d0      	lsls	r0, r2, #31
 8002eda:	d502      	bpl.n	8002ee2 <_printf_float+0x1a2>
 8002edc:	3301      	adds	r3, #1
 8002ede:	440b      	add	r3, r1
 8002ee0:	6123      	str	r3, [r4, #16]
 8002ee2:	65a1      	str	r1, [r4, #88]	; 0x58
 8002ee4:	f04f 0900 	mov.w	r9, #0
 8002ee8:	e7de      	b.n	8002ea8 <_printf_float+0x168>
 8002eea:	b913      	cbnz	r3, 8002ef2 <_printf_float+0x1b2>
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	07d2      	lsls	r2, r2, #31
 8002ef0:	d501      	bpl.n	8002ef6 <_printf_float+0x1b6>
 8002ef2:	3302      	adds	r3, #2
 8002ef4:	e7f4      	b.n	8002ee0 <_printf_float+0x1a0>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e7f2      	b.n	8002ee0 <_printf_float+0x1a0>
 8002efa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f00:	4299      	cmp	r1, r3
 8002f02:	db05      	blt.n	8002f10 <_printf_float+0x1d0>
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	6121      	str	r1, [r4, #16]
 8002f08:	07d8      	lsls	r0, r3, #31
 8002f0a:	d5ea      	bpl.n	8002ee2 <_printf_float+0x1a2>
 8002f0c:	1c4b      	adds	r3, r1, #1
 8002f0e:	e7e7      	b.n	8002ee0 <_printf_float+0x1a0>
 8002f10:	2900      	cmp	r1, #0
 8002f12:	bfd4      	ite	le
 8002f14:	f1c1 0202 	rsble	r2, r1, #2
 8002f18:	2201      	movgt	r2, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	e7e0      	b.n	8002ee0 <_printf_float+0x1a0>
 8002f1e:	6823      	ldr	r3, [r4, #0]
 8002f20:	055a      	lsls	r2, r3, #21
 8002f22:	d407      	bmi.n	8002f34 <_printf_float+0x1f4>
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	4642      	mov	r2, r8
 8002f28:	4631      	mov	r1, r6
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	47b8      	blx	r7
 8002f2e:	3001      	adds	r0, #1
 8002f30:	d12c      	bne.n	8002f8c <_printf_float+0x24c>
 8002f32:	e764      	b.n	8002dfe <_printf_float+0xbe>
 8002f34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002f38:	f240 80e0 	bls.w	80030fc <_printf_float+0x3bc>
 8002f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f40:	2200      	movs	r2, #0
 8002f42:	2300      	movs	r3, #0
 8002f44:	f7fd fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d034      	beq.n	8002fb6 <_printf_float+0x276>
 8002f4c:	4a37      	ldr	r2, [pc, #220]	; (800302c <_printf_float+0x2ec>)
 8002f4e:	2301      	movs	r3, #1
 8002f50:	4631      	mov	r1, r6
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b8      	blx	r7
 8002f56:	3001      	adds	r0, #1
 8002f58:	f43f af51 	beq.w	8002dfe <_printf_float+0xbe>
 8002f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002f60:	429a      	cmp	r2, r3
 8002f62:	db02      	blt.n	8002f6a <_printf_float+0x22a>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	07d8      	lsls	r0, r3, #31
 8002f68:	d510      	bpl.n	8002f8c <_printf_float+0x24c>
 8002f6a:	ee18 3a10 	vmov	r3, s16
 8002f6e:	4652      	mov	r2, sl
 8002f70:	4631      	mov	r1, r6
 8002f72:	4628      	mov	r0, r5
 8002f74:	47b8      	blx	r7
 8002f76:	3001      	adds	r0, #1
 8002f78:	f43f af41 	beq.w	8002dfe <_printf_float+0xbe>
 8002f7c:	f04f 0800 	mov.w	r8, #0
 8002f80:	f104 091a 	add.w	r9, r4, #26
 8002f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f86:	3b01      	subs	r3, #1
 8002f88:	4543      	cmp	r3, r8
 8002f8a:	dc09      	bgt.n	8002fa0 <_printf_float+0x260>
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	079b      	lsls	r3, r3, #30
 8002f90:	f100 8107 	bmi.w	80031a2 <_printf_float+0x462>
 8002f94:	68e0      	ldr	r0, [r4, #12]
 8002f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f98:	4298      	cmp	r0, r3
 8002f9a:	bfb8      	it	lt
 8002f9c:	4618      	movlt	r0, r3
 8002f9e:	e730      	b.n	8002e02 <_printf_float+0xc2>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	464a      	mov	r2, r9
 8002fa4:	4631      	mov	r1, r6
 8002fa6:	4628      	mov	r0, r5
 8002fa8:	47b8      	blx	r7
 8002faa:	3001      	adds	r0, #1
 8002fac:	f43f af27 	beq.w	8002dfe <_printf_float+0xbe>
 8002fb0:	f108 0801 	add.w	r8, r8, #1
 8002fb4:	e7e6      	b.n	8002f84 <_printf_float+0x244>
 8002fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dc39      	bgt.n	8003030 <_printf_float+0x2f0>
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <_printf_float+0x2ec>)
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	47b8      	blx	r7
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	f43f af19 	beq.w	8002dfe <_printf_float+0xbe>
 8002fcc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d102      	bne.n	8002fda <_printf_float+0x29a>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	07d9      	lsls	r1, r3, #31
 8002fd8:	d5d8      	bpl.n	8002f8c <_printf_float+0x24c>
 8002fda:	ee18 3a10 	vmov	r3, s16
 8002fde:	4652      	mov	r2, sl
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	47b8      	blx	r7
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	f43f af09 	beq.w	8002dfe <_printf_float+0xbe>
 8002fec:	f04f 0900 	mov.w	r9, #0
 8002ff0:	f104 0a1a 	add.w	sl, r4, #26
 8002ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ff6:	425b      	negs	r3, r3
 8002ff8:	454b      	cmp	r3, r9
 8002ffa:	dc01      	bgt.n	8003000 <_printf_float+0x2c0>
 8002ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ffe:	e792      	b.n	8002f26 <_printf_float+0x1e6>
 8003000:	2301      	movs	r3, #1
 8003002:	4652      	mov	r2, sl
 8003004:	4631      	mov	r1, r6
 8003006:	4628      	mov	r0, r5
 8003008:	47b8      	blx	r7
 800300a:	3001      	adds	r0, #1
 800300c:	f43f aef7 	beq.w	8002dfe <_printf_float+0xbe>
 8003010:	f109 0901 	add.w	r9, r9, #1
 8003014:	e7ee      	b.n	8002ff4 <_printf_float+0x2b4>
 8003016:	bf00      	nop
 8003018:	7fefffff 	.word	0x7fefffff
 800301c:	08005668 	.word	0x08005668
 8003020:	0800566c 	.word	0x0800566c
 8003024:	08005670 	.word	0x08005670
 8003028:	08005674 	.word	0x08005674
 800302c:	08005678 	.word	0x08005678
 8003030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003034:	429a      	cmp	r2, r3
 8003036:	bfa8      	it	ge
 8003038:	461a      	movge	r2, r3
 800303a:	2a00      	cmp	r2, #0
 800303c:	4691      	mov	r9, r2
 800303e:	dc37      	bgt.n	80030b0 <_printf_float+0x370>
 8003040:	f04f 0b00 	mov.w	fp, #0
 8003044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003048:	f104 021a 	add.w	r2, r4, #26
 800304c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800304e:	9305      	str	r3, [sp, #20]
 8003050:	eba3 0309 	sub.w	r3, r3, r9
 8003054:	455b      	cmp	r3, fp
 8003056:	dc33      	bgt.n	80030c0 <_printf_float+0x380>
 8003058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800305c:	429a      	cmp	r2, r3
 800305e:	db3b      	blt.n	80030d8 <_printf_float+0x398>
 8003060:	6823      	ldr	r3, [r4, #0]
 8003062:	07da      	lsls	r2, r3, #31
 8003064:	d438      	bmi.n	80030d8 <_printf_float+0x398>
 8003066:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800306a:	eba2 0903 	sub.w	r9, r2, r3
 800306e:	9b05      	ldr	r3, [sp, #20]
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	4591      	cmp	r9, r2
 8003074:	bfa8      	it	ge
 8003076:	4691      	movge	r9, r2
 8003078:	f1b9 0f00 	cmp.w	r9, #0
 800307c:	dc35      	bgt.n	80030ea <_printf_float+0x3aa>
 800307e:	f04f 0800 	mov.w	r8, #0
 8003082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003086:	f104 0a1a 	add.w	sl, r4, #26
 800308a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	eba3 0309 	sub.w	r3, r3, r9
 8003094:	4543      	cmp	r3, r8
 8003096:	f77f af79 	ble.w	8002f8c <_printf_float+0x24c>
 800309a:	2301      	movs	r3, #1
 800309c:	4652      	mov	r2, sl
 800309e:	4631      	mov	r1, r6
 80030a0:	4628      	mov	r0, r5
 80030a2:	47b8      	blx	r7
 80030a4:	3001      	adds	r0, #1
 80030a6:	f43f aeaa 	beq.w	8002dfe <_printf_float+0xbe>
 80030aa:	f108 0801 	add.w	r8, r8, #1
 80030ae:	e7ec      	b.n	800308a <_printf_float+0x34a>
 80030b0:	4613      	mov	r3, r2
 80030b2:	4631      	mov	r1, r6
 80030b4:	4642      	mov	r2, r8
 80030b6:	4628      	mov	r0, r5
 80030b8:	47b8      	blx	r7
 80030ba:	3001      	adds	r0, #1
 80030bc:	d1c0      	bne.n	8003040 <_printf_float+0x300>
 80030be:	e69e      	b.n	8002dfe <_printf_float+0xbe>
 80030c0:	2301      	movs	r3, #1
 80030c2:	4631      	mov	r1, r6
 80030c4:	4628      	mov	r0, r5
 80030c6:	9205      	str	r2, [sp, #20]
 80030c8:	47b8      	blx	r7
 80030ca:	3001      	adds	r0, #1
 80030cc:	f43f ae97 	beq.w	8002dfe <_printf_float+0xbe>
 80030d0:	9a05      	ldr	r2, [sp, #20]
 80030d2:	f10b 0b01 	add.w	fp, fp, #1
 80030d6:	e7b9      	b.n	800304c <_printf_float+0x30c>
 80030d8:	ee18 3a10 	vmov	r3, s16
 80030dc:	4652      	mov	r2, sl
 80030de:	4631      	mov	r1, r6
 80030e0:	4628      	mov	r0, r5
 80030e2:	47b8      	blx	r7
 80030e4:	3001      	adds	r0, #1
 80030e6:	d1be      	bne.n	8003066 <_printf_float+0x326>
 80030e8:	e689      	b.n	8002dfe <_printf_float+0xbe>
 80030ea:	9a05      	ldr	r2, [sp, #20]
 80030ec:	464b      	mov	r3, r9
 80030ee:	4442      	add	r2, r8
 80030f0:	4631      	mov	r1, r6
 80030f2:	4628      	mov	r0, r5
 80030f4:	47b8      	blx	r7
 80030f6:	3001      	adds	r0, #1
 80030f8:	d1c1      	bne.n	800307e <_printf_float+0x33e>
 80030fa:	e680      	b.n	8002dfe <_printf_float+0xbe>
 80030fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030fe:	2a01      	cmp	r2, #1
 8003100:	dc01      	bgt.n	8003106 <_printf_float+0x3c6>
 8003102:	07db      	lsls	r3, r3, #31
 8003104:	d53a      	bpl.n	800317c <_printf_float+0x43c>
 8003106:	2301      	movs	r3, #1
 8003108:	4642      	mov	r2, r8
 800310a:	4631      	mov	r1, r6
 800310c:	4628      	mov	r0, r5
 800310e:	47b8      	blx	r7
 8003110:	3001      	adds	r0, #1
 8003112:	f43f ae74 	beq.w	8002dfe <_printf_float+0xbe>
 8003116:	ee18 3a10 	vmov	r3, s16
 800311a:	4652      	mov	r2, sl
 800311c:	4631      	mov	r1, r6
 800311e:	4628      	mov	r0, r5
 8003120:	47b8      	blx	r7
 8003122:	3001      	adds	r0, #1
 8003124:	f43f ae6b 	beq.w	8002dfe <_printf_float+0xbe>
 8003128:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800312c:	2200      	movs	r2, #0
 800312e:	2300      	movs	r3, #0
 8003130:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003134:	f7fd fcc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003138:	b9d8      	cbnz	r0, 8003172 <_printf_float+0x432>
 800313a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800313e:	f108 0201 	add.w	r2, r8, #1
 8003142:	4631      	mov	r1, r6
 8003144:	4628      	mov	r0, r5
 8003146:	47b8      	blx	r7
 8003148:	3001      	adds	r0, #1
 800314a:	d10e      	bne.n	800316a <_printf_float+0x42a>
 800314c:	e657      	b.n	8002dfe <_printf_float+0xbe>
 800314e:	2301      	movs	r3, #1
 8003150:	4652      	mov	r2, sl
 8003152:	4631      	mov	r1, r6
 8003154:	4628      	mov	r0, r5
 8003156:	47b8      	blx	r7
 8003158:	3001      	adds	r0, #1
 800315a:	f43f ae50 	beq.w	8002dfe <_printf_float+0xbe>
 800315e:	f108 0801 	add.w	r8, r8, #1
 8003162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003164:	3b01      	subs	r3, #1
 8003166:	4543      	cmp	r3, r8
 8003168:	dcf1      	bgt.n	800314e <_printf_float+0x40e>
 800316a:	464b      	mov	r3, r9
 800316c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003170:	e6da      	b.n	8002f28 <_printf_float+0x1e8>
 8003172:	f04f 0800 	mov.w	r8, #0
 8003176:	f104 0a1a 	add.w	sl, r4, #26
 800317a:	e7f2      	b.n	8003162 <_printf_float+0x422>
 800317c:	2301      	movs	r3, #1
 800317e:	4642      	mov	r2, r8
 8003180:	e7df      	b.n	8003142 <_printf_float+0x402>
 8003182:	2301      	movs	r3, #1
 8003184:	464a      	mov	r2, r9
 8003186:	4631      	mov	r1, r6
 8003188:	4628      	mov	r0, r5
 800318a:	47b8      	blx	r7
 800318c:	3001      	adds	r0, #1
 800318e:	f43f ae36 	beq.w	8002dfe <_printf_float+0xbe>
 8003192:	f108 0801 	add.w	r8, r8, #1
 8003196:	68e3      	ldr	r3, [r4, #12]
 8003198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800319a:	1a5b      	subs	r3, r3, r1
 800319c:	4543      	cmp	r3, r8
 800319e:	dcf0      	bgt.n	8003182 <_printf_float+0x442>
 80031a0:	e6f8      	b.n	8002f94 <_printf_float+0x254>
 80031a2:	f04f 0800 	mov.w	r8, #0
 80031a6:	f104 0919 	add.w	r9, r4, #25
 80031aa:	e7f4      	b.n	8003196 <_printf_float+0x456>

080031ac <_printf_common>:
 80031ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b0:	4616      	mov	r6, r2
 80031b2:	4699      	mov	r9, r3
 80031b4:	688a      	ldr	r2, [r1, #8]
 80031b6:	690b      	ldr	r3, [r1, #16]
 80031b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80031bc:	4293      	cmp	r3, r2
 80031be:	bfb8      	it	lt
 80031c0:	4613      	movlt	r3, r2
 80031c2:	6033      	str	r3, [r6, #0]
 80031c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80031c8:	4607      	mov	r7, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	b10a      	cbz	r2, 80031d2 <_printf_common+0x26>
 80031ce:	3301      	adds	r3, #1
 80031d0:	6033      	str	r3, [r6, #0]
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	0699      	lsls	r1, r3, #26
 80031d6:	bf42      	ittt	mi
 80031d8:	6833      	ldrmi	r3, [r6, #0]
 80031da:	3302      	addmi	r3, #2
 80031dc:	6033      	strmi	r3, [r6, #0]
 80031de:	6825      	ldr	r5, [r4, #0]
 80031e0:	f015 0506 	ands.w	r5, r5, #6
 80031e4:	d106      	bne.n	80031f4 <_printf_common+0x48>
 80031e6:	f104 0a19 	add.w	sl, r4, #25
 80031ea:	68e3      	ldr	r3, [r4, #12]
 80031ec:	6832      	ldr	r2, [r6, #0]
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	42ab      	cmp	r3, r5
 80031f2:	dc26      	bgt.n	8003242 <_printf_common+0x96>
 80031f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031f8:	1e13      	subs	r3, r2, #0
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	bf18      	it	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	0692      	lsls	r2, r2, #26
 8003202:	d42b      	bmi.n	800325c <_printf_common+0xb0>
 8003204:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003208:	4649      	mov	r1, r9
 800320a:	4638      	mov	r0, r7
 800320c:	47c0      	blx	r8
 800320e:	3001      	adds	r0, #1
 8003210:	d01e      	beq.n	8003250 <_printf_common+0xa4>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	6922      	ldr	r2, [r4, #16]
 8003216:	f003 0306 	and.w	r3, r3, #6
 800321a:	2b04      	cmp	r3, #4
 800321c:	bf02      	ittt	eq
 800321e:	68e5      	ldreq	r5, [r4, #12]
 8003220:	6833      	ldreq	r3, [r6, #0]
 8003222:	1aed      	subeq	r5, r5, r3
 8003224:	68a3      	ldr	r3, [r4, #8]
 8003226:	bf0c      	ite	eq
 8003228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800322c:	2500      	movne	r5, #0
 800322e:	4293      	cmp	r3, r2
 8003230:	bfc4      	itt	gt
 8003232:	1a9b      	subgt	r3, r3, r2
 8003234:	18ed      	addgt	r5, r5, r3
 8003236:	2600      	movs	r6, #0
 8003238:	341a      	adds	r4, #26
 800323a:	42b5      	cmp	r5, r6
 800323c:	d11a      	bne.n	8003274 <_printf_common+0xc8>
 800323e:	2000      	movs	r0, #0
 8003240:	e008      	b.n	8003254 <_printf_common+0xa8>
 8003242:	2301      	movs	r3, #1
 8003244:	4652      	mov	r2, sl
 8003246:	4649      	mov	r1, r9
 8003248:	4638      	mov	r0, r7
 800324a:	47c0      	blx	r8
 800324c:	3001      	adds	r0, #1
 800324e:	d103      	bne.n	8003258 <_printf_common+0xac>
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003258:	3501      	adds	r5, #1
 800325a:	e7c6      	b.n	80031ea <_printf_common+0x3e>
 800325c:	18e1      	adds	r1, r4, r3
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	2030      	movs	r0, #48	; 0x30
 8003262:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003266:	4422      	add	r2, r4
 8003268:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800326c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003270:	3302      	adds	r3, #2
 8003272:	e7c7      	b.n	8003204 <_printf_common+0x58>
 8003274:	2301      	movs	r3, #1
 8003276:	4622      	mov	r2, r4
 8003278:	4649      	mov	r1, r9
 800327a:	4638      	mov	r0, r7
 800327c:	47c0      	blx	r8
 800327e:	3001      	adds	r0, #1
 8003280:	d0e6      	beq.n	8003250 <_printf_common+0xa4>
 8003282:	3601      	adds	r6, #1
 8003284:	e7d9      	b.n	800323a <_printf_common+0x8e>
	...

08003288 <_printf_i>:
 8003288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800328c:	7e0f      	ldrb	r7, [r1, #24]
 800328e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003290:	2f78      	cmp	r7, #120	; 0x78
 8003292:	4691      	mov	r9, r2
 8003294:	4680      	mov	r8, r0
 8003296:	460c      	mov	r4, r1
 8003298:	469a      	mov	sl, r3
 800329a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800329e:	d807      	bhi.n	80032b0 <_printf_i+0x28>
 80032a0:	2f62      	cmp	r7, #98	; 0x62
 80032a2:	d80a      	bhi.n	80032ba <_printf_i+0x32>
 80032a4:	2f00      	cmp	r7, #0
 80032a6:	f000 80d4 	beq.w	8003452 <_printf_i+0x1ca>
 80032aa:	2f58      	cmp	r7, #88	; 0x58
 80032ac:	f000 80c0 	beq.w	8003430 <_printf_i+0x1a8>
 80032b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032b8:	e03a      	b.n	8003330 <_printf_i+0xa8>
 80032ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032be:	2b15      	cmp	r3, #21
 80032c0:	d8f6      	bhi.n	80032b0 <_printf_i+0x28>
 80032c2:	a101      	add	r1, pc, #4	; (adr r1, 80032c8 <_printf_i+0x40>)
 80032c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80032c8:	08003321 	.word	0x08003321
 80032cc:	08003335 	.word	0x08003335
 80032d0:	080032b1 	.word	0x080032b1
 80032d4:	080032b1 	.word	0x080032b1
 80032d8:	080032b1 	.word	0x080032b1
 80032dc:	080032b1 	.word	0x080032b1
 80032e0:	08003335 	.word	0x08003335
 80032e4:	080032b1 	.word	0x080032b1
 80032e8:	080032b1 	.word	0x080032b1
 80032ec:	080032b1 	.word	0x080032b1
 80032f0:	080032b1 	.word	0x080032b1
 80032f4:	08003439 	.word	0x08003439
 80032f8:	08003361 	.word	0x08003361
 80032fc:	080033f3 	.word	0x080033f3
 8003300:	080032b1 	.word	0x080032b1
 8003304:	080032b1 	.word	0x080032b1
 8003308:	0800345b 	.word	0x0800345b
 800330c:	080032b1 	.word	0x080032b1
 8003310:	08003361 	.word	0x08003361
 8003314:	080032b1 	.word	0x080032b1
 8003318:	080032b1 	.word	0x080032b1
 800331c:	080033fb 	.word	0x080033fb
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	1d1a      	adds	r2, r3, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	602a      	str	r2, [r5, #0]
 8003328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800332c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003330:	2301      	movs	r3, #1
 8003332:	e09f      	b.n	8003474 <_printf_i+0x1ec>
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	682b      	ldr	r3, [r5, #0]
 8003338:	0607      	lsls	r7, r0, #24
 800333a:	f103 0104 	add.w	r1, r3, #4
 800333e:	6029      	str	r1, [r5, #0]
 8003340:	d501      	bpl.n	8003346 <_printf_i+0xbe>
 8003342:	681e      	ldr	r6, [r3, #0]
 8003344:	e003      	b.n	800334e <_printf_i+0xc6>
 8003346:	0646      	lsls	r6, r0, #25
 8003348:	d5fb      	bpl.n	8003342 <_printf_i+0xba>
 800334a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800334e:	2e00      	cmp	r6, #0
 8003350:	da03      	bge.n	800335a <_printf_i+0xd2>
 8003352:	232d      	movs	r3, #45	; 0x2d
 8003354:	4276      	negs	r6, r6
 8003356:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800335a:	485a      	ldr	r0, [pc, #360]	; (80034c4 <_printf_i+0x23c>)
 800335c:	230a      	movs	r3, #10
 800335e:	e012      	b.n	8003386 <_printf_i+0xfe>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	6820      	ldr	r0, [r4, #0]
 8003364:	1d19      	adds	r1, r3, #4
 8003366:	6029      	str	r1, [r5, #0]
 8003368:	0605      	lsls	r5, r0, #24
 800336a:	d501      	bpl.n	8003370 <_printf_i+0xe8>
 800336c:	681e      	ldr	r6, [r3, #0]
 800336e:	e002      	b.n	8003376 <_printf_i+0xee>
 8003370:	0641      	lsls	r1, r0, #25
 8003372:	d5fb      	bpl.n	800336c <_printf_i+0xe4>
 8003374:	881e      	ldrh	r6, [r3, #0]
 8003376:	4853      	ldr	r0, [pc, #332]	; (80034c4 <_printf_i+0x23c>)
 8003378:	2f6f      	cmp	r7, #111	; 0x6f
 800337a:	bf0c      	ite	eq
 800337c:	2308      	moveq	r3, #8
 800337e:	230a      	movne	r3, #10
 8003380:	2100      	movs	r1, #0
 8003382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003386:	6865      	ldr	r5, [r4, #4]
 8003388:	60a5      	str	r5, [r4, #8]
 800338a:	2d00      	cmp	r5, #0
 800338c:	bfa2      	ittt	ge
 800338e:	6821      	ldrge	r1, [r4, #0]
 8003390:	f021 0104 	bicge.w	r1, r1, #4
 8003394:	6021      	strge	r1, [r4, #0]
 8003396:	b90e      	cbnz	r6, 800339c <_printf_i+0x114>
 8003398:	2d00      	cmp	r5, #0
 800339a:	d04b      	beq.n	8003434 <_printf_i+0x1ac>
 800339c:	4615      	mov	r5, r2
 800339e:	fbb6 f1f3 	udiv	r1, r6, r3
 80033a2:	fb03 6711 	mls	r7, r3, r1, r6
 80033a6:	5dc7      	ldrb	r7, [r0, r7]
 80033a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033ac:	4637      	mov	r7, r6
 80033ae:	42bb      	cmp	r3, r7
 80033b0:	460e      	mov	r6, r1
 80033b2:	d9f4      	bls.n	800339e <_printf_i+0x116>
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10b      	bne.n	80033d0 <_printf_i+0x148>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	07de      	lsls	r6, r3, #31
 80033bc:	d508      	bpl.n	80033d0 <_printf_i+0x148>
 80033be:	6923      	ldr	r3, [r4, #16]
 80033c0:	6861      	ldr	r1, [r4, #4]
 80033c2:	4299      	cmp	r1, r3
 80033c4:	bfde      	ittt	le
 80033c6:	2330      	movle	r3, #48	; 0x30
 80033c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80033cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80033d0:	1b52      	subs	r2, r2, r5
 80033d2:	6122      	str	r2, [r4, #16]
 80033d4:	f8cd a000 	str.w	sl, [sp]
 80033d8:	464b      	mov	r3, r9
 80033da:	aa03      	add	r2, sp, #12
 80033dc:	4621      	mov	r1, r4
 80033de:	4640      	mov	r0, r8
 80033e0:	f7ff fee4 	bl	80031ac <_printf_common>
 80033e4:	3001      	adds	r0, #1
 80033e6:	d14a      	bne.n	800347e <_printf_i+0x1f6>
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	b004      	add	sp, #16
 80033ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	4833      	ldr	r0, [pc, #204]	; (80034c8 <_printf_i+0x240>)
 80033fc:	2778      	movs	r7, #120	; 0x78
 80033fe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	6829      	ldr	r1, [r5, #0]
 8003406:	061f      	lsls	r7, r3, #24
 8003408:	f851 6b04 	ldr.w	r6, [r1], #4
 800340c:	d402      	bmi.n	8003414 <_printf_i+0x18c>
 800340e:	065f      	lsls	r7, r3, #25
 8003410:	bf48      	it	mi
 8003412:	b2b6      	uxthmi	r6, r6
 8003414:	07df      	lsls	r7, r3, #31
 8003416:	bf48      	it	mi
 8003418:	f043 0320 	orrmi.w	r3, r3, #32
 800341c:	6029      	str	r1, [r5, #0]
 800341e:	bf48      	it	mi
 8003420:	6023      	strmi	r3, [r4, #0]
 8003422:	b91e      	cbnz	r6, 800342c <_printf_i+0x1a4>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	f023 0320 	bic.w	r3, r3, #32
 800342a:	6023      	str	r3, [r4, #0]
 800342c:	2310      	movs	r3, #16
 800342e:	e7a7      	b.n	8003380 <_printf_i+0xf8>
 8003430:	4824      	ldr	r0, [pc, #144]	; (80034c4 <_printf_i+0x23c>)
 8003432:	e7e4      	b.n	80033fe <_printf_i+0x176>
 8003434:	4615      	mov	r5, r2
 8003436:	e7bd      	b.n	80033b4 <_printf_i+0x12c>
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	6826      	ldr	r6, [r4, #0]
 800343c:	6961      	ldr	r1, [r4, #20]
 800343e:	1d18      	adds	r0, r3, #4
 8003440:	6028      	str	r0, [r5, #0]
 8003442:	0635      	lsls	r5, r6, #24
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	d501      	bpl.n	800344c <_printf_i+0x1c4>
 8003448:	6019      	str	r1, [r3, #0]
 800344a:	e002      	b.n	8003452 <_printf_i+0x1ca>
 800344c:	0670      	lsls	r0, r6, #25
 800344e:	d5fb      	bpl.n	8003448 <_printf_i+0x1c0>
 8003450:	8019      	strh	r1, [r3, #0]
 8003452:	2300      	movs	r3, #0
 8003454:	6123      	str	r3, [r4, #16]
 8003456:	4615      	mov	r5, r2
 8003458:	e7bc      	b.n	80033d4 <_printf_i+0x14c>
 800345a:	682b      	ldr	r3, [r5, #0]
 800345c:	1d1a      	adds	r2, r3, #4
 800345e:	602a      	str	r2, [r5, #0]
 8003460:	681d      	ldr	r5, [r3, #0]
 8003462:	6862      	ldr	r2, [r4, #4]
 8003464:	2100      	movs	r1, #0
 8003466:	4628      	mov	r0, r5
 8003468:	f7fc feb2 	bl	80001d0 <memchr>
 800346c:	b108      	cbz	r0, 8003472 <_printf_i+0x1ea>
 800346e:	1b40      	subs	r0, r0, r5
 8003470:	6060      	str	r0, [r4, #4]
 8003472:	6863      	ldr	r3, [r4, #4]
 8003474:	6123      	str	r3, [r4, #16]
 8003476:	2300      	movs	r3, #0
 8003478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800347c:	e7aa      	b.n	80033d4 <_printf_i+0x14c>
 800347e:	6923      	ldr	r3, [r4, #16]
 8003480:	462a      	mov	r2, r5
 8003482:	4649      	mov	r1, r9
 8003484:	4640      	mov	r0, r8
 8003486:	47d0      	blx	sl
 8003488:	3001      	adds	r0, #1
 800348a:	d0ad      	beq.n	80033e8 <_printf_i+0x160>
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	079b      	lsls	r3, r3, #30
 8003490:	d413      	bmi.n	80034ba <_printf_i+0x232>
 8003492:	68e0      	ldr	r0, [r4, #12]
 8003494:	9b03      	ldr	r3, [sp, #12]
 8003496:	4298      	cmp	r0, r3
 8003498:	bfb8      	it	lt
 800349a:	4618      	movlt	r0, r3
 800349c:	e7a6      	b.n	80033ec <_printf_i+0x164>
 800349e:	2301      	movs	r3, #1
 80034a0:	4632      	mov	r2, r6
 80034a2:	4649      	mov	r1, r9
 80034a4:	4640      	mov	r0, r8
 80034a6:	47d0      	blx	sl
 80034a8:	3001      	adds	r0, #1
 80034aa:	d09d      	beq.n	80033e8 <_printf_i+0x160>
 80034ac:	3501      	adds	r5, #1
 80034ae:	68e3      	ldr	r3, [r4, #12]
 80034b0:	9903      	ldr	r1, [sp, #12]
 80034b2:	1a5b      	subs	r3, r3, r1
 80034b4:	42ab      	cmp	r3, r5
 80034b6:	dcf2      	bgt.n	800349e <_printf_i+0x216>
 80034b8:	e7eb      	b.n	8003492 <_printf_i+0x20a>
 80034ba:	2500      	movs	r5, #0
 80034bc:	f104 0619 	add.w	r6, r4, #25
 80034c0:	e7f5      	b.n	80034ae <_printf_i+0x226>
 80034c2:	bf00      	nop
 80034c4:	0800567a 	.word	0x0800567a
 80034c8:	0800568b 	.word	0x0800568b

080034cc <std>:
 80034cc:	2300      	movs	r3, #0
 80034ce:	b510      	push	{r4, lr}
 80034d0:	4604      	mov	r4, r0
 80034d2:	e9c0 3300 	strd	r3, r3, [r0]
 80034d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034da:	6083      	str	r3, [r0, #8]
 80034dc:	8181      	strh	r1, [r0, #12]
 80034de:	6643      	str	r3, [r0, #100]	; 0x64
 80034e0:	81c2      	strh	r2, [r0, #14]
 80034e2:	6183      	str	r3, [r0, #24]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2208      	movs	r2, #8
 80034e8:	305c      	adds	r0, #92	; 0x5c
 80034ea:	f000 f8f4 	bl	80036d6 <memset>
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <std+0x58>)
 80034f0:	6263      	str	r3, [r4, #36]	; 0x24
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <std+0x5c>)
 80034f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80034f6:	4b0d      	ldr	r3, [pc, #52]	; (800352c <std+0x60>)
 80034f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034fa:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <std+0x64>)
 80034fc:	6323      	str	r3, [r4, #48]	; 0x30
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <std+0x68>)
 8003500:	6224      	str	r4, [r4, #32]
 8003502:	429c      	cmp	r4, r3
 8003504:	d006      	beq.n	8003514 <std+0x48>
 8003506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800350a:	4294      	cmp	r4, r2
 800350c:	d002      	beq.n	8003514 <std+0x48>
 800350e:	33d0      	adds	r3, #208	; 0xd0
 8003510:	429c      	cmp	r4, r3
 8003512:	d105      	bne.n	8003520 <std+0x54>
 8003514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800351c:	f000 b958 	b.w	80037d0 <__retarget_lock_init_recursive>
 8003520:	bd10      	pop	{r4, pc}
 8003522:	bf00      	nop
 8003524:	08003651 	.word	0x08003651
 8003528:	08003673 	.word	0x08003673
 800352c:	080036ab 	.word	0x080036ab
 8003530:	080036cf 	.word	0x080036cf
 8003534:	2000025c 	.word	0x2000025c

08003538 <stdio_exit_handler>:
 8003538:	4a02      	ldr	r2, [pc, #8]	; (8003544 <stdio_exit_handler+0xc>)
 800353a:	4903      	ldr	r1, [pc, #12]	; (8003548 <stdio_exit_handler+0x10>)
 800353c:	4803      	ldr	r0, [pc, #12]	; (800354c <stdio_exit_handler+0x14>)
 800353e:	f000 b869 	b.w	8003614 <_fwalk_sglue>
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c
 8003548:	08004ed1 	.word	0x08004ed1
 800354c:	20000018 	.word	0x20000018

08003550 <cleanup_stdio>:
 8003550:	6841      	ldr	r1, [r0, #4]
 8003552:	4b0c      	ldr	r3, [pc, #48]	; (8003584 <cleanup_stdio+0x34>)
 8003554:	4299      	cmp	r1, r3
 8003556:	b510      	push	{r4, lr}
 8003558:	4604      	mov	r4, r0
 800355a:	d001      	beq.n	8003560 <cleanup_stdio+0x10>
 800355c:	f001 fcb8 	bl	8004ed0 <_fflush_r>
 8003560:	68a1      	ldr	r1, [r4, #8]
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <cleanup_stdio+0x38>)
 8003564:	4299      	cmp	r1, r3
 8003566:	d002      	beq.n	800356e <cleanup_stdio+0x1e>
 8003568:	4620      	mov	r0, r4
 800356a:	f001 fcb1 	bl	8004ed0 <_fflush_r>
 800356e:	68e1      	ldr	r1, [r4, #12]
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <cleanup_stdio+0x3c>)
 8003572:	4299      	cmp	r1, r3
 8003574:	d004      	beq.n	8003580 <cleanup_stdio+0x30>
 8003576:	4620      	mov	r0, r4
 8003578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800357c:	f001 bca8 	b.w	8004ed0 <_fflush_r>
 8003580:	bd10      	pop	{r4, pc}
 8003582:	bf00      	nop
 8003584:	2000025c 	.word	0x2000025c
 8003588:	200002c4 	.word	0x200002c4
 800358c:	2000032c 	.word	0x2000032c

08003590 <global_stdio_init.part.0>:
 8003590:	b510      	push	{r4, lr}
 8003592:	4b0b      	ldr	r3, [pc, #44]	; (80035c0 <global_stdio_init.part.0+0x30>)
 8003594:	4c0b      	ldr	r4, [pc, #44]	; (80035c4 <global_stdio_init.part.0+0x34>)
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <global_stdio_init.part.0+0x38>)
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	4620      	mov	r0, r4
 800359c:	2200      	movs	r2, #0
 800359e:	2104      	movs	r1, #4
 80035a0:	f7ff ff94 	bl	80034cc <std>
 80035a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80035a8:	2201      	movs	r2, #1
 80035aa:	2109      	movs	r1, #9
 80035ac:	f7ff ff8e 	bl	80034cc <std>
 80035b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80035b4:	2202      	movs	r2, #2
 80035b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ba:	2112      	movs	r1, #18
 80035bc:	f7ff bf86 	b.w	80034cc <std>
 80035c0:	20000394 	.word	0x20000394
 80035c4:	2000025c 	.word	0x2000025c
 80035c8:	08003539 	.word	0x08003539

080035cc <__sfp_lock_acquire>:
 80035cc:	4801      	ldr	r0, [pc, #4]	; (80035d4 <__sfp_lock_acquire+0x8>)
 80035ce:	f000 b900 	b.w	80037d2 <__retarget_lock_acquire_recursive>
 80035d2:	bf00      	nop
 80035d4:	2000039d 	.word	0x2000039d

080035d8 <__sfp_lock_release>:
 80035d8:	4801      	ldr	r0, [pc, #4]	; (80035e0 <__sfp_lock_release+0x8>)
 80035da:	f000 b8fb 	b.w	80037d4 <__retarget_lock_release_recursive>
 80035de:	bf00      	nop
 80035e0:	2000039d 	.word	0x2000039d

080035e4 <__sinit>:
 80035e4:	b510      	push	{r4, lr}
 80035e6:	4604      	mov	r4, r0
 80035e8:	f7ff fff0 	bl	80035cc <__sfp_lock_acquire>
 80035ec:	6a23      	ldr	r3, [r4, #32]
 80035ee:	b11b      	cbz	r3, 80035f8 <__sinit+0x14>
 80035f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f4:	f7ff bff0 	b.w	80035d8 <__sfp_lock_release>
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <__sinit+0x28>)
 80035fa:	6223      	str	r3, [r4, #32]
 80035fc:	4b04      	ldr	r3, [pc, #16]	; (8003610 <__sinit+0x2c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f5      	bne.n	80035f0 <__sinit+0xc>
 8003604:	f7ff ffc4 	bl	8003590 <global_stdio_init.part.0>
 8003608:	e7f2      	b.n	80035f0 <__sinit+0xc>
 800360a:	bf00      	nop
 800360c:	08003551 	.word	0x08003551
 8003610:	20000394 	.word	0x20000394

08003614 <_fwalk_sglue>:
 8003614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003618:	4607      	mov	r7, r0
 800361a:	4688      	mov	r8, r1
 800361c:	4614      	mov	r4, r2
 800361e:	2600      	movs	r6, #0
 8003620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003624:	f1b9 0901 	subs.w	r9, r9, #1
 8003628:	d505      	bpl.n	8003636 <_fwalk_sglue+0x22>
 800362a:	6824      	ldr	r4, [r4, #0]
 800362c:	2c00      	cmp	r4, #0
 800362e:	d1f7      	bne.n	8003620 <_fwalk_sglue+0xc>
 8003630:	4630      	mov	r0, r6
 8003632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d907      	bls.n	800364c <_fwalk_sglue+0x38>
 800363c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003640:	3301      	adds	r3, #1
 8003642:	d003      	beq.n	800364c <_fwalk_sglue+0x38>
 8003644:	4629      	mov	r1, r5
 8003646:	4638      	mov	r0, r7
 8003648:	47c0      	blx	r8
 800364a:	4306      	orrs	r6, r0
 800364c:	3568      	adds	r5, #104	; 0x68
 800364e:	e7e9      	b.n	8003624 <_fwalk_sglue+0x10>

08003650 <__sread>:
 8003650:	b510      	push	{r4, lr}
 8003652:	460c      	mov	r4, r1
 8003654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003658:	f000 f86c 	bl	8003734 <_read_r>
 800365c:	2800      	cmp	r0, #0
 800365e:	bfab      	itete	ge
 8003660:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003662:	89a3      	ldrhlt	r3, [r4, #12]
 8003664:	181b      	addge	r3, r3, r0
 8003666:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800366a:	bfac      	ite	ge
 800366c:	6563      	strge	r3, [r4, #84]	; 0x54
 800366e:	81a3      	strhlt	r3, [r4, #12]
 8003670:	bd10      	pop	{r4, pc}

08003672 <__swrite>:
 8003672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003676:	461f      	mov	r7, r3
 8003678:	898b      	ldrh	r3, [r1, #12]
 800367a:	05db      	lsls	r3, r3, #23
 800367c:	4605      	mov	r5, r0
 800367e:	460c      	mov	r4, r1
 8003680:	4616      	mov	r6, r2
 8003682:	d505      	bpl.n	8003690 <__swrite+0x1e>
 8003684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003688:	2302      	movs	r3, #2
 800368a:	2200      	movs	r2, #0
 800368c:	f000 f840 	bl	8003710 <_lseek_r>
 8003690:	89a3      	ldrh	r3, [r4, #12]
 8003692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369a:	81a3      	strh	r3, [r4, #12]
 800369c:	4632      	mov	r2, r6
 800369e:	463b      	mov	r3, r7
 80036a0:	4628      	mov	r0, r5
 80036a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036a6:	f000 b857 	b.w	8003758 <_write_r>

080036aa <__sseek>:
 80036aa:	b510      	push	{r4, lr}
 80036ac:	460c      	mov	r4, r1
 80036ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b2:	f000 f82d 	bl	8003710 <_lseek_r>
 80036b6:	1c43      	adds	r3, r0, #1
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	bf15      	itete	ne
 80036bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036c6:	81a3      	strheq	r3, [r4, #12]
 80036c8:	bf18      	it	ne
 80036ca:	81a3      	strhne	r3, [r4, #12]
 80036cc:	bd10      	pop	{r4, pc}

080036ce <__sclose>:
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 b80d 	b.w	80036f0 <_close_r>

080036d6 <memset>:
 80036d6:	4402      	add	r2, r0
 80036d8:	4603      	mov	r3, r0
 80036da:	4293      	cmp	r3, r2
 80036dc:	d100      	bne.n	80036e0 <memset+0xa>
 80036de:	4770      	bx	lr
 80036e0:	f803 1b01 	strb.w	r1, [r3], #1
 80036e4:	e7f9      	b.n	80036da <memset+0x4>
	...

080036e8 <_localeconv_r>:
 80036e8:	4800      	ldr	r0, [pc, #0]	; (80036ec <_localeconv_r+0x4>)
 80036ea:	4770      	bx	lr
 80036ec:	20000158 	.word	0x20000158

080036f0 <_close_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4d06      	ldr	r5, [pc, #24]	; (800370c <_close_r+0x1c>)
 80036f4:	2300      	movs	r3, #0
 80036f6:	4604      	mov	r4, r0
 80036f8:	4608      	mov	r0, r1
 80036fa:	602b      	str	r3, [r5, #0]
 80036fc:	f7fd fcf1 	bl	80010e2 <_close>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d102      	bne.n	800370a <_close_r+0x1a>
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	b103      	cbz	r3, 800370a <_close_r+0x1a>
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	20000398 	.word	0x20000398

08003710 <_lseek_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4d07      	ldr	r5, [pc, #28]	; (8003730 <_lseek_r+0x20>)
 8003714:	4604      	mov	r4, r0
 8003716:	4608      	mov	r0, r1
 8003718:	4611      	mov	r1, r2
 800371a:	2200      	movs	r2, #0
 800371c:	602a      	str	r2, [r5, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	f7fd fd06 	bl	8001130 <_lseek>
 8003724:	1c43      	adds	r3, r0, #1
 8003726:	d102      	bne.n	800372e <_lseek_r+0x1e>
 8003728:	682b      	ldr	r3, [r5, #0]
 800372a:	b103      	cbz	r3, 800372e <_lseek_r+0x1e>
 800372c:	6023      	str	r3, [r4, #0]
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	20000398 	.word	0x20000398

08003734 <_read_r>:
 8003734:	b538      	push	{r3, r4, r5, lr}
 8003736:	4d07      	ldr	r5, [pc, #28]	; (8003754 <_read_r+0x20>)
 8003738:	4604      	mov	r4, r0
 800373a:	4608      	mov	r0, r1
 800373c:	4611      	mov	r1, r2
 800373e:	2200      	movs	r2, #0
 8003740:	602a      	str	r2, [r5, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	f7fd fc94 	bl	8001070 <_read>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_read_r+0x1e>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_read_r+0x1e>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000398 	.word	0x20000398

08003758 <_write_r>:
 8003758:	b538      	push	{r3, r4, r5, lr}
 800375a:	4d07      	ldr	r5, [pc, #28]	; (8003778 <_write_r+0x20>)
 800375c:	4604      	mov	r4, r0
 800375e:	4608      	mov	r0, r1
 8003760:	4611      	mov	r1, r2
 8003762:	2200      	movs	r2, #0
 8003764:	602a      	str	r2, [r5, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	f7fd fc9f 	bl	80010aa <_write>
 800376c:	1c43      	adds	r3, r0, #1
 800376e:	d102      	bne.n	8003776 <_write_r+0x1e>
 8003770:	682b      	ldr	r3, [r5, #0]
 8003772:	b103      	cbz	r3, 8003776 <_write_r+0x1e>
 8003774:	6023      	str	r3, [r4, #0]
 8003776:	bd38      	pop	{r3, r4, r5, pc}
 8003778:	20000398 	.word	0x20000398

0800377c <__errno>:
 800377c:	4b01      	ldr	r3, [pc, #4]	; (8003784 <__errno+0x8>)
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000064 	.word	0x20000064

08003788 <__libc_init_array>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4d0d      	ldr	r5, [pc, #52]	; (80037c0 <__libc_init_array+0x38>)
 800378c:	4c0d      	ldr	r4, [pc, #52]	; (80037c4 <__libc_init_array+0x3c>)
 800378e:	1b64      	subs	r4, r4, r5
 8003790:	10a4      	asrs	r4, r4, #2
 8003792:	2600      	movs	r6, #0
 8003794:	42a6      	cmp	r6, r4
 8003796:	d109      	bne.n	80037ac <__libc_init_array+0x24>
 8003798:	4d0b      	ldr	r5, [pc, #44]	; (80037c8 <__libc_init_array+0x40>)
 800379a:	4c0c      	ldr	r4, [pc, #48]	; (80037cc <__libc_init_array+0x44>)
 800379c:	f001 feec 	bl	8005578 <_init>
 80037a0:	1b64      	subs	r4, r4, r5
 80037a2:	10a4      	asrs	r4, r4, #2
 80037a4:	2600      	movs	r6, #0
 80037a6:	42a6      	cmp	r6, r4
 80037a8:	d105      	bne.n	80037b6 <__libc_init_array+0x2e>
 80037aa:	bd70      	pop	{r4, r5, r6, pc}
 80037ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b0:	4798      	blx	r3
 80037b2:	3601      	adds	r6, #1
 80037b4:	e7ee      	b.n	8003794 <__libc_init_array+0xc>
 80037b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037ba:	4798      	blx	r3
 80037bc:	3601      	adds	r6, #1
 80037be:	e7f2      	b.n	80037a6 <__libc_init_array+0x1e>
 80037c0:	080059dc 	.word	0x080059dc
 80037c4:	080059dc 	.word	0x080059dc
 80037c8:	080059dc 	.word	0x080059dc
 80037cc:	080059e0 	.word	0x080059e0

080037d0 <__retarget_lock_init_recursive>:
 80037d0:	4770      	bx	lr

080037d2 <__retarget_lock_acquire_recursive>:
 80037d2:	4770      	bx	lr

080037d4 <__retarget_lock_release_recursive>:
 80037d4:	4770      	bx	lr

080037d6 <quorem>:
 80037d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037da:	6903      	ldr	r3, [r0, #16]
 80037dc:	690c      	ldr	r4, [r1, #16]
 80037de:	42a3      	cmp	r3, r4
 80037e0:	4607      	mov	r7, r0
 80037e2:	db7e      	blt.n	80038e2 <quorem+0x10c>
 80037e4:	3c01      	subs	r4, #1
 80037e6:	f101 0814 	add.w	r8, r1, #20
 80037ea:	f100 0514 	add.w	r5, r0, #20
 80037ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80037f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80037fc:	3301      	adds	r3, #1
 80037fe:	429a      	cmp	r2, r3
 8003800:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003808:	fbb2 f6f3 	udiv	r6, r2, r3
 800380c:	d331      	bcc.n	8003872 <quorem+0x9c>
 800380e:	f04f 0e00 	mov.w	lr, #0
 8003812:	4640      	mov	r0, r8
 8003814:	46ac      	mov	ip, r5
 8003816:	46f2      	mov	sl, lr
 8003818:	f850 2b04 	ldr.w	r2, [r0], #4
 800381c:	b293      	uxth	r3, r2
 800381e:	fb06 e303 	mla	r3, r6, r3, lr
 8003822:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003826:	0c1a      	lsrs	r2, r3, #16
 8003828:	b29b      	uxth	r3, r3
 800382a:	ebaa 0303 	sub.w	r3, sl, r3
 800382e:	f8dc a000 	ldr.w	sl, [ip]
 8003832:	fa13 f38a 	uxtah	r3, r3, sl
 8003836:	fb06 220e 	mla	r2, r6, lr, r2
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	9b00      	ldr	r3, [sp, #0]
 800383e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003842:	b292      	uxth	r2, r2
 8003844:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003848:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800384c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003850:	4581      	cmp	r9, r0
 8003852:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003856:	f84c 3b04 	str.w	r3, [ip], #4
 800385a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800385e:	d2db      	bcs.n	8003818 <quorem+0x42>
 8003860:	f855 300b 	ldr.w	r3, [r5, fp]
 8003864:	b92b      	cbnz	r3, 8003872 <quorem+0x9c>
 8003866:	9b01      	ldr	r3, [sp, #4]
 8003868:	3b04      	subs	r3, #4
 800386a:	429d      	cmp	r5, r3
 800386c:	461a      	mov	r2, r3
 800386e:	d32c      	bcc.n	80038ca <quorem+0xf4>
 8003870:	613c      	str	r4, [r7, #16]
 8003872:	4638      	mov	r0, r7
 8003874:	f001 f9a6 	bl	8004bc4 <__mcmp>
 8003878:	2800      	cmp	r0, #0
 800387a:	db22      	blt.n	80038c2 <quorem+0xec>
 800387c:	3601      	adds	r6, #1
 800387e:	4629      	mov	r1, r5
 8003880:	2000      	movs	r0, #0
 8003882:	f858 2b04 	ldr.w	r2, [r8], #4
 8003886:	f8d1 c000 	ldr.w	ip, [r1]
 800388a:	b293      	uxth	r3, r2
 800388c:	1ac3      	subs	r3, r0, r3
 800388e:	0c12      	lsrs	r2, r2, #16
 8003890:	fa13 f38c 	uxtah	r3, r3, ip
 8003894:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800389c:	b29b      	uxth	r3, r3
 800389e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80038a2:	45c1      	cmp	r9, r8
 80038a4:	f841 3b04 	str.w	r3, [r1], #4
 80038a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80038ac:	d2e9      	bcs.n	8003882 <quorem+0xac>
 80038ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80038b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80038b6:	b922      	cbnz	r2, 80038c2 <quorem+0xec>
 80038b8:	3b04      	subs	r3, #4
 80038ba:	429d      	cmp	r5, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	d30a      	bcc.n	80038d6 <quorem+0x100>
 80038c0:	613c      	str	r4, [r7, #16]
 80038c2:	4630      	mov	r0, r6
 80038c4:	b003      	add	sp, #12
 80038c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	3b04      	subs	r3, #4
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d1ce      	bne.n	8003870 <quorem+0x9a>
 80038d2:	3c01      	subs	r4, #1
 80038d4:	e7c9      	b.n	800386a <quorem+0x94>
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	3b04      	subs	r3, #4
 80038da:	2a00      	cmp	r2, #0
 80038dc:	d1f0      	bne.n	80038c0 <quorem+0xea>
 80038de:	3c01      	subs	r4, #1
 80038e0:	e7eb      	b.n	80038ba <quorem+0xe4>
 80038e2:	2000      	movs	r0, #0
 80038e4:	e7ee      	b.n	80038c4 <quorem+0xee>
	...

080038e8 <_dtoa_r>:
 80038e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ec:	ed2d 8b04 	vpush	{d8-d9}
 80038f0:	69c5      	ldr	r5, [r0, #28]
 80038f2:	b093      	sub	sp, #76	; 0x4c
 80038f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80038f8:	ec57 6b10 	vmov	r6, r7, d0
 80038fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003900:	9107      	str	r1, [sp, #28]
 8003902:	4604      	mov	r4, r0
 8003904:	920a      	str	r2, [sp, #40]	; 0x28
 8003906:	930d      	str	r3, [sp, #52]	; 0x34
 8003908:	b975      	cbnz	r5, 8003928 <_dtoa_r+0x40>
 800390a:	2010      	movs	r0, #16
 800390c:	f000 fe2a 	bl	8004564 <malloc>
 8003910:	4602      	mov	r2, r0
 8003912:	61e0      	str	r0, [r4, #28]
 8003914:	b920      	cbnz	r0, 8003920 <_dtoa_r+0x38>
 8003916:	4bae      	ldr	r3, [pc, #696]	; (8003bd0 <_dtoa_r+0x2e8>)
 8003918:	21ef      	movs	r1, #239	; 0xef
 800391a:	48ae      	ldr	r0, [pc, #696]	; (8003bd4 <_dtoa_r+0x2ec>)
 800391c:	f001 fb1e 	bl	8004f5c <__assert_func>
 8003920:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003924:	6005      	str	r5, [r0, #0]
 8003926:	60c5      	str	r5, [r0, #12]
 8003928:	69e3      	ldr	r3, [r4, #28]
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	b151      	cbz	r1, 8003944 <_dtoa_r+0x5c>
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	604a      	str	r2, [r1, #4]
 8003932:	2301      	movs	r3, #1
 8003934:	4093      	lsls	r3, r2
 8003936:	608b      	str	r3, [r1, #8]
 8003938:	4620      	mov	r0, r4
 800393a:	f000 ff07 	bl	800474c <_Bfree>
 800393e:	69e3      	ldr	r3, [r4, #28]
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	1e3b      	subs	r3, r7, #0
 8003946:	bfbb      	ittet	lt
 8003948:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800394c:	9303      	strlt	r3, [sp, #12]
 800394e:	2300      	movge	r3, #0
 8003950:	2201      	movlt	r2, #1
 8003952:	bfac      	ite	ge
 8003954:	f8c8 3000 	strge.w	r3, [r8]
 8003958:	f8c8 2000 	strlt.w	r2, [r8]
 800395c:	4b9e      	ldr	r3, [pc, #632]	; (8003bd8 <_dtoa_r+0x2f0>)
 800395e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003962:	ea33 0308 	bics.w	r3, r3, r8
 8003966:	d11b      	bne.n	80039a0 <_dtoa_r+0xb8>
 8003968:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800396a:	f242 730f 	movw	r3, #9999	; 0x270f
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003974:	4333      	orrs	r3, r6
 8003976:	f000 8593 	beq.w	80044a0 <_dtoa_r+0xbb8>
 800397a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800397c:	b963      	cbnz	r3, 8003998 <_dtoa_r+0xb0>
 800397e:	4b97      	ldr	r3, [pc, #604]	; (8003bdc <_dtoa_r+0x2f4>)
 8003980:	e027      	b.n	80039d2 <_dtoa_r+0xea>
 8003982:	4b97      	ldr	r3, [pc, #604]	; (8003be0 <_dtoa_r+0x2f8>)
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	3308      	adds	r3, #8
 8003988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800398a:	6013      	str	r3, [r2, #0]
 800398c:	9800      	ldr	r0, [sp, #0]
 800398e:	b013      	add	sp, #76	; 0x4c
 8003990:	ecbd 8b04 	vpop	{d8-d9}
 8003994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003998:	4b90      	ldr	r3, [pc, #576]	; (8003bdc <_dtoa_r+0x2f4>)
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	3303      	adds	r3, #3
 800399e:	e7f3      	b.n	8003988 <_dtoa_r+0xa0>
 80039a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80039a4:	2200      	movs	r2, #0
 80039a6:	ec51 0b17 	vmov	r0, r1, d7
 80039aa:	eeb0 8a47 	vmov.f32	s16, s14
 80039ae:	eef0 8a67 	vmov.f32	s17, s15
 80039b2:	2300      	movs	r3, #0
 80039b4:	f7fd f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80039b8:	4681      	mov	r9, r0
 80039ba:	b160      	cbz	r0, 80039d6 <_dtoa_r+0xee>
 80039bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80039be:	2301      	movs	r3, #1
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8568 	beq.w	800449a <_dtoa_r+0xbb2>
 80039ca:	4b86      	ldr	r3, [pc, #536]	; (8003be4 <_dtoa_r+0x2fc>)
 80039cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	e7da      	b.n	800398c <_dtoa_r+0xa4>
 80039d6:	aa10      	add	r2, sp, #64	; 0x40
 80039d8:	a911      	add	r1, sp, #68	; 0x44
 80039da:	4620      	mov	r0, r4
 80039dc:	eeb0 0a48 	vmov.f32	s0, s16
 80039e0:	eef0 0a68 	vmov.f32	s1, s17
 80039e4:	f001 f994 	bl	8004d10 <__d2b>
 80039e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80039ec:	4682      	mov	sl, r0
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	d07f      	beq.n	8003af2 <_dtoa_r+0x20a>
 80039f2:	ee18 3a90 	vmov	r3, s17
 80039f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80039fe:	ec51 0b18 	vmov	r0, r1, d8
 8003a02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003a06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a0a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <_dtoa_r+0x300>)
 8003a14:	f7fc fc38 	bl	8000288 <__aeabi_dsub>
 8003a18:	a367      	add	r3, pc, #412	; (adr r3, 8003bb8 <_dtoa_r+0x2d0>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fdeb 	bl	80005f8 <__aeabi_dmul>
 8003a22:	a367      	add	r3, pc, #412	; (adr r3, 8003bc0 <_dtoa_r+0x2d8>)
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f7fc fc30 	bl	800028c <__adddf3>
 8003a2c:	4606      	mov	r6, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	460f      	mov	r7, r1
 8003a32:	f7fc fd77 	bl	8000524 <__aeabi_i2d>
 8003a36:	a364      	add	r3, pc, #400	; (adr r3, 8003bc8 <_dtoa_r+0x2e0>)
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f7fc fddc 	bl	80005f8 <__aeabi_dmul>
 8003a40:	4602      	mov	r2, r0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4630      	mov	r0, r6
 8003a46:	4639      	mov	r1, r7
 8003a48:	f7fc fc20 	bl	800028c <__adddf3>
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460f      	mov	r7, r1
 8003a50:	f7fd f882 	bl	8000b58 <__aeabi_d2iz>
 8003a54:	2200      	movs	r2, #0
 8003a56:	4683      	mov	fp, r0
 8003a58:	2300      	movs	r3, #0
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	4639      	mov	r1, r7
 8003a5e:	f7fd f83d 	bl	8000adc <__aeabi_dcmplt>
 8003a62:	b148      	cbz	r0, 8003a78 <_dtoa_r+0x190>
 8003a64:	4658      	mov	r0, fp
 8003a66:	f7fc fd5d 	bl	8000524 <__aeabi_i2d>
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	f7fd f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a72:	b908      	cbnz	r0, 8003a78 <_dtoa_r+0x190>
 8003a74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a78:	f1bb 0f16 	cmp.w	fp, #22
 8003a7c:	d857      	bhi.n	8003b2e <_dtoa_r+0x246>
 8003a7e:	4b5b      	ldr	r3, [pc, #364]	; (8003bec <_dtoa_r+0x304>)
 8003a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	ec51 0b18 	vmov	r0, r1, d8
 8003a8c:	f7fd f826 	bl	8000adc <__aeabi_dcmplt>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d04e      	beq.n	8003b32 <_dtoa_r+0x24a>
 8003a94:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a98:	2300      	movs	r3, #0
 8003a9a:	930c      	str	r3, [sp, #48]	; 0x30
 8003a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a9e:	1b5b      	subs	r3, r3, r5
 8003aa0:	1e5a      	subs	r2, r3, #1
 8003aa2:	bf45      	ittet	mi
 8003aa4:	f1c3 0301 	rsbmi	r3, r3, #1
 8003aa8:	9305      	strmi	r3, [sp, #20]
 8003aaa:	2300      	movpl	r3, #0
 8003aac:	2300      	movmi	r3, #0
 8003aae:	9206      	str	r2, [sp, #24]
 8003ab0:	bf54      	ite	pl
 8003ab2:	9305      	strpl	r3, [sp, #20]
 8003ab4:	9306      	strmi	r3, [sp, #24]
 8003ab6:	f1bb 0f00 	cmp.w	fp, #0
 8003aba:	db3c      	blt.n	8003b36 <_dtoa_r+0x24e>
 8003abc:	9b06      	ldr	r3, [sp, #24]
 8003abe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003ac2:	445b      	add	r3, fp
 8003ac4:	9306      	str	r3, [sp, #24]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9308      	str	r3, [sp, #32]
 8003aca:	9b07      	ldr	r3, [sp, #28]
 8003acc:	2b09      	cmp	r3, #9
 8003ace:	d868      	bhi.n	8003ba2 <_dtoa_r+0x2ba>
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	bfc4      	itt	gt
 8003ad4:	3b04      	subgt	r3, #4
 8003ad6:	9307      	strgt	r3, [sp, #28]
 8003ad8:	9b07      	ldr	r3, [sp, #28]
 8003ada:	f1a3 0302 	sub.w	r3, r3, #2
 8003ade:	bfcc      	ite	gt
 8003ae0:	2500      	movgt	r5, #0
 8003ae2:	2501      	movle	r5, #1
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	f200 8085 	bhi.w	8003bf4 <_dtoa_r+0x30c>
 8003aea:	e8df f003 	tbb	[pc, r3]
 8003aee:	3b2e      	.short	0x3b2e
 8003af0:	5839      	.short	0x5839
 8003af2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003af6:	441d      	add	r5, r3
 8003af8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	bfc1      	itttt	gt
 8003b00:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003b04:	fa08 f803 	lslgt.w	r8, r8, r3
 8003b08:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003b0c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003b10:	bfd6      	itet	le
 8003b12:	f1c3 0320 	rsble	r3, r3, #32
 8003b16:	ea48 0003 	orrgt.w	r0, r8, r3
 8003b1a:	fa06 f003 	lslle.w	r0, r6, r3
 8003b1e:	f7fc fcf1 	bl	8000504 <__aeabi_ui2d>
 8003b22:	2201      	movs	r2, #1
 8003b24:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003b28:	3d01      	subs	r5, #1
 8003b2a:	920e      	str	r2, [sp, #56]	; 0x38
 8003b2c:	e76f      	b.n	8003a0e <_dtoa_r+0x126>
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e7b3      	b.n	8003a9a <_dtoa_r+0x1b2>
 8003b32:	900c      	str	r0, [sp, #48]	; 0x30
 8003b34:	e7b2      	b.n	8003a9c <_dtoa_r+0x1b4>
 8003b36:	9b05      	ldr	r3, [sp, #20]
 8003b38:	eba3 030b 	sub.w	r3, r3, fp
 8003b3c:	9305      	str	r3, [sp, #20]
 8003b3e:	f1cb 0300 	rsb	r3, fp, #0
 8003b42:	9308      	str	r3, [sp, #32]
 8003b44:	2300      	movs	r3, #0
 8003b46:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b48:	e7bf      	b.n	8003aca <_dtoa_r+0x1e2>
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	dc52      	bgt.n	8003bfa <_dtoa_r+0x312>
 8003b54:	2301      	movs	r3, #1
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	9304      	str	r3, [sp, #16]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	920a      	str	r2, [sp, #40]	; 0x28
 8003b5e:	e00b      	b.n	8003b78 <_dtoa_r+0x290>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e7f3      	b.n	8003b4c <_dtoa_r+0x264>
 8003b64:	2300      	movs	r3, #0
 8003b66:	9309      	str	r3, [sp, #36]	; 0x24
 8003b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b6a:	445b      	add	r3, fp
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	9304      	str	r3, [sp, #16]
 8003b74:	bfb8      	it	lt
 8003b76:	2301      	movlt	r3, #1
 8003b78:	69e0      	ldr	r0, [r4, #28]
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	f102 0614 	add.w	r6, r2, #20
 8003b82:	429e      	cmp	r6, r3
 8003b84:	d93d      	bls.n	8003c02 <_dtoa_r+0x31a>
 8003b86:	6041      	str	r1, [r0, #4]
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 fd9f 	bl	80046cc <_Balloc>
 8003b8e:	9000      	str	r0, [sp, #0]
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d139      	bne.n	8003c08 <_dtoa_r+0x320>
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <_dtoa_r+0x308>)
 8003b96:	4602      	mov	r2, r0
 8003b98:	f240 11af 	movw	r1, #431	; 0x1af
 8003b9c:	e6bd      	b.n	800391a <_dtoa_r+0x32>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e7e1      	b.n	8003b66 <_dtoa_r+0x27e>
 8003ba2:	2501      	movs	r5, #1
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9307      	str	r3, [sp, #28]
 8003ba8:	9509      	str	r5, [sp, #36]	; 0x24
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	9304      	str	r3, [sp, #16]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2312      	movs	r3, #18
 8003bb6:	e7d1      	b.n	8003b5c <_dtoa_r+0x274>
 8003bb8:	636f4361 	.word	0x636f4361
 8003bbc:	3fd287a7 	.word	0x3fd287a7
 8003bc0:	8b60c8b3 	.word	0x8b60c8b3
 8003bc4:	3fc68a28 	.word	0x3fc68a28
 8003bc8:	509f79fb 	.word	0x509f79fb
 8003bcc:	3fd34413 	.word	0x3fd34413
 8003bd0:	080056a9 	.word	0x080056a9
 8003bd4:	080056c0 	.word	0x080056c0
 8003bd8:	7ff00000 	.word	0x7ff00000
 8003bdc:	080056a5 	.word	0x080056a5
 8003be0:	0800569c 	.word	0x0800569c
 8003be4:	08005679 	.word	0x08005679
 8003be8:	3ff80000 	.word	0x3ff80000
 8003bec:	080057b0 	.word	0x080057b0
 8003bf0:	08005718 	.word	0x08005718
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bf8:	e7d7      	b.n	8003baa <_dtoa_r+0x2c2>
 8003bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	e7ba      	b.n	8003b78 <_dtoa_r+0x290>
 8003c02:	3101      	adds	r1, #1
 8003c04:	0052      	lsls	r2, r2, #1
 8003c06:	e7ba      	b.n	8003b7e <_dtoa_r+0x296>
 8003c08:	69e3      	ldr	r3, [r4, #28]
 8003c0a:	9a00      	ldr	r2, [sp, #0]
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	9b04      	ldr	r3, [sp, #16]
 8003c10:	2b0e      	cmp	r3, #14
 8003c12:	f200 80a8 	bhi.w	8003d66 <_dtoa_r+0x47e>
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	f000 80a5 	beq.w	8003d66 <_dtoa_r+0x47e>
 8003c1c:	f1bb 0f00 	cmp.w	fp, #0
 8003c20:	dd38      	ble.n	8003c94 <_dtoa_r+0x3ac>
 8003c22:	4bc0      	ldr	r3, [pc, #768]	; (8003f24 <_dtoa_r+0x63c>)
 8003c24:	f00b 020f 	and.w	r2, fp, #15
 8003c28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c2c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003c30:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003c34:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003c38:	d019      	beq.n	8003c6e <_dtoa_r+0x386>
 8003c3a:	4bbb      	ldr	r3, [pc, #748]	; (8003f28 <_dtoa_r+0x640>)
 8003c3c:	ec51 0b18 	vmov	r0, r1, d8
 8003c40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c44:	f7fc fe02 	bl	800084c <__aeabi_ddiv>
 8003c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c4c:	f008 080f 	and.w	r8, r8, #15
 8003c50:	2503      	movs	r5, #3
 8003c52:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003f28 <_dtoa_r+0x640>
 8003c56:	f1b8 0f00 	cmp.w	r8, #0
 8003c5a:	d10a      	bne.n	8003c72 <_dtoa_r+0x38a>
 8003c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c60:	4632      	mov	r2, r6
 8003c62:	463b      	mov	r3, r7
 8003c64:	f7fc fdf2 	bl	800084c <__aeabi_ddiv>
 8003c68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c6c:	e02b      	b.n	8003cc6 <_dtoa_r+0x3de>
 8003c6e:	2502      	movs	r5, #2
 8003c70:	e7ef      	b.n	8003c52 <_dtoa_r+0x36a>
 8003c72:	f018 0f01 	tst.w	r8, #1
 8003c76:	d008      	beq.n	8003c8a <_dtoa_r+0x3a2>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	4639      	mov	r1, r7
 8003c7c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003c80:	f7fc fcba 	bl	80005f8 <__aeabi_dmul>
 8003c84:	3501      	adds	r5, #1
 8003c86:	4606      	mov	r6, r0
 8003c88:	460f      	mov	r7, r1
 8003c8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003c8e:	f109 0908 	add.w	r9, r9, #8
 8003c92:	e7e0      	b.n	8003c56 <_dtoa_r+0x36e>
 8003c94:	f000 809f 	beq.w	8003dd6 <_dtoa_r+0x4ee>
 8003c98:	f1cb 0600 	rsb	r6, fp, #0
 8003c9c:	4ba1      	ldr	r3, [pc, #644]	; (8003f24 <_dtoa_r+0x63c>)
 8003c9e:	4fa2      	ldr	r7, [pc, #648]	; (8003f28 <_dtoa_r+0x640>)
 8003ca0:	f006 020f 	and.w	r2, r6, #15
 8003ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	ec51 0b18 	vmov	r0, r1, d8
 8003cb0:	f7fc fca2 	bl	80005f8 <__aeabi_dmul>
 8003cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cb8:	1136      	asrs	r6, r6, #4
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2502      	movs	r5, #2
 8003cbe:	2e00      	cmp	r6, #0
 8003cc0:	d17e      	bne.n	8003dc0 <_dtoa_r+0x4d8>
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1d0      	bne.n	8003c68 <_dtoa_r+0x380>
 8003cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003cc8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 8084 	beq.w	8003dda <_dtoa_r+0x4f2>
 8003cd2:	4b96      	ldr	r3, [pc, #600]	; (8003f2c <_dtoa_r+0x644>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4640      	mov	r0, r8
 8003cd8:	4649      	mov	r1, r9
 8003cda:	f7fc feff 	bl	8000adc <__aeabi_dcmplt>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d07b      	beq.n	8003dda <_dtoa_r+0x4f2>
 8003ce2:	9b04      	ldr	r3, [sp, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d078      	beq.n	8003dda <_dtoa_r+0x4f2>
 8003ce8:	9b01      	ldr	r3, [sp, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	dd39      	ble.n	8003d62 <_dtoa_r+0x47a>
 8003cee:	4b90      	ldr	r3, [pc, #576]	; (8003f30 <_dtoa_r+0x648>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4640      	mov	r0, r8
 8003cf4:	4649      	mov	r1, r9
 8003cf6:	f7fc fc7f 	bl	80005f8 <__aeabi_dmul>
 8003cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cfe:	9e01      	ldr	r6, [sp, #4]
 8003d00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003d04:	3501      	adds	r5, #1
 8003d06:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	f7fc fc0a 	bl	8000524 <__aeabi_i2d>
 8003d10:	4642      	mov	r2, r8
 8003d12:	464b      	mov	r3, r9
 8003d14:	f7fc fc70 	bl	80005f8 <__aeabi_dmul>
 8003d18:	4b86      	ldr	r3, [pc, #536]	; (8003f34 <_dtoa_r+0x64c>)
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f7fc fab6 	bl	800028c <__adddf3>
 8003d20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d28:	9303      	str	r3, [sp, #12]
 8003d2a:	2e00      	cmp	r6, #0
 8003d2c:	d158      	bne.n	8003de0 <_dtoa_r+0x4f8>
 8003d2e:	4b82      	ldr	r3, [pc, #520]	; (8003f38 <_dtoa_r+0x650>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	4640      	mov	r0, r8
 8003d34:	4649      	mov	r1, r9
 8003d36:	f7fc faa7 	bl	8000288 <__aeabi_dsub>
 8003d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d3e:	4680      	mov	r8, r0
 8003d40:	4689      	mov	r9, r1
 8003d42:	f7fc fee9 	bl	8000b18 <__aeabi_dcmpgt>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f040 8296 	bne.w	8004278 <_dtoa_r+0x990>
 8003d4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003d50:	4640      	mov	r0, r8
 8003d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d56:	4649      	mov	r1, r9
 8003d58:	f7fc fec0 	bl	8000adc <__aeabi_dcmplt>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f040 8289 	bne.w	8004274 <_dtoa_r+0x98c>
 8003d62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003d66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f2c0 814e 	blt.w	800400a <_dtoa_r+0x722>
 8003d6e:	f1bb 0f0e 	cmp.w	fp, #14
 8003d72:	f300 814a 	bgt.w	800400a <_dtoa_r+0x722>
 8003d76:	4b6b      	ldr	r3, [pc, #428]	; (8003f24 <_dtoa_r+0x63c>)
 8003d78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003d7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f280 80dc 	bge.w	8003f40 <_dtoa_r+0x658>
 8003d88:	9b04      	ldr	r3, [sp, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f300 80d8 	bgt.w	8003f40 <_dtoa_r+0x658>
 8003d90:	f040 826f 	bne.w	8004272 <_dtoa_r+0x98a>
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <_dtoa_r+0x650>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	4640      	mov	r0, r8
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	f7fc fc2c 	bl	80005f8 <__aeabi_dmul>
 8003da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003da4:	f7fc feae 	bl	8000b04 <__aeabi_dcmpge>
 8003da8:	9e04      	ldr	r6, [sp, #16]
 8003daa:	4637      	mov	r7, r6
 8003dac:	2800      	cmp	r0, #0
 8003dae:	f040 8245 	bne.w	800423c <_dtoa_r+0x954>
 8003db2:	9d00      	ldr	r5, [sp, #0]
 8003db4:	2331      	movs	r3, #49	; 0x31
 8003db6:	f805 3b01 	strb.w	r3, [r5], #1
 8003dba:	f10b 0b01 	add.w	fp, fp, #1
 8003dbe:	e241      	b.n	8004244 <_dtoa_r+0x95c>
 8003dc0:	07f2      	lsls	r2, r6, #31
 8003dc2:	d505      	bpl.n	8003dd0 <_dtoa_r+0x4e8>
 8003dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dc8:	f7fc fc16 	bl	80005f8 <__aeabi_dmul>
 8003dcc:	3501      	adds	r5, #1
 8003dce:	2301      	movs	r3, #1
 8003dd0:	1076      	asrs	r6, r6, #1
 8003dd2:	3708      	adds	r7, #8
 8003dd4:	e773      	b.n	8003cbe <_dtoa_r+0x3d6>
 8003dd6:	2502      	movs	r5, #2
 8003dd8:	e775      	b.n	8003cc6 <_dtoa_r+0x3de>
 8003dda:	9e04      	ldr	r6, [sp, #16]
 8003ddc:	465f      	mov	r7, fp
 8003dde:	e792      	b.n	8003d06 <_dtoa_r+0x41e>
 8003de0:	9900      	ldr	r1, [sp, #0]
 8003de2:	4b50      	ldr	r3, [pc, #320]	; (8003f24 <_dtoa_r+0x63c>)
 8003de4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003de8:	4431      	add	r1, r6
 8003dea:	9102      	str	r1, [sp, #8]
 8003dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dee:	eeb0 9a47 	vmov.f32	s18, s14
 8003df2:	eef0 9a67 	vmov.f32	s19, s15
 8003df6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003dfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003dfe:	2900      	cmp	r1, #0
 8003e00:	d044      	beq.n	8003e8c <_dtoa_r+0x5a4>
 8003e02:	494e      	ldr	r1, [pc, #312]	; (8003f3c <_dtoa_r+0x654>)
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fc fd21 	bl	800084c <__aeabi_ddiv>
 8003e0a:	ec53 2b19 	vmov	r2, r3, d9
 8003e0e:	f7fc fa3b 	bl	8000288 <__aeabi_dsub>
 8003e12:	9d00      	ldr	r5, [sp, #0]
 8003e14:	ec41 0b19 	vmov	d9, r0, r1
 8003e18:	4649      	mov	r1, r9
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	f7fc fe9c 	bl	8000b58 <__aeabi_d2iz>
 8003e20:	4606      	mov	r6, r0
 8003e22:	f7fc fb7f 	bl	8000524 <__aeabi_i2d>
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	f7fc fa2b 	bl	8000288 <__aeabi_dsub>
 8003e32:	3630      	adds	r6, #48	; 0x30
 8003e34:	f805 6b01 	strb.w	r6, [r5], #1
 8003e38:	ec53 2b19 	vmov	r2, r3, d9
 8003e3c:	4680      	mov	r8, r0
 8003e3e:	4689      	mov	r9, r1
 8003e40:	f7fc fe4c 	bl	8000adc <__aeabi_dcmplt>
 8003e44:	2800      	cmp	r0, #0
 8003e46:	d164      	bne.n	8003f12 <_dtoa_r+0x62a>
 8003e48:	4642      	mov	r2, r8
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	4937      	ldr	r1, [pc, #220]	; (8003f2c <_dtoa_r+0x644>)
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7fc fa1a 	bl	8000288 <__aeabi_dsub>
 8003e54:	ec53 2b19 	vmov	r2, r3, d9
 8003e58:	f7fc fe40 	bl	8000adc <__aeabi_dcmplt>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	f040 80b6 	bne.w	8003fce <_dtoa_r+0x6e6>
 8003e62:	9b02      	ldr	r3, [sp, #8]
 8003e64:	429d      	cmp	r5, r3
 8003e66:	f43f af7c 	beq.w	8003d62 <_dtoa_r+0x47a>
 8003e6a:	4b31      	ldr	r3, [pc, #196]	; (8003f30 <_dtoa_r+0x648>)
 8003e6c:	ec51 0b19 	vmov	r0, r1, d9
 8003e70:	2200      	movs	r2, #0
 8003e72:	f7fc fbc1 	bl	80005f8 <__aeabi_dmul>
 8003e76:	4b2e      	ldr	r3, [pc, #184]	; (8003f30 <_dtoa_r+0x648>)
 8003e78:	ec41 0b19 	vmov	d9, r0, r1
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4640      	mov	r0, r8
 8003e80:	4649      	mov	r1, r9
 8003e82:	f7fc fbb9 	bl	80005f8 <__aeabi_dmul>
 8003e86:	4680      	mov	r8, r0
 8003e88:	4689      	mov	r9, r1
 8003e8a:	e7c5      	b.n	8003e18 <_dtoa_r+0x530>
 8003e8c:	ec51 0b17 	vmov	r0, r1, d7
 8003e90:	f7fc fbb2 	bl	80005f8 <__aeabi_dmul>
 8003e94:	9b02      	ldr	r3, [sp, #8]
 8003e96:	9d00      	ldr	r5, [sp, #0]
 8003e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e9a:	ec41 0b19 	vmov	d9, r0, r1
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	4640      	mov	r0, r8
 8003ea2:	f7fc fe59 	bl	8000b58 <__aeabi_d2iz>
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	f7fc fb3c 	bl	8000524 <__aeabi_i2d>
 8003eac:	3630      	adds	r6, #48	; 0x30
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	f7fc f9e7 	bl	8000288 <__aeabi_dsub>
 8003eba:	f805 6b01 	strb.w	r6, [r5], #1
 8003ebe:	9b02      	ldr	r3, [sp, #8]
 8003ec0:	429d      	cmp	r5, r3
 8003ec2:	4680      	mov	r8, r0
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	d124      	bne.n	8003f16 <_dtoa_r+0x62e>
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <_dtoa_r+0x654>)
 8003ece:	ec51 0b19 	vmov	r0, r1, d9
 8003ed2:	f7fc f9db 	bl	800028c <__adddf3>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4640      	mov	r0, r8
 8003edc:	4649      	mov	r1, r9
 8003ede:	f7fc fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 8003ee2:	2800      	cmp	r0, #0
 8003ee4:	d173      	bne.n	8003fce <_dtoa_r+0x6e6>
 8003ee6:	ec53 2b19 	vmov	r2, r3, d9
 8003eea:	4914      	ldr	r1, [pc, #80]	; (8003f3c <_dtoa_r+0x654>)
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fc f9cb 	bl	8000288 <__aeabi_dsub>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc fdef 	bl	8000adc <__aeabi_dcmplt>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	f43f af2f 	beq.w	8003d62 <_dtoa_r+0x47a>
 8003f04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003f06:	1e6b      	subs	r3, r5, #1
 8003f08:	930f      	str	r3, [sp, #60]	; 0x3c
 8003f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d0f8      	beq.n	8003f04 <_dtoa_r+0x61c>
 8003f12:	46bb      	mov	fp, r7
 8003f14:	e04a      	b.n	8003fac <_dtoa_r+0x6c4>
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <_dtoa_r+0x648>)
 8003f18:	f7fc fb6e 	bl	80005f8 <__aeabi_dmul>
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	4689      	mov	r9, r1
 8003f20:	e7bd      	b.n	8003e9e <_dtoa_r+0x5b6>
 8003f22:	bf00      	nop
 8003f24:	080057b0 	.word	0x080057b0
 8003f28:	08005788 	.word	0x08005788
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	40240000 	.word	0x40240000
 8003f34:	401c0000 	.word	0x401c0000
 8003f38:	40140000 	.word	0x40140000
 8003f3c:	3fe00000 	.word	0x3fe00000
 8003f40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003f44:	9d00      	ldr	r5, [sp, #0]
 8003f46:	4642      	mov	r2, r8
 8003f48:	464b      	mov	r3, r9
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	f7fc fc7d 	bl	800084c <__aeabi_ddiv>
 8003f52:	f7fc fe01 	bl	8000b58 <__aeabi_d2iz>
 8003f56:	9001      	str	r0, [sp, #4]
 8003f58:	f7fc fae4 	bl	8000524 <__aeabi_i2d>
 8003f5c:	4642      	mov	r2, r8
 8003f5e:	464b      	mov	r3, r9
 8003f60:	f7fc fb4a 	bl	80005f8 <__aeabi_dmul>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4630      	mov	r0, r6
 8003f6a:	4639      	mov	r1, r7
 8003f6c:	f7fc f98c 	bl	8000288 <__aeabi_dsub>
 8003f70:	9e01      	ldr	r6, [sp, #4]
 8003f72:	9f04      	ldr	r7, [sp, #16]
 8003f74:	3630      	adds	r6, #48	; 0x30
 8003f76:	f805 6b01 	strb.w	r6, [r5], #1
 8003f7a:	9e00      	ldr	r6, [sp, #0]
 8003f7c:	1bae      	subs	r6, r5, r6
 8003f7e:	42b7      	cmp	r7, r6
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	d134      	bne.n	8003ff0 <_dtoa_r+0x708>
 8003f86:	f7fc f981 	bl	800028c <__adddf3>
 8003f8a:	4642      	mov	r2, r8
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	4606      	mov	r6, r0
 8003f90:	460f      	mov	r7, r1
 8003f92:	f7fc fdc1 	bl	8000b18 <__aeabi_dcmpgt>
 8003f96:	b9c8      	cbnz	r0, 8003fcc <_dtoa_r+0x6e4>
 8003f98:	4642      	mov	r2, r8
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	f7fc fd92 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fa4:	b110      	cbz	r0, 8003fac <_dtoa_r+0x6c4>
 8003fa6:	9b01      	ldr	r3, [sp, #4]
 8003fa8:	07db      	lsls	r3, r3, #31
 8003faa:	d40f      	bmi.n	8003fcc <_dtoa_r+0x6e4>
 8003fac:	4651      	mov	r1, sl
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f000 fbcc 	bl	800474c <_Bfree>
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003fb8:	702b      	strb	r3, [r5, #0]
 8003fba:	f10b 0301 	add.w	r3, fp, #1
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f43f ace2 	beq.w	800398c <_dtoa_r+0xa4>
 8003fc8:	601d      	str	r5, [r3, #0]
 8003fca:	e4df      	b.n	800398c <_dtoa_r+0xa4>
 8003fcc:	465f      	mov	r7, fp
 8003fce:	462b      	mov	r3, r5
 8003fd0:	461d      	mov	r5, r3
 8003fd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003fd6:	2a39      	cmp	r2, #57	; 0x39
 8003fd8:	d106      	bne.n	8003fe8 <_dtoa_r+0x700>
 8003fda:	9a00      	ldr	r2, [sp, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d1f7      	bne.n	8003fd0 <_dtoa_r+0x6e8>
 8003fe0:	9900      	ldr	r1, [sp, #0]
 8003fe2:	2230      	movs	r2, #48	; 0x30
 8003fe4:	3701      	adds	r7, #1
 8003fe6:	700a      	strb	r2, [r1, #0]
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	3201      	adds	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	e790      	b.n	8003f12 <_dtoa_r+0x62a>
 8003ff0:	4ba3      	ldr	r3, [pc, #652]	; (8004280 <_dtoa_r+0x998>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f7fc fb00 	bl	80005f8 <__aeabi_dmul>
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	460f      	mov	r7, r1
 8004000:	f7fc fd62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004004:	2800      	cmp	r0, #0
 8004006:	d09e      	beq.n	8003f46 <_dtoa_r+0x65e>
 8004008:	e7d0      	b.n	8003fac <_dtoa_r+0x6c4>
 800400a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800400c:	2a00      	cmp	r2, #0
 800400e:	f000 80ca 	beq.w	80041a6 <_dtoa_r+0x8be>
 8004012:	9a07      	ldr	r2, [sp, #28]
 8004014:	2a01      	cmp	r2, #1
 8004016:	f300 80ad 	bgt.w	8004174 <_dtoa_r+0x88c>
 800401a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800401c:	2a00      	cmp	r2, #0
 800401e:	f000 80a5 	beq.w	800416c <_dtoa_r+0x884>
 8004022:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004026:	9e08      	ldr	r6, [sp, #32]
 8004028:	9d05      	ldr	r5, [sp, #20]
 800402a:	9a05      	ldr	r2, [sp, #20]
 800402c:	441a      	add	r2, r3
 800402e:	9205      	str	r2, [sp, #20]
 8004030:	9a06      	ldr	r2, [sp, #24]
 8004032:	2101      	movs	r1, #1
 8004034:	441a      	add	r2, r3
 8004036:	4620      	mov	r0, r4
 8004038:	9206      	str	r2, [sp, #24]
 800403a:	f000 fc3d 	bl	80048b8 <__i2b>
 800403e:	4607      	mov	r7, r0
 8004040:	b165      	cbz	r5, 800405c <_dtoa_r+0x774>
 8004042:	9b06      	ldr	r3, [sp, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	dd09      	ble.n	800405c <_dtoa_r+0x774>
 8004048:	42ab      	cmp	r3, r5
 800404a:	9a05      	ldr	r2, [sp, #20]
 800404c:	bfa8      	it	ge
 800404e:	462b      	movge	r3, r5
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	9205      	str	r2, [sp, #20]
 8004054:	9a06      	ldr	r2, [sp, #24]
 8004056:	1aed      	subs	r5, r5, r3
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	9306      	str	r3, [sp, #24]
 800405c:	9b08      	ldr	r3, [sp, #32]
 800405e:	b1f3      	cbz	r3, 800409e <_dtoa_r+0x7b6>
 8004060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80a3 	beq.w	80041ae <_dtoa_r+0x8c6>
 8004068:	2e00      	cmp	r6, #0
 800406a:	dd10      	ble.n	800408e <_dtoa_r+0x7a6>
 800406c:	4639      	mov	r1, r7
 800406e:	4632      	mov	r2, r6
 8004070:	4620      	mov	r0, r4
 8004072:	f000 fce1 	bl	8004a38 <__pow5mult>
 8004076:	4652      	mov	r2, sl
 8004078:	4601      	mov	r1, r0
 800407a:	4607      	mov	r7, r0
 800407c:	4620      	mov	r0, r4
 800407e:	f000 fc31 	bl	80048e4 <__multiply>
 8004082:	4651      	mov	r1, sl
 8004084:	4680      	mov	r8, r0
 8004086:	4620      	mov	r0, r4
 8004088:	f000 fb60 	bl	800474c <_Bfree>
 800408c:	46c2      	mov	sl, r8
 800408e:	9b08      	ldr	r3, [sp, #32]
 8004090:	1b9a      	subs	r2, r3, r6
 8004092:	d004      	beq.n	800409e <_dtoa_r+0x7b6>
 8004094:	4651      	mov	r1, sl
 8004096:	4620      	mov	r0, r4
 8004098:	f000 fcce 	bl	8004a38 <__pow5mult>
 800409c:	4682      	mov	sl, r0
 800409e:	2101      	movs	r1, #1
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 fc09 	bl	80048b8 <__i2b>
 80040a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	4606      	mov	r6, r0
 80040ac:	f340 8081 	ble.w	80041b2 <_dtoa_r+0x8ca>
 80040b0:	461a      	mov	r2, r3
 80040b2:	4601      	mov	r1, r0
 80040b4:	4620      	mov	r0, r4
 80040b6:	f000 fcbf 	bl	8004a38 <__pow5mult>
 80040ba:	9b07      	ldr	r3, [sp, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	4606      	mov	r6, r0
 80040c0:	dd7a      	ble.n	80041b8 <_dtoa_r+0x8d0>
 80040c2:	f04f 0800 	mov.w	r8, #0
 80040c6:	6933      	ldr	r3, [r6, #16]
 80040c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040cc:	6918      	ldr	r0, [r3, #16]
 80040ce:	f000 fba5 	bl	800481c <__hi0bits>
 80040d2:	f1c0 0020 	rsb	r0, r0, #32
 80040d6:	9b06      	ldr	r3, [sp, #24]
 80040d8:	4418      	add	r0, r3
 80040da:	f010 001f 	ands.w	r0, r0, #31
 80040de:	f000 8094 	beq.w	800420a <_dtoa_r+0x922>
 80040e2:	f1c0 0320 	rsb	r3, r0, #32
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	f340 8085 	ble.w	80041f6 <_dtoa_r+0x90e>
 80040ec:	9b05      	ldr	r3, [sp, #20]
 80040ee:	f1c0 001c 	rsb	r0, r0, #28
 80040f2:	4403      	add	r3, r0
 80040f4:	9305      	str	r3, [sp, #20]
 80040f6:	9b06      	ldr	r3, [sp, #24]
 80040f8:	4403      	add	r3, r0
 80040fa:	4405      	add	r5, r0
 80040fc:	9306      	str	r3, [sp, #24]
 80040fe:	9b05      	ldr	r3, [sp, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	dd05      	ble.n	8004110 <_dtoa_r+0x828>
 8004104:	4651      	mov	r1, sl
 8004106:	461a      	mov	r2, r3
 8004108:	4620      	mov	r0, r4
 800410a:	f000 fcef 	bl	8004aec <__lshift>
 800410e:	4682      	mov	sl, r0
 8004110:	9b06      	ldr	r3, [sp, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	dd05      	ble.n	8004122 <_dtoa_r+0x83a>
 8004116:	4631      	mov	r1, r6
 8004118:	461a      	mov	r2, r3
 800411a:	4620      	mov	r0, r4
 800411c:	f000 fce6 	bl	8004aec <__lshift>
 8004120:	4606      	mov	r6, r0
 8004122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004124:	2b00      	cmp	r3, #0
 8004126:	d072      	beq.n	800420e <_dtoa_r+0x926>
 8004128:	4631      	mov	r1, r6
 800412a:	4650      	mov	r0, sl
 800412c:	f000 fd4a 	bl	8004bc4 <__mcmp>
 8004130:	2800      	cmp	r0, #0
 8004132:	da6c      	bge.n	800420e <_dtoa_r+0x926>
 8004134:	2300      	movs	r3, #0
 8004136:	4651      	mov	r1, sl
 8004138:	220a      	movs	r2, #10
 800413a:	4620      	mov	r0, r4
 800413c:	f000 fb28 	bl	8004790 <__multadd>
 8004140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004142:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004146:	4682      	mov	sl, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 81b0 	beq.w	80044ae <_dtoa_r+0xbc6>
 800414e:	2300      	movs	r3, #0
 8004150:	4639      	mov	r1, r7
 8004152:	220a      	movs	r2, #10
 8004154:	4620      	mov	r0, r4
 8004156:	f000 fb1b 	bl	8004790 <__multadd>
 800415a:	9b01      	ldr	r3, [sp, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	4607      	mov	r7, r0
 8004160:	f300 8096 	bgt.w	8004290 <_dtoa_r+0x9a8>
 8004164:	9b07      	ldr	r3, [sp, #28]
 8004166:	2b02      	cmp	r3, #2
 8004168:	dc59      	bgt.n	800421e <_dtoa_r+0x936>
 800416a:	e091      	b.n	8004290 <_dtoa_r+0x9a8>
 800416c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800416e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004172:	e758      	b.n	8004026 <_dtoa_r+0x73e>
 8004174:	9b04      	ldr	r3, [sp, #16]
 8004176:	1e5e      	subs	r6, r3, #1
 8004178:	9b08      	ldr	r3, [sp, #32]
 800417a:	42b3      	cmp	r3, r6
 800417c:	bfbf      	itttt	lt
 800417e:	9b08      	ldrlt	r3, [sp, #32]
 8004180:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004182:	9608      	strlt	r6, [sp, #32]
 8004184:	1af3      	sublt	r3, r6, r3
 8004186:	bfb4      	ite	lt
 8004188:	18d2      	addlt	r2, r2, r3
 800418a:	1b9e      	subge	r6, r3, r6
 800418c:	9b04      	ldr	r3, [sp, #16]
 800418e:	bfbc      	itt	lt
 8004190:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004192:	2600      	movlt	r6, #0
 8004194:	2b00      	cmp	r3, #0
 8004196:	bfb7      	itett	lt
 8004198:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800419c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80041a0:	1a9d      	sublt	r5, r3, r2
 80041a2:	2300      	movlt	r3, #0
 80041a4:	e741      	b.n	800402a <_dtoa_r+0x742>
 80041a6:	9e08      	ldr	r6, [sp, #32]
 80041a8:	9d05      	ldr	r5, [sp, #20]
 80041aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80041ac:	e748      	b.n	8004040 <_dtoa_r+0x758>
 80041ae:	9a08      	ldr	r2, [sp, #32]
 80041b0:	e770      	b.n	8004094 <_dtoa_r+0x7ac>
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	dc19      	bgt.n	80041ec <_dtoa_r+0x904>
 80041b8:	9b02      	ldr	r3, [sp, #8]
 80041ba:	b9bb      	cbnz	r3, 80041ec <_dtoa_r+0x904>
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041c2:	b99b      	cbnz	r3, 80041ec <_dtoa_r+0x904>
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	0d1b      	lsrs	r3, r3, #20
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	b183      	cbz	r3, 80041f2 <_dtoa_r+0x90a>
 80041d0:	9b05      	ldr	r3, [sp, #20]
 80041d2:	3301      	adds	r3, #1
 80041d4:	9305      	str	r3, [sp, #20]
 80041d6:	9b06      	ldr	r3, [sp, #24]
 80041d8:	3301      	adds	r3, #1
 80041da:	9306      	str	r3, [sp, #24]
 80041dc:	f04f 0801 	mov.w	r8, #1
 80041e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f47f af6f 	bne.w	80040c6 <_dtoa_r+0x7de>
 80041e8:	2001      	movs	r0, #1
 80041ea:	e774      	b.n	80040d6 <_dtoa_r+0x7ee>
 80041ec:	f04f 0800 	mov.w	r8, #0
 80041f0:	e7f6      	b.n	80041e0 <_dtoa_r+0x8f8>
 80041f2:	4698      	mov	r8, r3
 80041f4:	e7f4      	b.n	80041e0 <_dtoa_r+0x8f8>
 80041f6:	d082      	beq.n	80040fe <_dtoa_r+0x816>
 80041f8:	9a05      	ldr	r2, [sp, #20]
 80041fa:	331c      	adds	r3, #28
 80041fc:	441a      	add	r2, r3
 80041fe:	9205      	str	r2, [sp, #20]
 8004200:	9a06      	ldr	r2, [sp, #24]
 8004202:	441a      	add	r2, r3
 8004204:	441d      	add	r5, r3
 8004206:	9206      	str	r2, [sp, #24]
 8004208:	e779      	b.n	80040fe <_dtoa_r+0x816>
 800420a:	4603      	mov	r3, r0
 800420c:	e7f4      	b.n	80041f8 <_dtoa_r+0x910>
 800420e:	9b04      	ldr	r3, [sp, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc37      	bgt.n	8004284 <_dtoa_r+0x99c>
 8004214:	9b07      	ldr	r3, [sp, #28]
 8004216:	2b02      	cmp	r3, #2
 8004218:	dd34      	ble.n	8004284 <_dtoa_r+0x99c>
 800421a:	9b04      	ldr	r3, [sp, #16]
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	9b01      	ldr	r3, [sp, #4]
 8004220:	b963      	cbnz	r3, 800423c <_dtoa_r+0x954>
 8004222:	4631      	mov	r1, r6
 8004224:	2205      	movs	r2, #5
 8004226:	4620      	mov	r0, r4
 8004228:	f000 fab2 	bl	8004790 <__multadd>
 800422c:	4601      	mov	r1, r0
 800422e:	4606      	mov	r6, r0
 8004230:	4650      	mov	r0, sl
 8004232:	f000 fcc7 	bl	8004bc4 <__mcmp>
 8004236:	2800      	cmp	r0, #0
 8004238:	f73f adbb 	bgt.w	8003db2 <_dtoa_r+0x4ca>
 800423c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800423e:	9d00      	ldr	r5, [sp, #0]
 8004240:	ea6f 0b03 	mvn.w	fp, r3
 8004244:	f04f 0800 	mov.w	r8, #0
 8004248:	4631      	mov	r1, r6
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fa7e 	bl	800474c <_Bfree>
 8004250:	2f00      	cmp	r7, #0
 8004252:	f43f aeab 	beq.w	8003fac <_dtoa_r+0x6c4>
 8004256:	f1b8 0f00 	cmp.w	r8, #0
 800425a:	d005      	beq.n	8004268 <_dtoa_r+0x980>
 800425c:	45b8      	cmp	r8, r7
 800425e:	d003      	beq.n	8004268 <_dtoa_r+0x980>
 8004260:	4641      	mov	r1, r8
 8004262:	4620      	mov	r0, r4
 8004264:	f000 fa72 	bl	800474c <_Bfree>
 8004268:	4639      	mov	r1, r7
 800426a:	4620      	mov	r0, r4
 800426c:	f000 fa6e 	bl	800474c <_Bfree>
 8004270:	e69c      	b.n	8003fac <_dtoa_r+0x6c4>
 8004272:	2600      	movs	r6, #0
 8004274:	4637      	mov	r7, r6
 8004276:	e7e1      	b.n	800423c <_dtoa_r+0x954>
 8004278:	46bb      	mov	fp, r7
 800427a:	4637      	mov	r7, r6
 800427c:	e599      	b.n	8003db2 <_dtoa_r+0x4ca>
 800427e:	bf00      	nop
 8004280:	40240000 	.word	0x40240000
 8004284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 80c8 	beq.w	800441c <_dtoa_r+0xb34>
 800428c:	9b04      	ldr	r3, [sp, #16]
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	2d00      	cmp	r5, #0
 8004292:	dd05      	ble.n	80042a0 <_dtoa_r+0x9b8>
 8004294:	4639      	mov	r1, r7
 8004296:	462a      	mov	r2, r5
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fc27 	bl	8004aec <__lshift>
 800429e:	4607      	mov	r7, r0
 80042a0:	f1b8 0f00 	cmp.w	r8, #0
 80042a4:	d05b      	beq.n	800435e <_dtoa_r+0xa76>
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fa0f 	bl	80046cc <_Balloc>
 80042ae:	4605      	mov	r5, r0
 80042b0:	b928      	cbnz	r0, 80042be <_dtoa_r+0x9d6>
 80042b2:	4b83      	ldr	r3, [pc, #524]	; (80044c0 <_dtoa_r+0xbd8>)
 80042b4:	4602      	mov	r2, r0
 80042b6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80042ba:	f7ff bb2e 	b.w	800391a <_dtoa_r+0x32>
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	3202      	adds	r2, #2
 80042c2:	0092      	lsls	r2, r2, #2
 80042c4:	f107 010c 	add.w	r1, r7, #12
 80042c8:	300c      	adds	r0, #12
 80042ca:	f000 fe39 	bl	8004f40 <memcpy>
 80042ce:	2201      	movs	r2, #1
 80042d0:	4629      	mov	r1, r5
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 fc0a 	bl	8004aec <__lshift>
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	3301      	adds	r3, #1
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042e2:	4413      	add	r3, r2
 80042e4:	9308      	str	r3, [sp, #32]
 80042e6:	9b02      	ldr	r3, [sp, #8]
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	46b8      	mov	r8, r7
 80042ee:	9306      	str	r3, [sp, #24]
 80042f0:	4607      	mov	r7, r0
 80042f2:	9b04      	ldr	r3, [sp, #16]
 80042f4:	4631      	mov	r1, r6
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4650      	mov	r0, sl
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	f7ff fa6b 	bl	80037d6 <quorem>
 8004300:	4641      	mov	r1, r8
 8004302:	9002      	str	r0, [sp, #8]
 8004304:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004308:	4650      	mov	r0, sl
 800430a:	f000 fc5b 	bl	8004bc4 <__mcmp>
 800430e:	463a      	mov	r2, r7
 8004310:	9005      	str	r0, [sp, #20]
 8004312:	4631      	mov	r1, r6
 8004314:	4620      	mov	r0, r4
 8004316:	f000 fc71 	bl	8004bfc <__mdiff>
 800431a:	68c2      	ldr	r2, [r0, #12]
 800431c:	4605      	mov	r5, r0
 800431e:	bb02      	cbnz	r2, 8004362 <_dtoa_r+0xa7a>
 8004320:	4601      	mov	r1, r0
 8004322:	4650      	mov	r0, sl
 8004324:	f000 fc4e 	bl	8004bc4 <__mcmp>
 8004328:	4602      	mov	r2, r0
 800432a:	4629      	mov	r1, r5
 800432c:	4620      	mov	r0, r4
 800432e:	9209      	str	r2, [sp, #36]	; 0x24
 8004330:	f000 fa0c 	bl	800474c <_Bfree>
 8004334:	9b07      	ldr	r3, [sp, #28]
 8004336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004338:	9d04      	ldr	r5, [sp, #16]
 800433a:	ea43 0102 	orr.w	r1, r3, r2
 800433e:	9b06      	ldr	r3, [sp, #24]
 8004340:	4319      	orrs	r1, r3
 8004342:	d110      	bne.n	8004366 <_dtoa_r+0xa7e>
 8004344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004348:	d029      	beq.n	800439e <_dtoa_r+0xab6>
 800434a:	9b05      	ldr	r3, [sp, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dd02      	ble.n	8004356 <_dtoa_r+0xa6e>
 8004350:	9b02      	ldr	r3, [sp, #8]
 8004352:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	f883 9000 	strb.w	r9, [r3]
 800435c:	e774      	b.n	8004248 <_dtoa_r+0x960>
 800435e:	4638      	mov	r0, r7
 8004360:	e7ba      	b.n	80042d8 <_dtoa_r+0x9f0>
 8004362:	2201      	movs	r2, #1
 8004364:	e7e1      	b.n	800432a <_dtoa_r+0xa42>
 8004366:	9b05      	ldr	r3, [sp, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db04      	blt.n	8004376 <_dtoa_r+0xa8e>
 800436c:	9907      	ldr	r1, [sp, #28]
 800436e:	430b      	orrs	r3, r1
 8004370:	9906      	ldr	r1, [sp, #24]
 8004372:	430b      	orrs	r3, r1
 8004374:	d120      	bne.n	80043b8 <_dtoa_r+0xad0>
 8004376:	2a00      	cmp	r2, #0
 8004378:	dded      	ble.n	8004356 <_dtoa_r+0xa6e>
 800437a:	4651      	mov	r1, sl
 800437c:	2201      	movs	r2, #1
 800437e:	4620      	mov	r0, r4
 8004380:	f000 fbb4 	bl	8004aec <__lshift>
 8004384:	4631      	mov	r1, r6
 8004386:	4682      	mov	sl, r0
 8004388:	f000 fc1c 	bl	8004bc4 <__mcmp>
 800438c:	2800      	cmp	r0, #0
 800438e:	dc03      	bgt.n	8004398 <_dtoa_r+0xab0>
 8004390:	d1e1      	bne.n	8004356 <_dtoa_r+0xa6e>
 8004392:	f019 0f01 	tst.w	r9, #1
 8004396:	d0de      	beq.n	8004356 <_dtoa_r+0xa6e>
 8004398:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800439c:	d1d8      	bne.n	8004350 <_dtoa_r+0xa68>
 800439e:	9a01      	ldr	r2, [sp, #4]
 80043a0:	2339      	movs	r3, #57	; 0x39
 80043a2:	7013      	strb	r3, [r2, #0]
 80043a4:	462b      	mov	r3, r5
 80043a6:	461d      	mov	r5, r3
 80043a8:	3b01      	subs	r3, #1
 80043aa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80043ae:	2a39      	cmp	r2, #57	; 0x39
 80043b0:	d06c      	beq.n	800448c <_dtoa_r+0xba4>
 80043b2:	3201      	adds	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	e747      	b.n	8004248 <_dtoa_r+0x960>
 80043b8:	2a00      	cmp	r2, #0
 80043ba:	dd07      	ble.n	80043cc <_dtoa_r+0xae4>
 80043bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80043c0:	d0ed      	beq.n	800439e <_dtoa_r+0xab6>
 80043c2:	9a01      	ldr	r2, [sp, #4]
 80043c4:	f109 0301 	add.w	r3, r9, #1
 80043c8:	7013      	strb	r3, [r2, #0]
 80043ca:	e73d      	b.n	8004248 <_dtoa_r+0x960>
 80043cc:	9b04      	ldr	r3, [sp, #16]
 80043ce:	9a08      	ldr	r2, [sp, #32]
 80043d0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d043      	beq.n	8004460 <_dtoa_r+0xb78>
 80043d8:	4651      	mov	r1, sl
 80043da:	2300      	movs	r3, #0
 80043dc:	220a      	movs	r2, #10
 80043de:	4620      	mov	r0, r4
 80043e0:	f000 f9d6 	bl	8004790 <__multadd>
 80043e4:	45b8      	cmp	r8, r7
 80043e6:	4682      	mov	sl, r0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	f04f 020a 	mov.w	r2, #10
 80043f0:	4641      	mov	r1, r8
 80043f2:	4620      	mov	r0, r4
 80043f4:	d107      	bne.n	8004406 <_dtoa_r+0xb1e>
 80043f6:	f000 f9cb 	bl	8004790 <__multadd>
 80043fa:	4680      	mov	r8, r0
 80043fc:	4607      	mov	r7, r0
 80043fe:	9b04      	ldr	r3, [sp, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	9304      	str	r3, [sp, #16]
 8004404:	e775      	b.n	80042f2 <_dtoa_r+0xa0a>
 8004406:	f000 f9c3 	bl	8004790 <__multadd>
 800440a:	4639      	mov	r1, r7
 800440c:	4680      	mov	r8, r0
 800440e:	2300      	movs	r3, #0
 8004410:	220a      	movs	r2, #10
 8004412:	4620      	mov	r0, r4
 8004414:	f000 f9bc 	bl	8004790 <__multadd>
 8004418:	4607      	mov	r7, r0
 800441a:	e7f0      	b.n	80043fe <_dtoa_r+0xb16>
 800441c:	9b04      	ldr	r3, [sp, #16]
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	9d00      	ldr	r5, [sp, #0]
 8004422:	4631      	mov	r1, r6
 8004424:	4650      	mov	r0, sl
 8004426:	f7ff f9d6 	bl	80037d6 <quorem>
 800442a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800442e:	9b00      	ldr	r3, [sp, #0]
 8004430:	f805 9b01 	strb.w	r9, [r5], #1
 8004434:	1aea      	subs	r2, r5, r3
 8004436:	9b01      	ldr	r3, [sp, #4]
 8004438:	4293      	cmp	r3, r2
 800443a:	dd07      	ble.n	800444c <_dtoa_r+0xb64>
 800443c:	4651      	mov	r1, sl
 800443e:	2300      	movs	r3, #0
 8004440:	220a      	movs	r2, #10
 8004442:	4620      	mov	r0, r4
 8004444:	f000 f9a4 	bl	8004790 <__multadd>
 8004448:	4682      	mov	sl, r0
 800444a:	e7ea      	b.n	8004422 <_dtoa_r+0xb3a>
 800444c:	9b01      	ldr	r3, [sp, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	bfc8      	it	gt
 8004452:	461d      	movgt	r5, r3
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	bfd8      	it	le
 8004458:	2501      	movle	r5, #1
 800445a:	441d      	add	r5, r3
 800445c:	f04f 0800 	mov.w	r8, #0
 8004460:	4651      	mov	r1, sl
 8004462:	2201      	movs	r2, #1
 8004464:	4620      	mov	r0, r4
 8004466:	f000 fb41 	bl	8004aec <__lshift>
 800446a:	4631      	mov	r1, r6
 800446c:	4682      	mov	sl, r0
 800446e:	f000 fba9 	bl	8004bc4 <__mcmp>
 8004472:	2800      	cmp	r0, #0
 8004474:	dc96      	bgt.n	80043a4 <_dtoa_r+0xabc>
 8004476:	d102      	bne.n	800447e <_dtoa_r+0xb96>
 8004478:	f019 0f01 	tst.w	r9, #1
 800447c:	d192      	bne.n	80043a4 <_dtoa_r+0xabc>
 800447e:	462b      	mov	r3, r5
 8004480:	461d      	mov	r5, r3
 8004482:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004486:	2a30      	cmp	r2, #48	; 0x30
 8004488:	d0fa      	beq.n	8004480 <_dtoa_r+0xb98>
 800448a:	e6dd      	b.n	8004248 <_dtoa_r+0x960>
 800448c:	9a00      	ldr	r2, [sp, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d189      	bne.n	80043a6 <_dtoa_r+0xabe>
 8004492:	f10b 0b01 	add.w	fp, fp, #1
 8004496:	2331      	movs	r3, #49	; 0x31
 8004498:	e796      	b.n	80043c8 <_dtoa_r+0xae0>
 800449a:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <_dtoa_r+0xbdc>)
 800449c:	f7ff ba99 	b.w	80039d2 <_dtoa_r+0xea>
 80044a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f47f aa6d 	bne.w	8003982 <_dtoa_r+0x9a>
 80044a8:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <_dtoa_r+0xbe0>)
 80044aa:	f7ff ba92 	b.w	80039d2 <_dtoa_r+0xea>
 80044ae:	9b01      	ldr	r3, [sp, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dcb5      	bgt.n	8004420 <_dtoa_r+0xb38>
 80044b4:	9b07      	ldr	r3, [sp, #28]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	f73f aeb1 	bgt.w	800421e <_dtoa_r+0x936>
 80044bc:	e7b0      	b.n	8004420 <_dtoa_r+0xb38>
 80044be:	bf00      	nop
 80044c0:	08005718 	.word	0x08005718
 80044c4:	08005678 	.word	0x08005678
 80044c8:	0800569c 	.word	0x0800569c

080044cc <_free_r>:
 80044cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044ce:	2900      	cmp	r1, #0
 80044d0:	d044      	beq.n	800455c <_free_r+0x90>
 80044d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044d6:	9001      	str	r0, [sp, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f1a1 0404 	sub.w	r4, r1, #4
 80044de:	bfb8      	it	lt
 80044e0:	18e4      	addlt	r4, r4, r3
 80044e2:	f000 f8e7 	bl	80046b4 <__malloc_lock>
 80044e6:	4a1e      	ldr	r2, [pc, #120]	; (8004560 <_free_r+0x94>)
 80044e8:	9801      	ldr	r0, [sp, #4]
 80044ea:	6813      	ldr	r3, [r2, #0]
 80044ec:	b933      	cbnz	r3, 80044fc <_free_r+0x30>
 80044ee:	6063      	str	r3, [r4, #4]
 80044f0:	6014      	str	r4, [r2, #0]
 80044f2:	b003      	add	sp, #12
 80044f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044f8:	f000 b8e2 	b.w	80046c0 <__malloc_unlock>
 80044fc:	42a3      	cmp	r3, r4
 80044fe:	d908      	bls.n	8004512 <_free_r+0x46>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf01      	itttt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	1949      	addeq	r1, r1, r5
 800450e:	6021      	streq	r1, [r4, #0]
 8004510:	e7ed      	b.n	80044ee <_free_r+0x22>
 8004512:	461a      	mov	r2, r3
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	b10b      	cbz	r3, 800451c <_free_r+0x50>
 8004518:	42a3      	cmp	r3, r4
 800451a:	d9fa      	bls.n	8004512 <_free_r+0x46>
 800451c:	6811      	ldr	r1, [r2, #0]
 800451e:	1855      	adds	r5, r2, r1
 8004520:	42a5      	cmp	r5, r4
 8004522:	d10b      	bne.n	800453c <_free_r+0x70>
 8004524:	6824      	ldr	r4, [r4, #0]
 8004526:	4421      	add	r1, r4
 8004528:	1854      	adds	r4, r2, r1
 800452a:	42a3      	cmp	r3, r4
 800452c:	6011      	str	r1, [r2, #0]
 800452e:	d1e0      	bne.n	80044f2 <_free_r+0x26>
 8004530:	681c      	ldr	r4, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	6053      	str	r3, [r2, #4]
 8004536:	440c      	add	r4, r1
 8004538:	6014      	str	r4, [r2, #0]
 800453a:	e7da      	b.n	80044f2 <_free_r+0x26>
 800453c:	d902      	bls.n	8004544 <_free_r+0x78>
 800453e:	230c      	movs	r3, #12
 8004540:	6003      	str	r3, [r0, #0]
 8004542:	e7d6      	b.n	80044f2 <_free_r+0x26>
 8004544:	6825      	ldr	r5, [r4, #0]
 8004546:	1961      	adds	r1, r4, r5
 8004548:	428b      	cmp	r3, r1
 800454a:	bf04      	itt	eq
 800454c:	6819      	ldreq	r1, [r3, #0]
 800454e:	685b      	ldreq	r3, [r3, #4]
 8004550:	6063      	str	r3, [r4, #4]
 8004552:	bf04      	itt	eq
 8004554:	1949      	addeq	r1, r1, r5
 8004556:	6021      	streq	r1, [r4, #0]
 8004558:	6054      	str	r4, [r2, #4]
 800455a:	e7ca      	b.n	80044f2 <_free_r+0x26>
 800455c:	b003      	add	sp, #12
 800455e:	bd30      	pop	{r4, r5, pc}
 8004560:	200003a0 	.word	0x200003a0

08004564 <malloc>:
 8004564:	4b02      	ldr	r3, [pc, #8]	; (8004570 <malloc+0xc>)
 8004566:	4601      	mov	r1, r0
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	f000 b823 	b.w	80045b4 <_malloc_r>
 800456e:	bf00      	nop
 8004570:	20000064 	.word	0x20000064

08004574 <sbrk_aligned>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4e0e      	ldr	r6, [pc, #56]	; (80045b0 <sbrk_aligned+0x3c>)
 8004578:	460c      	mov	r4, r1
 800457a:	6831      	ldr	r1, [r6, #0]
 800457c:	4605      	mov	r5, r0
 800457e:	b911      	cbnz	r1, 8004586 <sbrk_aligned+0x12>
 8004580:	f000 fcce 	bl	8004f20 <_sbrk_r>
 8004584:	6030      	str	r0, [r6, #0]
 8004586:	4621      	mov	r1, r4
 8004588:	4628      	mov	r0, r5
 800458a:	f000 fcc9 	bl	8004f20 <_sbrk_r>
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	d00a      	beq.n	80045a8 <sbrk_aligned+0x34>
 8004592:	1cc4      	adds	r4, r0, #3
 8004594:	f024 0403 	bic.w	r4, r4, #3
 8004598:	42a0      	cmp	r0, r4
 800459a:	d007      	beq.n	80045ac <sbrk_aligned+0x38>
 800459c:	1a21      	subs	r1, r4, r0
 800459e:	4628      	mov	r0, r5
 80045a0:	f000 fcbe 	bl	8004f20 <_sbrk_r>
 80045a4:	3001      	adds	r0, #1
 80045a6:	d101      	bne.n	80045ac <sbrk_aligned+0x38>
 80045a8:	f04f 34ff 	mov.w	r4, #4294967295
 80045ac:	4620      	mov	r0, r4
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	200003a4 	.word	0x200003a4

080045b4 <_malloc_r>:
 80045b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b8:	1ccd      	adds	r5, r1, #3
 80045ba:	f025 0503 	bic.w	r5, r5, #3
 80045be:	3508      	adds	r5, #8
 80045c0:	2d0c      	cmp	r5, #12
 80045c2:	bf38      	it	cc
 80045c4:	250c      	movcc	r5, #12
 80045c6:	2d00      	cmp	r5, #0
 80045c8:	4607      	mov	r7, r0
 80045ca:	db01      	blt.n	80045d0 <_malloc_r+0x1c>
 80045cc:	42a9      	cmp	r1, r5
 80045ce:	d905      	bls.n	80045dc <_malloc_r+0x28>
 80045d0:	230c      	movs	r3, #12
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	2600      	movs	r6, #0
 80045d6:	4630      	mov	r0, r6
 80045d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80046b0 <_malloc_r+0xfc>
 80045e0:	f000 f868 	bl	80046b4 <__malloc_lock>
 80045e4:	f8d8 3000 	ldr.w	r3, [r8]
 80045e8:	461c      	mov	r4, r3
 80045ea:	bb5c      	cbnz	r4, 8004644 <_malloc_r+0x90>
 80045ec:	4629      	mov	r1, r5
 80045ee:	4638      	mov	r0, r7
 80045f0:	f7ff ffc0 	bl	8004574 <sbrk_aligned>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	4604      	mov	r4, r0
 80045f8:	d155      	bne.n	80046a6 <_malloc_r+0xf2>
 80045fa:	f8d8 4000 	ldr.w	r4, [r8]
 80045fe:	4626      	mov	r6, r4
 8004600:	2e00      	cmp	r6, #0
 8004602:	d145      	bne.n	8004690 <_malloc_r+0xdc>
 8004604:	2c00      	cmp	r4, #0
 8004606:	d048      	beq.n	800469a <_malloc_r+0xe6>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	4631      	mov	r1, r6
 800460c:	4638      	mov	r0, r7
 800460e:	eb04 0903 	add.w	r9, r4, r3
 8004612:	f000 fc85 	bl	8004f20 <_sbrk_r>
 8004616:	4581      	cmp	r9, r0
 8004618:	d13f      	bne.n	800469a <_malloc_r+0xe6>
 800461a:	6821      	ldr	r1, [r4, #0]
 800461c:	1a6d      	subs	r5, r5, r1
 800461e:	4629      	mov	r1, r5
 8004620:	4638      	mov	r0, r7
 8004622:	f7ff ffa7 	bl	8004574 <sbrk_aligned>
 8004626:	3001      	adds	r0, #1
 8004628:	d037      	beq.n	800469a <_malloc_r+0xe6>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	442b      	add	r3, r5
 800462e:	6023      	str	r3, [r4, #0]
 8004630:	f8d8 3000 	ldr.w	r3, [r8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d038      	beq.n	80046aa <_malloc_r+0xf6>
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	42a2      	cmp	r2, r4
 800463c:	d12b      	bne.n	8004696 <_malloc_r+0xe2>
 800463e:	2200      	movs	r2, #0
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	e00f      	b.n	8004664 <_malloc_r+0xb0>
 8004644:	6822      	ldr	r2, [r4, #0]
 8004646:	1b52      	subs	r2, r2, r5
 8004648:	d41f      	bmi.n	800468a <_malloc_r+0xd6>
 800464a:	2a0b      	cmp	r2, #11
 800464c:	d917      	bls.n	800467e <_malloc_r+0xca>
 800464e:	1961      	adds	r1, r4, r5
 8004650:	42a3      	cmp	r3, r4
 8004652:	6025      	str	r5, [r4, #0]
 8004654:	bf18      	it	ne
 8004656:	6059      	strne	r1, [r3, #4]
 8004658:	6863      	ldr	r3, [r4, #4]
 800465a:	bf08      	it	eq
 800465c:	f8c8 1000 	streq.w	r1, [r8]
 8004660:	5162      	str	r2, [r4, r5]
 8004662:	604b      	str	r3, [r1, #4]
 8004664:	4638      	mov	r0, r7
 8004666:	f104 060b 	add.w	r6, r4, #11
 800466a:	f000 f829 	bl	80046c0 <__malloc_unlock>
 800466e:	f026 0607 	bic.w	r6, r6, #7
 8004672:	1d23      	adds	r3, r4, #4
 8004674:	1af2      	subs	r2, r6, r3
 8004676:	d0ae      	beq.n	80045d6 <_malloc_r+0x22>
 8004678:	1b9b      	subs	r3, r3, r6
 800467a:	50a3      	str	r3, [r4, r2]
 800467c:	e7ab      	b.n	80045d6 <_malloc_r+0x22>
 800467e:	42a3      	cmp	r3, r4
 8004680:	6862      	ldr	r2, [r4, #4]
 8004682:	d1dd      	bne.n	8004640 <_malloc_r+0x8c>
 8004684:	f8c8 2000 	str.w	r2, [r8]
 8004688:	e7ec      	b.n	8004664 <_malloc_r+0xb0>
 800468a:	4623      	mov	r3, r4
 800468c:	6864      	ldr	r4, [r4, #4]
 800468e:	e7ac      	b.n	80045ea <_malloc_r+0x36>
 8004690:	4634      	mov	r4, r6
 8004692:	6876      	ldr	r6, [r6, #4]
 8004694:	e7b4      	b.n	8004600 <_malloc_r+0x4c>
 8004696:	4613      	mov	r3, r2
 8004698:	e7cc      	b.n	8004634 <_malloc_r+0x80>
 800469a:	230c      	movs	r3, #12
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	4638      	mov	r0, r7
 80046a0:	f000 f80e 	bl	80046c0 <__malloc_unlock>
 80046a4:	e797      	b.n	80045d6 <_malloc_r+0x22>
 80046a6:	6025      	str	r5, [r4, #0]
 80046a8:	e7dc      	b.n	8004664 <_malloc_r+0xb0>
 80046aa:	605b      	str	r3, [r3, #4]
 80046ac:	deff      	udf	#255	; 0xff
 80046ae:	bf00      	nop
 80046b0:	200003a0 	.word	0x200003a0

080046b4 <__malloc_lock>:
 80046b4:	4801      	ldr	r0, [pc, #4]	; (80046bc <__malloc_lock+0x8>)
 80046b6:	f7ff b88c 	b.w	80037d2 <__retarget_lock_acquire_recursive>
 80046ba:	bf00      	nop
 80046bc:	2000039c 	.word	0x2000039c

080046c0 <__malloc_unlock>:
 80046c0:	4801      	ldr	r0, [pc, #4]	; (80046c8 <__malloc_unlock+0x8>)
 80046c2:	f7ff b887 	b.w	80037d4 <__retarget_lock_release_recursive>
 80046c6:	bf00      	nop
 80046c8:	2000039c 	.word	0x2000039c

080046cc <_Balloc>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	69c6      	ldr	r6, [r0, #28]
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	b976      	cbnz	r6, 80046f4 <_Balloc+0x28>
 80046d6:	2010      	movs	r0, #16
 80046d8:	f7ff ff44 	bl	8004564 <malloc>
 80046dc:	4602      	mov	r2, r0
 80046de:	61e0      	str	r0, [r4, #28]
 80046e0:	b920      	cbnz	r0, 80046ec <_Balloc+0x20>
 80046e2:	4b18      	ldr	r3, [pc, #96]	; (8004744 <_Balloc+0x78>)
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <_Balloc+0x7c>)
 80046e6:	216b      	movs	r1, #107	; 0x6b
 80046e8:	f000 fc38 	bl	8004f5c <__assert_func>
 80046ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80046f0:	6006      	str	r6, [r0, #0]
 80046f2:	60c6      	str	r6, [r0, #12]
 80046f4:	69e6      	ldr	r6, [r4, #28]
 80046f6:	68f3      	ldr	r3, [r6, #12]
 80046f8:	b183      	cbz	r3, 800471c <_Balloc+0x50>
 80046fa:	69e3      	ldr	r3, [r4, #28]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004702:	b9b8      	cbnz	r0, 8004734 <_Balloc+0x68>
 8004704:	2101      	movs	r1, #1
 8004706:	fa01 f605 	lsl.w	r6, r1, r5
 800470a:	1d72      	adds	r2, r6, #5
 800470c:	0092      	lsls	r2, r2, #2
 800470e:	4620      	mov	r0, r4
 8004710:	f000 fc42 	bl	8004f98 <_calloc_r>
 8004714:	b160      	cbz	r0, 8004730 <_Balloc+0x64>
 8004716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800471a:	e00e      	b.n	800473a <_Balloc+0x6e>
 800471c:	2221      	movs	r2, #33	; 0x21
 800471e:	2104      	movs	r1, #4
 8004720:	4620      	mov	r0, r4
 8004722:	f000 fc39 	bl	8004f98 <_calloc_r>
 8004726:	69e3      	ldr	r3, [r4, #28]
 8004728:	60f0      	str	r0, [r6, #12]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e4      	bne.n	80046fa <_Balloc+0x2e>
 8004730:	2000      	movs	r0, #0
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	6802      	ldr	r2, [r0, #0]
 8004736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800473a:	2300      	movs	r3, #0
 800473c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004740:	e7f7      	b.n	8004732 <_Balloc+0x66>
 8004742:	bf00      	nop
 8004744:	080056a9 	.word	0x080056a9
 8004748:	08005729 	.word	0x08005729

0800474c <_Bfree>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	69c6      	ldr	r6, [r0, #28]
 8004750:	4605      	mov	r5, r0
 8004752:	460c      	mov	r4, r1
 8004754:	b976      	cbnz	r6, 8004774 <_Bfree+0x28>
 8004756:	2010      	movs	r0, #16
 8004758:	f7ff ff04 	bl	8004564 <malloc>
 800475c:	4602      	mov	r2, r0
 800475e:	61e8      	str	r0, [r5, #28]
 8004760:	b920      	cbnz	r0, 800476c <_Bfree+0x20>
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <_Bfree+0x3c>)
 8004764:	4809      	ldr	r0, [pc, #36]	; (800478c <_Bfree+0x40>)
 8004766:	218f      	movs	r1, #143	; 0x8f
 8004768:	f000 fbf8 	bl	8004f5c <__assert_func>
 800476c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004770:	6006      	str	r6, [r0, #0]
 8004772:	60c6      	str	r6, [r0, #12]
 8004774:	b13c      	cbz	r4, 8004786 <_Bfree+0x3a>
 8004776:	69eb      	ldr	r3, [r5, #28]
 8004778:	6862      	ldr	r2, [r4, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004780:	6021      	str	r1, [r4, #0]
 8004782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	080056a9 	.word	0x080056a9
 800478c:	08005729 	.word	0x08005729

08004790 <__multadd>:
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	690d      	ldr	r5, [r1, #16]
 8004796:	4607      	mov	r7, r0
 8004798:	460c      	mov	r4, r1
 800479a:	461e      	mov	r6, r3
 800479c:	f101 0c14 	add.w	ip, r1, #20
 80047a0:	2000      	movs	r0, #0
 80047a2:	f8dc 3000 	ldr.w	r3, [ip]
 80047a6:	b299      	uxth	r1, r3
 80047a8:	fb02 6101 	mla	r1, r2, r1, r6
 80047ac:	0c1e      	lsrs	r6, r3, #16
 80047ae:	0c0b      	lsrs	r3, r1, #16
 80047b0:	fb02 3306 	mla	r3, r2, r6, r3
 80047b4:	b289      	uxth	r1, r1
 80047b6:	3001      	adds	r0, #1
 80047b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80047bc:	4285      	cmp	r5, r0
 80047be:	f84c 1b04 	str.w	r1, [ip], #4
 80047c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80047c6:	dcec      	bgt.n	80047a2 <__multadd+0x12>
 80047c8:	b30e      	cbz	r6, 800480e <__multadd+0x7e>
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc19      	bgt.n	8004804 <__multadd+0x74>
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4638      	mov	r0, r7
 80047d4:	3101      	adds	r1, #1
 80047d6:	f7ff ff79 	bl	80046cc <_Balloc>
 80047da:	4680      	mov	r8, r0
 80047dc:	b928      	cbnz	r0, 80047ea <__multadd+0x5a>
 80047de:	4602      	mov	r2, r0
 80047e0:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <__multadd+0x84>)
 80047e2:	480d      	ldr	r0, [pc, #52]	; (8004818 <__multadd+0x88>)
 80047e4:	21ba      	movs	r1, #186	; 0xba
 80047e6:	f000 fbb9 	bl	8004f5c <__assert_func>
 80047ea:	6922      	ldr	r2, [r4, #16]
 80047ec:	3202      	adds	r2, #2
 80047ee:	f104 010c 	add.w	r1, r4, #12
 80047f2:	0092      	lsls	r2, r2, #2
 80047f4:	300c      	adds	r0, #12
 80047f6:	f000 fba3 	bl	8004f40 <memcpy>
 80047fa:	4621      	mov	r1, r4
 80047fc:	4638      	mov	r0, r7
 80047fe:	f7ff ffa5 	bl	800474c <_Bfree>
 8004802:	4644      	mov	r4, r8
 8004804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004808:	3501      	adds	r5, #1
 800480a:	615e      	str	r6, [r3, #20]
 800480c:	6125      	str	r5, [r4, #16]
 800480e:	4620      	mov	r0, r4
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	08005718 	.word	0x08005718
 8004818:	08005729 	.word	0x08005729

0800481c <__hi0bits>:
 800481c:	0c03      	lsrs	r3, r0, #16
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	b9d3      	cbnz	r3, 8004858 <__hi0bits+0x3c>
 8004822:	0400      	lsls	r0, r0, #16
 8004824:	2310      	movs	r3, #16
 8004826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800482a:	bf04      	itt	eq
 800482c:	0200      	lsleq	r0, r0, #8
 800482e:	3308      	addeq	r3, #8
 8004830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004834:	bf04      	itt	eq
 8004836:	0100      	lsleq	r0, r0, #4
 8004838:	3304      	addeq	r3, #4
 800483a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800483e:	bf04      	itt	eq
 8004840:	0080      	lsleq	r0, r0, #2
 8004842:	3302      	addeq	r3, #2
 8004844:	2800      	cmp	r0, #0
 8004846:	db05      	blt.n	8004854 <__hi0bits+0x38>
 8004848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800484c:	f103 0301 	add.w	r3, r3, #1
 8004850:	bf08      	it	eq
 8004852:	2320      	moveq	r3, #32
 8004854:	4618      	mov	r0, r3
 8004856:	4770      	bx	lr
 8004858:	2300      	movs	r3, #0
 800485a:	e7e4      	b.n	8004826 <__hi0bits+0xa>

0800485c <__lo0bits>:
 800485c:	6803      	ldr	r3, [r0, #0]
 800485e:	f013 0207 	ands.w	r2, r3, #7
 8004862:	d00c      	beq.n	800487e <__lo0bits+0x22>
 8004864:	07d9      	lsls	r1, r3, #31
 8004866:	d422      	bmi.n	80048ae <__lo0bits+0x52>
 8004868:	079a      	lsls	r2, r3, #30
 800486a:	bf49      	itett	mi
 800486c:	085b      	lsrmi	r3, r3, #1
 800486e:	089b      	lsrpl	r3, r3, #2
 8004870:	6003      	strmi	r3, [r0, #0]
 8004872:	2201      	movmi	r2, #1
 8004874:	bf5c      	itt	pl
 8004876:	6003      	strpl	r3, [r0, #0]
 8004878:	2202      	movpl	r2, #2
 800487a:	4610      	mov	r0, r2
 800487c:	4770      	bx	lr
 800487e:	b299      	uxth	r1, r3
 8004880:	b909      	cbnz	r1, 8004886 <__lo0bits+0x2a>
 8004882:	0c1b      	lsrs	r3, r3, #16
 8004884:	2210      	movs	r2, #16
 8004886:	b2d9      	uxtb	r1, r3
 8004888:	b909      	cbnz	r1, 800488e <__lo0bits+0x32>
 800488a:	3208      	adds	r2, #8
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	0719      	lsls	r1, r3, #28
 8004890:	bf04      	itt	eq
 8004892:	091b      	lsreq	r3, r3, #4
 8004894:	3204      	addeq	r2, #4
 8004896:	0799      	lsls	r1, r3, #30
 8004898:	bf04      	itt	eq
 800489a:	089b      	lsreq	r3, r3, #2
 800489c:	3202      	addeq	r2, #2
 800489e:	07d9      	lsls	r1, r3, #31
 80048a0:	d403      	bmi.n	80048aa <__lo0bits+0x4e>
 80048a2:	085b      	lsrs	r3, r3, #1
 80048a4:	f102 0201 	add.w	r2, r2, #1
 80048a8:	d003      	beq.n	80048b2 <__lo0bits+0x56>
 80048aa:	6003      	str	r3, [r0, #0]
 80048ac:	e7e5      	b.n	800487a <__lo0bits+0x1e>
 80048ae:	2200      	movs	r2, #0
 80048b0:	e7e3      	b.n	800487a <__lo0bits+0x1e>
 80048b2:	2220      	movs	r2, #32
 80048b4:	e7e1      	b.n	800487a <__lo0bits+0x1e>
	...

080048b8 <__i2b>:
 80048b8:	b510      	push	{r4, lr}
 80048ba:	460c      	mov	r4, r1
 80048bc:	2101      	movs	r1, #1
 80048be:	f7ff ff05 	bl	80046cc <_Balloc>
 80048c2:	4602      	mov	r2, r0
 80048c4:	b928      	cbnz	r0, 80048d2 <__i2b+0x1a>
 80048c6:	4b05      	ldr	r3, [pc, #20]	; (80048dc <__i2b+0x24>)
 80048c8:	4805      	ldr	r0, [pc, #20]	; (80048e0 <__i2b+0x28>)
 80048ca:	f240 1145 	movw	r1, #325	; 0x145
 80048ce:	f000 fb45 	bl	8004f5c <__assert_func>
 80048d2:	2301      	movs	r3, #1
 80048d4:	6144      	str	r4, [r0, #20]
 80048d6:	6103      	str	r3, [r0, #16]
 80048d8:	bd10      	pop	{r4, pc}
 80048da:	bf00      	nop
 80048dc:	08005718 	.word	0x08005718
 80048e0:	08005729 	.word	0x08005729

080048e4 <__multiply>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	4691      	mov	r9, r2
 80048ea:	690a      	ldr	r2, [r1, #16]
 80048ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	bfb8      	it	lt
 80048f4:	460b      	movlt	r3, r1
 80048f6:	460c      	mov	r4, r1
 80048f8:	bfbc      	itt	lt
 80048fa:	464c      	movlt	r4, r9
 80048fc:	4699      	movlt	r9, r3
 80048fe:	6927      	ldr	r7, [r4, #16]
 8004900:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004904:	68a3      	ldr	r3, [r4, #8]
 8004906:	6861      	ldr	r1, [r4, #4]
 8004908:	eb07 060a 	add.w	r6, r7, sl
 800490c:	42b3      	cmp	r3, r6
 800490e:	b085      	sub	sp, #20
 8004910:	bfb8      	it	lt
 8004912:	3101      	addlt	r1, #1
 8004914:	f7ff feda 	bl	80046cc <_Balloc>
 8004918:	b930      	cbnz	r0, 8004928 <__multiply+0x44>
 800491a:	4602      	mov	r2, r0
 800491c:	4b44      	ldr	r3, [pc, #272]	; (8004a30 <__multiply+0x14c>)
 800491e:	4845      	ldr	r0, [pc, #276]	; (8004a34 <__multiply+0x150>)
 8004920:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004924:	f000 fb1a 	bl	8004f5c <__assert_func>
 8004928:	f100 0514 	add.w	r5, r0, #20
 800492c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004930:	462b      	mov	r3, r5
 8004932:	2200      	movs	r2, #0
 8004934:	4543      	cmp	r3, r8
 8004936:	d321      	bcc.n	800497c <__multiply+0x98>
 8004938:	f104 0314 	add.w	r3, r4, #20
 800493c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004940:	f109 0314 	add.w	r3, r9, #20
 8004944:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004948:	9202      	str	r2, [sp, #8]
 800494a:	1b3a      	subs	r2, r7, r4
 800494c:	3a15      	subs	r2, #21
 800494e:	f022 0203 	bic.w	r2, r2, #3
 8004952:	3204      	adds	r2, #4
 8004954:	f104 0115 	add.w	r1, r4, #21
 8004958:	428f      	cmp	r7, r1
 800495a:	bf38      	it	cc
 800495c:	2204      	movcc	r2, #4
 800495e:	9201      	str	r2, [sp, #4]
 8004960:	9a02      	ldr	r2, [sp, #8]
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d80c      	bhi.n	8004982 <__multiply+0x9e>
 8004968:	2e00      	cmp	r6, #0
 800496a:	dd03      	ble.n	8004974 <__multiply+0x90>
 800496c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05b      	beq.n	8004a2c <__multiply+0x148>
 8004974:	6106      	str	r6, [r0, #16]
 8004976:	b005      	add	sp, #20
 8004978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800497c:	f843 2b04 	str.w	r2, [r3], #4
 8004980:	e7d8      	b.n	8004934 <__multiply+0x50>
 8004982:	f8b3 a000 	ldrh.w	sl, [r3]
 8004986:	f1ba 0f00 	cmp.w	sl, #0
 800498a:	d024      	beq.n	80049d6 <__multiply+0xf2>
 800498c:	f104 0e14 	add.w	lr, r4, #20
 8004990:	46a9      	mov	r9, r5
 8004992:	f04f 0c00 	mov.w	ip, #0
 8004996:	f85e 2b04 	ldr.w	r2, [lr], #4
 800499a:	f8d9 1000 	ldr.w	r1, [r9]
 800499e:	fa1f fb82 	uxth.w	fp, r2
 80049a2:	b289      	uxth	r1, r1
 80049a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80049a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80049ac:	f8d9 2000 	ldr.w	r2, [r9]
 80049b0:	4461      	add	r1, ip
 80049b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80049ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80049be:	b289      	uxth	r1, r1
 80049c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80049c4:	4577      	cmp	r7, lr
 80049c6:	f849 1b04 	str.w	r1, [r9], #4
 80049ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80049ce:	d8e2      	bhi.n	8004996 <__multiply+0xb2>
 80049d0:	9a01      	ldr	r2, [sp, #4]
 80049d2:	f845 c002 	str.w	ip, [r5, r2]
 80049d6:	9a03      	ldr	r2, [sp, #12]
 80049d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80049dc:	3304      	adds	r3, #4
 80049de:	f1b9 0f00 	cmp.w	r9, #0
 80049e2:	d021      	beq.n	8004a28 <__multiply+0x144>
 80049e4:	6829      	ldr	r1, [r5, #0]
 80049e6:	f104 0c14 	add.w	ip, r4, #20
 80049ea:	46ae      	mov	lr, r5
 80049ec:	f04f 0a00 	mov.w	sl, #0
 80049f0:	f8bc b000 	ldrh.w	fp, [ip]
 80049f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80049f8:	fb09 220b 	mla	r2, r9, fp, r2
 80049fc:	4452      	add	r2, sl
 80049fe:	b289      	uxth	r1, r1
 8004a00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004a04:	f84e 1b04 	str.w	r1, [lr], #4
 8004a08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004a0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a10:	f8be 1000 	ldrh.w	r1, [lr]
 8004a14:	fb09 110a 	mla	r1, r9, sl, r1
 8004a18:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004a1c:	4567      	cmp	r7, ip
 8004a1e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004a22:	d8e5      	bhi.n	80049f0 <__multiply+0x10c>
 8004a24:	9a01      	ldr	r2, [sp, #4]
 8004a26:	50a9      	str	r1, [r5, r2]
 8004a28:	3504      	adds	r5, #4
 8004a2a:	e799      	b.n	8004960 <__multiply+0x7c>
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	e79b      	b.n	8004968 <__multiply+0x84>
 8004a30:	08005718 	.word	0x08005718
 8004a34:	08005729 	.word	0x08005729

08004a38 <__pow5mult>:
 8004a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	4615      	mov	r5, r2
 8004a3e:	f012 0203 	ands.w	r2, r2, #3
 8004a42:	4606      	mov	r6, r0
 8004a44:	460f      	mov	r7, r1
 8004a46:	d007      	beq.n	8004a58 <__pow5mult+0x20>
 8004a48:	4c25      	ldr	r4, [pc, #148]	; (8004ae0 <__pow5mult+0xa8>)
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a52:	f7ff fe9d 	bl	8004790 <__multadd>
 8004a56:	4607      	mov	r7, r0
 8004a58:	10ad      	asrs	r5, r5, #2
 8004a5a:	d03d      	beq.n	8004ad8 <__pow5mult+0xa0>
 8004a5c:	69f4      	ldr	r4, [r6, #28]
 8004a5e:	b97c      	cbnz	r4, 8004a80 <__pow5mult+0x48>
 8004a60:	2010      	movs	r0, #16
 8004a62:	f7ff fd7f 	bl	8004564 <malloc>
 8004a66:	4602      	mov	r2, r0
 8004a68:	61f0      	str	r0, [r6, #28]
 8004a6a:	b928      	cbnz	r0, 8004a78 <__pow5mult+0x40>
 8004a6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <__pow5mult+0xac>)
 8004a6e:	481e      	ldr	r0, [pc, #120]	; (8004ae8 <__pow5mult+0xb0>)
 8004a70:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004a74:	f000 fa72 	bl	8004f5c <__assert_func>
 8004a78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a7c:	6004      	str	r4, [r0, #0]
 8004a7e:	60c4      	str	r4, [r0, #12]
 8004a80:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004a84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a88:	b94c      	cbnz	r4, 8004a9e <__pow5mult+0x66>
 8004a8a:	f240 2171 	movw	r1, #625	; 0x271
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f7ff ff12 	bl	80048b8 <__i2b>
 8004a94:	2300      	movs	r3, #0
 8004a96:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	6003      	str	r3, [r0, #0]
 8004a9e:	f04f 0900 	mov.w	r9, #0
 8004aa2:	07eb      	lsls	r3, r5, #31
 8004aa4:	d50a      	bpl.n	8004abc <__pow5mult+0x84>
 8004aa6:	4639      	mov	r1, r7
 8004aa8:	4622      	mov	r2, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ff1a 	bl	80048e4 <__multiply>
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	4680      	mov	r8, r0
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f7ff fe49 	bl	800474c <_Bfree>
 8004aba:	4647      	mov	r7, r8
 8004abc:	106d      	asrs	r5, r5, #1
 8004abe:	d00b      	beq.n	8004ad8 <__pow5mult+0xa0>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	b938      	cbnz	r0, 8004ad4 <__pow5mult+0x9c>
 8004ac4:	4622      	mov	r2, r4
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff ff0b 	bl	80048e4 <__multiply>
 8004ace:	6020      	str	r0, [r4, #0]
 8004ad0:	f8c0 9000 	str.w	r9, [r0]
 8004ad4:	4604      	mov	r4, r0
 8004ad6:	e7e4      	b.n	8004aa2 <__pow5mult+0x6a>
 8004ad8:	4638      	mov	r0, r7
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	bf00      	nop
 8004ae0:	08005878 	.word	0x08005878
 8004ae4:	080056a9 	.word	0x080056a9
 8004ae8:	08005729 	.word	0x08005729

08004aec <__lshift>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	460c      	mov	r4, r1
 8004af2:	6849      	ldr	r1, [r1, #4]
 8004af4:	6923      	ldr	r3, [r4, #16]
 8004af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	4607      	mov	r7, r0
 8004afe:	4691      	mov	r9, r2
 8004b00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b04:	f108 0601 	add.w	r6, r8, #1
 8004b08:	42b3      	cmp	r3, r6
 8004b0a:	db0b      	blt.n	8004b24 <__lshift+0x38>
 8004b0c:	4638      	mov	r0, r7
 8004b0e:	f7ff fddd 	bl	80046cc <_Balloc>
 8004b12:	4605      	mov	r5, r0
 8004b14:	b948      	cbnz	r0, 8004b2a <__lshift+0x3e>
 8004b16:	4602      	mov	r2, r0
 8004b18:	4b28      	ldr	r3, [pc, #160]	; (8004bbc <__lshift+0xd0>)
 8004b1a:	4829      	ldr	r0, [pc, #164]	; (8004bc0 <__lshift+0xd4>)
 8004b1c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004b20:	f000 fa1c 	bl	8004f5c <__assert_func>
 8004b24:	3101      	adds	r1, #1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	e7ee      	b.n	8004b08 <__lshift+0x1c>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f100 0114 	add.w	r1, r0, #20
 8004b30:	f100 0210 	add.w	r2, r0, #16
 8004b34:	4618      	mov	r0, r3
 8004b36:	4553      	cmp	r3, sl
 8004b38:	db33      	blt.n	8004ba2 <__lshift+0xb6>
 8004b3a:	6920      	ldr	r0, [r4, #16]
 8004b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b40:	f104 0314 	add.w	r3, r4, #20
 8004b44:	f019 091f 	ands.w	r9, r9, #31
 8004b48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004b4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004b50:	d02b      	beq.n	8004baa <__lshift+0xbe>
 8004b52:	f1c9 0e20 	rsb	lr, r9, #32
 8004b56:	468a      	mov	sl, r1
 8004b58:	2200      	movs	r2, #0
 8004b5a:	6818      	ldr	r0, [r3, #0]
 8004b5c:	fa00 f009 	lsl.w	r0, r0, r9
 8004b60:	4310      	orrs	r0, r2
 8004b62:	f84a 0b04 	str.w	r0, [sl], #4
 8004b66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b6a:	459c      	cmp	ip, r3
 8004b6c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004b70:	d8f3      	bhi.n	8004b5a <__lshift+0x6e>
 8004b72:	ebac 0304 	sub.w	r3, ip, r4
 8004b76:	3b15      	subs	r3, #21
 8004b78:	f023 0303 	bic.w	r3, r3, #3
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	f104 0015 	add.w	r0, r4, #21
 8004b82:	4584      	cmp	ip, r0
 8004b84:	bf38      	it	cc
 8004b86:	2304      	movcc	r3, #4
 8004b88:	50ca      	str	r2, [r1, r3]
 8004b8a:	b10a      	cbz	r2, 8004b90 <__lshift+0xa4>
 8004b8c:	f108 0602 	add.w	r6, r8, #2
 8004b90:	3e01      	subs	r6, #1
 8004b92:	4638      	mov	r0, r7
 8004b94:	612e      	str	r6, [r5, #16]
 8004b96:	4621      	mov	r1, r4
 8004b98:	f7ff fdd8 	bl	800474c <_Bfree>
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ba2:	f842 0f04 	str.w	r0, [r2, #4]!
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	e7c5      	b.n	8004b36 <__lshift+0x4a>
 8004baa:	3904      	subs	r1, #4
 8004bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb0:	f841 2f04 	str.w	r2, [r1, #4]!
 8004bb4:	459c      	cmp	ip, r3
 8004bb6:	d8f9      	bhi.n	8004bac <__lshift+0xc0>
 8004bb8:	e7ea      	b.n	8004b90 <__lshift+0xa4>
 8004bba:	bf00      	nop
 8004bbc:	08005718 	.word	0x08005718
 8004bc0:	08005729 	.word	0x08005729

08004bc4 <__mcmp>:
 8004bc4:	b530      	push	{r4, r5, lr}
 8004bc6:	6902      	ldr	r2, [r0, #16]
 8004bc8:	690c      	ldr	r4, [r1, #16]
 8004bca:	1b12      	subs	r2, r2, r4
 8004bcc:	d10e      	bne.n	8004bec <__mcmp+0x28>
 8004bce:	f100 0314 	add.w	r3, r0, #20
 8004bd2:	3114      	adds	r1, #20
 8004bd4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004bd8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004bdc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004be0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d003      	beq.n	8004bf0 <__mcmp+0x2c>
 8004be8:	d305      	bcc.n	8004bf6 <__mcmp+0x32>
 8004bea:	2201      	movs	r2, #1
 8004bec:	4610      	mov	r0, r2
 8004bee:	bd30      	pop	{r4, r5, pc}
 8004bf0:	4283      	cmp	r3, r0
 8004bf2:	d3f3      	bcc.n	8004bdc <__mcmp+0x18>
 8004bf4:	e7fa      	b.n	8004bec <__mcmp+0x28>
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	e7f7      	b.n	8004bec <__mcmp+0x28>

08004bfc <__mdiff>:
 8004bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	460c      	mov	r4, r1
 8004c02:	4606      	mov	r6, r0
 8004c04:	4611      	mov	r1, r2
 8004c06:	4620      	mov	r0, r4
 8004c08:	4690      	mov	r8, r2
 8004c0a:	f7ff ffdb 	bl	8004bc4 <__mcmp>
 8004c0e:	1e05      	subs	r5, r0, #0
 8004c10:	d110      	bne.n	8004c34 <__mdiff+0x38>
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	f7ff fd59 	bl	80046cc <_Balloc>
 8004c1a:	b930      	cbnz	r0, 8004c2a <__mdiff+0x2e>
 8004c1c:	4b3a      	ldr	r3, [pc, #232]	; (8004d08 <__mdiff+0x10c>)
 8004c1e:	4602      	mov	r2, r0
 8004c20:	f240 2137 	movw	r1, #567	; 0x237
 8004c24:	4839      	ldr	r0, [pc, #228]	; (8004d0c <__mdiff+0x110>)
 8004c26:	f000 f999 	bl	8004f5c <__assert_func>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004c30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c34:	bfa4      	itt	ge
 8004c36:	4643      	movge	r3, r8
 8004c38:	46a0      	movge	r8, r4
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004c40:	bfa6      	itte	ge
 8004c42:	461c      	movge	r4, r3
 8004c44:	2500      	movge	r5, #0
 8004c46:	2501      	movlt	r5, #1
 8004c48:	f7ff fd40 	bl	80046cc <_Balloc>
 8004c4c:	b920      	cbnz	r0, 8004c58 <__mdiff+0x5c>
 8004c4e:	4b2e      	ldr	r3, [pc, #184]	; (8004d08 <__mdiff+0x10c>)
 8004c50:	4602      	mov	r2, r0
 8004c52:	f240 2145 	movw	r1, #581	; 0x245
 8004c56:	e7e5      	b.n	8004c24 <__mdiff+0x28>
 8004c58:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004c5c:	6926      	ldr	r6, [r4, #16]
 8004c5e:	60c5      	str	r5, [r0, #12]
 8004c60:	f104 0914 	add.w	r9, r4, #20
 8004c64:	f108 0514 	add.w	r5, r8, #20
 8004c68:	f100 0e14 	add.w	lr, r0, #20
 8004c6c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004c74:	f108 0210 	add.w	r2, r8, #16
 8004c78:	46f2      	mov	sl, lr
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004c80:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004c84:	fa11 f88b 	uxtah	r8, r1, fp
 8004c88:	b299      	uxth	r1, r3
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	eba8 0801 	sub.w	r8, r8, r1
 8004c90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004c94:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004c98:	fa1f f888 	uxth.w	r8, r8
 8004c9c:	1419      	asrs	r1, r3, #16
 8004c9e:	454e      	cmp	r6, r9
 8004ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004ca4:	f84a 3b04 	str.w	r3, [sl], #4
 8004ca8:	d8e8      	bhi.n	8004c7c <__mdiff+0x80>
 8004caa:	1b33      	subs	r3, r6, r4
 8004cac:	3b15      	subs	r3, #21
 8004cae:	f023 0303 	bic.w	r3, r3, #3
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	3415      	adds	r4, #21
 8004cb6:	42a6      	cmp	r6, r4
 8004cb8:	bf38      	it	cc
 8004cba:	2304      	movcc	r3, #4
 8004cbc:	441d      	add	r5, r3
 8004cbe:	4473      	add	r3, lr
 8004cc0:	469e      	mov	lr, r3
 8004cc2:	462e      	mov	r6, r5
 8004cc4:	4566      	cmp	r6, ip
 8004cc6:	d30e      	bcc.n	8004ce6 <__mdiff+0xea>
 8004cc8:	f10c 0203 	add.w	r2, ip, #3
 8004ccc:	1b52      	subs	r2, r2, r5
 8004cce:	f022 0203 	bic.w	r2, r2, #3
 8004cd2:	3d03      	subs	r5, #3
 8004cd4:	45ac      	cmp	ip, r5
 8004cd6:	bf38      	it	cc
 8004cd8:	2200      	movcc	r2, #0
 8004cda:	4413      	add	r3, r2
 8004cdc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004ce0:	b17a      	cbz	r2, 8004d02 <__mdiff+0x106>
 8004ce2:	6107      	str	r7, [r0, #16]
 8004ce4:	e7a4      	b.n	8004c30 <__mdiff+0x34>
 8004ce6:	f856 8b04 	ldr.w	r8, [r6], #4
 8004cea:	fa11 f288 	uxtah	r2, r1, r8
 8004cee:	1414      	asrs	r4, r2, #16
 8004cf0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004cfa:	f84e 2b04 	str.w	r2, [lr], #4
 8004cfe:	1421      	asrs	r1, r4, #16
 8004d00:	e7e0      	b.n	8004cc4 <__mdiff+0xc8>
 8004d02:	3f01      	subs	r7, #1
 8004d04:	e7ea      	b.n	8004cdc <__mdiff+0xe0>
 8004d06:	bf00      	nop
 8004d08:	08005718 	.word	0x08005718
 8004d0c:	08005729 	.word	0x08005729

08004d10 <__d2b>:
 8004d10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	460f      	mov	r7, r1
 8004d16:	2101      	movs	r1, #1
 8004d18:	ec59 8b10 	vmov	r8, r9, d0
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	f7ff fcd5 	bl	80046cc <_Balloc>
 8004d22:	4604      	mov	r4, r0
 8004d24:	b930      	cbnz	r0, 8004d34 <__d2b+0x24>
 8004d26:	4602      	mov	r2, r0
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <__d2b+0xac>)
 8004d2a:	4825      	ldr	r0, [pc, #148]	; (8004dc0 <__d2b+0xb0>)
 8004d2c:	f240 310f 	movw	r1, #783	; 0x30f
 8004d30:	f000 f914 	bl	8004f5c <__assert_func>
 8004d34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d3c:	bb2d      	cbnz	r5, 8004d8a <__d2b+0x7a>
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	f1b8 0300 	subs.w	r3, r8, #0
 8004d44:	d026      	beq.n	8004d94 <__d2b+0x84>
 8004d46:	4668      	mov	r0, sp
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	f7ff fd87 	bl	800485c <__lo0bits>
 8004d4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004d52:	b1e8      	cbz	r0, 8004d90 <__d2b+0x80>
 8004d54:	f1c0 0320 	rsb	r3, r0, #32
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	40c2      	lsrs	r2, r0
 8004d60:	6163      	str	r3, [r4, #20]
 8004d62:	9201      	str	r2, [sp, #4]
 8004d64:	9b01      	ldr	r3, [sp, #4]
 8004d66:	61a3      	str	r3, [r4, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2202      	movne	r2, #2
 8004d6e:	2201      	moveq	r2, #1
 8004d70:	6122      	str	r2, [r4, #16]
 8004d72:	b1bd      	cbz	r5, 8004da4 <__d2b+0x94>
 8004d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004d78:	4405      	add	r5, r0
 8004d7a:	603d      	str	r5, [r7, #0]
 8004d7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d80:	6030      	str	r0, [r6, #0]
 8004d82:	4620      	mov	r0, r4
 8004d84:	b003      	add	sp, #12
 8004d86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	e7d6      	b.n	8004d3e <__d2b+0x2e>
 8004d90:	6161      	str	r1, [r4, #20]
 8004d92:	e7e7      	b.n	8004d64 <__d2b+0x54>
 8004d94:	a801      	add	r0, sp, #4
 8004d96:	f7ff fd61 	bl	800485c <__lo0bits>
 8004d9a:	9b01      	ldr	r3, [sp, #4]
 8004d9c:	6163      	str	r3, [r4, #20]
 8004d9e:	3020      	adds	r0, #32
 8004da0:	2201      	movs	r2, #1
 8004da2:	e7e5      	b.n	8004d70 <__d2b+0x60>
 8004da4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004da8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004dac:	6038      	str	r0, [r7, #0]
 8004dae:	6918      	ldr	r0, [r3, #16]
 8004db0:	f7ff fd34 	bl	800481c <__hi0bits>
 8004db4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004db8:	e7e2      	b.n	8004d80 <__d2b+0x70>
 8004dba:	bf00      	nop
 8004dbc:	08005718 	.word	0x08005718
 8004dc0:	08005729 	.word	0x08005729

08004dc4 <__sflush_r>:
 8004dc4:	898a      	ldrh	r2, [r1, #12]
 8004dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dca:	4605      	mov	r5, r0
 8004dcc:	0710      	lsls	r0, r2, #28
 8004dce:	460c      	mov	r4, r1
 8004dd0:	d458      	bmi.n	8004e84 <__sflush_r+0xc0>
 8004dd2:	684b      	ldr	r3, [r1, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	dc05      	bgt.n	8004de4 <__sflush_r+0x20>
 8004dd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	dc02      	bgt.n	8004de4 <__sflush_r+0x20>
 8004dde:	2000      	movs	r0, #0
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	d0f9      	beq.n	8004dde <__sflush_r+0x1a>
 8004dea:	2300      	movs	r3, #0
 8004dec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004df0:	682f      	ldr	r7, [r5, #0]
 8004df2:	6a21      	ldr	r1, [r4, #32]
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	d032      	beq.n	8004e5e <__sflush_r+0x9a>
 8004df8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	075a      	lsls	r2, r3, #29
 8004dfe:	d505      	bpl.n	8004e0c <__sflush_r+0x48>
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	1ac0      	subs	r0, r0, r3
 8004e04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e06:	b10b      	cbz	r3, 8004e0c <__sflush_r+0x48>
 8004e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e0a:	1ac0      	subs	r0, r0, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e12:	6a21      	ldr	r1, [r4, #32]
 8004e14:	4628      	mov	r0, r5
 8004e16:	47b0      	blx	r6
 8004e18:	1c43      	adds	r3, r0, #1
 8004e1a:	89a3      	ldrh	r3, [r4, #12]
 8004e1c:	d106      	bne.n	8004e2c <__sflush_r+0x68>
 8004e1e:	6829      	ldr	r1, [r5, #0]
 8004e20:	291d      	cmp	r1, #29
 8004e22:	d82b      	bhi.n	8004e7c <__sflush_r+0xb8>
 8004e24:	4a29      	ldr	r2, [pc, #164]	; (8004ecc <__sflush_r+0x108>)
 8004e26:	410a      	asrs	r2, r1
 8004e28:	07d6      	lsls	r6, r2, #31
 8004e2a:	d427      	bmi.n	8004e7c <__sflush_r+0xb8>
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	6062      	str	r2, [r4, #4]
 8004e30:	04d9      	lsls	r1, r3, #19
 8004e32:	6922      	ldr	r2, [r4, #16]
 8004e34:	6022      	str	r2, [r4, #0]
 8004e36:	d504      	bpl.n	8004e42 <__sflush_r+0x7e>
 8004e38:	1c42      	adds	r2, r0, #1
 8004e3a:	d101      	bne.n	8004e40 <__sflush_r+0x7c>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b903      	cbnz	r3, 8004e42 <__sflush_r+0x7e>
 8004e40:	6560      	str	r0, [r4, #84]	; 0x54
 8004e42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e44:	602f      	str	r7, [r5, #0]
 8004e46:	2900      	cmp	r1, #0
 8004e48:	d0c9      	beq.n	8004dde <__sflush_r+0x1a>
 8004e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4e:	4299      	cmp	r1, r3
 8004e50:	d002      	beq.n	8004e58 <__sflush_r+0x94>
 8004e52:	4628      	mov	r0, r5
 8004e54:	f7ff fb3a 	bl	80044cc <_free_r>
 8004e58:	2000      	movs	r0, #0
 8004e5a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e5c:	e7c0      	b.n	8004de0 <__sflush_r+0x1c>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b0      	blx	r6
 8004e64:	1c41      	adds	r1, r0, #1
 8004e66:	d1c8      	bne.n	8004dfa <__sflush_r+0x36>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0c5      	beq.n	8004dfa <__sflush_r+0x36>
 8004e6e:	2b1d      	cmp	r3, #29
 8004e70:	d001      	beq.n	8004e76 <__sflush_r+0xb2>
 8004e72:	2b16      	cmp	r3, #22
 8004e74:	d101      	bne.n	8004e7a <__sflush_r+0xb6>
 8004e76:	602f      	str	r7, [r5, #0]
 8004e78:	e7b1      	b.n	8004dde <__sflush_r+0x1a>
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e80:	81a3      	strh	r3, [r4, #12]
 8004e82:	e7ad      	b.n	8004de0 <__sflush_r+0x1c>
 8004e84:	690f      	ldr	r7, [r1, #16]
 8004e86:	2f00      	cmp	r7, #0
 8004e88:	d0a9      	beq.n	8004dde <__sflush_r+0x1a>
 8004e8a:	0793      	lsls	r3, r2, #30
 8004e8c:	680e      	ldr	r6, [r1, #0]
 8004e8e:	bf08      	it	eq
 8004e90:	694b      	ldreq	r3, [r1, #20]
 8004e92:	600f      	str	r7, [r1, #0]
 8004e94:	bf18      	it	ne
 8004e96:	2300      	movne	r3, #0
 8004e98:	eba6 0807 	sub.w	r8, r6, r7
 8004e9c:	608b      	str	r3, [r1, #8]
 8004e9e:	f1b8 0f00 	cmp.w	r8, #0
 8004ea2:	dd9c      	ble.n	8004dde <__sflush_r+0x1a>
 8004ea4:	6a21      	ldr	r1, [r4, #32]
 8004ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ea8:	4643      	mov	r3, r8
 8004eaa:	463a      	mov	r2, r7
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b0      	blx	r6
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	dc06      	bgt.n	8004ec2 <__sflush_r+0xfe>
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e78e      	b.n	8004de0 <__sflush_r+0x1c>
 8004ec2:	4407      	add	r7, r0
 8004ec4:	eba8 0800 	sub.w	r8, r8, r0
 8004ec8:	e7e9      	b.n	8004e9e <__sflush_r+0xda>
 8004eca:	bf00      	nop
 8004ecc:	dfbffffe 	.word	0xdfbffffe

08004ed0 <_fflush_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	690b      	ldr	r3, [r1, #16]
 8004ed4:	4605      	mov	r5, r0
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	b913      	cbnz	r3, 8004ee0 <_fflush_r+0x10>
 8004eda:	2500      	movs	r5, #0
 8004edc:	4628      	mov	r0, r5
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	b118      	cbz	r0, 8004eea <_fflush_r+0x1a>
 8004ee2:	6a03      	ldr	r3, [r0, #32]
 8004ee4:	b90b      	cbnz	r3, 8004eea <_fflush_r+0x1a>
 8004ee6:	f7fe fb7d 	bl	80035e4 <__sinit>
 8004eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0f3      	beq.n	8004eda <_fflush_r+0xa>
 8004ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ef4:	07d0      	lsls	r0, r2, #31
 8004ef6:	d404      	bmi.n	8004f02 <_fflush_r+0x32>
 8004ef8:	0599      	lsls	r1, r3, #22
 8004efa:	d402      	bmi.n	8004f02 <_fflush_r+0x32>
 8004efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004efe:	f7fe fc68 	bl	80037d2 <__retarget_lock_acquire_recursive>
 8004f02:	4628      	mov	r0, r5
 8004f04:	4621      	mov	r1, r4
 8004f06:	f7ff ff5d 	bl	8004dc4 <__sflush_r>
 8004f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f0c:	07da      	lsls	r2, r3, #31
 8004f0e:	4605      	mov	r5, r0
 8004f10:	d4e4      	bmi.n	8004edc <_fflush_r+0xc>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	059b      	lsls	r3, r3, #22
 8004f16:	d4e1      	bmi.n	8004edc <_fflush_r+0xc>
 8004f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f1a:	f7fe fc5b 	bl	80037d4 <__retarget_lock_release_recursive>
 8004f1e:	e7dd      	b.n	8004edc <_fflush_r+0xc>

08004f20 <_sbrk_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4d06      	ldr	r5, [pc, #24]	; (8004f3c <_sbrk_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4604      	mov	r4, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	602b      	str	r3, [r5, #0]
 8004f2c:	f7fc f90e 	bl	800114c <_sbrk>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_sbrk_r+0x1a>
 8004f34:	682b      	ldr	r3, [r5, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_sbrk_r+0x1a>
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	20000398 	.word	0x20000398

08004f40 <memcpy>:
 8004f40:	440a      	add	r2, r1
 8004f42:	4291      	cmp	r1, r2
 8004f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f48:	d100      	bne.n	8004f4c <memcpy+0xc>
 8004f4a:	4770      	bx	lr
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f56:	4291      	cmp	r1, r2
 8004f58:	d1f9      	bne.n	8004f4e <memcpy+0xe>
 8004f5a:	bd10      	pop	{r4, pc}

08004f5c <__assert_func>:
 8004f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f5e:	4614      	mov	r4, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <__assert_func+0x2c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4605      	mov	r5, r0
 8004f68:	68d8      	ldr	r0, [r3, #12]
 8004f6a:	b14c      	cbz	r4, 8004f80 <__assert_func+0x24>
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <__assert_func+0x30>)
 8004f6e:	9100      	str	r1, [sp, #0]
 8004f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <__assert_func+0x34>)
 8004f76:	462b      	mov	r3, r5
 8004f78:	f000 f844 	bl	8005004 <fiprintf>
 8004f7c:	f000 f854 	bl	8005028 <abort>
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <__assert_func+0x38>)
 8004f82:	461c      	mov	r4, r3
 8004f84:	e7f3      	b.n	8004f6e <__assert_func+0x12>
 8004f86:	bf00      	nop
 8004f88:	20000064 	.word	0x20000064
 8004f8c:	0800588e 	.word	0x0800588e
 8004f90:	0800589b 	.word	0x0800589b
 8004f94:	080058c9 	.word	0x080058c9

08004f98 <_calloc_r>:
 8004f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9a:	fba1 2402 	umull	r2, r4, r1, r2
 8004f9e:	b94c      	cbnz	r4, 8004fb4 <_calloc_r+0x1c>
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	9201      	str	r2, [sp, #4]
 8004fa4:	f7ff fb06 	bl	80045b4 <_malloc_r>
 8004fa8:	9a01      	ldr	r2, [sp, #4]
 8004faa:	4605      	mov	r5, r0
 8004fac:	b930      	cbnz	r0, 8004fbc <_calloc_r+0x24>
 8004fae:	4628      	mov	r0, r5
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bd30      	pop	{r4, r5, pc}
 8004fb4:	220c      	movs	r2, #12
 8004fb6:	6002      	str	r2, [r0, #0]
 8004fb8:	2500      	movs	r5, #0
 8004fba:	e7f8      	b.n	8004fae <_calloc_r+0x16>
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f7fe fb8a 	bl	80036d6 <memset>
 8004fc2:	e7f4      	b.n	8004fae <_calloc_r+0x16>

08004fc4 <__ascii_mbtowc>:
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	b901      	cbnz	r1, 8004fca <__ascii_mbtowc+0x6>
 8004fc8:	a901      	add	r1, sp, #4
 8004fca:	b142      	cbz	r2, 8004fde <__ascii_mbtowc+0x1a>
 8004fcc:	b14b      	cbz	r3, 8004fe2 <__ascii_mbtowc+0x1e>
 8004fce:	7813      	ldrb	r3, [r2, #0]
 8004fd0:	600b      	str	r3, [r1, #0]
 8004fd2:	7812      	ldrb	r2, [r2, #0]
 8004fd4:	1e10      	subs	r0, r2, #0
 8004fd6:	bf18      	it	ne
 8004fd8:	2001      	movne	r0, #1
 8004fda:	b002      	add	sp, #8
 8004fdc:	4770      	bx	lr
 8004fde:	4610      	mov	r0, r2
 8004fe0:	e7fb      	b.n	8004fda <__ascii_mbtowc+0x16>
 8004fe2:	f06f 0001 	mvn.w	r0, #1
 8004fe6:	e7f8      	b.n	8004fda <__ascii_mbtowc+0x16>

08004fe8 <__ascii_wctomb>:
 8004fe8:	b149      	cbz	r1, 8004ffe <__ascii_wctomb+0x16>
 8004fea:	2aff      	cmp	r2, #255	; 0xff
 8004fec:	bf85      	ittet	hi
 8004fee:	238a      	movhi	r3, #138	; 0x8a
 8004ff0:	6003      	strhi	r3, [r0, #0]
 8004ff2:	700a      	strbls	r2, [r1, #0]
 8004ff4:	f04f 30ff 	movhi.w	r0, #4294967295
 8004ff8:	bf98      	it	ls
 8004ffa:	2001      	movls	r0, #1
 8004ffc:	4770      	bx	lr
 8004ffe:	4608      	mov	r0, r1
 8005000:	4770      	bx	lr
	...

08005004 <fiprintf>:
 8005004:	b40e      	push	{r1, r2, r3}
 8005006:	b503      	push	{r0, r1, lr}
 8005008:	4601      	mov	r1, r0
 800500a:	ab03      	add	r3, sp, #12
 800500c:	4805      	ldr	r0, [pc, #20]	; (8005024 <fiprintf+0x20>)
 800500e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005012:	6800      	ldr	r0, [r0, #0]
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	f000 f837 	bl	8005088 <_vfiprintf_r>
 800501a:	b002      	add	sp, #8
 800501c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
 8005024:	20000064 	.word	0x20000064

08005028 <abort>:
 8005028:	b508      	push	{r3, lr}
 800502a:	2006      	movs	r0, #6
 800502c:	f000 fa04 	bl	8005438 <raise>
 8005030:	2001      	movs	r0, #1
 8005032:	f7fc f813 	bl	800105c <_exit>

08005036 <__sfputc_r>:
 8005036:	6893      	ldr	r3, [r2, #8]
 8005038:	3b01      	subs	r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	b410      	push	{r4}
 800503e:	6093      	str	r3, [r2, #8]
 8005040:	da08      	bge.n	8005054 <__sfputc_r+0x1e>
 8005042:	6994      	ldr	r4, [r2, #24]
 8005044:	42a3      	cmp	r3, r4
 8005046:	db01      	blt.n	800504c <__sfputc_r+0x16>
 8005048:	290a      	cmp	r1, #10
 800504a:	d103      	bne.n	8005054 <__sfputc_r+0x1e>
 800504c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005050:	f000 b934 	b.w	80052bc <__swbuf_r>
 8005054:	6813      	ldr	r3, [r2, #0]
 8005056:	1c58      	adds	r0, r3, #1
 8005058:	6010      	str	r0, [r2, #0]
 800505a:	7019      	strb	r1, [r3, #0]
 800505c:	4608      	mov	r0, r1
 800505e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005062:	4770      	bx	lr

08005064 <__sfputs_r>:
 8005064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005066:	4606      	mov	r6, r0
 8005068:	460f      	mov	r7, r1
 800506a:	4614      	mov	r4, r2
 800506c:	18d5      	adds	r5, r2, r3
 800506e:	42ac      	cmp	r4, r5
 8005070:	d101      	bne.n	8005076 <__sfputs_r+0x12>
 8005072:	2000      	movs	r0, #0
 8005074:	e007      	b.n	8005086 <__sfputs_r+0x22>
 8005076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800507a:	463a      	mov	r2, r7
 800507c:	4630      	mov	r0, r6
 800507e:	f7ff ffda 	bl	8005036 <__sfputc_r>
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d1f3      	bne.n	800506e <__sfputs_r+0xa>
 8005086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005088 <_vfiprintf_r>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	460d      	mov	r5, r1
 800508e:	b09d      	sub	sp, #116	; 0x74
 8005090:	4614      	mov	r4, r2
 8005092:	4698      	mov	r8, r3
 8005094:	4606      	mov	r6, r0
 8005096:	b118      	cbz	r0, 80050a0 <_vfiprintf_r+0x18>
 8005098:	6a03      	ldr	r3, [r0, #32]
 800509a:	b90b      	cbnz	r3, 80050a0 <_vfiprintf_r+0x18>
 800509c:	f7fe faa2 	bl	80035e4 <__sinit>
 80050a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050a2:	07d9      	lsls	r1, r3, #31
 80050a4:	d405      	bmi.n	80050b2 <_vfiprintf_r+0x2a>
 80050a6:	89ab      	ldrh	r3, [r5, #12]
 80050a8:	059a      	lsls	r2, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <_vfiprintf_r+0x2a>
 80050ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ae:	f7fe fb90 	bl	80037d2 <__retarget_lock_acquire_recursive>
 80050b2:	89ab      	ldrh	r3, [r5, #12]
 80050b4:	071b      	lsls	r3, r3, #28
 80050b6:	d501      	bpl.n	80050bc <_vfiprintf_r+0x34>
 80050b8:	692b      	ldr	r3, [r5, #16]
 80050ba:	b99b      	cbnz	r3, 80050e4 <_vfiprintf_r+0x5c>
 80050bc:	4629      	mov	r1, r5
 80050be:	4630      	mov	r0, r6
 80050c0:	f000 f93a 	bl	8005338 <__swsetup_r>
 80050c4:	b170      	cbz	r0, 80050e4 <_vfiprintf_r+0x5c>
 80050c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80050c8:	07dc      	lsls	r4, r3, #31
 80050ca:	d504      	bpl.n	80050d6 <_vfiprintf_r+0x4e>
 80050cc:	f04f 30ff 	mov.w	r0, #4294967295
 80050d0:	b01d      	add	sp, #116	; 0x74
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d6:	89ab      	ldrh	r3, [r5, #12]
 80050d8:	0598      	lsls	r0, r3, #22
 80050da:	d4f7      	bmi.n	80050cc <_vfiprintf_r+0x44>
 80050dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050de:	f7fe fb79 	bl	80037d4 <__retarget_lock_release_recursive>
 80050e2:	e7f3      	b.n	80050cc <_vfiprintf_r+0x44>
 80050e4:	2300      	movs	r3, #0
 80050e6:	9309      	str	r3, [sp, #36]	; 0x24
 80050e8:	2320      	movs	r3, #32
 80050ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80050f2:	2330      	movs	r3, #48	; 0x30
 80050f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80052a8 <_vfiprintf_r+0x220>
 80050f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050fc:	f04f 0901 	mov.w	r9, #1
 8005100:	4623      	mov	r3, r4
 8005102:	469a      	mov	sl, r3
 8005104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005108:	b10a      	cbz	r2, 800510e <_vfiprintf_r+0x86>
 800510a:	2a25      	cmp	r2, #37	; 0x25
 800510c:	d1f9      	bne.n	8005102 <_vfiprintf_r+0x7a>
 800510e:	ebba 0b04 	subs.w	fp, sl, r4
 8005112:	d00b      	beq.n	800512c <_vfiprintf_r+0xa4>
 8005114:	465b      	mov	r3, fp
 8005116:	4622      	mov	r2, r4
 8005118:	4629      	mov	r1, r5
 800511a:	4630      	mov	r0, r6
 800511c:	f7ff ffa2 	bl	8005064 <__sfputs_r>
 8005120:	3001      	adds	r0, #1
 8005122:	f000 80a9 	beq.w	8005278 <_vfiprintf_r+0x1f0>
 8005126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005128:	445a      	add	r2, fp
 800512a:	9209      	str	r2, [sp, #36]	; 0x24
 800512c:	f89a 3000 	ldrb.w	r3, [sl]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80a1 	beq.w	8005278 <_vfiprintf_r+0x1f0>
 8005136:	2300      	movs	r3, #0
 8005138:	f04f 32ff 	mov.w	r2, #4294967295
 800513c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005140:	f10a 0a01 	add.w	sl, sl, #1
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	9307      	str	r3, [sp, #28]
 8005148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800514c:	931a      	str	r3, [sp, #104]	; 0x68
 800514e:	4654      	mov	r4, sl
 8005150:	2205      	movs	r2, #5
 8005152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005156:	4854      	ldr	r0, [pc, #336]	; (80052a8 <_vfiprintf_r+0x220>)
 8005158:	f7fb f83a 	bl	80001d0 <memchr>
 800515c:	9a04      	ldr	r2, [sp, #16]
 800515e:	b9d8      	cbnz	r0, 8005198 <_vfiprintf_r+0x110>
 8005160:	06d1      	lsls	r1, r2, #27
 8005162:	bf44      	itt	mi
 8005164:	2320      	movmi	r3, #32
 8005166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800516a:	0713      	lsls	r3, r2, #28
 800516c:	bf44      	itt	mi
 800516e:	232b      	movmi	r3, #43	; 0x2b
 8005170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005174:	f89a 3000 	ldrb.w	r3, [sl]
 8005178:	2b2a      	cmp	r3, #42	; 0x2a
 800517a:	d015      	beq.n	80051a8 <_vfiprintf_r+0x120>
 800517c:	9a07      	ldr	r2, [sp, #28]
 800517e:	4654      	mov	r4, sl
 8005180:	2000      	movs	r0, #0
 8005182:	f04f 0c0a 	mov.w	ip, #10
 8005186:	4621      	mov	r1, r4
 8005188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800518c:	3b30      	subs	r3, #48	; 0x30
 800518e:	2b09      	cmp	r3, #9
 8005190:	d94d      	bls.n	800522e <_vfiprintf_r+0x1a6>
 8005192:	b1b0      	cbz	r0, 80051c2 <_vfiprintf_r+0x13a>
 8005194:	9207      	str	r2, [sp, #28]
 8005196:	e014      	b.n	80051c2 <_vfiprintf_r+0x13a>
 8005198:	eba0 0308 	sub.w	r3, r0, r8
 800519c:	fa09 f303 	lsl.w	r3, r9, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	46a2      	mov	sl, r4
 80051a6:	e7d2      	b.n	800514e <_vfiprintf_r+0xc6>
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	1d19      	adds	r1, r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	9103      	str	r1, [sp, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	bfbb      	ittet	lt
 80051b4:	425b      	neglt	r3, r3
 80051b6:	f042 0202 	orrlt.w	r2, r2, #2
 80051ba:	9307      	strge	r3, [sp, #28]
 80051bc:	9307      	strlt	r3, [sp, #28]
 80051be:	bfb8      	it	lt
 80051c0:	9204      	strlt	r2, [sp, #16]
 80051c2:	7823      	ldrb	r3, [r4, #0]
 80051c4:	2b2e      	cmp	r3, #46	; 0x2e
 80051c6:	d10c      	bne.n	80051e2 <_vfiprintf_r+0x15a>
 80051c8:	7863      	ldrb	r3, [r4, #1]
 80051ca:	2b2a      	cmp	r3, #42	; 0x2a
 80051cc:	d134      	bne.n	8005238 <_vfiprintf_r+0x1b0>
 80051ce:	9b03      	ldr	r3, [sp, #12]
 80051d0:	1d1a      	adds	r2, r3, #4
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	9203      	str	r2, [sp, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bfb8      	it	lt
 80051da:	f04f 33ff 	movlt.w	r3, #4294967295
 80051de:	3402      	adds	r4, #2
 80051e0:	9305      	str	r3, [sp, #20]
 80051e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80052b8 <_vfiprintf_r+0x230>
 80051e6:	7821      	ldrb	r1, [r4, #0]
 80051e8:	2203      	movs	r2, #3
 80051ea:	4650      	mov	r0, sl
 80051ec:	f7fa fff0 	bl	80001d0 <memchr>
 80051f0:	b138      	cbz	r0, 8005202 <_vfiprintf_r+0x17a>
 80051f2:	9b04      	ldr	r3, [sp, #16]
 80051f4:	eba0 000a 	sub.w	r0, r0, sl
 80051f8:	2240      	movs	r2, #64	; 0x40
 80051fa:	4082      	lsls	r2, r0
 80051fc:	4313      	orrs	r3, r2
 80051fe:	3401      	adds	r4, #1
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005206:	4829      	ldr	r0, [pc, #164]	; (80052ac <_vfiprintf_r+0x224>)
 8005208:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800520c:	2206      	movs	r2, #6
 800520e:	f7fa ffdf 	bl	80001d0 <memchr>
 8005212:	2800      	cmp	r0, #0
 8005214:	d03f      	beq.n	8005296 <_vfiprintf_r+0x20e>
 8005216:	4b26      	ldr	r3, [pc, #152]	; (80052b0 <_vfiprintf_r+0x228>)
 8005218:	bb1b      	cbnz	r3, 8005262 <_vfiprintf_r+0x1da>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	3307      	adds	r3, #7
 800521e:	f023 0307 	bic.w	r3, r3, #7
 8005222:	3308      	adds	r3, #8
 8005224:	9303      	str	r3, [sp, #12]
 8005226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005228:	443b      	add	r3, r7
 800522a:	9309      	str	r3, [sp, #36]	; 0x24
 800522c:	e768      	b.n	8005100 <_vfiprintf_r+0x78>
 800522e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005232:	460c      	mov	r4, r1
 8005234:	2001      	movs	r0, #1
 8005236:	e7a6      	b.n	8005186 <_vfiprintf_r+0xfe>
 8005238:	2300      	movs	r3, #0
 800523a:	3401      	adds	r4, #1
 800523c:	9305      	str	r3, [sp, #20]
 800523e:	4619      	mov	r1, r3
 8005240:	f04f 0c0a 	mov.w	ip, #10
 8005244:	4620      	mov	r0, r4
 8005246:	f810 2b01 	ldrb.w	r2, [r0], #1
 800524a:	3a30      	subs	r2, #48	; 0x30
 800524c:	2a09      	cmp	r2, #9
 800524e:	d903      	bls.n	8005258 <_vfiprintf_r+0x1d0>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0c6      	beq.n	80051e2 <_vfiprintf_r+0x15a>
 8005254:	9105      	str	r1, [sp, #20]
 8005256:	e7c4      	b.n	80051e2 <_vfiprintf_r+0x15a>
 8005258:	fb0c 2101 	mla	r1, ip, r1, r2
 800525c:	4604      	mov	r4, r0
 800525e:	2301      	movs	r3, #1
 8005260:	e7f0      	b.n	8005244 <_vfiprintf_r+0x1bc>
 8005262:	ab03      	add	r3, sp, #12
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	462a      	mov	r2, r5
 8005268:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <_vfiprintf_r+0x22c>)
 800526a:	a904      	add	r1, sp, #16
 800526c:	4630      	mov	r0, r6
 800526e:	f7fd fd67 	bl	8002d40 <_printf_float>
 8005272:	4607      	mov	r7, r0
 8005274:	1c78      	adds	r0, r7, #1
 8005276:	d1d6      	bne.n	8005226 <_vfiprintf_r+0x19e>
 8005278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800527a:	07d9      	lsls	r1, r3, #31
 800527c:	d405      	bmi.n	800528a <_vfiprintf_r+0x202>
 800527e:	89ab      	ldrh	r3, [r5, #12]
 8005280:	059a      	lsls	r2, r3, #22
 8005282:	d402      	bmi.n	800528a <_vfiprintf_r+0x202>
 8005284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005286:	f7fe faa5 	bl	80037d4 <__retarget_lock_release_recursive>
 800528a:	89ab      	ldrh	r3, [r5, #12]
 800528c:	065b      	lsls	r3, r3, #25
 800528e:	f53f af1d 	bmi.w	80050cc <_vfiprintf_r+0x44>
 8005292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005294:	e71c      	b.n	80050d0 <_vfiprintf_r+0x48>
 8005296:	ab03      	add	r3, sp, #12
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	462a      	mov	r2, r5
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <_vfiprintf_r+0x22c>)
 800529e:	a904      	add	r1, sp, #16
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7fd fff1 	bl	8003288 <_printf_i>
 80052a6:	e7e4      	b.n	8005272 <_vfiprintf_r+0x1ea>
 80052a8:	080059cb 	.word	0x080059cb
 80052ac:	080059d5 	.word	0x080059d5
 80052b0:	08002d41 	.word	0x08002d41
 80052b4:	08005065 	.word	0x08005065
 80052b8:	080059d1 	.word	0x080059d1

080052bc <__swbuf_r>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	460e      	mov	r6, r1
 80052c0:	4614      	mov	r4, r2
 80052c2:	4605      	mov	r5, r0
 80052c4:	b118      	cbz	r0, 80052ce <__swbuf_r+0x12>
 80052c6:	6a03      	ldr	r3, [r0, #32]
 80052c8:	b90b      	cbnz	r3, 80052ce <__swbuf_r+0x12>
 80052ca:	f7fe f98b 	bl	80035e4 <__sinit>
 80052ce:	69a3      	ldr	r3, [r4, #24]
 80052d0:	60a3      	str	r3, [r4, #8]
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	071a      	lsls	r2, r3, #28
 80052d6:	d525      	bpl.n	8005324 <__swbuf_r+0x68>
 80052d8:	6923      	ldr	r3, [r4, #16]
 80052da:	b31b      	cbz	r3, 8005324 <__swbuf_r+0x68>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	6922      	ldr	r2, [r4, #16]
 80052e0:	1a98      	subs	r0, r3, r2
 80052e2:	6963      	ldr	r3, [r4, #20]
 80052e4:	b2f6      	uxtb	r6, r6
 80052e6:	4283      	cmp	r3, r0
 80052e8:	4637      	mov	r7, r6
 80052ea:	dc04      	bgt.n	80052f6 <__swbuf_r+0x3a>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7ff fdee 	bl	8004ed0 <_fflush_r>
 80052f4:	b9e0      	cbnz	r0, 8005330 <__swbuf_r+0x74>
 80052f6:	68a3      	ldr	r3, [r4, #8]
 80052f8:	3b01      	subs	r3, #1
 80052fa:	60a3      	str	r3, [r4, #8]
 80052fc:	6823      	ldr	r3, [r4, #0]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	701e      	strb	r6, [r3, #0]
 8005304:	6962      	ldr	r2, [r4, #20]
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	429a      	cmp	r2, r3
 800530a:	d004      	beq.n	8005316 <__swbuf_r+0x5a>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	07db      	lsls	r3, r3, #31
 8005310:	d506      	bpl.n	8005320 <__swbuf_r+0x64>
 8005312:	2e0a      	cmp	r6, #10
 8005314:	d104      	bne.n	8005320 <__swbuf_r+0x64>
 8005316:	4621      	mov	r1, r4
 8005318:	4628      	mov	r0, r5
 800531a:	f7ff fdd9 	bl	8004ed0 <_fflush_r>
 800531e:	b938      	cbnz	r0, 8005330 <__swbuf_r+0x74>
 8005320:	4638      	mov	r0, r7
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f000 f806 	bl	8005338 <__swsetup_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	d0d5      	beq.n	80052dc <__swbuf_r+0x20>
 8005330:	f04f 37ff 	mov.w	r7, #4294967295
 8005334:	e7f4      	b.n	8005320 <__swbuf_r+0x64>
	...

08005338 <__swsetup_r>:
 8005338:	b538      	push	{r3, r4, r5, lr}
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <__swsetup_r+0xac>)
 800533c:	4605      	mov	r5, r0
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	460c      	mov	r4, r1
 8005342:	b118      	cbz	r0, 800534c <__swsetup_r+0x14>
 8005344:	6a03      	ldr	r3, [r0, #32]
 8005346:	b90b      	cbnz	r3, 800534c <__swsetup_r+0x14>
 8005348:	f7fe f94c 	bl	80035e4 <__sinit>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005352:	0718      	lsls	r0, r3, #28
 8005354:	d422      	bmi.n	800539c <__swsetup_r+0x64>
 8005356:	06d9      	lsls	r1, r3, #27
 8005358:	d407      	bmi.n	800536a <__swsetup_r+0x32>
 800535a:	2309      	movs	r3, #9
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	e034      	b.n	80053d4 <__swsetup_r+0x9c>
 800536a:	0758      	lsls	r0, r3, #29
 800536c:	d512      	bpl.n	8005394 <__swsetup_r+0x5c>
 800536e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005370:	b141      	cbz	r1, 8005384 <__swsetup_r+0x4c>
 8005372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005376:	4299      	cmp	r1, r3
 8005378:	d002      	beq.n	8005380 <__swsetup_r+0x48>
 800537a:	4628      	mov	r0, r5
 800537c:	f7ff f8a6 	bl	80044cc <_free_r>
 8005380:	2300      	movs	r3, #0
 8005382:	6363      	str	r3, [r4, #52]	; 0x34
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800538a:	81a3      	strh	r3, [r4, #12]
 800538c:	2300      	movs	r3, #0
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	6923      	ldr	r3, [r4, #16]
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f043 0308 	orr.w	r3, r3, #8
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	b94b      	cbnz	r3, 80053b4 <__swsetup_r+0x7c>
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053aa:	d003      	beq.n	80053b4 <__swsetup_r+0x7c>
 80053ac:	4621      	mov	r1, r4
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 f884 	bl	80054bc <__smakebuf_r>
 80053b4:	89a0      	ldrh	r0, [r4, #12]
 80053b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053ba:	f010 0301 	ands.w	r3, r0, #1
 80053be:	d00a      	beq.n	80053d6 <__swsetup_r+0x9e>
 80053c0:	2300      	movs	r3, #0
 80053c2:	60a3      	str	r3, [r4, #8]
 80053c4:	6963      	ldr	r3, [r4, #20]
 80053c6:	425b      	negs	r3, r3
 80053c8:	61a3      	str	r3, [r4, #24]
 80053ca:	6923      	ldr	r3, [r4, #16]
 80053cc:	b943      	cbnz	r3, 80053e0 <__swsetup_r+0xa8>
 80053ce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053d2:	d1c4      	bne.n	800535e <__swsetup_r+0x26>
 80053d4:	bd38      	pop	{r3, r4, r5, pc}
 80053d6:	0781      	lsls	r1, r0, #30
 80053d8:	bf58      	it	pl
 80053da:	6963      	ldrpl	r3, [r4, #20]
 80053dc:	60a3      	str	r3, [r4, #8]
 80053de:	e7f4      	b.n	80053ca <__swsetup_r+0x92>
 80053e0:	2000      	movs	r0, #0
 80053e2:	e7f7      	b.n	80053d4 <__swsetup_r+0x9c>
 80053e4:	20000064 	.word	0x20000064

080053e8 <_raise_r>:
 80053e8:	291f      	cmp	r1, #31
 80053ea:	b538      	push	{r3, r4, r5, lr}
 80053ec:	4604      	mov	r4, r0
 80053ee:	460d      	mov	r5, r1
 80053f0:	d904      	bls.n	80053fc <_raise_r+0x14>
 80053f2:	2316      	movs	r3, #22
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80053fe:	b112      	cbz	r2, 8005406 <_raise_r+0x1e>
 8005400:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005404:	b94b      	cbnz	r3, 800541a <_raise_r+0x32>
 8005406:	4620      	mov	r0, r4
 8005408:	f000 f830 	bl	800546c <_getpid_r>
 800540c:	462a      	mov	r2, r5
 800540e:	4601      	mov	r1, r0
 8005410:	4620      	mov	r0, r4
 8005412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005416:	f000 b817 	b.w	8005448 <_kill_r>
 800541a:	2b01      	cmp	r3, #1
 800541c:	d00a      	beq.n	8005434 <_raise_r+0x4c>
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	d103      	bne.n	800542a <_raise_r+0x42>
 8005422:	2316      	movs	r3, #22
 8005424:	6003      	str	r3, [r0, #0]
 8005426:	2001      	movs	r0, #1
 8005428:	e7e7      	b.n	80053fa <_raise_r+0x12>
 800542a:	2400      	movs	r4, #0
 800542c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005430:	4628      	mov	r0, r5
 8005432:	4798      	blx	r3
 8005434:	2000      	movs	r0, #0
 8005436:	e7e0      	b.n	80053fa <_raise_r+0x12>

08005438 <raise>:
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <raise+0xc>)
 800543a:	4601      	mov	r1, r0
 800543c:	6818      	ldr	r0, [r3, #0]
 800543e:	f7ff bfd3 	b.w	80053e8 <_raise_r>
 8005442:	bf00      	nop
 8005444:	20000064 	.word	0x20000064

08005448 <_kill_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	4d07      	ldr	r5, [pc, #28]	; (8005468 <_kill_r+0x20>)
 800544c:	2300      	movs	r3, #0
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	f7fb fdf1 	bl	800103c <_kill>
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d102      	bne.n	8005464 <_kill_r+0x1c>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b103      	cbz	r3, 8005464 <_kill_r+0x1c>
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	bd38      	pop	{r3, r4, r5, pc}
 8005466:	bf00      	nop
 8005468:	20000398 	.word	0x20000398

0800546c <_getpid_r>:
 800546c:	f7fb bdde 	b.w	800102c <_getpid>

08005470 <__swhatbuf_r>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	460c      	mov	r4, r1
 8005474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005478:	2900      	cmp	r1, #0
 800547a:	b096      	sub	sp, #88	; 0x58
 800547c:	4615      	mov	r5, r2
 800547e:	461e      	mov	r6, r3
 8005480:	da0d      	bge.n	800549e <__swhatbuf_r+0x2e>
 8005482:	89a3      	ldrh	r3, [r4, #12]
 8005484:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	bf0c      	ite	eq
 800548e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005492:	2340      	movne	r3, #64	; 0x40
 8005494:	2000      	movs	r0, #0
 8005496:	6031      	str	r1, [r6, #0]
 8005498:	602b      	str	r3, [r5, #0]
 800549a:	b016      	add	sp, #88	; 0x58
 800549c:	bd70      	pop	{r4, r5, r6, pc}
 800549e:	466a      	mov	r2, sp
 80054a0:	f000 f848 	bl	8005534 <_fstat_r>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	dbec      	blt.n	8005482 <__swhatbuf_r+0x12>
 80054a8:	9901      	ldr	r1, [sp, #4]
 80054aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80054ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80054b2:	4259      	negs	r1, r3
 80054b4:	4159      	adcs	r1, r3
 80054b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ba:	e7eb      	b.n	8005494 <__swhatbuf_r+0x24>

080054bc <__smakebuf_r>:
 80054bc:	898b      	ldrh	r3, [r1, #12]
 80054be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054c0:	079d      	lsls	r5, r3, #30
 80054c2:	4606      	mov	r6, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	d507      	bpl.n	80054d8 <__smakebuf_r+0x1c>
 80054c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	6123      	str	r3, [r4, #16]
 80054d0:	2301      	movs	r3, #1
 80054d2:	6163      	str	r3, [r4, #20]
 80054d4:	b002      	add	sp, #8
 80054d6:	bd70      	pop	{r4, r5, r6, pc}
 80054d8:	ab01      	add	r3, sp, #4
 80054da:	466a      	mov	r2, sp
 80054dc:	f7ff ffc8 	bl	8005470 <__swhatbuf_r>
 80054e0:	9900      	ldr	r1, [sp, #0]
 80054e2:	4605      	mov	r5, r0
 80054e4:	4630      	mov	r0, r6
 80054e6:	f7ff f865 	bl	80045b4 <_malloc_r>
 80054ea:	b948      	cbnz	r0, 8005500 <__smakebuf_r+0x44>
 80054ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f0:	059a      	lsls	r2, r3, #22
 80054f2:	d4ef      	bmi.n	80054d4 <__smakebuf_r+0x18>
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	f043 0302 	orr.w	r3, r3, #2
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	e7e3      	b.n	80054c8 <__smakebuf_r+0xc>
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	6020      	str	r0, [r4, #0]
 8005504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	9b00      	ldr	r3, [sp, #0]
 800550c:	6163      	str	r3, [r4, #20]
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	6120      	str	r0, [r4, #16]
 8005512:	b15b      	cbz	r3, 800552c <__smakebuf_r+0x70>
 8005514:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005518:	4630      	mov	r0, r6
 800551a:	f000 f81d 	bl	8005558 <_isatty_r>
 800551e:	b128      	cbz	r0, 800552c <__smakebuf_r+0x70>
 8005520:	89a3      	ldrh	r3, [r4, #12]
 8005522:	f023 0303 	bic.w	r3, r3, #3
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	89a3      	ldrh	r3, [r4, #12]
 800552e:	431d      	orrs	r5, r3
 8005530:	81a5      	strh	r5, [r4, #12]
 8005532:	e7cf      	b.n	80054d4 <__smakebuf_r+0x18>

08005534 <_fstat_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	; (8005554 <_fstat_r+0x20>)
 8005538:	2300      	movs	r3, #0
 800553a:	4604      	mov	r4, r0
 800553c:	4608      	mov	r0, r1
 800553e:	4611      	mov	r1, r2
 8005540:	602b      	str	r3, [r5, #0]
 8005542:	f7fb fdda 	bl	80010fa <_fstat>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d102      	bne.n	8005550 <_fstat_r+0x1c>
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	b103      	cbz	r3, 8005550 <_fstat_r+0x1c>
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	bd38      	pop	{r3, r4, r5, pc}
 8005552:	bf00      	nop
 8005554:	20000398 	.word	0x20000398

08005558 <_isatty_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d06      	ldr	r5, [pc, #24]	; (8005574 <_isatty_r+0x1c>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fb fdd9 	bl	800111a <_isatty>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_isatty_r+0x1a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_isatty_r+0x1a>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	20000398 	.word	0x20000398

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
